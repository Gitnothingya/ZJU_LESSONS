/* USER CODE BEGIN Header */
/**
  ******************************************************************************
  * @file           : main.c
  * @brief          : Main program body
  ******************************************************************************
  * @attention
  *
  * Copyright (c) 2023 STMicroelectronics.
  * All rights reserved.
  *
  * This software is licensed under terms that can be found in the LICENSE file
  * in the root directory of this software component.
  * If no LICENSE file comes with this software, it is provided AS-IS.
  *
  ******************************************************************************
  */
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "main.h"
//#include "dma.h"
//#include "tim.h"
#include "usart.h"
#include "gpio.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */
#include <string.h>
#include <stdio.h>
/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */

/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */
#define BUF_LEN 50
#define PARA_ERR 0
#define INST_ERR 1

#define MAX_FILE_SIZE 32*1024

#define XMODEM_SOH 0x01 // 数据�?
#define XMODEM_STX 0x02
#define XMODEM_EOT 0x04 // 发�?�结�?
#define XMODEM_ACK 0x06 // 接收成功
#define XMODEM_NAK 0x15 // 接受失败
#define XMODEM_CAN 0x18 // 取消传输

#define RES_EOT 0x01
#define RES_FAIL 0x02 
#define RES_OK 0x03

#define TIME_OUT 3000

#define XMODEM_PACKET_SIZE 128+4 
#define XMODEM_DATA_SIZE   128
#define XMODEM_MAX_RETRIES 10 // �?大重传次�?

#define PACKET_SOH_INDEX 0
#define PACKET_PN_INDEX 1
#define PACKET_NPN_INDEX 2
#define PACKET_DATA_INDEX 3
#define PACKET_CRC_H_INDEX (XMODEM_PACKET_SIZE-2) 
#define PACKET_CRC_L_INDEX (XMODEM_PACKET_SIZE-1)
#define PACKET_CHECKSUM_INDEX (XMODEM_PACKET_SIZE-1)

#define MY_FLASH_PAGE_SIZE 1024 // Flash页面大小
#define VECT_TAB_OFFSET 0x8000 // 中断偏移�?

// printf
#ifdef __GNUC__
#define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif
PUTCHAR_PROTOTYPE
{
    HAL_UART_Transmit(&huart1 , (uint8_t *)&ch, 1, 0xFFFF);
    return ch;
}

/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/

/* USER CODE BEGIN PV */
char rx_buf[BUF_LEN] = {0}; // 存储命令的buffer
char tmp_buf[1];			// 用于逐字符接收的buffer
uint32_t rx_buf_index = 0; 	
uint8_t received_flag = 0;  // 命令接收完成标志
/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */
void Print_Err(int ErrType);
void Parse_Cmd(char *cmd);
void peek(unsigned int addr);
void poke(unsigned int addr, unsigned int data);
void load(unsigned int addr);
void run(unsigned int addr);
void print(unsigned int addr);
//void flash_erase_pages(uint32_t base_addr, uint32_t page_count);
//void flash_write_data(uint32_t addr, const uint8_t *data, uint32_t size);
//uint8_t CalcChecksum(const uint8_t *p_data, uint32_t size);
//void uart_send_byte(uint8_t byte);
//uint32_t uart_receive(uint8_t *buf, uint32_t size, uint32_t timeout);
//int xmodem_receive_packet(uint8_t *p, uint8_t packet_number, uint32_t timeout);
//uint32_t Xmodem_Receive(uint8_t *buf);
//void printf();
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
	if (huart == &huart1)
	{
		if (rx_buf_index >= BUF_LEN)
		{
			rx_buf_index = 0;
		}
		if (tmp_buf[0] == '\r')
		{
			received_flag = 1;
		}
		else
		{
			rx_buf[rx_buf_index++] = tmp_buf[0];
		}
		HAL_UART_Receive_IT(huart, (uint8_t *)tmp_buf, 1); // 逐字符接�?
	}
}

void Print_Err(int ErrType)
{
	char buf[BUF_LEN] = {0};
	if (ErrType == PARA_ERR)
	{
		sprintf(buf, "ERR: Incorrect Instruction Format\r\n");
	}
	else if (ErrType == INST_ERR)
	{
		sprintf(buf, "ERR: Illegal Instruction\r\n");
	}
	else
	{
	}
	HAL_UART_Transmit(&huart1, (uint8_t *)buf, strlen(buf), HAL_MAX_DELAY);
}

void Parse_Cmd(char *cmd)
{
	char *ins = strtok(cmd, " ");
	char *para1 = strtok(NULL, " ");
	char *para2 = strtok(NULL, " ");
	char buf[BUF_LEN] = {0};
	unsigned int addr;
	unsigned int data;
	if (para1 != NULL)
	{
		sscanf(para1, "%X", &addr);
	}
	if (para2 != NULL)
	{
		sscanf(para2, "%X", &data);
	}

	if (strcmp(ins, "peek") == 0)
	{
		if (para1 != NULL)
		{
			sprintf(buf, "INS: %s, PARA: %s\r\n", ins, para1);
			HAL_UART_Transmit(&huart1, (uint8_t *)buf, strlen(buf), HAL_MAX_DELAY);
			peek(addr);
		}
		else
		{
			Print_Err(PARA_ERR);
		}
	}
	else if (strcmp(ins, "poke") == 0)
	{
		if (para1 != NULL && para2 != NULL)
		{
			sprintf(buf, "INS: %s, PARA1: %s, PARA2: %s\r\n", ins, para1, para2);
			HAL_UART_Transmit(&huart1, (uint8_t *)buf, strlen(buf), HAL_MAX_DELAY);
			poke(addr, data);
		}
		else
		{
			Print_Err(PARA_ERR);
		}
	}
	else if (strcmp(ins, "load") == 0)
	{
		if (para1 != NULL)
		{
			sprintf(buf, "INS: %s, PARA: %s\r\n", ins, para1);
			HAL_UART_Transmit(&huart1, (uint8_t *)buf, strlen(buf), HAL_MAX_DELAY);
			load(addr);
		}
		else
		{
			Print_Err(PARA_ERR);
		}
	}
	else if (strcmp(ins, "run") == 0)
	{
		if (para1 != NULL)
		{
			sprintf(buf, "INS: %s, PARA: %s\r\n", ins, para1);
			HAL_UART_Transmit(&huart1, (uint8_t *)buf, strlen(buf), HAL_MAX_DELAY);
			run(addr);
		}
		else
		{
			Print_Err(PARA_ERR);
		}
	}
	else if (strcmp(ins, "print") == 0)
	{
		if (para1 != NULL)
		{
			sprintf(buf, "INS: %s, PARA: %s\r\n", ins, para1);
			HAL_UART_Transmit(&huart1, (uint8_t *)buf, strlen(buf), HAL_MAX_DELAY);
			print(addr);
		}
		else
		{
			Print_Err(PARA_ERR);
		}
	}
	else
	{
		Print_Err(INST_ERR);
	}
}

void peek(unsigned int addr)
{
	char buf[BUF_LEN] = {0};
	unsigned int data = *((unsigned int *)addr);
	sprintf(buf, "%04X\r\n", data);
	HAL_UART_Transmit(&huart1, (uint8_t *)buf, strlen(buf), HAL_MAX_DELAY);
}

void poke(unsigned int addr, unsigned int data)
{
	*((unsigned int *)addr) = data;
}

void print(unsigned int addr)
{
	unsigned char c;

	while ((c = *(unsigned char *)addr++) != 0x00)
	{
		HAL_UART_Transmit(&huart1, &c, 1, HAL_MAX_DELAY);
	}
	printf("\r\n");
}

// Flash
void flash_erase_pages(uint32_t base_addr, uint32_t page_count)
{
//	FLASH_EraseInitTypeDef erase_init;
//	uint32_t page_error = 0;
//
//	// 初始�? Flash 擦除结构�?
//	erase_init.TypeErase = FLASH_TYPEERASE_PAGES;
//	erase_init.PageAddress = base_addr;
//	erase_init.NbPages = page_count;
//
//	// 解锁 Flash
//	HAL_FLASH_Unlock();
//
//	// 擦除 Flash
//	if (HAL_FLASHEx_Erase(&erase_init, &page_error) != HAL_OK)
//	{
//		// 擦除失败
//		printf("Failed to erase flash\r\n");
//	}
//
//	// 锁定 Flash
//	HAL_FLASH_Lock();
}

void flash_write_data(uint32_t addr, const uint8_t *data, uint32_t size)
{
//	// 计算�?要擦除的 Flash 页面�?
//	uint32_t page_count = (size + MY_FLASH_PAGE_SIZE - 1) / MY_FLASH_PAGE_SIZE;
//
//	// 擦除 Flash 页面
//	flash_erase_pages(addr, page_count);
//
//	// 解锁 Flash
//	HAL_FLASH_Unlock();
//
//	// 逐字写入
//	for (uint32_t i = 0; i < size; i+=4)
//	{
//		uint32_t value = *(uint32_t *)(data+i);
//		if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, addr+i, value) != HAL_OK)
//		{
//			// 写入失败
//			printf("Failed to write flash");
//		}
//	}
//
//	// 锁定 Flash
//	HAL_FLASH_Lock();
}

// uint16_t UpdateCRC16(uint16_t crc_in, uint8_t byte)
// {
//   uint32_t crc = crc_in;
//   uint32_t in = byte | 0x100;

//   do
//   {
//     crc <<= 1;
//     in <<= 1;
//     if(in & 0x100)
//       ++crc;
//     if(crc & 0x10000)
//       crc ^= 0x1021;
//   }
  
//   while(!(in & 0x10000));

//   return crc & 0xffffu;
// }

// uint16_t Cal_CRC16(const uint8_t* p_data, uint32_t size)
// {
//   uint32_t crc = 0;
//   const uint8_t* dataEnd = p_data+size;

//   while(p_data < dataEnd)
//     crc = UpdateCRC16(crc, *p_data++);

//   crc = UpdateCRC16(crc, 0);
//   crc = UpdateCRC16(crc, 0);

//   return crc&0xffffu;
// }

uint8_t CalcChecksum(const uint8_t *p_data, uint32_t size)
{
//  uint32_t sum = 0;
//  const uint8_t *p_data_end = p_data + size;
//
//  while (p_data < p_data_end )
//  {
//    sum += *p_data++;
//  }
//
//  return (sum & 0xffu);
}

// XModem
//void uart_send_byte(uint8_t byte)
//{
//	HAL_UART_Transmit(&huart1, &byte, 1, 100);
//}
//
//uint32_t uart_receive(uint8_t *buf, uint32_t size, uint32_t timeout)
//{
//	uint32_t tickstart = HAL_GetTick();
//	uint32_t bytes_received = 0;
//
//	while (bytes_received < size)
//	{
//		if (HAL_UART_Receive(&huart1, buf+bytes_received, 1, timeout) != HAL_OK)
//		{
//			break;
//		}
//
//		bytes_received++;
//
//		if (HAL_GetTick() - tickstart >= timeout)
//		{
//			break;
//		}
//	}
//
//	return bytes_received;
//}
//
//int xmodem_receive_packet(uint8_t *p, uint8_t packet_number, uint32_t timeout)
//{
//	int i;
//	uint32_t n;
//	uint8_t byte1;
//	uint32_t checksum;
//	uint8_t buf[XMODEM_PACKET_SIZE];
//
//	for (i = 0; i < XMODEM_MAX_RETRIES; i++)
//	{
//		if (HAL_UART_Receive(&huart1, &byte1, 1, timeout) == HAL_OK)
//		{
//			if (byte1 == XMODEM_EOT)
//			{
//				return RES_EOT; // 接收完成
//			}
//			else if (byte1 == XMODEM_SOH)
//			{
//			}
//			else
//			{
//			}
//			buf[0] = byte1;
//
//			// 等待接收�?个完整的数据�?
//			n = uart_receive(buf+1, sizeof(buf)-1, timeout);
//			if (n != sizeof(buf)-1)
//			{
//				// 接收失败
//				return RES_FAIL;
//			}
//
//			if (buf[1] == packet_number && buf[2] == (uint8_t)(~packet_number))
//			{
//				// 数据包序号正确，�?验checksum
//				checksum = buf[PACKET_CHECKSUM_INDEX];
//				if (CalcChecksum(buf+PACKET_DATA_INDEX, XMODEM_DATA_SIZE) != checksum)
//				{
//					// 校验和错�?
//					return RES_FAIL;
//				}
//				memcpy(p, buf+PACKET_DATA_INDEX, XMODEM_DATA_SIZE);
//				return RES_OK;
//			}
//
//			// 数据包接受失败，发�?? NAK 请求重传
//			uart_send_byte(XMODEM_NAK);
//		}
//	}
//
//	// 超过�?大重传次数，传输失败
//	return RES_FAIL;
//}

uint32_t Xmodem_Receive(uint8_t *buf)
{
//	char tmp[30];
//	sprintf(tmp, "Begin\r\n");
//			HAL_UART_Transmit(&huart1, (uint8_t *)tmp, strlen(tmp), HAL_MAX_DELAY);
//
//	uint8_t packet_number = 1;
//
//	// 等待发�??
//	for (int i = 0; i < XMODEM_MAX_RETRIES; i++)
//	{
//		// 发�?? NAK 表示准备接收文件
//		uart_send_byte(XMODEM_NAK);
//		// 读取unused byte0
//		char byte0;
//		if (HAL_UART_Receive(&huart1, (uint8_t *)(&byte0), 1, TIME_OUT) == HAL_OK)
//		{
//			break;
//		}
//	}
//
//	// �?始接收数�?
//	while (1)
//	{
//		// 接收数据�?
//		int result = xmodem_receive_packet(buf, packet_number, TIME_OUT);
//		if (result == RES_FAIL)
//		{
//			// 接收数据失败
//			return RES_FAIL;
//		}
//		else if (result == RES_EOT)
//		{
//			break;
//		}
//		else
//		{
//			// 接收成功，更新指针和数据包序�?
//			buf += XMODEM_DATA_SIZE;
//			packet_number++;
//
//			// 发�?? ACK 表示准备接收下一个数据包
//			uart_send_byte(XMODEM_ACK);
//		}
//	}
//
//	// 发�?? ACK 表示传输结束
//	uart_send_byte(XMODEM_ACK);
//	return packet_number*XMODEM_DATA_SIZE;
}

void load(unsigned int addr)
{
	printf("asdf\r\n");
	printf("asdf\r\n");
	printf("asdf\r\n");
	printf("asdf\r\n");
	printf("asdf\r\n");
	HAL_UART_Abort_IT(&huart1); // 关闭中断
	uint8_t buf[MAX_FILE_SIZE];

	uint32_t file_size = Xmodem_Receive(buf);

	flash_write_data(addr, buf, file_size);

	HAL_UART_Receive_IT(&huart1, (uint8_t *)tmp_buf, 1); // 重新启用中断接收
}

typedef void (*pFunction)(void);

void run(unsigned int addr)
{
	// 
	if (((*(__IO uint32_t*)addr) & 0x2FFE0000) == 0x20000000)
	{
		uint32_t sp_value = *(volatile uint32_t*)addr; // 从FLASH地址addr处读取SP的�??
		uint32_t pc_value = *(volatile uint32_t*)(addr+4); // 从FLASH地址addr+4处读取PC的�??
		pFunction jump_to_app = (pFunction)pc_value;

		printf("SP %X\r\n", (unsigned int)sp_value);
		printf("PC %X\r\n", (unsigned int)pc_value);

		SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; // 中断向量偏移
		__set_MSP(sp_value); // 设置栈指�?
		jump_to_app();
	}
	else
	{
		printf("No app found\r\n");
	}
}
/* USER CODE END 0 */

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();

  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
//  MX_DMA_Init();
  MX_USART1_UART_Init();
//  MX_TIM2_Init();
//  MX_TIM3_Init();
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  HAL_UART_Receive_IT(&huart1, (uint8_t *)tmp_buf, 1);
  // Test peek and poke
//  unsigned int test1 = 0x12345678;
//  unsigned int test2 = 0xAABBCCDD;
//  printf("test1 addr: %08X, data: %08X\r\n", (unsigned int)(&test1), test1);
//  printf("test2 addr: %08X, data: %08X\r\n", (unsigned int)(&test2), test2);
  // Test print
//  char print_test[] = "Hello World!";
//  printf("print_test addr: %08X, data: %s\r\n", (unsigned int)print_test, print_test);

  while (1)
  {
	  // 指令解析
	  if (received_flag == 1)
	  {
		received_flag = 0;
		Parse_Cmd(rx_buf);
		memset(rx_buf, 0, sizeof(rx_buf));
		rx_buf_index = 0;
	  }
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
  {
    Error_Handler();
  }
  HAL_RCC_MCOConfig(RCC_MCO, RCC_MCO1SOURCE_PLLCLK, RCC_MCODIV_1);
}

/* USER CODE BEGIN 4 */

/* USER CODE END 4 */

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
  }
  /* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */
