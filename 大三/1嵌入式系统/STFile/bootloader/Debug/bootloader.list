
bootloader.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000476c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003e4  08004878  08004878  00014878  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004c5c  08004c5c  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  08004c5c  08004c5c  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004c5c  08004c5c  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004c5c  08004c5c  00014c5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004c60  08004c60  00014c60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08004c64  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004b0  20000078  08004cd8  00020078  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000528  08004cd8  00020528  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008045  00000000  00000000  0002009d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000021ac  00000000  00000000  000280e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000900  00000000  00000000  0002a290  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000808  00000000  00000000  0002ab90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018452  00000000  00000000  0002b398  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000add5  00000000  00000000  000437ea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00084151  00000000  00000000  0004e5bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000d2710  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002d30  00000000  00000000  000d2760  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000078 	.word	0x20000078
 8000128:	00000000 	.word	0x00000000
 800012c:	08004860 	.word	0x08004860

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000007c 	.word	0x2000007c
 8000148:	08004860 	.word	0x08004860

0800014c <strcmp>:
 800014c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000150:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000154:	2a01      	cmp	r2, #1
 8000156:	bf28      	it	cs
 8000158:	429a      	cmpcs	r2, r3
 800015a:	d0f7      	beq.n	800014c <strcmp>
 800015c:	1ad0      	subs	r0, r2, r3
 800015e:	4770      	bx	lr

08000160 <strlen>:
 8000160:	4603      	mov	r3, r0
 8000162:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000166:	2a00      	cmp	r2, #0
 8000168:	d1fb      	bne.n	8000162 <strlen+0x2>
 800016a:	1a18      	subs	r0, r3, r0
 800016c:	3801      	subs	r0, #1
 800016e:	4770      	bx	lr

08000170 <FLASH_If_Init>:
  * @brief  Unlocks Flash for write access
  * @param  None
  * @retval None
  */
void FLASH_If_Init(void)
{
 8000170:	b580      	push	{r7, lr}
 8000172:	af00      	add	r7, sp, #0
  /* Unlock the Program memory */
  HAL_FLASH_Unlock();
 8000174:	f001 f88c 	bl	8001290 <HAL_FLASH_Unlock>

  /* Clear all FLASH flags */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP | FLASH_FLAG_PGERR | FLASH_FLAG_WRPERR);
 8000178:	4b03      	ldr	r3, [pc, #12]	; (8000188 <FLASH_If_Init+0x18>)
 800017a:	2234      	movs	r2, #52	; 0x34
 800017c:	60da      	str	r2, [r3, #12]
  /* Unlock the Program memory */
  HAL_FLASH_Lock();
 800017e:	f001 f8ad 	bl	80012dc <HAL_FLASH_Lock>
}
 8000182:	bf00      	nop
 8000184:	bd80      	pop	{r7, pc}
 8000186:	bf00      	nop
 8000188:	40022000 	.word	0x40022000

0800018c <FLASH_If_Erase>:
  * @param  start: start of user flash area
  * @retval FLASHIF_OK : user flash area successfully erased
  *         FLASHIF_ERASEKO : error occurred
  */
uint32_t FLASH_If_Erase(uint32_t start)
{
 800018c:	b580      	push	{r7, lr}
 800018e:	b08a      	sub	sp, #40	; 0x28
 8000190:	af00      	add	r7, sp, #0
 8000192:	6078      	str	r0, [r7, #4]
  uint32_t NbrOfPages = 0;
 8000194:	2300      	movs	r3, #0
 8000196:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t PageError = 0;
 8000198:	2300      	movs	r3, #0
 800019a:	61fb      	str	r3, [r7, #28]
  FLASH_EraseInitTypeDef pEraseInit;
  HAL_StatusTypeDef status = HAL_OK;
 800019c:	2300      	movs	r3, #0
 800019e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Unlock the Flash to enable the flash control register access *************/
  HAL_FLASH_Unlock();
 80001a2:	f001 f875 	bl	8001290 <HAL_FLASH_Unlock>

  /* Get the sector where start the user flash area */
  NbrOfPages = (USER_FLASH_END_ADDRESS - start)/FLASH_PAGE_SIZE;
 80001a6:	687a      	ldr	r2, [r7, #4]
 80001a8:	4b11      	ldr	r3, [pc, #68]	; (80001f0 <FLASH_If_Erase+0x64>)
 80001aa:	1a9b      	subs	r3, r3, r2
 80001ac:	0a9b      	lsrs	r3, r3, #10
 80001ae:	627b      	str	r3, [r7, #36]	; 0x24

  pEraseInit.TypeErase = FLASH_TYPEERASE_PAGES;
 80001b0:	2300      	movs	r3, #0
 80001b2:	60fb      	str	r3, [r7, #12]
  pEraseInit.PageAddress = start;
 80001b4:	687b      	ldr	r3, [r7, #4]
 80001b6:	617b      	str	r3, [r7, #20]
  pEraseInit.Banks = FLASH_BANK_1;
 80001b8:	2301      	movs	r3, #1
 80001ba:	613b      	str	r3, [r7, #16]
  pEraseInit.NbPages = NbrOfPages;
 80001bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80001be:	61bb      	str	r3, [r7, #24]
  status = HAL_FLASHEx_Erase(&pEraseInit, &PageError);
 80001c0:	f107 021c 	add.w	r2, r7, #28
 80001c4:	f107 030c 	add.w	r3, r7, #12
 80001c8:	4611      	mov	r1, r2
 80001ca:	4618      	mov	r0, r3
 80001cc:	f001 f948 	bl	8001460 <HAL_FLASHEx_Erase>
 80001d0:	4603      	mov	r3, r0
 80001d2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Lock the Flash to disable the flash control register access (recommended
     to protect the FLASH memory against possible unwanted operation) *********/
  HAL_FLASH_Lock();
 80001d6:	f001 f881 	bl	80012dc <HAL_FLASH_Lock>

  if (status != HAL_OK)
 80001da:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80001de:	2b00      	cmp	r3, #0
 80001e0:	d001      	beq.n	80001e6 <FLASH_If_Erase+0x5a>
  {
    /* Error occurred while page erase */
    return FLASHIF_ERASEKO;
 80001e2:	2301      	movs	r3, #1
 80001e4:	e000      	b.n	80001e8 <FLASH_If_Erase+0x5c>
  }

  return FLASHIF_OK;
 80001e6:	2300      	movs	r3, #0
}
 80001e8:	4618      	mov	r0, r3
 80001ea:	3728      	adds	r7, #40	; 0x28
 80001ec:	46bd      	mov	sp, r7
 80001ee:	bd80      	pop	{r7, pc}
 80001f0:	0800ffff 	.word	0x0800ffff

080001f4 <FLASH_If_Write>:
  * @retval uint32_t 0: Data successfully written to Flash memory
  *         1: Error occurred while writing data in Flash memory
  *         2: Written Data in flash memory is different from expected one
  */
uint32_t FLASH_If_Write(uint32_t destination, uint32_t *p_source, uint32_t length)
{
 80001f4:	b5b0      	push	{r4, r5, r7, lr}
 80001f6:	b086      	sub	sp, #24
 80001f8:	af00      	add	r7, sp, #0
 80001fa:	60f8      	str	r0, [r7, #12]
 80001fc:	60b9      	str	r1, [r7, #8]
 80001fe:	607a      	str	r2, [r7, #4]
  uint32_t i = 0;
 8000200:	2300      	movs	r3, #0
 8000202:	617b      	str	r3, [r7, #20]

  /* Unlock the Flash to enable the flash control register access *************/
  HAL_FLASH_Unlock();
 8000204:	f001 f844 	bl	8001290 <HAL_FLASH_Unlock>
  for (i = 0; (i < length) && (destination <= (USER_FLASH_END_ADDRESS-4)); i++)
 8000208:	2300      	movs	r3, #0
 800020a:	617b      	str	r3, [r7, #20]
 800020c:	e024      	b.n	8000258 <FLASH_If_Write+0x64>
  {
    /* Device voltage range supposed to be [2.7V to 3.6V], the operation will
       be done by word */
    if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, destination, *(uint32_t*)(p_source+i)) == HAL_OK)
 800020e:	697b      	ldr	r3, [r7, #20]
 8000210:	009b      	lsls	r3, r3, #2
 8000212:	68ba      	ldr	r2, [r7, #8]
 8000214:	4413      	add	r3, r2
 8000216:	681b      	ldr	r3, [r3, #0]
 8000218:	2200      	movs	r2, #0
 800021a:	461c      	mov	r4, r3
 800021c:	4615      	mov	r5, r2
 800021e:	4622      	mov	r2, r4
 8000220:	462b      	mov	r3, r5
 8000222:	68f9      	ldr	r1, [r7, #12]
 8000224:	2002      	movs	r0, #2
 8000226:	f000 ffc3 	bl	80011b0 <HAL_FLASH_Program>
 800022a:	4603      	mov	r3, r0
 800022c:	2b00      	cmp	r3, #0
 800022e:	d10e      	bne.n	800024e <FLASH_If_Write+0x5a>
    {
     /* Check the written value */
      if (*(uint32_t*)destination != *(uint32_t*)(p_source+i))
 8000230:	68fb      	ldr	r3, [r7, #12]
 8000232:	681a      	ldr	r2, [r3, #0]
 8000234:	697b      	ldr	r3, [r7, #20]
 8000236:	009b      	lsls	r3, r3, #2
 8000238:	68b9      	ldr	r1, [r7, #8]
 800023a:	440b      	add	r3, r1
 800023c:	681b      	ldr	r3, [r3, #0]
 800023e:	429a      	cmp	r2, r3
 8000240:	d001      	beq.n	8000246 <FLASH_If_Write+0x52>
      {
        /* Flash content doesn't match SRAM content */
        return(FLASHIF_WRITINGCTRL_ERROR);
 8000242:	2302      	movs	r3, #2
 8000244:	e013      	b.n	800026e <FLASH_If_Write+0x7a>
      }
      /* Increment FLASH destination address */
      destination += 4;
 8000246:	68fb      	ldr	r3, [r7, #12]
 8000248:	3304      	adds	r3, #4
 800024a:	60fb      	str	r3, [r7, #12]
 800024c:	e001      	b.n	8000252 <FLASH_If_Write+0x5e>
    }
    else
    {
      /* Error occurred while writing data in Flash memory */
      return (FLASHIF_WRITING_ERROR);
 800024e:	2303      	movs	r3, #3
 8000250:	e00d      	b.n	800026e <FLASH_If_Write+0x7a>
  for (i = 0; (i < length) && (destination <= (USER_FLASH_END_ADDRESS-4)); i++)
 8000252:	697b      	ldr	r3, [r7, #20]
 8000254:	3301      	adds	r3, #1
 8000256:	617b      	str	r3, [r7, #20]
 8000258:	697a      	ldr	r2, [r7, #20]
 800025a:	687b      	ldr	r3, [r7, #4]
 800025c:	429a      	cmp	r2, r3
 800025e:	d203      	bcs.n	8000268 <FLASH_If_Write+0x74>
 8000260:	68fb      	ldr	r3, [r7, #12]
 8000262:	4a05      	ldr	r2, [pc, #20]	; (8000278 <FLASH_If_Write+0x84>)
 8000264:	4293      	cmp	r3, r2
 8000266:	d9d2      	bls.n	800020e <FLASH_If_Write+0x1a>
    }
  }

  /* Lock the Flash to disable the flash control register access (recommended
     to protect the FLASH memory against possible unwanted operation) *********/
  HAL_FLASH_Lock();
 8000268:	f001 f838 	bl	80012dc <HAL_FLASH_Lock>

  return (FLASHIF_OK);
 800026c:	2300      	movs	r3, #0
}
 800026e:	4618      	mov	r0, r3
 8000270:	3718      	adds	r7, #24
 8000272:	46bd      	mov	sp, r7
 8000274:	bdb0      	pop	{r4, r5, r7, pc}
 8000276:	bf00      	nop
 8000278:	0800fffb 	.word	0x0800fffb

0800027c <MX_GPIO_Init>:
        * EVENT_OUT
        * EXTI
     PA8   ------> RCC_MCO
*/
void MX_GPIO_Init(void)
{
 800027c:	b580      	push	{r7, lr}
 800027e:	b088      	sub	sp, #32
 8000280:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000282:	f107 0310 	add.w	r3, r7, #16
 8000286:	2200      	movs	r2, #0
 8000288:	601a      	str	r2, [r3, #0]
 800028a:	605a      	str	r2, [r3, #4]
 800028c:	609a      	str	r2, [r3, #8]
 800028e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000290:	4b24      	ldr	r3, [pc, #144]	; (8000324 <MX_GPIO_Init+0xa8>)
 8000292:	699b      	ldr	r3, [r3, #24]
 8000294:	4a23      	ldr	r2, [pc, #140]	; (8000324 <MX_GPIO_Init+0xa8>)
 8000296:	f043 0310 	orr.w	r3, r3, #16
 800029a:	6193      	str	r3, [r2, #24]
 800029c:	4b21      	ldr	r3, [pc, #132]	; (8000324 <MX_GPIO_Init+0xa8>)
 800029e:	699b      	ldr	r3, [r3, #24]
 80002a0:	f003 0310 	and.w	r3, r3, #16
 80002a4:	60fb      	str	r3, [r7, #12]
 80002a6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80002a8:	4b1e      	ldr	r3, [pc, #120]	; (8000324 <MX_GPIO_Init+0xa8>)
 80002aa:	699b      	ldr	r3, [r3, #24]
 80002ac:	4a1d      	ldr	r2, [pc, #116]	; (8000324 <MX_GPIO_Init+0xa8>)
 80002ae:	f043 0320 	orr.w	r3, r3, #32
 80002b2:	6193      	str	r3, [r2, #24]
 80002b4:	4b1b      	ldr	r3, [pc, #108]	; (8000324 <MX_GPIO_Init+0xa8>)
 80002b6:	699b      	ldr	r3, [r3, #24]
 80002b8:	f003 0320 	and.w	r3, r3, #32
 80002bc:	60bb      	str	r3, [r7, #8]
 80002be:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80002c0:	4b18      	ldr	r3, [pc, #96]	; (8000324 <MX_GPIO_Init+0xa8>)
 80002c2:	699b      	ldr	r3, [r3, #24]
 80002c4:	4a17      	ldr	r2, [pc, #92]	; (8000324 <MX_GPIO_Init+0xa8>)
 80002c6:	f043 0304 	orr.w	r3, r3, #4
 80002ca:	6193      	str	r3, [r2, #24]
 80002cc:	4b15      	ldr	r3, [pc, #84]	; (8000324 <MX_GPIO_Init+0xa8>)
 80002ce:	699b      	ldr	r3, [r3, #24]
 80002d0:	f003 0304 	and.w	r3, r3, #4
 80002d4:	607b      	str	r3, [r7, #4]
 80002d6:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80002d8:	2200      	movs	r2, #0
 80002da:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80002de:	4812      	ldr	r0, [pc, #72]	; (8000328 <MX_GPIO_Init+0xac>)
 80002e0:	f001 faea 	bl	80018b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_Pin;
 80002e4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80002e8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80002ea:	2301      	movs	r3, #1
 80002ec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002ee:	2300      	movs	r3, #0
 80002f0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80002f2:	2302      	movs	r3, #2
 80002f4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80002f6:	f107 0310 	add.w	r3, r7, #16
 80002fa:	4619      	mov	r1, r3
 80002fc:	480a      	ldr	r0, [pc, #40]	; (8000328 <MX_GPIO_Init+0xac>)
 80002fe:	f001 f957 	bl	80015b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000302:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000306:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000308:	2302      	movs	r3, #2
 800030a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800030c:	2302      	movs	r3, #2
 800030e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000310:	f107 0310 	add.w	r3, r7, #16
 8000314:	4619      	mov	r1, r3
 8000316:	4805      	ldr	r0, [pc, #20]	; (800032c <MX_GPIO_Init+0xb0>)
 8000318:	f001 f94a 	bl	80015b0 <HAL_GPIO_Init>

}
 800031c:	bf00      	nop
 800031e:	3720      	adds	r7, #32
 8000320:	46bd      	mov	sp, r7
 8000322:	bd80      	pop	{r7, pc}
 8000324:	40021000 	.word	0x40021000
 8000328:	40011000 	.word	0x40011000
 800032c:	40010800 	.word	0x40010800

08000330 <__io_putchar>:
#define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif
PUTCHAR_PROTOTYPE
{
 8000330:	b580      	push	{r7, lr}
 8000332:	b082      	sub	sp, #8
 8000334:	af00      	add	r7, sp, #0
 8000336:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart1 , (uint8_t *)&ch, 1, 0xFFFF);
 8000338:	1d39      	adds	r1, r7, #4
 800033a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800033e:	2201      	movs	r2, #1
 8000340:	4803      	ldr	r0, [pc, #12]	; (8000350 <__io_putchar+0x20>)
 8000342:	f001 ff70 	bl	8002226 <HAL_UART_Transmit>
    return ch;
 8000346:	687b      	ldr	r3, [r7, #4]
}
 8000348:	4618      	mov	r0, r3
 800034a:	3708      	adds	r7, #8
 800034c:	46bd      	mov	sp, r7
 800034e:	bd80      	pop	{r7, pc}
 8000350:	200004ac 	.word	0x200004ac

08000354 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000354:	b580      	push	{r7, lr}
 8000356:	b090      	sub	sp, #64	; 0x40
 8000358:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800035a:	f000 fcd9 	bl	8000d10 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800035e:	f000 f94d 	bl	80005fc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000362:	f7ff ff8b 	bl	800027c <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000366:	f000 fad3 	bl	8000910 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  FLASH_If_Init();
 800036a:	f7ff ff01 	bl	8000170 <FLASH_If_Init>
  HAL_UART_Receive_IT(&huart1, (uint8_t *)UART1_temp, REC_LENGTH);//open the uart1 interrupt
 800036e:	2201      	movs	r2, #1
 8000370:	4983      	ldr	r1, [pc, #524]	; (8000580 <main+0x22c>)
 8000372:	4884      	ldr	r0, [pc, #528]	; (8000584 <main+0x230>)
 8000374:	f002 f88b 	bl	800248e <HAL_UART_Receive_IT>
  HAL_Delay(2000);
 8000378:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800037c:	f000 fd2a 	bl	8000dd4 <HAL_Delay>


  unsigned int a,b,c,d,e,f;
  printf("a, Addr:%08X  -> Data:%08X \r\n",(uint32)&a, a);
 8000380:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000384:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000386:	4619      	mov	r1, r3
 8000388:	487f      	ldr	r0, [pc, #508]	; (8000588 <main+0x234>)
 800038a:	f002 fd65 	bl	8002e58 <iprintf>
  printf("b, Addr:%08X  -> Data:%08X \r\n",(uint32)&b, b);
 800038e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000392:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000394:	4619      	mov	r1, r3
 8000396:	487d      	ldr	r0, [pc, #500]	; (800058c <main+0x238>)
 8000398:	f002 fd5e 	bl	8002e58 <iprintf>
  printf("c, Addr:%08X  -> Data:%08X \r\n",(uint32)&c, c);
 800039c:	f107 0320 	add.w	r3, r7, #32
 80003a0:	6a3a      	ldr	r2, [r7, #32]
 80003a2:	4619      	mov	r1, r3
 80003a4:	487a      	ldr	r0, [pc, #488]	; (8000590 <main+0x23c>)
 80003a6:	f002 fd57 	bl	8002e58 <iprintf>
  printf("d, Addr:%08X  -> Data:%08X \r\n",(uint32)&d, d);
 80003aa:	f107 031c 	add.w	r3, r7, #28
 80003ae:	69fa      	ldr	r2, [r7, #28]
 80003b0:	4619      	mov	r1, r3
 80003b2:	4878      	ldr	r0, [pc, #480]	; (8000594 <main+0x240>)
 80003b4:	f002 fd50 	bl	8002e58 <iprintf>
  printf("e, Addr:%08X  -> Data:%08X \r\n",(uint32)&e, e);
 80003b8:	f107 0318 	add.w	r3, r7, #24
 80003bc:	69ba      	ldr	r2, [r7, #24]
 80003be:	4619      	mov	r1, r3
 80003c0:	4875      	ldr	r0, [pc, #468]	; (8000598 <main+0x244>)
 80003c2:	f002 fd49 	bl	8002e58 <iprintf>
  printf("f, Addr:%08X  -> Data:%08X \r\n",(uint32)&f, f);
 80003c6:	f107 0314 	add.w	r3, r7, #20
 80003ca:	697a      	ldr	r2, [r7, #20]
 80003cc:	4619      	mov	r1, r3
 80003ce:	4873      	ldr	r0, [pc, #460]	; (800059c <main+0x248>)
 80003d0:	f002 fd42 	bl	8002e58 <iprintf>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  if(UART1_Rx_flg){// 处理传输的命令
 80003d4:	4b72      	ldr	r3, [pc, #456]	; (80005a0 <main+0x24c>)
 80003d6:	781b      	ldrb	r3, [r3, #0]
 80003d8:	2b00      	cmp	r3, #0
 80003da:	d0fb      	beq.n	80003d4 <main+0x80>
		  printf(">>> %s\r\n",UART1_Rx_Buf);
 80003dc:	4971      	ldr	r1, [pc, #452]	; (80005a4 <main+0x250>)
 80003de:	4872      	ldr	r0, [pc, #456]	; (80005a8 <main+0x254>)
 80003e0:	f002 fd3a 	bl	8002e58 <iprintf>

		  char cmd[10];
		  uint32 arg0,arg1;
		  sscanf((const char*)UART1_Rx_Buf,"%s",cmd);
 80003e4:	f107 0308 	add.w	r3, r7, #8
 80003e8:	461a      	mov	r2, r3
 80003ea:	4970      	ldr	r1, [pc, #448]	; (80005ac <main+0x258>)
 80003ec:	486d      	ldr	r0, [pc, #436]	; (80005a4 <main+0x250>)
 80003ee:	f002 fdc1 	bl	8002f74 <siscanf>
		  if( !strcmp(PEEK, cmd) ){
 80003f2:	f107 0308 	add.w	r3, r7, #8
 80003f6:	4619      	mov	r1, r3
 80003f8:	486d      	ldr	r0, [pc, #436]	; (80005b0 <main+0x25c>)
 80003fa:	f7ff fea7 	bl	800014c <strcmp>
 80003fe:	4603      	mov	r3, r0
 8000400:	2b00      	cmp	r3, #0
 8000402:	d10e      	bne.n	8000422 <main+0xce>
			  sscanf((const char*)UART1_Rx_Buf,"%s %08x",cmd,&arg0);
 8000404:	1d3b      	adds	r3, r7, #4
 8000406:	f107 0208 	add.w	r2, r7, #8
 800040a:	496a      	ldr	r1, [pc, #424]	; (80005b4 <main+0x260>)
 800040c:	4865      	ldr	r0, [pc, #404]	; (80005a4 <main+0x250>)
 800040e:	f002 fdb1 	bl	8002f74 <siscanf>
			  printf("INS: peek  PARA: %x -> DATA: %08x\r\n",arg0,*(int*)arg0);
 8000412:	687b      	ldr	r3, [r7, #4]
 8000414:	687a      	ldr	r2, [r7, #4]
 8000416:	6812      	ldr	r2, [r2, #0]
 8000418:	4619      	mov	r1, r3
 800041a:	4867      	ldr	r0, [pc, #412]	; (80005b8 <main+0x264>)
 800041c:	f002 fd1c 	bl	8002e58 <iprintf>
 8000420:	e097      	b.n	8000552 <main+0x1fe>
		  }
		  else if(!strcmp(POKE, cmd)){
 8000422:	f107 0308 	add.w	r3, r7, #8
 8000426:	4619      	mov	r1, r3
 8000428:	4864      	ldr	r0, [pc, #400]	; (80005bc <main+0x268>)
 800042a:	f7ff fe8f 	bl	800014c <strcmp>
 800042e:	4603      	mov	r3, r0
 8000430:	2b00      	cmp	r3, #0
 8000432:	d114      	bne.n	800045e <main+0x10a>
			  sscanf((const char*)UART1_Rx_Buf,"%s %08x %08x",cmd,&arg0,&arg1);
 8000434:	1d39      	adds	r1, r7, #4
 8000436:	f107 0208 	add.w	r2, r7, #8
 800043a:	463b      	mov	r3, r7
 800043c:	9300      	str	r3, [sp, #0]
 800043e:	460b      	mov	r3, r1
 8000440:	495f      	ldr	r1, [pc, #380]	; (80005c0 <main+0x26c>)
 8000442:	4858      	ldr	r0, [pc, #352]	; (80005a4 <main+0x250>)
 8000444:	f002 fd96 	bl	8002f74 <siscanf>
			  *(int*)arg0 = arg1;
 8000448:	683a      	ldr	r2, [r7, #0]
 800044a:	687b      	ldr	r3, [r7, #4]
 800044c:	601a      	str	r2, [r3, #0]
			  printf("INS: poke  PARA1: %x  PARA2: %08x\r\n",arg0,*(int*)arg0);
 800044e:	687b      	ldr	r3, [r7, #4]
 8000450:	687a      	ldr	r2, [r7, #4]
 8000452:	6812      	ldr	r2, [r2, #0]
 8000454:	4619      	mov	r1, r3
 8000456:	485b      	ldr	r0, [pc, #364]	; (80005c4 <main+0x270>)
 8000458:	f002 fcfe 	bl	8002e58 <iprintf>
 800045c:	e079      	b.n	8000552 <main+0x1fe>
		  }
		  else if(!strcmp(LOAD, cmd)){
 800045e:	f107 0308 	add.w	r3, r7, #8
 8000462:	4619      	mov	r1, r3
 8000464:	4858      	ldr	r0, [pc, #352]	; (80005c8 <main+0x274>)
 8000466:	f7ff fe71 	bl	800014c <strcmp>
 800046a:	4603      	mov	r3, r0
 800046c:	2b00      	cmp	r3, #0
 800046e:	d11c      	bne.n	80004aa <main+0x156>
			  sscanf((const char*)UART1_Rx_Buf,"%s %08x",cmd,&arg0);
 8000470:	1d3b      	adds	r3, r7, #4
 8000472:	f107 0208 	add.w	r2, r7, #8
 8000476:	494f      	ldr	r1, [pc, #316]	; (80005b4 <main+0x260>)
 8000478:	484a      	ldr	r0, [pc, #296]	; (80005a4 <main+0x250>)
 800047a:	f002 fd7b 	bl	8002f74 <siscanf>
			  printf("INS: load  PARA: %x\r\n", arg0);
 800047e:	687b      	ldr	r3, [r7, #4]
 8000480:	4619      	mov	r1, r3
 8000482:	4852      	ldr	r0, [pc, #328]	; (80005cc <main+0x278>)
 8000484:	f002 fce8 	bl	8002e58 <iprintf>
			  if((uint32_t)arg0 <0x08008000 || (uint32_t)arg0 > 0x0800FFFF ){
 8000488:	687b      	ldr	r3, [r7, #4]
 800048a:	4a51      	ldr	r2, [pc, #324]	; (80005d0 <main+0x27c>)
 800048c:	4293      	cmp	r3, r2
 800048e:	d303      	bcc.n	8000498 <main+0x144>
 8000490:	687b      	ldr	r3, [r7, #4]
 8000492:	4a50      	ldr	r2, [pc, #320]	; (80005d4 <main+0x280>)
 8000494:	4293      	cmp	r3, r2
 8000496:	d902      	bls.n	800049e <main+0x14a>
				  printf("Invalid ADDR!!! \r\n");
 8000498:	484f      	ldr	r0, [pc, #316]	; (80005d8 <main+0x284>)
 800049a:	f002 fd63 	bl	8002f64 <puts>
			  }

			  Xmodem_Receive(&huart1, (uint32_t *)arg0);
 800049e:	687b      	ldr	r3, [r7, #4]
 80004a0:	4619      	mov	r1, r3
 80004a2:	4838      	ldr	r0, [pc, #224]	; (8000584 <main+0x230>)
 80004a4:	f000 fb1a 	bl	8000adc <Xmodem_Receive>
 80004a8:	e053      	b.n	8000552 <main+0x1fe>
		  }
		  else if(!strcmp(RUN, cmd)){
 80004aa:	f107 0308 	add.w	r3, r7, #8
 80004ae:	4619      	mov	r1, r3
 80004b0:	484a      	ldr	r0, [pc, #296]	; (80005dc <main+0x288>)
 80004b2:	f7ff fe4b 	bl	800014c <strcmp>
 80004b6:	4603      	mov	r3, r0
 80004b8:	2b00      	cmp	r3, #0
 80004ba:	d120      	bne.n	80004fe <main+0x1aa>
			  sscanf((const char*)UART1_Rx_Buf,"%s %08x",cmd,&arg0);
 80004bc:	1d3b      	adds	r3, r7, #4
 80004be:	f107 0208 	add.w	r2, r7, #8
 80004c2:	493c      	ldr	r1, [pc, #240]	; (80005b4 <main+0x260>)
 80004c4:	4837      	ldr	r0, [pc, #220]	; (80005a4 <main+0x250>)
 80004c6:	f002 fd55 	bl	8002f74 <siscanf>
			  printf("INS: run  PARA: %08X \r\n",arg0);
 80004ca:	687b      	ldr	r3, [r7, #4]
 80004cc:	4619      	mov	r1, r3
 80004ce:	4844      	ldr	r0, [pc, #272]	; (80005e0 <main+0x28c>)
 80004d0:	f002 fcc2 	bl	8002e58 <iprintf>


			  JumpAddress = *(__IO uint32_t*) (arg0 + 4);
 80004d4:	687b      	ldr	r3, [r7, #4]
 80004d6:	3304      	adds	r3, #4
 80004d8:	681b      	ldr	r3, [r3, #0]
 80004da:	4a42      	ldr	r2, [pc, #264]	; (80005e4 <main+0x290>)
 80004dc:	6013      	str	r3, [r2, #0]
			  Jump_To_Application = (pFunction) JumpAddress;
 80004de:	4b41      	ldr	r3, [pc, #260]	; (80005e4 <main+0x290>)
 80004e0:	681b      	ldr	r3, [r3, #0]
 80004e2:	461a      	mov	r2, r3
 80004e4:	4b40      	ldr	r3, [pc, #256]	; (80005e8 <main+0x294>)
 80004e6:	601a      	str	r2, [r3, #0]
			  __set_MSP(*(__IO uint32_t*) arg0);
 80004e8:	687b      	ldr	r3, [r7, #4]
 80004ea:	681b      	ldr	r3, [r3, #0]
 80004ec:	62fb      	str	r3, [r7, #44]	; 0x2c
  \details Assigns the given value to the Main Stack Pointer (MSP).
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 80004ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80004f0:	f383 8808 	msr	MSP, r3
}
 80004f4:	bf00      	nop
			  Jump_To_Application();
 80004f6:	4b3c      	ldr	r3, [pc, #240]	; (80005e8 <main+0x294>)
 80004f8:	681b      	ldr	r3, [r3, #0]
 80004fa:	4798      	blx	r3
 80004fc:	e029      	b.n	8000552 <main+0x1fe>
		  }
		  else if(!strcmp(PRINT, cmd)){
 80004fe:	f107 0308 	add.w	r3, r7, #8
 8000502:	4619      	mov	r1, r3
 8000504:	4839      	ldr	r0, [pc, #228]	; (80005ec <main+0x298>)
 8000506:	f7ff fe21 	bl	800014c <strcmp>
 800050a:	4603      	mov	r3, r0
 800050c:	2b00      	cmp	r3, #0
 800050e:	d11d      	bne.n	800054c <main+0x1f8>
			  sscanf((const char*)UART1_Rx_Buf,"%s %08x",cmd,&arg0);
 8000510:	1d3b      	adds	r3, r7, #4
 8000512:	f107 0208 	add.w	r2, r7, #8
 8000516:	4927      	ldr	r1, [pc, #156]	; (80005b4 <main+0x260>)
 8000518:	4822      	ldr	r0, [pc, #136]	; (80005a4 <main+0x250>)
 800051a:	f002 fd2b 	bl	8002f74 <siscanf>
			  printf("INS:print  PARA: %08X \r\n",arg0);
 800051e:	687b      	ldr	r3, [r7, #4]
 8000520:	4619      	mov	r1, r3
 8000522:	4833      	ldr	r0, [pc, #204]	; (80005f0 <main+0x29c>)
 8000524:	f002 fc98 	bl	8002e58 <iprintf>
			  uint8_t* addr = (uint8_t*)arg0;
 8000528:	687b      	ldr	r3, [r7, #4]
 800052a:	637b      	str	r3, [r7, #52]	; 0x34
			  while(*addr != 0x00){
 800052c:	e009      	b.n	8000542 <main+0x1ee>
				  HAL_UART_Transmit(&huart1, addr,1, 0xFFFF);
 800052e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000532:	2201      	movs	r2, #1
 8000534:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8000536:	4813      	ldr	r0, [pc, #76]	; (8000584 <main+0x230>)
 8000538:	f001 fe75 	bl	8002226 <HAL_UART_Transmit>
				  addr +=1;
 800053c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800053e:	3301      	adds	r3, #1
 8000540:	637b      	str	r3, [r7, #52]	; 0x34
			  while(*addr != 0x00){
 8000542:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000544:	781b      	ldrb	r3, [r3, #0]
 8000546:	2b00      	cmp	r3, #0
 8000548:	d1f1      	bne.n	800052e <main+0x1da>
 800054a:	e002      	b.n	8000552 <main+0x1fe>
			  }
		  }
		  else {
			  printf("Invalid CMD!!!\r\n");
 800054c:	4829      	ldr	r0, [pc, #164]	; (80005f4 <main+0x2a0>)
 800054e:	f002 fd09 	bl	8002f64 <puts>
		  }


		  for(int i = 0;i < UART1_Rx_cnt; i++)
 8000552:	2300      	movs	r3, #0
 8000554:	633b      	str	r3, [r7, #48]	; 0x30
 8000556:	e007      	b.n	8000568 <main+0x214>
			  UART1_Rx_Buf[i] = 0;
 8000558:	4a12      	ldr	r2, [pc, #72]	; (80005a4 <main+0x250>)
 800055a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800055c:	4413      	add	r3, r2
 800055e:	2200      	movs	r2, #0
 8000560:	701a      	strb	r2, [r3, #0]
		  for(int i = 0;i < UART1_Rx_cnt; i++)
 8000562:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000564:	3301      	adds	r3, #1
 8000566:	633b      	str	r3, [r7, #48]	; 0x30
 8000568:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800056a:	4b23      	ldr	r3, [pc, #140]	; (80005f8 <main+0x2a4>)
 800056c:	681b      	ldr	r3, [r3, #0]
 800056e:	429a      	cmp	r2, r3
 8000570:	d3f2      	bcc.n	8000558 <main+0x204>
		  UART1_Rx_cnt = 0;
 8000572:	4b21      	ldr	r3, [pc, #132]	; (80005f8 <main+0x2a4>)
 8000574:	2200      	movs	r2, #0
 8000576:	601a      	str	r2, [r3, #0]
		  UART1_Rx_flg = 0;
 8000578:	4b09      	ldr	r3, [pc, #36]	; (80005a0 <main+0x24c>)
 800057a:	2200      	movs	r2, #0
 800057c:	701a      	strb	r2, [r3, #0]
	  if(UART1_Rx_flg){// 处理传输的命令
 800057e:	e729      	b.n	80003d4 <main+0x80>
 8000580:	2000049c 	.word	0x2000049c
 8000584:	200004ac 	.word	0x200004ac
 8000588:	08004878 	.word	0x08004878
 800058c:	08004898 	.word	0x08004898
 8000590:	080048b8 	.word	0x080048b8
 8000594:	080048d8 	.word	0x080048d8
 8000598:	080048f8 	.word	0x080048f8
 800059c:	08004918 	.word	0x08004918
 80005a0:	20000494 	.word	0x20000494
 80005a4:	20000094 	.word	0x20000094
 80005a8:	08004938 	.word	0x08004938
 80005ac:	08004944 	.word	0x08004944
 80005b0:	08004948 	.word	0x08004948
 80005b4:	08004950 	.word	0x08004950
 80005b8:	08004958 	.word	0x08004958
 80005bc:	0800497c 	.word	0x0800497c
 80005c0:	08004984 	.word	0x08004984
 80005c4:	08004994 	.word	0x08004994
 80005c8:	080049b8 	.word	0x080049b8
 80005cc:	080049c0 	.word	0x080049c0
 80005d0:	08008000 	.word	0x08008000
 80005d4:	0800ffff 	.word	0x0800ffff
 80005d8:	080049d8 	.word	0x080049d8
 80005dc:	080049ec 	.word	0x080049ec
 80005e0:	080049f0 	.word	0x080049f0
 80005e4:	200004a0 	.word	0x200004a0
 80005e8:	200004a4 	.word	0x200004a4
 80005ec:	08004a08 	.word	0x08004a08
 80005f0:	08004a10 	.word	0x08004a10
 80005f4:	08004a2c 	.word	0x08004a2c
 80005f8:	20000498 	.word	0x20000498

080005fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005fc:	b580      	push	{r7, lr}
 80005fe:	b090      	sub	sp, #64	; 0x40
 8000600:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000602:	f107 0318 	add.w	r3, r7, #24
 8000606:	2228      	movs	r2, #40	; 0x28
 8000608:	2100      	movs	r1, #0
 800060a:	4618      	mov	r0, r3
 800060c:	f002 fc1c 	bl	8002e48 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000610:	1d3b      	adds	r3, r7, #4
 8000612:	2200      	movs	r2, #0
 8000614:	601a      	str	r2, [r3, #0]
 8000616:	605a      	str	r2, [r3, #4]
 8000618:	609a      	str	r2, [r3, #8]
 800061a:	60da      	str	r2, [r3, #12]
 800061c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800061e:	2301      	movs	r3, #1
 8000620:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000622:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000626:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000628:	2300      	movs	r3, #0
 800062a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800062c:	2301      	movs	r3, #1
 800062e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000630:	2302      	movs	r3, #2
 8000632:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000634:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000638:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800063a:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800063e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000640:	f107 0318 	add.w	r3, r7, #24
 8000644:	4618      	mov	r0, r3
 8000646:	f001 f94f 	bl	80018e8 <HAL_RCC_OscConfig>
 800064a:	4603      	mov	r3, r0
 800064c:	2b00      	cmp	r3, #0
 800064e:	d001      	beq.n	8000654 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000650:	f000 f84e 	bl	80006f0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000654:	230f      	movs	r3, #15
 8000656:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000658:	2302      	movs	r3, #2
 800065a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800065c:	2300      	movs	r3, #0
 800065e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000660:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000664:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000666:	2300      	movs	r3, #0
 8000668:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800066a:	1d3b      	adds	r3, r7, #4
 800066c:	2102      	movs	r1, #2
 800066e:	4618      	mov	r0, r3
 8000670:	f001 fbbc 	bl	8001dec <HAL_RCC_ClockConfig>
 8000674:	4603      	mov	r3, r0
 8000676:	2b00      	cmp	r3, #0
 8000678:	d001      	beq.n	800067e <SystemClock_Config+0x82>
  {
    Error_Handler();
 800067a:	f000 f839 	bl	80006f0 <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO, RCC_MCO1SOURCE_PLLCLK, RCC_MCODIV_1);
 800067e:	2200      	movs	r2, #0
 8000680:	f04f 61e0 	mov.w	r1, #117440512	; 0x7000000
 8000684:	2000      	movs	r0, #0
 8000686:	f001 fc9b 	bl	8001fc0 <HAL_RCC_MCOConfig>
}
 800068a:	bf00      	nop
 800068c:	3740      	adds	r7, #64	; 0x40
 800068e:	46bd      	mov	sp, r7
 8000690:	bd80      	pop	{r7, pc}
	...

08000694 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	b082      	sub	sp, #8
 8000698:	af00      	add	r7, sp, #0
 800069a:	6078      	str	r0, [r7, #4]
//	printf("????");
	if(huart == &huart1){
 800069c:	687b      	ldr	r3, [r7, #4]
 800069e:	4a0f      	ldr	r2, [pc, #60]	; (80006dc <HAL_UART_RxCpltCallback+0x48>)
 80006a0:	4293      	cmp	r3, r2
 80006a2:	d116      	bne.n	80006d2 <HAL_UART_RxCpltCallback+0x3e>
		UART1_Rx_Buf[UART1_Rx_cnt] = UART1_temp[0];
 80006a4:	4b0e      	ldr	r3, [pc, #56]	; (80006e0 <HAL_UART_RxCpltCallback+0x4c>)
 80006a6:	681b      	ldr	r3, [r3, #0]
 80006a8:	4a0e      	ldr	r2, [pc, #56]	; (80006e4 <HAL_UART_RxCpltCallback+0x50>)
 80006aa:	7811      	ldrb	r1, [r2, #0]
 80006ac:	4a0e      	ldr	r2, [pc, #56]	; (80006e8 <HAL_UART_RxCpltCallback+0x54>)
 80006ae:	54d1      	strb	r1, [r2, r3]
		UART1_Rx_cnt++;
 80006b0:	4b0b      	ldr	r3, [pc, #44]	; (80006e0 <HAL_UART_RxCpltCallback+0x4c>)
 80006b2:	681b      	ldr	r3, [r3, #0]
 80006b4:	3301      	adds	r3, #1
 80006b6:	4a0a      	ldr	r2, [pc, #40]	; (80006e0 <HAL_UART_RxCpltCallback+0x4c>)
 80006b8:	6013      	str	r3, [r2, #0]
		if(0x0D == UART1_temp[0]){
 80006ba:	4b0a      	ldr	r3, [pc, #40]	; (80006e4 <HAL_UART_RxCpltCallback+0x50>)
 80006bc:	781b      	ldrb	r3, [r3, #0]
 80006be:	2b0d      	cmp	r3, #13
 80006c0:	d102      	bne.n	80006c8 <HAL_UART_RxCpltCallback+0x34>
			UART1_Rx_flg = 1;
 80006c2:	4b0a      	ldr	r3, [pc, #40]	; (80006ec <HAL_UART_RxCpltCallback+0x58>)
 80006c4:	2201      	movs	r2, #1
 80006c6:	701a      	strb	r2, [r3, #0]
		}
		HAL_UART_Receive_IT(&huart1, (uint8_t *)UART1_temp, REC_LENGTH);
 80006c8:	2201      	movs	r2, #1
 80006ca:	4906      	ldr	r1, [pc, #24]	; (80006e4 <HAL_UART_RxCpltCallback+0x50>)
 80006cc:	4803      	ldr	r0, [pc, #12]	; (80006dc <HAL_UART_RxCpltCallback+0x48>)
 80006ce:	f001 fede 	bl	800248e <HAL_UART_Receive_IT>
	}
}
 80006d2:	bf00      	nop
 80006d4:	3708      	adds	r7, #8
 80006d6:	46bd      	mov	sp, r7
 80006d8:	bd80      	pop	{r7, pc}
 80006da:	bf00      	nop
 80006dc:	200004ac 	.word	0x200004ac
 80006e0:	20000498 	.word	0x20000498
 80006e4:	2000049c 	.word	0x2000049c
 80006e8:	20000094 	.word	0x20000094
 80006ec:	20000494 	.word	0x20000494

080006f0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006f0:	b480      	push	{r7}
 80006f2:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80006f4:	b672      	cpsid	i
}
 80006f6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80006f8:	e7fe      	b.n	80006f8 <Error_Handler+0x8>
	...

080006fc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006fc:	b480      	push	{r7}
 80006fe:	b085      	sub	sp, #20
 8000700:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000702:	4b15      	ldr	r3, [pc, #84]	; (8000758 <HAL_MspInit+0x5c>)
 8000704:	699b      	ldr	r3, [r3, #24]
 8000706:	4a14      	ldr	r2, [pc, #80]	; (8000758 <HAL_MspInit+0x5c>)
 8000708:	f043 0301 	orr.w	r3, r3, #1
 800070c:	6193      	str	r3, [r2, #24]
 800070e:	4b12      	ldr	r3, [pc, #72]	; (8000758 <HAL_MspInit+0x5c>)
 8000710:	699b      	ldr	r3, [r3, #24]
 8000712:	f003 0301 	and.w	r3, r3, #1
 8000716:	60bb      	str	r3, [r7, #8]
 8000718:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800071a:	4b0f      	ldr	r3, [pc, #60]	; (8000758 <HAL_MspInit+0x5c>)
 800071c:	69db      	ldr	r3, [r3, #28]
 800071e:	4a0e      	ldr	r2, [pc, #56]	; (8000758 <HAL_MspInit+0x5c>)
 8000720:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000724:	61d3      	str	r3, [r2, #28]
 8000726:	4b0c      	ldr	r3, [pc, #48]	; (8000758 <HAL_MspInit+0x5c>)
 8000728:	69db      	ldr	r3, [r3, #28]
 800072a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800072e:	607b      	str	r3, [r7, #4]
 8000730:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000732:	4b0a      	ldr	r3, [pc, #40]	; (800075c <HAL_MspInit+0x60>)
 8000734:	685b      	ldr	r3, [r3, #4]
 8000736:	60fb      	str	r3, [r7, #12]
 8000738:	68fb      	ldr	r3, [r7, #12]
 800073a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800073e:	60fb      	str	r3, [r7, #12]
 8000740:	68fb      	ldr	r3, [r7, #12]
 8000742:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000746:	60fb      	str	r3, [r7, #12]
 8000748:	4a04      	ldr	r2, [pc, #16]	; (800075c <HAL_MspInit+0x60>)
 800074a:	68fb      	ldr	r3, [r7, #12]
 800074c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800074e:	bf00      	nop
 8000750:	3714      	adds	r7, #20
 8000752:	46bd      	mov	sp, r7
 8000754:	bc80      	pop	{r7}
 8000756:	4770      	bx	lr
 8000758:	40021000 	.word	0x40021000
 800075c:	40010000 	.word	0x40010000

08000760 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000760:	b480      	push	{r7}
 8000762:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000764:	e7fe      	b.n	8000764 <NMI_Handler+0x4>

08000766 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000766:	b480      	push	{r7}
 8000768:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800076a:	e7fe      	b.n	800076a <HardFault_Handler+0x4>

0800076c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800076c:	b480      	push	{r7}
 800076e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000770:	e7fe      	b.n	8000770 <MemManage_Handler+0x4>

08000772 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000772:	b480      	push	{r7}
 8000774:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000776:	e7fe      	b.n	8000776 <BusFault_Handler+0x4>

08000778 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000778:	b480      	push	{r7}
 800077a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800077c:	e7fe      	b.n	800077c <UsageFault_Handler+0x4>

0800077e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800077e:	b480      	push	{r7}
 8000780:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000782:	bf00      	nop
 8000784:	46bd      	mov	sp, r7
 8000786:	bc80      	pop	{r7}
 8000788:	4770      	bx	lr

0800078a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800078a:	b480      	push	{r7}
 800078c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800078e:	bf00      	nop
 8000790:	46bd      	mov	sp, r7
 8000792:	bc80      	pop	{r7}
 8000794:	4770      	bx	lr

08000796 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000796:	b480      	push	{r7}
 8000798:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800079a:	bf00      	nop
 800079c:	46bd      	mov	sp, r7
 800079e:	bc80      	pop	{r7}
 80007a0:	4770      	bx	lr

080007a2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80007a2:	b580      	push	{r7, lr}
 80007a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80007a6:	f000 faf9 	bl	8000d9c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80007aa:	bf00      	nop
 80007ac:	bd80      	pop	{r7, pc}
	...

080007b0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80007b4:	4802      	ldr	r0, [pc, #8]	; (80007c0 <USART1_IRQHandler+0x10>)
 80007b6:	f001 fef5 	bl	80025a4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80007ba:	bf00      	nop
 80007bc:	bd80      	pop	{r7, pc}
 80007be:	bf00      	nop
 80007c0:	200004ac 	.word	0x200004ac

080007c4 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b086      	sub	sp, #24
 80007c8:	af00      	add	r7, sp, #0
 80007ca:	60f8      	str	r0, [r7, #12]
 80007cc:	60b9      	str	r1, [r7, #8]
 80007ce:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80007d0:	2300      	movs	r3, #0
 80007d2:	617b      	str	r3, [r7, #20]
 80007d4:	e00a      	b.n	80007ec <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80007d6:	f3af 8000 	nop.w
 80007da:	4601      	mov	r1, r0
 80007dc:	68bb      	ldr	r3, [r7, #8]
 80007de:	1c5a      	adds	r2, r3, #1
 80007e0:	60ba      	str	r2, [r7, #8]
 80007e2:	b2ca      	uxtb	r2, r1
 80007e4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80007e6:	697b      	ldr	r3, [r7, #20]
 80007e8:	3301      	adds	r3, #1
 80007ea:	617b      	str	r3, [r7, #20]
 80007ec:	697a      	ldr	r2, [r7, #20]
 80007ee:	687b      	ldr	r3, [r7, #4]
 80007f0:	429a      	cmp	r2, r3
 80007f2:	dbf0      	blt.n	80007d6 <_read+0x12>
  }

  return len;
 80007f4:	687b      	ldr	r3, [r7, #4]
}
 80007f6:	4618      	mov	r0, r3
 80007f8:	3718      	adds	r7, #24
 80007fa:	46bd      	mov	sp, r7
 80007fc:	bd80      	pop	{r7, pc}

080007fe <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80007fe:	b580      	push	{r7, lr}
 8000800:	b086      	sub	sp, #24
 8000802:	af00      	add	r7, sp, #0
 8000804:	60f8      	str	r0, [r7, #12]
 8000806:	60b9      	str	r1, [r7, #8]
 8000808:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800080a:	2300      	movs	r3, #0
 800080c:	617b      	str	r3, [r7, #20]
 800080e:	e009      	b.n	8000824 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000810:	68bb      	ldr	r3, [r7, #8]
 8000812:	1c5a      	adds	r2, r3, #1
 8000814:	60ba      	str	r2, [r7, #8]
 8000816:	781b      	ldrb	r3, [r3, #0]
 8000818:	4618      	mov	r0, r3
 800081a:	f7ff fd89 	bl	8000330 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800081e:	697b      	ldr	r3, [r7, #20]
 8000820:	3301      	adds	r3, #1
 8000822:	617b      	str	r3, [r7, #20]
 8000824:	697a      	ldr	r2, [r7, #20]
 8000826:	687b      	ldr	r3, [r7, #4]
 8000828:	429a      	cmp	r2, r3
 800082a:	dbf1      	blt.n	8000810 <_write+0x12>
  }
  return len;
 800082c:	687b      	ldr	r3, [r7, #4]
}
 800082e:	4618      	mov	r0, r3
 8000830:	3718      	adds	r7, #24
 8000832:	46bd      	mov	sp, r7
 8000834:	bd80      	pop	{r7, pc}

08000836 <_close>:

int _close(int file)
{
 8000836:	b480      	push	{r7}
 8000838:	b083      	sub	sp, #12
 800083a:	af00      	add	r7, sp, #0
 800083c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800083e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000842:	4618      	mov	r0, r3
 8000844:	370c      	adds	r7, #12
 8000846:	46bd      	mov	sp, r7
 8000848:	bc80      	pop	{r7}
 800084a:	4770      	bx	lr

0800084c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800084c:	b480      	push	{r7}
 800084e:	b083      	sub	sp, #12
 8000850:	af00      	add	r7, sp, #0
 8000852:	6078      	str	r0, [r7, #4]
 8000854:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000856:	683b      	ldr	r3, [r7, #0]
 8000858:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800085c:	605a      	str	r2, [r3, #4]
  return 0;
 800085e:	2300      	movs	r3, #0
}
 8000860:	4618      	mov	r0, r3
 8000862:	370c      	adds	r7, #12
 8000864:	46bd      	mov	sp, r7
 8000866:	bc80      	pop	{r7}
 8000868:	4770      	bx	lr

0800086a <_isatty>:

int _isatty(int file)
{
 800086a:	b480      	push	{r7}
 800086c:	b083      	sub	sp, #12
 800086e:	af00      	add	r7, sp, #0
 8000870:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000872:	2301      	movs	r3, #1
}
 8000874:	4618      	mov	r0, r3
 8000876:	370c      	adds	r7, #12
 8000878:	46bd      	mov	sp, r7
 800087a:	bc80      	pop	{r7}
 800087c:	4770      	bx	lr

0800087e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800087e:	b480      	push	{r7}
 8000880:	b085      	sub	sp, #20
 8000882:	af00      	add	r7, sp, #0
 8000884:	60f8      	str	r0, [r7, #12]
 8000886:	60b9      	str	r1, [r7, #8]
 8000888:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800088a:	2300      	movs	r3, #0
}
 800088c:	4618      	mov	r0, r3
 800088e:	3714      	adds	r7, #20
 8000890:	46bd      	mov	sp, r7
 8000892:	bc80      	pop	{r7}
 8000894:	4770      	bx	lr
	...

08000898 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000898:	b580      	push	{r7, lr}
 800089a:	b086      	sub	sp, #24
 800089c:	af00      	add	r7, sp, #0
 800089e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80008a0:	4a14      	ldr	r2, [pc, #80]	; (80008f4 <_sbrk+0x5c>)
 80008a2:	4b15      	ldr	r3, [pc, #84]	; (80008f8 <_sbrk+0x60>)
 80008a4:	1ad3      	subs	r3, r2, r3
 80008a6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80008a8:	697b      	ldr	r3, [r7, #20]
 80008aa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80008ac:	4b13      	ldr	r3, [pc, #76]	; (80008fc <_sbrk+0x64>)
 80008ae:	681b      	ldr	r3, [r3, #0]
 80008b0:	2b00      	cmp	r3, #0
 80008b2:	d102      	bne.n	80008ba <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80008b4:	4b11      	ldr	r3, [pc, #68]	; (80008fc <_sbrk+0x64>)
 80008b6:	4a12      	ldr	r2, [pc, #72]	; (8000900 <_sbrk+0x68>)
 80008b8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80008ba:	4b10      	ldr	r3, [pc, #64]	; (80008fc <_sbrk+0x64>)
 80008bc:	681a      	ldr	r2, [r3, #0]
 80008be:	687b      	ldr	r3, [r7, #4]
 80008c0:	4413      	add	r3, r2
 80008c2:	693a      	ldr	r2, [r7, #16]
 80008c4:	429a      	cmp	r2, r3
 80008c6:	d207      	bcs.n	80008d8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80008c8:	f002 fa94 	bl	8002df4 <__errno>
 80008cc:	4603      	mov	r3, r0
 80008ce:	220c      	movs	r2, #12
 80008d0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80008d2:	f04f 33ff 	mov.w	r3, #4294967295
 80008d6:	e009      	b.n	80008ec <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80008d8:	4b08      	ldr	r3, [pc, #32]	; (80008fc <_sbrk+0x64>)
 80008da:	681b      	ldr	r3, [r3, #0]
 80008dc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80008de:	4b07      	ldr	r3, [pc, #28]	; (80008fc <_sbrk+0x64>)
 80008e0:	681a      	ldr	r2, [r3, #0]
 80008e2:	687b      	ldr	r3, [r7, #4]
 80008e4:	4413      	add	r3, r2
 80008e6:	4a05      	ldr	r2, [pc, #20]	; (80008fc <_sbrk+0x64>)
 80008e8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80008ea:	68fb      	ldr	r3, [r7, #12]
}
 80008ec:	4618      	mov	r0, r3
 80008ee:	3718      	adds	r7, #24
 80008f0:	46bd      	mov	sp, r7
 80008f2:	bd80      	pop	{r7, pc}
 80008f4:	20005000 	.word	0x20005000
 80008f8:	00000400 	.word	0x00000400
 80008fc:	200004a8 	.word	0x200004a8
 8000900:	20000528 	.word	0x20000528

08000904 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000904:	b480      	push	{r7}
 8000906:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000908:	bf00      	nop
 800090a:	46bd      	mov	sp, r7
 800090c:	bc80      	pop	{r7}
 800090e:	4770      	bx	lr

08000910 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000914:	4b15      	ldr	r3, [pc, #84]	; (800096c <MX_USART1_UART_Init+0x5c>)
 8000916:	4a16      	ldr	r2, [pc, #88]	; (8000970 <MX_USART1_UART_Init+0x60>)
 8000918:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800091a:	4b14      	ldr	r3, [pc, #80]	; (800096c <MX_USART1_UART_Init+0x5c>)
 800091c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000920:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000922:	4b12      	ldr	r3, [pc, #72]	; (800096c <MX_USART1_UART_Init+0x5c>)
 8000924:	2200      	movs	r2, #0
 8000926:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000928:	4b10      	ldr	r3, [pc, #64]	; (800096c <MX_USART1_UART_Init+0x5c>)
 800092a:	2200      	movs	r2, #0
 800092c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800092e:	4b0f      	ldr	r3, [pc, #60]	; (800096c <MX_USART1_UART_Init+0x5c>)
 8000930:	2200      	movs	r2, #0
 8000932:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000934:	4b0d      	ldr	r3, [pc, #52]	; (800096c <MX_USART1_UART_Init+0x5c>)
 8000936:	220c      	movs	r2, #12
 8000938:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800093a:	4b0c      	ldr	r3, [pc, #48]	; (800096c <MX_USART1_UART_Init+0x5c>)
 800093c:	2200      	movs	r2, #0
 800093e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000940:	4b0a      	ldr	r3, [pc, #40]	; (800096c <MX_USART1_UART_Init+0x5c>)
 8000942:	2200      	movs	r2, #0
 8000944:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000946:	4809      	ldr	r0, [pc, #36]	; (800096c <MX_USART1_UART_Init+0x5c>)
 8000948:	f001 fc20 	bl	800218c <HAL_UART_Init>
 800094c:	4603      	mov	r3, r0
 800094e:	2b00      	cmp	r3, #0
 8000950:	d001      	beq.n	8000956 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000952:	f7ff fecd 	bl	80006f0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */
  	  __HAL_UART_ENABLE_IT(&huart1,UART_IT_RXNE);
 8000956:	4b05      	ldr	r3, [pc, #20]	; (800096c <MX_USART1_UART_Init+0x5c>)
 8000958:	681b      	ldr	r3, [r3, #0]
 800095a:	68da      	ldr	r2, [r3, #12]
 800095c:	4b03      	ldr	r3, [pc, #12]	; (800096c <MX_USART1_UART_Init+0x5c>)
 800095e:	681b      	ldr	r3, [r3, #0]
 8000960:	f042 0220 	orr.w	r2, r2, #32
 8000964:	60da      	str	r2, [r3, #12]
  /* USER CODE END USART1_Init 2 */

}
 8000966:	bf00      	nop
 8000968:	bd80      	pop	{r7, pc}
 800096a:	bf00      	nop
 800096c:	200004ac 	.word	0x200004ac
 8000970:	40013800 	.word	0x40013800

08000974 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	b088      	sub	sp, #32
 8000978:	af00      	add	r7, sp, #0
 800097a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800097c:	f107 0310 	add.w	r3, r7, #16
 8000980:	2200      	movs	r2, #0
 8000982:	601a      	str	r2, [r3, #0]
 8000984:	605a      	str	r2, [r3, #4]
 8000986:	609a      	str	r2, [r3, #8]
 8000988:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	681b      	ldr	r3, [r3, #0]
 800098e:	4a20      	ldr	r2, [pc, #128]	; (8000a10 <HAL_UART_MspInit+0x9c>)
 8000990:	4293      	cmp	r3, r2
 8000992:	d139      	bne.n	8000a08 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000994:	4b1f      	ldr	r3, [pc, #124]	; (8000a14 <HAL_UART_MspInit+0xa0>)
 8000996:	699b      	ldr	r3, [r3, #24]
 8000998:	4a1e      	ldr	r2, [pc, #120]	; (8000a14 <HAL_UART_MspInit+0xa0>)
 800099a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800099e:	6193      	str	r3, [r2, #24]
 80009a0:	4b1c      	ldr	r3, [pc, #112]	; (8000a14 <HAL_UART_MspInit+0xa0>)
 80009a2:	699b      	ldr	r3, [r3, #24]
 80009a4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80009a8:	60fb      	str	r3, [r7, #12]
 80009aa:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009ac:	4b19      	ldr	r3, [pc, #100]	; (8000a14 <HAL_UART_MspInit+0xa0>)
 80009ae:	699b      	ldr	r3, [r3, #24]
 80009b0:	4a18      	ldr	r2, [pc, #96]	; (8000a14 <HAL_UART_MspInit+0xa0>)
 80009b2:	f043 0304 	orr.w	r3, r3, #4
 80009b6:	6193      	str	r3, [r2, #24]
 80009b8:	4b16      	ldr	r3, [pc, #88]	; (8000a14 <HAL_UART_MspInit+0xa0>)
 80009ba:	699b      	ldr	r3, [r3, #24]
 80009bc:	f003 0304 	and.w	r3, r3, #4
 80009c0:	60bb      	str	r3, [r7, #8]
 80009c2:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80009c4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80009c8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009ca:	2302      	movs	r3, #2
 80009cc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80009ce:	2303      	movs	r3, #3
 80009d0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009d2:	f107 0310 	add.w	r3, r7, #16
 80009d6:	4619      	mov	r1, r3
 80009d8:	480f      	ldr	r0, [pc, #60]	; (8000a18 <HAL_UART_MspInit+0xa4>)
 80009da:	f000 fde9 	bl	80015b0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80009de:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80009e2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009e4:	2300      	movs	r3, #0
 80009e6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009e8:	2300      	movs	r3, #0
 80009ea:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009ec:	f107 0310 	add.w	r3, r7, #16
 80009f0:	4619      	mov	r1, r3
 80009f2:	4809      	ldr	r0, [pc, #36]	; (8000a18 <HAL_UART_MspInit+0xa4>)
 80009f4:	f000 fddc 	bl	80015b0 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80009f8:	2200      	movs	r2, #0
 80009fa:	2100      	movs	r1, #0
 80009fc:	2025      	movs	r0, #37	; 0x25
 80009fe:	f000 fae4 	bl	8000fca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000a02:	2025      	movs	r0, #37	; 0x25
 8000a04:	f000 fafd 	bl	8001002 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8000a08:	bf00      	nop
 8000a0a:	3720      	adds	r7, #32
 8000a0c:	46bd      	mov	sp, r7
 8000a0e:	bd80      	pop	{r7, pc}
 8000a10:	40013800 	.word	0x40013800
 8000a14:	40021000 	.word	0x40021000
 8000a18:	40010800 	.word	0x40010800

08000a1c <Receive_Packet>:
uint16_t Cal_CRC16(const uint8_t* p_data, uint32_t size);
uint8_t CalcChecksum(const uint8_t *p_data, uint32_t size);
void Serial_PutByte(uint8_t ch);

static uint8_t Receive_Packet(UART_HandleTypeDef *huart, uint8_t *p_data, uint32_t *p_size, uint32_t timeout)
{
 8000a1c:	b590      	push	{r4, r7, lr}
 8000a1e:	b089      	sub	sp, #36	; 0x24
 8000a20:	af00      	add	r7, sp, #0
 8000a22:	60f8      	str	r0, [r7, #12]
 8000a24:	60b9      	str	r1, [r7, #8]
 8000a26:	607a      	str	r2, [r7, #4]
 8000a28:	603b      	str	r3, [r7, #0]
	uint32_t start_Time = HAL_GetTick();
 8000a2a:	f000 f9c9 	bl	8000dc0 <HAL_GetTick>
 8000a2e:	61b8      	str	r0, [r7, #24]
	uint8_t retries = 0;
 8000a30:	2300      	movs	r3, #0
 8000a32:	77fb      	strb	r3, [r7, #31]
	static uint8_t max_retries = 10;

	for(; retries < max_retries ; retries++ )
 8000a34:	e046      	b.n	8000ac4 <Receive_Packet+0xa8>
	{
		uint8_t state = HAL_UART_Receive(huart, p_data, 1, 1000);
 8000a36:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a3a:	2201      	movs	r2, #1
 8000a3c:	68b9      	ldr	r1, [r7, #8]
 8000a3e:	68f8      	ldr	r0, [r7, #12]
 8000a40:	f001 fc83 	bl	800234a <HAL_UART_Receive>
 8000a44:	4603      	mov	r3, r0
 8000a46:	75fb      	strb	r3, [r7, #23]

		if(state == HAL_OK)
 8000a48:	7dfb      	ldrb	r3, [r7, #23]
 8000a4a:	2b00      	cmp	r3, #0
 8000a4c:	d12d      	bne.n	8000aaa <Receive_Packet+0x8e>
		{
			if(p_data[0] == SOH)
 8000a4e:	68bb      	ldr	r3, [r7, #8]
 8000a50:	781b      	ldrb	r3, [r3, #0]
 8000a52:	2b01      	cmp	r3, #1
 8000a54:	d123      	bne.n	8000a9e <Receive_Packet+0x82>
			{
				HAL_UART_Receive(huart, &p_data[1], PACKET_SIZE - 1, 1000);
 8000a56:	68bb      	ldr	r3, [r7, #8]
 8000a58:	1c59      	adds	r1, r3, #1
 8000a5a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a5e:	2283      	movs	r2, #131	; 0x83
 8000a60:	68f8      	ldr	r0, [r7, #12]
 8000a62:	f001 fc72 	bl	800234a <HAL_UART_Receive>
				if(p_data[1] != ((p_data[2]) ^ NEGATIVE_BYTE))
 8000a66:	68bb      	ldr	r3, [r7, #8]
 8000a68:	3301      	adds	r3, #1
 8000a6a:	781a      	ldrb	r2, [r3, #0]
 8000a6c:	68bb      	ldr	r3, [r7, #8]
 8000a6e:	3302      	adds	r3, #2
 8000a70:	781b      	ldrb	r3, [r3, #0]
 8000a72:	43db      	mvns	r3, r3
 8000a74:	b2db      	uxtb	r3, r3
 8000a76:	429a      	cmp	r2, r3
 8000a78:	d001      	beq.n	8000a7e <Receive_Packet+0x62>
				{
					return RcFLG_NUMWRONG;
 8000a7a:	2304      	movs	r3, #4
 8000a7c:	e028      	b.n	8000ad0 <Receive_Packet+0xb4>
				}
				if(p_data[CHECKSUM_INDEX] != CalcChecksum(&p_data[DATA_START_INDEX], DATA_SIZE ))
 8000a7e:	68bb      	ldr	r3, [r7, #8]
 8000a80:	3383      	adds	r3, #131	; 0x83
 8000a82:	781c      	ldrb	r4, [r3, #0]
 8000a84:	68bb      	ldr	r3, [r7, #8]
 8000a86:	3303      	adds	r3, #3
 8000a88:	2180      	movs	r1, #128	; 0x80
 8000a8a:	4618      	mov	r0, r3
 8000a8c:	f000 f8e8 	bl	8000c60 <CalcChecksum>
 8000a90:	4603      	mov	r3, r0
 8000a92:	429c      	cmp	r4, r3
 8000a94:	d001      	beq.n	8000a9a <Receive_Packet+0x7e>
				{
					return RcFLG_CKWRONG;
 8000a96:	2303      	movs	r3, #3
 8000a98:	e01a      	b.n	8000ad0 <Receive_Packet+0xb4>
				}
				return RcFLG_SUCC;
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	e018      	b.n	8000ad0 <Receive_Packet+0xb4>

			}
			else if(p_data[0] == EOT)
 8000a9e:	68bb      	ldr	r3, [r7, #8]
 8000aa0:	781b      	ldrb	r3, [r3, #0]
 8000aa2:	2b04      	cmp	r3, #4
 8000aa4:	d101      	bne.n	8000aaa <Receive_Packet+0x8e>
			{
				return RcFLG_END;
 8000aa6:	2301      	movs	r3, #1
 8000aa8:	e012      	b.n	8000ad0 <Receive_Packet+0xb4>
			}
		}
		if(HAL_GetTick() - start_Time >= timeout)
 8000aaa:	f000 f989 	bl	8000dc0 <HAL_GetTick>
 8000aae:	4602      	mov	r2, r0
 8000ab0:	69bb      	ldr	r3, [r7, #24]
 8000ab2:	1ad3      	subs	r3, r2, r3
 8000ab4:	683a      	ldr	r2, [r7, #0]
 8000ab6:	429a      	cmp	r2, r3
 8000ab8:	d801      	bhi.n	8000abe <Receive_Packet+0xa2>
		{
			return RcFLG_TimeOut;
 8000aba:	2302      	movs	r3, #2
 8000abc:	e008      	b.n	8000ad0 <Receive_Packet+0xb4>
	for(; retries < max_retries ; retries++ )
 8000abe:	7ffb      	ldrb	r3, [r7, #31]
 8000ac0:	3301      	adds	r3, #1
 8000ac2:	77fb      	strb	r3, [r7, #31]
 8000ac4:	4b04      	ldr	r3, [pc, #16]	; (8000ad8 <Receive_Packet+0xbc>)
 8000ac6:	781b      	ldrb	r3, [r3, #0]
 8000ac8:	7ffa      	ldrb	r2, [r7, #31]
 8000aca:	429a      	cmp	r2, r3
 8000acc:	d3b3      	bcc.n	8000a36 <Receive_Packet+0x1a>
		}
	}
	return RcFLG_TimeOut;
 8000ace:	2302      	movs	r3, #2
}
 8000ad0:	4618      	mov	r0, r3
 8000ad2:	3724      	adds	r7, #36	; 0x24
 8000ad4:	46bd      	mov	sp, r7
 8000ad6:	bd90      	pop	{r4, r7, pc}
 8000ad8:	20000004 	.word	0x20000004

08000adc <Xmodem_Receive>:

uint8_t Xmodem_Receive(UART_HandleTypeDef *huart, uint32_t* addr)
{
 8000adc:	b5b0      	push	{r4, r5, r7, lr}
 8000ade:	b0b4      	sub	sp, #208	; 0xd0
 8000ae0:	af00      	add	r7, sp, #0
 8000ae2:	6078      	str	r0, [r7, #4]
 8000ae4:	6039      	str	r1, [r7, #0]
	HAL_UART_AbortReceive(&huart1);
 8000ae6:	4859      	ldr	r0, [pc, #356]	; (8000c4c <Xmodem_Receive+0x170>)
 8000ae8:	f001 fd01 	bl	80024ee <HAL_UART_AbortReceive>

	if(FLASH_If_Erase(USER_FLASH_START)){
 8000aec:	4858      	ldr	r0, [pc, #352]	; (8000c50 <Xmodem_Receive+0x174>)
 8000aee:	f7ff fb4d 	bl	800018c <FLASH_If_Erase>
 8000af2:	4603      	mov	r3, r0
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	d01d      	beq.n	8000b34 <Xmodem_Receive+0x58>
		uint8_t ch[25]  = "Erase Flash Wrong \r\n";
 8000af8:	4b56      	ldr	r3, [pc, #344]	; (8000c54 <Xmodem_Receive+0x178>)
 8000afa:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8000afe:	461d      	mov	r5, r3
 8000b00:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000b02:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000b04:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000b08:	6020      	str	r0, [r4, #0]
 8000b0a:	3404      	adds	r4, #4
 8000b0c:	7021      	strb	r1, [r4, #0]
 8000b0e:	f107 033d 	add.w	r3, r7, #61	; 0x3d
 8000b12:	2200      	movs	r2, #0
 8000b14:	601a      	str	r2, [r3, #0]
		HAL_UART_Transmit(huart, ch, 25, 0xFFFF);
 8000b16:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8000b1a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000b1e:	2219      	movs	r2, #25
 8000b20:	6878      	ldr	r0, [r7, #4]
 8000b22:	f001 fb80 	bl	8002226 <HAL_UART_Transmit>
		HAL_UART_Receive_IT(&huart1, (uint8_t *)UART1_temp , 1);
 8000b26:	2201      	movs	r2, #1
 8000b28:	494b      	ldr	r1, [pc, #300]	; (8000c58 <Xmodem_Receive+0x17c>)
 8000b2a:	4848      	ldr	r0, [pc, #288]	; (8000c4c <Xmodem_Receive+0x170>)
 8000b2c:	f001 fcaf 	bl	800248e <HAL_UART_Receive_IT>
		return 0;
 8000b30:	2300      	movs	r3, #0
 8000b32:	e087      	b.n	8000c44 <Xmodem_Receive+0x168>
	}

	HAL_Delay(2000);
 8000b34:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000b38:	f000 f94c 	bl	8000dd4 <HAL_Delay>

	uint8_t packet[132];
	uint32_t size = 0;
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	647b      	str	r3, [r7, #68]	; 0x44

	uint8_t Rc_State = 0;
 8000b40:	2300      	movs	r3, #0
 8000b42:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf
	while(1)
	{
		if(Rc_State == RcState_PRE){
 8000b46:	f897 30cf 	ldrb.w	r3, [r7, #207]	; 0xcf
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	d10e      	bne.n	8000b6c <Xmodem_Receive+0x90>
			Serial_PutByte(NAK);
 8000b4e:	2015      	movs	r0, #21
 8000b50:	f000 f8a6 	bl	8000ca0 <Serial_PutByte>

			uint8_t unuse;
			HAL_UART_Receive(huart, &unuse, 1, 1000);
 8000b54:	f107 0127 	add.w	r1, r7, #39	; 0x27
 8000b58:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b5c:	2201      	movs	r2, #1
 8000b5e:	6878      	ldr	r0, [r7, #4]
 8000b60:	f001 fbf3 	bl	800234a <HAL_UART_Receive>

			Rc_State = RcState_Rc;
 8000b64:	2301      	movs	r3, #1
 8000b66:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf
 8000b6a:	e7ec      	b.n	8000b46 <Xmodem_Receive+0x6a>

		}
		else if(Rc_State == RcState_Rc){
 8000b6c:	f897 30cf 	ldrb.w	r3, [r7, #207]	; 0xcf
 8000b70:	2b01      	cmp	r3, #1
 8000b72:	d142      	bne.n	8000bfa <Xmodem_Receive+0x11e>
			uint8_t state;
			state =  Receive_Packet(huart, packet, &size, 1000);
 8000b74:	f107 0244 	add.w	r2, r7, #68	; 0x44
 8000b78:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8000b7c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b80:	6878      	ldr	r0, [r7, #4]
 8000b82:	f7ff ff4b 	bl	8000a1c <Receive_Packet>
 8000b86:	4603      	mov	r3, r0
 8000b88:	f887 30ce 	strb.w	r3, [r7, #206]	; 0xce
			HAL_Delay(50);
 8000b8c:	2032      	movs	r0, #50	; 0x32
 8000b8e:	f000 f921 	bl	8000dd4 <HAL_Delay>
//			printf("%d\r\n",state);
			if(state == RcFLG_SUCC){
 8000b92:	f897 30ce 	ldrb.w	r3, [r7, #206]	; 0xce
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	d111      	bne.n	8000bbe <Xmodem_Receive+0xe2>
				Rc_State = RcState_Rc;
 8000b9a:	2301      	movs	r3, #1
 8000b9c:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf

				FLASH_If_Write((uint32_t)addr,(uint32_t *)(&packet[DATA_START_INDEX]), DATA_SIZE/4);
 8000ba0:	6838      	ldr	r0, [r7, #0]
 8000ba2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000ba6:	3303      	adds	r3, #3
 8000ba8:	2220      	movs	r2, #32
 8000baa:	4619      	mov	r1, r3
 8000bac:	f7ff fb22 	bl	80001f4 <FLASH_If_Write>

				addr += DATA_SIZE/4;
 8000bb0:	683b      	ldr	r3, [r7, #0]
 8000bb2:	3380      	adds	r3, #128	; 0x80
 8000bb4:	603b      	str	r3, [r7, #0]
				Serial_PutByte(ACK);
 8000bb6:	2006      	movs	r0, #6
 8000bb8:	f000 f872 	bl	8000ca0 <Serial_PutByte>
 8000bbc:	e7c3      	b.n	8000b46 <Xmodem_Receive+0x6a>
			}
			else if(state == RcFLG_END){
 8000bbe:	f897 30ce 	ldrb.w	r3, [r7, #206]	; 0xce
 8000bc2:	2b01      	cmp	r3, #1
 8000bc4:	d106      	bne.n	8000bd4 <Xmodem_Receive+0xf8>
				Rc_State = RcState_EOT;
 8000bc6:	2302      	movs	r3, #2
 8000bc8:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf
				Serial_PutByte(ACK);
 8000bcc:	2006      	movs	r0, #6
 8000bce:	f000 f867 	bl	8000ca0 <Serial_PutByte>
 8000bd2:	e7b8      	b.n	8000b46 <Xmodem_Receive+0x6a>
			}
			else if(state == RcFLG_TimeOut || state == RcFLG_CKWRONG || state == RcFLG_NUMWRONG){
 8000bd4:	f897 30ce 	ldrb.w	r3, [r7, #206]	; 0xce
 8000bd8:	2b02      	cmp	r3, #2
 8000bda:	d007      	beq.n	8000bec <Xmodem_Receive+0x110>
 8000bdc:	f897 30ce 	ldrb.w	r3, [r7, #206]	; 0xce
 8000be0:	2b03      	cmp	r3, #3
 8000be2:	d003      	beq.n	8000bec <Xmodem_Receive+0x110>
 8000be4:	f897 30ce 	ldrb.w	r3, [r7, #206]	; 0xce
 8000be8:	2b04      	cmp	r3, #4
 8000bea:	d1ac      	bne.n	8000b46 <Xmodem_Receive+0x6a>
				Rc_State = RcState_Rc;
 8000bec:	2301      	movs	r3, #1
 8000bee:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf
				Serial_PutByte(NAK);
 8000bf2:	2015      	movs	r0, #21
 8000bf4:	f000 f854 	bl	8000ca0 <Serial_PutByte>
 8000bf8:	e7a5      	b.n	8000b46 <Xmodem_Receive+0x6a>
			}
		}
		else if(Rc_State == RcState_EOT){
 8000bfa:	f897 30cf 	ldrb.w	r3, [r7, #207]	; 0xcf
 8000bfe:	2b02      	cmp	r3, #2
 8000c00:	d1a1      	bne.n	8000b46 <Xmodem_Receive+0x6a>
			uint8_t ch[25]  = "END OF TRANSMIT!!! \r\n";
 8000c02:	4b16      	ldr	r3, [pc, #88]	; (8000c5c <Xmodem_Receive+0x180>)
 8000c04:	f107 040c 	add.w	r4, r7, #12
 8000c08:	461d      	mov	r5, r3
 8000c0a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000c0c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000c0e:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000c12:	6020      	str	r0, [r4, #0]
 8000c14:	3404      	adds	r4, #4
 8000c16:	8021      	strh	r1, [r4, #0]
 8000c18:	f107 0322 	add.w	r3, r7, #34	; 0x22
 8000c1c:	2100      	movs	r1, #0
 8000c1e:	460a      	mov	r2, r1
 8000c20:	801a      	strh	r2, [r3, #0]
 8000c22:	460a      	mov	r2, r1
 8000c24:	709a      	strb	r2, [r3, #2]
			HAL_UART_Transmit(huart, ch, 25, 0xFFFF);
 8000c26:	f107 010c 	add.w	r1, r7, #12
 8000c2a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000c2e:	2219      	movs	r2, #25
 8000c30:	6878      	ldr	r0, [r7, #4]
 8000c32:	f001 faf8 	bl	8002226 <HAL_UART_Transmit>
			break;
 8000c36:	bf00      	nop
		}
		else {
		}
	}

	HAL_UART_Receive_IT(&huart1, (uint8_t *)UART1_temp , 1);
 8000c38:	2201      	movs	r2, #1
 8000c3a:	4907      	ldr	r1, [pc, #28]	; (8000c58 <Xmodem_Receive+0x17c>)
 8000c3c:	4803      	ldr	r0, [pc, #12]	; (8000c4c <Xmodem_Receive+0x170>)
 8000c3e:	f001 fc26 	bl	800248e <HAL_UART_Receive_IT>
	return 0;
 8000c42:	2300      	movs	r3, #0

}
 8000c44:	4618      	mov	r0, r3
 8000c46:	37d0      	adds	r7, #208	; 0xd0
 8000c48:	46bd      	mov	sp, r7
 8000c4a:	bdb0      	pop	{r4, r5, r7, pc}
 8000c4c:	200004ac 	.word	0x200004ac
 8000c50:	08008000 	.word	0x08008000
 8000c54:	08004a3c 	.word	0x08004a3c
 8000c58:	2000049c 	.word	0x2000049c
 8000c5c:	08004a58 	.word	0x08004a58

08000c60 <CalcChecksum>:

uint8_t CalcChecksum(const uint8_t *p_data, uint32_t size)
{
 8000c60:	b480      	push	{r7}
 8000c62:	b085      	sub	sp, #20
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	6078      	str	r0, [r7, #4]
 8000c68:	6039      	str	r1, [r7, #0]
  uint32_t sum = 0;
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	60fb      	str	r3, [r7, #12]
  const uint8_t *p_data_end = p_data + size;
 8000c6e:	687a      	ldr	r2, [r7, #4]
 8000c70:	683b      	ldr	r3, [r7, #0]
 8000c72:	4413      	add	r3, r2
 8000c74:	60bb      	str	r3, [r7, #8]

  while (p_data < p_data_end )
 8000c76:	e007      	b.n	8000c88 <CalcChecksum+0x28>
  {
    sum += *p_data++;
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	1c5a      	adds	r2, r3, #1
 8000c7c:	607a      	str	r2, [r7, #4]
 8000c7e:	781b      	ldrb	r3, [r3, #0]
 8000c80:	461a      	mov	r2, r3
 8000c82:	68fb      	ldr	r3, [r7, #12]
 8000c84:	4413      	add	r3, r2
 8000c86:	60fb      	str	r3, [r7, #12]
  while (p_data < p_data_end )
 8000c88:	687a      	ldr	r2, [r7, #4]
 8000c8a:	68bb      	ldr	r3, [r7, #8]
 8000c8c:	429a      	cmp	r2, r3
 8000c8e:	d3f3      	bcc.n	8000c78 <CalcChecksum+0x18>
  }

  return (sum & 0xffu);
 8000c90:	68fb      	ldr	r3, [r7, #12]
 8000c92:	b2db      	uxtb	r3, r3
}
 8000c94:	4618      	mov	r0, r3
 8000c96:	3714      	adds	r7, #20
 8000c98:	46bd      	mov	sp, r7
 8000c9a:	bc80      	pop	{r7}
 8000c9c:	4770      	bx	lr
	...

08000ca0 <Serial_PutByte>:
void Serial_PutByte(uint8_t ch)
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	b082      	sub	sp, #8
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	4603      	mov	r3, r0
 8000ca8:	71fb      	strb	r3, [r7, #7]
	HAL_UART_Transmit(&huart1, &ch, 1, 0xFFFF);
 8000caa:	1df9      	adds	r1, r7, #7
 8000cac:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000cb0:	2201      	movs	r2, #1
 8000cb2:	4803      	ldr	r0, [pc, #12]	; (8000cc0 <Serial_PutByte+0x20>)
 8000cb4:	f001 fab7 	bl	8002226 <HAL_UART_Transmit>
}
 8000cb8:	bf00      	nop
 8000cba:	3708      	adds	r7, #8
 8000cbc:	46bd      	mov	sp, r7
 8000cbe:	bd80      	pop	{r7, pc}
 8000cc0:	200004ac 	.word	0x200004ac

08000cc4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000cc4:	480c      	ldr	r0, [pc, #48]	; (8000cf8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000cc6:	490d      	ldr	r1, [pc, #52]	; (8000cfc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000cc8:	4a0d      	ldr	r2, [pc, #52]	; (8000d00 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000cca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ccc:	e002      	b.n	8000cd4 <LoopCopyDataInit>

08000cce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000cce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000cd0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000cd2:	3304      	adds	r3, #4

08000cd4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000cd4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000cd6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000cd8:	d3f9      	bcc.n	8000cce <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000cda:	4a0a      	ldr	r2, [pc, #40]	; (8000d04 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000cdc:	4c0a      	ldr	r4, [pc, #40]	; (8000d08 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000cde:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ce0:	e001      	b.n	8000ce6 <LoopFillZerobss>

08000ce2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ce2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ce4:	3204      	adds	r2, #4

08000ce6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ce6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ce8:	d3fb      	bcc.n	8000ce2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000cea:	f7ff fe0b 	bl	8000904 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000cee:	f002 f887 	bl	8002e00 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000cf2:	f7ff fb2f 	bl	8000354 <main>
  bx lr
 8000cf6:	4770      	bx	lr
  ldr r0, =_sdata
 8000cf8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000cfc:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8000d00:	08004c64 	.word	0x08004c64
  ldr r2, =_sbss
 8000d04:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8000d08:	20000528 	.word	0x20000528

08000d0c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000d0c:	e7fe      	b.n	8000d0c <ADC1_2_IRQHandler>
	...

08000d10 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d14:	4b08      	ldr	r3, [pc, #32]	; (8000d38 <HAL_Init+0x28>)
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	4a07      	ldr	r2, [pc, #28]	; (8000d38 <HAL_Init+0x28>)
 8000d1a:	f043 0310 	orr.w	r3, r3, #16
 8000d1e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d20:	2003      	movs	r0, #3
 8000d22:	f000 f947 	bl	8000fb4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d26:	200f      	movs	r0, #15
 8000d28:	f000 f808 	bl	8000d3c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d2c:	f7ff fce6 	bl	80006fc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d30:	2300      	movs	r3, #0
}
 8000d32:	4618      	mov	r0, r3
 8000d34:	bd80      	pop	{r7, pc}
 8000d36:	bf00      	nop
 8000d38:	40022000 	.word	0x40022000

08000d3c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	b082      	sub	sp, #8
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d44:	4b12      	ldr	r3, [pc, #72]	; (8000d90 <HAL_InitTick+0x54>)
 8000d46:	681a      	ldr	r2, [r3, #0]
 8000d48:	4b12      	ldr	r3, [pc, #72]	; (8000d94 <HAL_InitTick+0x58>)
 8000d4a:	781b      	ldrb	r3, [r3, #0]
 8000d4c:	4619      	mov	r1, r3
 8000d4e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d52:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d56:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d5a:	4618      	mov	r0, r3
 8000d5c:	f000 f95f 	bl	800101e <HAL_SYSTICK_Config>
 8000d60:	4603      	mov	r3, r0
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d001      	beq.n	8000d6a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000d66:	2301      	movs	r3, #1
 8000d68:	e00e      	b.n	8000d88 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	2b0f      	cmp	r3, #15
 8000d6e:	d80a      	bhi.n	8000d86 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d70:	2200      	movs	r2, #0
 8000d72:	6879      	ldr	r1, [r7, #4]
 8000d74:	f04f 30ff 	mov.w	r0, #4294967295
 8000d78:	f000 f927 	bl	8000fca <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d7c:	4a06      	ldr	r2, [pc, #24]	; (8000d98 <HAL_InitTick+0x5c>)
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000d82:	2300      	movs	r3, #0
 8000d84:	e000      	b.n	8000d88 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000d86:	2301      	movs	r3, #1
}
 8000d88:	4618      	mov	r0, r3
 8000d8a:	3708      	adds	r7, #8
 8000d8c:	46bd      	mov	sp, r7
 8000d8e:	bd80      	pop	{r7, pc}
 8000d90:	20000000 	.word	0x20000000
 8000d94:	2000000c 	.word	0x2000000c
 8000d98:	20000008 	.word	0x20000008

08000d9c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d9c:	b480      	push	{r7}
 8000d9e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000da0:	4b05      	ldr	r3, [pc, #20]	; (8000db8 <HAL_IncTick+0x1c>)
 8000da2:	781b      	ldrb	r3, [r3, #0]
 8000da4:	461a      	mov	r2, r3
 8000da6:	4b05      	ldr	r3, [pc, #20]	; (8000dbc <HAL_IncTick+0x20>)
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	4413      	add	r3, r2
 8000dac:	4a03      	ldr	r2, [pc, #12]	; (8000dbc <HAL_IncTick+0x20>)
 8000dae:	6013      	str	r3, [r2, #0]
}
 8000db0:	bf00      	nop
 8000db2:	46bd      	mov	sp, r7
 8000db4:	bc80      	pop	{r7}
 8000db6:	4770      	bx	lr
 8000db8:	2000000c 	.word	0x2000000c
 8000dbc:	200004f0 	.word	0x200004f0

08000dc0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000dc0:	b480      	push	{r7}
 8000dc2:	af00      	add	r7, sp, #0
  return uwTick;
 8000dc4:	4b02      	ldr	r3, [pc, #8]	; (8000dd0 <HAL_GetTick+0x10>)
 8000dc6:	681b      	ldr	r3, [r3, #0]
}
 8000dc8:	4618      	mov	r0, r3
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	bc80      	pop	{r7}
 8000dce:	4770      	bx	lr
 8000dd0:	200004f0 	.word	0x200004f0

08000dd4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	b084      	sub	sp, #16
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ddc:	f7ff fff0 	bl	8000dc0 <HAL_GetTick>
 8000de0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000de6:	68fb      	ldr	r3, [r7, #12]
 8000de8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000dec:	d005      	beq.n	8000dfa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000dee:	4b0a      	ldr	r3, [pc, #40]	; (8000e18 <HAL_Delay+0x44>)
 8000df0:	781b      	ldrb	r3, [r3, #0]
 8000df2:	461a      	mov	r2, r3
 8000df4:	68fb      	ldr	r3, [r7, #12]
 8000df6:	4413      	add	r3, r2
 8000df8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000dfa:	bf00      	nop
 8000dfc:	f7ff ffe0 	bl	8000dc0 <HAL_GetTick>
 8000e00:	4602      	mov	r2, r0
 8000e02:	68bb      	ldr	r3, [r7, #8]
 8000e04:	1ad3      	subs	r3, r2, r3
 8000e06:	68fa      	ldr	r2, [r7, #12]
 8000e08:	429a      	cmp	r2, r3
 8000e0a:	d8f7      	bhi.n	8000dfc <HAL_Delay+0x28>
  {
  }
}
 8000e0c:	bf00      	nop
 8000e0e:	bf00      	nop
 8000e10:	3710      	adds	r7, #16
 8000e12:	46bd      	mov	sp, r7
 8000e14:	bd80      	pop	{r7, pc}
 8000e16:	bf00      	nop
 8000e18:	2000000c 	.word	0x2000000c

08000e1c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e1c:	b480      	push	{r7}
 8000e1e:	b085      	sub	sp, #20
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	f003 0307 	and.w	r3, r3, #7
 8000e2a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e2c:	4b0c      	ldr	r3, [pc, #48]	; (8000e60 <__NVIC_SetPriorityGrouping+0x44>)
 8000e2e:	68db      	ldr	r3, [r3, #12]
 8000e30:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e32:	68ba      	ldr	r2, [r7, #8]
 8000e34:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e38:	4013      	ands	r3, r2
 8000e3a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000e3c:	68fb      	ldr	r3, [r7, #12]
 8000e3e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e40:	68bb      	ldr	r3, [r7, #8]
 8000e42:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e44:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000e48:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e4c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e4e:	4a04      	ldr	r2, [pc, #16]	; (8000e60 <__NVIC_SetPriorityGrouping+0x44>)
 8000e50:	68bb      	ldr	r3, [r7, #8]
 8000e52:	60d3      	str	r3, [r2, #12]
}
 8000e54:	bf00      	nop
 8000e56:	3714      	adds	r7, #20
 8000e58:	46bd      	mov	sp, r7
 8000e5a:	bc80      	pop	{r7}
 8000e5c:	4770      	bx	lr
 8000e5e:	bf00      	nop
 8000e60:	e000ed00 	.word	0xe000ed00

08000e64 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e64:	b480      	push	{r7}
 8000e66:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e68:	4b04      	ldr	r3, [pc, #16]	; (8000e7c <__NVIC_GetPriorityGrouping+0x18>)
 8000e6a:	68db      	ldr	r3, [r3, #12]
 8000e6c:	0a1b      	lsrs	r3, r3, #8
 8000e6e:	f003 0307 	and.w	r3, r3, #7
}
 8000e72:	4618      	mov	r0, r3
 8000e74:	46bd      	mov	sp, r7
 8000e76:	bc80      	pop	{r7}
 8000e78:	4770      	bx	lr
 8000e7a:	bf00      	nop
 8000e7c:	e000ed00 	.word	0xe000ed00

08000e80 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e80:	b480      	push	{r7}
 8000e82:	b083      	sub	sp, #12
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	4603      	mov	r3, r0
 8000e88:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	db0b      	blt.n	8000eaa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e92:	79fb      	ldrb	r3, [r7, #7]
 8000e94:	f003 021f 	and.w	r2, r3, #31
 8000e98:	4906      	ldr	r1, [pc, #24]	; (8000eb4 <__NVIC_EnableIRQ+0x34>)
 8000e9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e9e:	095b      	lsrs	r3, r3, #5
 8000ea0:	2001      	movs	r0, #1
 8000ea2:	fa00 f202 	lsl.w	r2, r0, r2
 8000ea6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000eaa:	bf00      	nop
 8000eac:	370c      	adds	r7, #12
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	bc80      	pop	{r7}
 8000eb2:	4770      	bx	lr
 8000eb4:	e000e100 	.word	0xe000e100

08000eb8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000eb8:	b480      	push	{r7}
 8000eba:	b083      	sub	sp, #12
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	4603      	mov	r3, r0
 8000ec0:	6039      	str	r1, [r7, #0]
 8000ec2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ec4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	db0a      	blt.n	8000ee2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ecc:	683b      	ldr	r3, [r7, #0]
 8000ece:	b2da      	uxtb	r2, r3
 8000ed0:	490c      	ldr	r1, [pc, #48]	; (8000f04 <__NVIC_SetPriority+0x4c>)
 8000ed2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ed6:	0112      	lsls	r2, r2, #4
 8000ed8:	b2d2      	uxtb	r2, r2
 8000eda:	440b      	add	r3, r1
 8000edc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ee0:	e00a      	b.n	8000ef8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ee2:	683b      	ldr	r3, [r7, #0]
 8000ee4:	b2da      	uxtb	r2, r3
 8000ee6:	4908      	ldr	r1, [pc, #32]	; (8000f08 <__NVIC_SetPriority+0x50>)
 8000ee8:	79fb      	ldrb	r3, [r7, #7]
 8000eea:	f003 030f 	and.w	r3, r3, #15
 8000eee:	3b04      	subs	r3, #4
 8000ef0:	0112      	lsls	r2, r2, #4
 8000ef2:	b2d2      	uxtb	r2, r2
 8000ef4:	440b      	add	r3, r1
 8000ef6:	761a      	strb	r2, [r3, #24]
}
 8000ef8:	bf00      	nop
 8000efa:	370c      	adds	r7, #12
 8000efc:	46bd      	mov	sp, r7
 8000efe:	bc80      	pop	{r7}
 8000f00:	4770      	bx	lr
 8000f02:	bf00      	nop
 8000f04:	e000e100 	.word	0xe000e100
 8000f08:	e000ed00 	.word	0xe000ed00

08000f0c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f0c:	b480      	push	{r7}
 8000f0e:	b089      	sub	sp, #36	; 0x24
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	60f8      	str	r0, [r7, #12]
 8000f14:	60b9      	str	r1, [r7, #8]
 8000f16:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f18:	68fb      	ldr	r3, [r7, #12]
 8000f1a:	f003 0307 	and.w	r3, r3, #7
 8000f1e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f20:	69fb      	ldr	r3, [r7, #28]
 8000f22:	f1c3 0307 	rsb	r3, r3, #7
 8000f26:	2b04      	cmp	r3, #4
 8000f28:	bf28      	it	cs
 8000f2a:	2304      	movcs	r3, #4
 8000f2c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f2e:	69fb      	ldr	r3, [r7, #28]
 8000f30:	3304      	adds	r3, #4
 8000f32:	2b06      	cmp	r3, #6
 8000f34:	d902      	bls.n	8000f3c <NVIC_EncodePriority+0x30>
 8000f36:	69fb      	ldr	r3, [r7, #28]
 8000f38:	3b03      	subs	r3, #3
 8000f3a:	e000      	b.n	8000f3e <NVIC_EncodePriority+0x32>
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f40:	f04f 32ff 	mov.w	r2, #4294967295
 8000f44:	69bb      	ldr	r3, [r7, #24]
 8000f46:	fa02 f303 	lsl.w	r3, r2, r3
 8000f4a:	43da      	mvns	r2, r3
 8000f4c:	68bb      	ldr	r3, [r7, #8]
 8000f4e:	401a      	ands	r2, r3
 8000f50:	697b      	ldr	r3, [r7, #20]
 8000f52:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f54:	f04f 31ff 	mov.w	r1, #4294967295
 8000f58:	697b      	ldr	r3, [r7, #20]
 8000f5a:	fa01 f303 	lsl.w	r3, r1, r3
 8000f5e:	43d9      	mvns	r1, r3
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f64:	4313      	orrs	r3, r2
         );
}
 8000f66:	4618      	mov	r0, r3
 8000f68:	3724      	adds	r7, #36	; 0x24
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	bc80      	pop	{r7}
 8000f6e:	4770      	bx	lr

08000f70 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b082      	sub	sp, #8
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	3b01      	subs	r3, #1
 8000f7c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000f80:	d301      	bcc.n	8000f86 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f82:	2301      	movs	r3, #1
 8000f84:	e00f      	b.n	8000fa6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f86:	4a0a      	ldr	r2, [pc, #40]	; (8000fb0 <SysTick_Config+0x40>)
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	3b01      	subs	r3, #1
 8000f8c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f8e:	210f      	movs	r1, #15
 8000f90:	f04f 30ff 	mov.w	r0, #4294967295
 8000f94:	f7ff ff90 	bl	8000eb8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f98:	4b05      	ldr	r3, [pc, #20]	; (8000fb0 <SysTick_Config+0x40>)
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f9e:	4b04      	ldr	r3, [pc, #16]	; (8000fb0 <SysTick_Config+0x40>)
 8000fa0:	2207      	movs	r2, #7
 8000fa2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000fa4:	2300      	movs	r3, #0
}
 8000fa6:	4618      	mov	r0, r3
 8000fa8:	3708      	adds	r7, #8
 8000faa:	46bd      	mov	sp, r7
 8000fac:	bd80      	pop	{r7, pc}
 8000fae:	bf00      	nop
 8000fb0:	e000e010 	.word	0xe000e010

08000fb4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b082      	sub	sp, #8
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000fbc:	6878      	ldr	r0, [r7, #4]
 8000fbe:	f7ff ff2d 	bl	8000e1c <__NVIC_SetPriorityGrouping>
}
 8000fc2:	bf00      	nop
 8000fc4:	3708      	adds	r7, #8
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	bd80      	pop	{r7, pc}

08000fca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000fca:	b580      	push	{r7, lr}
 8000fcc:	b086      	sub	sp, #24
 8000fce:	af00      	add	r7, sp, #0
 8000fd0:	4603      	mov	r3, r0
 8000fd2:	60b9      	str	r1, [r7, #8]
 8000fd4:	607a      	str	r2, [r7, #4]
 8000fd6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000fd8:	2300      	movs	r3, #0
 8000fda:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000fdc:	f7ff ff42 	bl	8000e64 <__NVIC_GetPriorityGrouping>
 8000fe0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000fe2:	687a      	ldr	r2, [r7, #4]
 8000fe4:	68b9      	ldr	r1, [r7, #8]
 8000fe6:	6978      	ldr	r0, [r7, #20]
 8000fe8:	f7ff ff90 	bl	8000f0c <NVIC_EncodePriority>
 8000fec:	4602      	mov	r2, r0
 8000fee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ff2:	4611      	mov	r1, r2
 8000ff4:	4618      	mov	r0, r3
 8000ff6:	f7ff ff5f 	bl	8000eb8 <__NVIC_SetPriority>
}
 8000ffa:	bf00      	nop
 8000ffc:	3718      	adds	r7, #24
 8000ffe:	46bd      	mov	sp, r7
 8001000:	bd80      	pop	{r7, pc}

08001002 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001002:	b580      	push	{r7, lr}
 8001004:	b082      	sub	sp, #8
 8001006:	af00      	add	r7, sp, #0
 8001008:	4603      	mov	r3, r0
 800100a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800100c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001010:	4618      	mov	r0, r3
 8001012:	f7ff ff35 	bl	8000e80 <__NVIC_EnableIRQ>
}
 8001016:	bf00      	nop
 8001018:	3708      	adds	r7, #8
 800101a:	46bd      	mov	sp, r7
 800101c:	bd80      	pop	{r7, pc}

0800101e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800101e:	b580      	push	{r7, lr}
 8001020:	b082      	sub	sp, #8
 8001022:	af00      	add	r7, sp, #0
 8001024:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001026:	6878      	ldr	r0, [r7, #4]
 8001028:	f7ff ffa2 	bl	8000f70 <SysTick_Config>
 800102c:	4603      	mov	r3, r0
}
 800102e:	4618      	mov	r0, r3
 8001030:	3708      	adds	r7, #8
 8001032:	46bd      	mov	sp, r7
 8001034:	bd80      	pop	{r7, pc}

08001036 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001036:	b480      	push	{r7}
 8001038:	b085      	sub	sp, #20
 800103a:	af00      	add	r7, sp, #0
 800103c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800103e:	2300      	movs	r3, #0
 8001040:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001048:	2b02      	cmp	r3, #2
 800104a:	d008      	beq.n	800105e <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	2204      	movs	r2, #4
 8001050:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	2200      	movs	r2, #0
 8001056:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 800105a:	2301      	movs	r3, #1
 800105c:	e020      	b.n	80010a0 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	681a      	ldr	r2, [r3, #0]
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	f022 020e 	bic.w	r2, r2, #14
 800106c:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	681a      	ldr	r2, [r3, #0]
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	f022 0201 	bic.w	r2, r2, #1
 800107c:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001086:	2101      	movs	r1, #1
 8001088:	fa01 f202 	lsl.w	r2, r1, r2
 800108c:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	2201      	movs	r2, #1
 8001092:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	2200      	movs	r2, #0
 800109a:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 800109e:	7bfb      	ldrb	r3, [r7, #15]
}
 80010a0:	4618      	mov	r0, r3
 80010a2:	3714      	adds	r7, #20
 80010a4:	46bd      	mov	sp, r7
 80010a6:	bc80      	pop	{r7}
 80010a8:	4770      	bx	lr
	...

080010ac <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b084      	sub	sp, #16
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80010b4:	2300      	movs	r3, #0
 80010b6:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80010be:	2b02      	cmp	r3, #2
 80010c0:	d005      	beq.n	80010ce <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	2204      	movs	r2, #4
 80010c6:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80010c8:	2301      	movs	r3, #1
 80010ca:	73fb      	strb	r3, [r7, #15]
 80010cc:	e051      	b.n	8001172 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	681a      	ldr	r2, [r3, #0]
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	f022 020e 	bic.w	r2, r2, #14
 80010dc:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	681a      	ldr	r2, [r3, #0]
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	f022 0201 	bic.w	r2, r2, #1
 80010ec:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	4a22      	ldr	r2, [pc, #136]	; (800117c <HAL_DMA_Abort_IT+0xd0>)
 80010f4:	4293      	cmp	r3, r2
 80010f6:	d029      	beq.n	800114c <HAL_DMA_Abort_IT+0xa0>
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	4a20      	ldr	r2, [pc, #128]	; (8001180 <HAL_DMA_Abort_IT+0xd4>)
 80010fe:	4293      	cmp	r3, r2
 8001100:	d022      	beq.n	8001148 <HAL_DMA_Abort_IT+0x9c>
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	4a1f      	ldr	r2, [pc, #124]	; (8001184 <HAL_DMA_Abort_IT+0xd8>)
 8001108:	4293      	cmp	r3, r2
 800110a:	d01a      	beq.n	8001142 <HAL_DMA_Abort_IT+0x96>
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	4a1d      	ldr	r2, [pc, #116]	; (8001188 <HAL_DMA_Abort_IT+0xdc>)
 8001112:	4293      	cmp	r3, r2
 8001114:	d012      	beq.n	800113c <HAL_DMA_Abort_IT+0x90>
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	4a1c      	ldr	r2, [pc, #112]	; (800118c <HAL_DMA_Abort_IT+0xe0>)
 800111c:	4293      	cmp	r3, r2
 800111e:	d00a      	beq.n	8001136 <HAL_DMA_Abort_IT+0x8a>
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	4a1a      	ldr	r2, [pc, #104]	; (8001190 <HAL_DMA_Abort_IT+0xe4>)
 8001126:	4293      	cmp	r3, r2
 8001128:	d102      	bne.n	8001130 <HAL_DMA_Abort_IT+0x84>
 800112a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800112e:	e00e      	b.n	800114e <HAL_DMA_Abort_IT+0xa2>
 8001130:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001134:	e00b      	b.n	800114e <HAL_DMA_Abort_IT+0xa2>
 8001136:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800113a:	e008      	b.n	800114e <HAL_DMA_Abort_IT+0xa2>
 800113c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001140:	e005      	b.n	800114e <HAL_DMA_Abort_IT+0xa2>
 8001142:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001146:	e002      	b.n	800114e <HAL_DMA_Abort_IT+0xa2>
 8001148:	2310      	movs	r3, #16
 800114a:	e000      	b.n	800114e <HAL_DMA_Abort_IT+0xa2>
 800114c:	2301      	movs	r3, #1
 800114e:	4a11      	ldr	r2, [pc, #68]	; (8001194 <HAL_DMA_Abort_IT+0xe8>)
 8001150:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	2201      	movs	r2, #1
 8001156:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	2200      	movs	r2, #0
 800115e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001166:	2b00      	cmp	r3, #0
 8001168:	d003      	beq.n	8001172 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800116e:	6878      	ldr	r0, [r7, #4]
 8001170:	4798      	blx	r3
    } 
  }
  return status;
 8001172:	7bfb      	ldrb	r3, [r7, #15]
}
 8001174:	4618      	mov	r0, r3
 8001176:	3710      	adds	r7, #16
 8001178:	46bd      	mov	sp, r7
 800117a:	bd80      	pop	{r7, pc}
 800117c:	40020008 	.word	0x40020008
 8001180:	4002001c 	.word	0x4002001c
 8001184:	40020030 	.word	0x40020030
 8001188:	40020044 	.word	0x40020044
 800118c:	40020058 	.word	0x40020058
 8001190:	4002006c 	.word	0x4002006c
 8001194:	40020000 	.word	0x40020000

08001198 <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8001198:	b480      	push	{r7}
 800119a:	b083      	sub	sp, #12
 800119c:	af00      	add	r7, sp, #0
 800119e:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
}
 80011a4:	4618      	mov	r0, r3
 80011a6:	370c      	adds	r7, #12
 80011a8:	46bd      	mov	sp, r7
 80011aa:	bc80      	pop	{r7}
 80011ac:	4770      	bx	lr
	...

080011b0 <HAL_FLASH_Program>:
  * @param  Data:         Specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 80011b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80011b2:	b087      	sub	sp, #28
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	60f8      	str	r0, [r7, #12]
 80011b8:	60b9      	str	r1, [r7, #8]
 80011ba:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 80011be:	2301      	movs	r3, #1
 80011c0:	75fb      	strb	r3, [r7, #23]
  uint8_t index = 0;
 80011c2:	2300      	movs	r3, #0
 80011c4:	75bb      	strb	r3, [r7, #22]
  uint8_t nbiterations = 0;
 80011c6:	2300      	movs	r3, #0
 80011c8:	757b      	strb	r3, [r7, #21]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80011ca:	4b2f      	ldr	r3, [pc, #188]	; (8001288 <HAL_FLASH_Program+0xd8>)
 80011cc:	7e1b      	ldrb	r3, [r3, #24]
 80011ce:	2b01      	cmp	r3, #1
 80011d0:	d101      	bne.n	80011d6 <HAL_FLASH_Program+0x26>
 80011d2:	2302      	movs	r3, #2
 80011d4:	e054      	b.n	8001280 <HAL_FLASH_Program+0xd0>
 80011d6:	4b2c      	ldr	r3, [pc, #176]	; (8001288 <HAL_FLASH_Program+0xd8>)
 80011d8:	2201      	movs	r2, #1
 80011da:	761a      	strb	r2, [r3, #24]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80011dc:	f24c 3050 	movw	r0, #50000	; 0xc350
 80011e0:	f000 f8a8 	bl	8001334 <FLASH_WaitForLastOperation>
 80011e4:	4603      	mov	r3, r0
 80011e6:	75fb      	strb	r3, [r7, #23]
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperationBank2(FLASH_TIMEOUT_VALUE);
  }
#endif /* FLASH_BANK2_END */
  
  if(status == HAL_OK)
 80011e8:	7dfb      	ldrb	r3, [r7, #23]
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d144      	bne.n	8001278 <HAL_FLASH_Program+0xc8>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 80011ee:	68fb      	ldr	r3, [r7, #12]
 80011f0:	2b01      	cmp	r3, #1
 80011f2:	d102      	bne.n	80011fa <HAL_FLASH_Program+0x4a>
    {
      /* Program halfword (16-bit) at a specified address. */
      nbiterations = 1U;
 80011f4:	2301      	movs	r3, #1
 80011f6:	757b      	strb	r3, [r7, #21]
 80011f8:	e007      	b.n	800120a <HAL_FLASH_Program+0x5a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 80011fa:	68fb      	ldr	r3, [r7, #12]
 80011fc:	2b02      	cmp	r3, #2
 80011fe:	d102      	bne.n	8001206 <HAL_FLASH_Program+0x56>
    {
      /* Program word (32-bit = 2*16-bit) at a specified address. */
      nbiterations = 2U;
 8001200:	2302      	movs	r3, #2
 8001202:	757b      	strb	r3, [r7, #21]
 8001204:	e001      	b.n	800120a <HAL_FLASH_Program+0x5a>
    }
    else
    {
      /* Program double word (64-bit = 4*16-bit) at a specified address. */
      nbiterations = 4U;
 8001206:	2304      	movs	r3, #4
 8001208:	757b      	strb	r3, [r7, #21]
    }

    for (index = 0U; index < nbiterations; index++)
 800120a:	2300      	movs	r3, #0
 800120c:	75bb      	strb	r3, [r7, #22]
 800120e:	e02d      	b.n	800126c <HAL_FLASH_Program+0xbc>
    {
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 8001210:	7dbb      	ldrb	r3, [r7, #22]
 8001212:	005a      	lsls	r2, r3, #1
 8001214:	68bb      	ldr	r3, [r7, #8]
 8001216:	eb02 0c03 	add.w	ip, r2, r3
 800121a:	7dbb      	ldrb	r3, [r7, #22]
 800121c:	0119      	lsls	r1, r3, #4
 800121e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001222:	f1c1 0620 	rsb	r6, r1, #32
 8001226:	f1a1 0020 	sub.w	r0, r1, #32
 800122a:	fa22 f401 	lsr.w	r4, r2, r1
 800122e:	fa03 f606 	lsl.w	r6, r3, r6
 8001232:	4334      	orrs	r4, r6
 8001234:	fa23 f000 	lsr.w	r0, r3, r0
 8001238:	4304      	orrs	r4, r0
 800123a:	fa23 f501 	lsr.w	r5, r3, r1
 800123e:	b2a3      	uxth	r3, r4
 8001240:	4619      	mov	r1, r3
 8001242:	4660      	mov	r0, ip
 8001244:	f000 f85a 	bl	80012fc <FLASH_Program_HalfWord>
#if defined(FLASH_BANK2_END)
      if(Address <= FLASH_BANK1_END)
      {
#endif /* FLASH_BANK2_END */
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8001248:	f24c 3050 	movw	r0, #50000	; 0xc350
 800124c:	f000 f872 	bl	8001334 <FLASH_WaitForLastOperation>
 8001250:	4603      	mov	r3, r0
 8001252:	75fb      	strb	r3, [r7, #23]
    
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8001254:	4b0d      	ldr	r3, [pc, #52]	; (800128c <HAL_FLASH_Program+0xdc>)
 8001256:	691b      	ldr	r3, [r3, #16]
 8001258:	4a0c      	ldr	r2, [pc, #48]	; (800128c <HAL_FLASH_Program+0xdc>)
 800125a:	f023 0301 	bic.w	r3, r3, #1
 800125e:	6113      	str	r3, [r2, #16]
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR2, FLASH_CR2_PG);
      }
#endif /* FLASH_BANK2_END */
      /* In case of error, stop programation procedure */
      if (status != HAL_OK)
 8001260:	7dfb      	ldrb	r3, [r7, #23]
 8001262:	2b00      	cmp	r3, #0
 8001264:	d107      	bne.n	8001276 <HAL_FLASH_Program+0xc6>
    for (index = 0U; index < nbiterations; index++)
 8001266:	7dbb      	ldrb	r3, [r7, #22]
 8001268:	3301      	adds	r3, #1
 800126a:	75bb      	strb	r3, [r7, #22]
 800126c:	7dba      	ldrb	r2, [r7, #22]
 800126e:	7d7b      	ldrb	r3, [r7, #21]
 8001270:	429a      	cmp	r2, r3
 8001272:	d3cd      	bcc.n	8001210 <HAL_FLASH_Program+0x60>
 8001274:	e000      	b.n	8001278 <HAL_FLASH_Program+0xc8>
      {
        break;
 8001276:	bf00      	nop
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8001278:	4b03      	ldr	r3, [pc, #12]	; (8001288 <HAL_FLASH_Program+0xd8>)
 800127a:	2200      	movs	r2, #0
 800127c:	761a      	strb	r2, [r3, #24]

  return status;
 800127e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001280:	4618      	mov	r0, r3
 8001282:	371c      	adds	r7, #28
 8001284:	46bd      	mov	sp, r7
 8001286:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001288:	200004f8 	.word	0x200004f8
 800128c:	40022000 	.word	0x40022000

08001290 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8001290:	b480      	push	{r7}
 8001292:	b083      	sub	sp, #12
 8001294:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8001296:	2300      	movs	r3, #0
 8001298:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800129a:	4b0d      	ldr	r3, [pc, #52]	; (80012d0 <HAL_FLASH_Unlock+0x40>)
 800129c:	691b      	ldr	r3, [r3, #16]
 800129e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d00d      	beq.n	80012c2 <HAL_FLASH_Unlock+0x32>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 80012a6:	4b0a      	ldr	r3, [pc, #40]	; (80012d0 <HAL_FLASH_Unlock+0x40>)
 80012a8:	4a0a      	ldr	r2, [pc, #40]	; (80012d4 <HAL_FLASH_Unlock+0x44>)
 80012aa:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 80012ac:	4b08      	ldr	r3, [pc, #32]	; (80012d0 <HAL_FLASH_Unlock+0x40>)
 80012ae:	4a0a      	ldr	r2, [pc, #40]	; (80012d8 <HAL_FLASH_Unlock+0x48>)
 80012b0:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80012b2:	4b07      	ldr	r3, [pc, #28]	; (80012d0 <HAL_FLASH_Unlock+0x40>)
 80012b4:	691b      	ldr	r3, [r3, #16]
 80012b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d001      	beq.n	80012c2 <HAL_FLASH_Unlock+0x32>
    {
      status = HAL_ERROR;
 80012be:	2301      	movs	r3, #1
 80012c0:	71fb      	strb	r3, [r7, #7]
      status = HAL_ERROR;
    }
  }
#endif /* FLASH_BANK2_END */

  return status;
 80012c2:	79fb      	ldrb	r3, [r7, #7]
}
 80012c4:	4618      	mov	r0, r3
 80012c6:	370c      	adds	r7, #12
 80012c8:	46bd      	mov	sp, r7
 80012ca:	bc80      	pop	{r7}
 80012cc:	4770      	bx	lr
 80012ce:	bf00      	nop
 80012d0:	40022000 	.word	0x40022000
 80012d4:	45670123 	.word	0x45670123
 80012d8:	cdef89ab 	.word	0xcdef89ab

080012dc <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 80012dc:	b480      	push	{r7}
 80012de:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 80012e0:	4b05      	ldr	r3, [pc, #20]	; (80012f8 <HAL_FLASH_Lock+0x1c>)
 80012e2:	691b      	ldr	r3, [r3, #16]
 80012e4:	4a04      	ldr	r2, [pc, #16]	; (80012f8 <HAL_FLASH_Lock+0x1c>)
 80012e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80012ea:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  /* Set the LOCK Bit to lock the FLASH BANK2 Registers access */
  SET_BIT(FLASH->CR2, FLASH_CR2_LOCK);

#endif /* FLASH_BANK2_END */
  return HAL_OK;  
 80012ec:	2300      	movs	r3, #0
}
 80012ee:	4618      	mov	r0, r3
 80012f0:	46bd      	mov	sp, r7
 80012f2:	bc80      	pop	{r7}
 80012f4:	4770      	bx	lr
 80012f6:	bf00      	nop
 80012f8:	40022000 	.word	0x40022000

080012fc <FLASH_Program_HalfWord>:
  * @param  Address specify the address to be programmed.
  * @param  Data    specify the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 80012fc:	b480      	push	{r7}
 80012fe:	b083      	sub	sp, #12
 8001300:	af00      	add	r7, sp, #0
 8001302:	6078      	str	r0, [r7, #4]
 8001304:	460b      	mov	r3, r1
 8001306:	807b      	strh	r3, [r7, #2]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001308:	4b08      	ldr	r3, [pc, #32]	; (800132c <FLASH_Program_HalfWord+0x30>)
 800130a:	2200      	movs	r2, #0
 800130c:	61da      	str	r2, [r3, #28]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 800130e:	4b08      	ldr	r3, [pc, #32]	; (8001330 <FLASH_Program_HalfWord+0x34>)
 8001310:	691b      	ldr	r3, [r3, #16]
 8001312:	4a07      	ldr	r2, [pc, #28]	; (8001330 <FLASH_Program_HalfWord+0x34>)
 8001314:	f043 0301 	orr.w	r3, r3, #1
 8001318:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR2, FLASH_CR2_PG);
  }
#endif /* FLASH_BANK2_END */

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	887a      	ldrh	r2, [r7, #2]
 800131e:	801a      	strh	r2, [r3, #0]
}
 8001320:	bf00      	nop
 8001322:	370c      	adds	r7, #12
 8001324:	46bd      	mov	sp, r7
 8001326:	bc80      	pop	{r7}
 8001328:	4770      	bx	lr
 800132a:	bf00      	nop
 800132c:	200004f8 	.word	0x200004f8
 8001330:	40022000 	.word	0x40022000

08001334 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	b084      	sub	sp, #16
 8001338:	af00      	add	r7, sp, #0
 800133a:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 800133c:	f7ff fd40 	bl	8000dc0 <HAL_GetTick>
 8001340:	60f8      	str	r0, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8001342:	e010      	b.n	8001366 <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	f1b3 3fff 	cmp.w	r3, #4294967295
 800134a:	d00c      	beq.n	8001366 <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	2b00      	cmp	r3, #0
 8001350:	d007      	beq.n	8001362 <FLASH_WaitForLastOperation+0x2e>
 8001352:	f7ff fd35 	bl	8000dc0 <HAL_GetTick>
 8001356:	4602      	mov	r2, r0
 8001358:	68fb      	ldr	r3, [r7, #12]
 800135a:	1ad3      	subs	r3, r2, r3
 800135c:	687a      	ldr	r2, [r7, #4]
 800135e:	429a      	cmp	r2, r3
 8001360:	d201      	bcs.n	8001366 <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 8001362:	2303      	movs	r3, #3
 8001364:	e025      	b.n	80013b2 <FLASH_WaitForLastOperation+0x7e>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8001366:	4b15      	ldr	r3, [pc, #84]	; (80013bc <FLASH_WaitForLastOperation+0x88>)
 8001368:	68db      	ldr	r3, [r3, #12]
 800136a:	f003 0301 	and.w	r3, r3, #1
 800136e:	2b00      	cmp	r3, #0
 8001370:	d1e8      	bne.n	8001344 <FLASH_WaitForLastOperation+0x10>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8001372:	4b12      	ldr	r3, [pc, #72]	; (80013bc <FLASH_WaitForLastOperation+0x88>)
 8001374:	68db      	ldr	r3, [r3, #12]
 8001376:	f003 0320 	and.w	r3, r3, #32
 800137a:	2b00      	cmp	r3, #0
 800137c:	d002      	beq.n	8001384 <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800137e:	4b0f      	ldr	r3, [pc, #60]	; (80013bc <FLASH_WaitForLastOperation+0x88>)
 8001380:	2220      	movs	r2, #32
 8001382:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8001384:	4b0d      	ldr	r3, [pc, #52]	; (80013bc <FLASH_WaitForLastOperation+0x88>)
 8001386:	68db      	ldr	r3, [r3, #12]
 8001388:	f003 0310 	and.w	r3, r3, #16
 800138c:	2b00      	cmp	r3, #0
 800138e:	d10b      	bne.n	80013a8 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8001390:	4b0a      	ldr	r3, [pc, #40]	; (80013bc <FLASH_WaitForLastOperation+0x88>)
 8001392:	69db      	ldr	r3, [r3, #28]
 8001394:	f003 0301 	and.w	r3, r3, #1
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8001398:	2b00      	cmp	r3, #0
 800139a:	d105      	bne.n	80013a8 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 800139c:	4b07      	ldr	r3, [pc, #28]	; (80013bc <FLASH_WaitForLastOperation+0x88>)
 800139e:	68db      	ldr	r3, [r3, #12]
 80013a0:	f003 0304 	and.w	r3, r3, #4
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d003      	beq.n	80013b0 <FLASH_WaitForLastOperation+0x7c>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 80013a8:	f000 f80a 	bl	80013c0 <FLASH_SetErrorCode>
    return HAL_ERROR;
 80013ac:	2301      	movs	r3, #1
 80013ae:	e000      	b.n	80013b2 <FLASH_WaitForLastOperation+0x7e>
  }

  /* There is no error flag set */
  return HAL_OK;
 80013b0:	2300      	movs	r3, #0
}
 80013b2:	4618      	mov	r0, r3
 80013b4:	3710      	adds	r7, #16
 80013b6:	46bd      	mov	sp, r7
 80013b8:	bd80      	pop	{r7, pc}
 80013ba:	bf00      	nop
 80013bc:	40022000 	.word	0x40022000

080013c0 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 80013c0:	b480      	push	{r7}
 80013c2:	b083      	sub	sp, #12
 80013c4:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 80013c6:	2300      	movs	r3, #0
 80013c8:	607b      	str	r3, [r7, #4]
  
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 80013ca:	4b23      	ldr	r3, [pc, #140]	; (8001458 <FLASH_SetErrorCode+0x98>)
 80013cc:	68db      	ldr	r3, [r3, #12]
 80013ce:	f003 0310 	and.w	r3, r3, #16
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d009      	beq.n	80013ea <FLASH_SetErrorCode+0x2a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 80013d6:	4b21      	ldr	r3, [pc, #132]	; (800145c <FLASH_SetErrorCode+0x9c>)
 80013d8:	69db      	ldr	r3, [r3, #28]
 80013da:	f043 0302 	orr.w	r3, r3, #2
 80013de:	4a1f      	ldr	r2, [pc, #124]	; (800145c <FLASH_SetErrorCode+0x9c>)
 80013e0:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_WRPERR | FLASH_FLAG_WRPERR_BANK2;
#else
    flags |= FLASH_FLAG_WRPERR;
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	f043 0310 	orr.w	r3, r3, #16
 80013e8:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 80013ea:	4b1b      	ldr	r3, [pc, #108]	; (8001458 <FLASH_SetErrorCode+0x98>)
 80013ec:	68db      	ldr	r3, [r3, #12]
 80013ee:	f003 0304 	and.w	r3, r3, #4
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d009      	beq.n	800140a <FLASH_SetErrorCode+0x4a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 80013f6:	4b19      	ldr	r3, [pc, #100]	; (800145c <FLASH_SetErrorCode+0x9c>)
 80013f8:	69db      	ldr	r3, [r3, #28]
 80013fa:	f043 0301 	orr.w	r3, r3, #1
 80013fe:	4a17      	ldr	r2, [pc, #92]	; (800145c <FLASH_SetErrorCode+0x9c>)
 8001400:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_PGERR | FLASH_FLAG_PGERR_BANK2;
#else
    flags |= FLASH_FLAG_PGERR;
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	f043 0304 	orr.w	r3, r3, #4
 8001408:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 800140a:	4b13      	ldr	r3, [pc, #76]	; (8001458 <FLASH_SetErrorCode+0x98>)
 800140c:	69db      	ldr	r3, [r3, #28]
 800140e:	f003 0301 	and.w	r3, r3, #1
 8001412:	2b00      	cmp	r3, #0
 8001414:	d00b      	beq.n	800142e <FLASH_SetErrorCode+0x6e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 8001416:	4b11      	ldr	r3, [pc, #68]	; (800145c <FLASH_SetErrorCode+0x9c>)
 8001418:	69db      	ldr	r3, [r3, #28]
 800141a:	f043 0304 	orr.w	r3, r3, #4
 800141e:	4a0f      	ldr	r2, [pc, #60]	; (800145c <FLASH_SetErrorCode+0x9c>)
 8001420:	61d3      	str	r3, [r2, #28]
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8001422:	4b0d      	ldr	r3, [pc, #52]	; (8001458 <FLASH_SetErrorCode+0x98>)
 8001424:	69db      	ldr	r3, [r3, #28]
 8001426:	4a0c      	ldr	r2, [pc, #48]	; (8001458 <FLASH_SetErrorCode+0x98>)
 8001428:	f023 0301 	bic.w	r3, r3, #1
 800142c:	61d3      	str	r3, [r2, #28]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	f240 1201 	movw	r2, #257	; 0x101
 8001434:	4293      	cmp	r3, r2
 8001436:	d106      	bne.n	8001446 <FLASH_SetErrorCode+0x86>
 8001438:	4b07      	ldr	r3, [pc, #28]	; (8001458 <FLASH_SetErrorCode+0x98>)
 800143a:	69db      	ldr	r3, [r3, #28]
 800143c:	4a06      	ldr	r2, [pc, #24]	; (8001458 <FLASH_SetErrorCode+0x98>)
 800143e:	f023 0301 	bic.w	r3, r3, #1
 8001442:	61d3      	str	r3, [r2, #28]
}  
 8001444:	e002      	b.n	800144c <FLASH_SetErrorCode+0x8c>
  __HAL_FLASH_CLEAR_FLAG(flags);
 8001446:	4a04      	ldr	r2, [pc, #16]	; (8001458 <FLASH_SetErrorCode+0x98>)
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	60d3      	str	r3, [r2, #12]
}  
 800144c:	bf00      	nop
 800144e:	370c      	adds	r7, #12
 8001450:	46bd      	mov	sp, r7
 8001452:	bc80      	pop	{r7}
 8001454:	4770      	bx	lr
 8001456:	bf00      	nop
 8001458:	40022000 	.word	0x40022000
 800145c:	200004f8 	.word	0x200004f8

08001460 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the pages have been correctly erased)
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	b084      	sub	sp, #16
 8001464:	af00      	add	r7, sp, #0
 8001466:	6078      	str	r0, [r7, #4]
 8001468:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 800146a:	2301      	movs	r3, #1
 800146c:	73fb      	strb	r3, [r7, #15]
  uint32_t address = 0U;
 800146e:	2300      	movs	r3, #0
 8001470:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8001472:	4b2f      	ldr	r3, [pc, #188]	; (8001530 <HAL_FLASHEx_Erase+0xd0>)
 8001474:	7e1b      	ldrb	r3, [r3, #24]
 8001476:	2b01      	cmp	r3, #1
 8001478:	d101      	bne.n	800147e <HAL_FLASHEx_Erase+0x1e>
 800147a:	2302      	movs	r3, #2
 800147c:	e053      	b.n	8001526 <HAL_FLASHEx_Erase+0xc6>
 800147e:	4b2c      	ldr	r3, [pc, #176]	; (8001530 <HAL_FLASHEx_Erase+0xd0>)
 8001480:	2201      	movs	r2, #1
 8001482:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	2b02      	cmp	r3, #2
 800148a:	d116      	bne.n	80014ba <HAL_FLASHEx_Erase+0x5a>
    else 
#endif /* FLASH_BANK2_END */
    {
      /* Mass Erase requested for Bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 800148c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001490:	f7ff ff50 	bl	8001334 <FLASH_WaitForLastOperation>
 8001494:	4603      	mov	r3, r0
 8001496:	2b00      	cmp	r3, #0
 8001498:	d141      	bne.n	800151e <HAL_FLASHEx_Erase+0xbe>
      {
        /*Mass erase to be done*/
        FLASH_MassErase(FLASH_BANK_1);
 800149a:	2001      	movs	r0, #1
 800149c:	f000 f84c 	bl	8001538 <FLASH_MassErase>
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80014a0:	f24c 3050 	movw	r0, #50000	; 0xc350
 80014a4:	f7ff ff46 	bl	8001334 <FLASH_WaitForLastOperation>
 80014a8:	4603      	mov	r3, r0
 80014aa:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the MER Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 80014ac:	4b21      	ldr	r3, [pc, #132]	; (8001534 <HAL_FLASHEx_Erase+0xd4>)
 80014ae:	691b      	ldr	r3, [r3, #16]
 80014b0:	4a20      	ldr	r2, [pc, #128]	; (8001534 <HAL_FLASHEx_Erase+0xd4>)
 80014b2:	f023 0304 	bic.w	r3, r3, #4
 80014b6:	6113      	str	r3, [r2, #16]
 80014b8:	e031      	b.n	800151e <HAL_FLASHEx_Erase+0xbe>
    else
#endif /* FLASH_BANK2_END */
   {
      /* Page Erase requested on address located on bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 80014ba:	f24c 3050 	movw	r0, #50000	; 0xc350
 80014be:	f7ff ff39 	bl	8001334 <FLASH_WaitForLastOperation>
 80014c2:	4603      	mov	r3, r0
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d12a      	bne.n	800151e <HAL_FLASHEx_Erase+0xbe>
      {
        /*Initialization of PageError variable*/
        *PageError = 0xFFFFFFFFU;
 80014c8:	683b      	ldr	r3, [r7, #0]
 80014ca:	f04f 32ff 	mov.w	r2, #4294967295
 80014ce:	601a      	str	r2, [r3, #0]
        
        /* Erase page by page to be done*/
        for(address = pEraseInit->PageAddress;
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	689b      	ldr	r3, [r3, #8]
 80014d4:	60bb      	str	r3, [r7, #8]
 80014d6:	e019      	b.n	800150c <HAL_FLASHEx_Erase+0xac>
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
            address += FLASH_PAGE_SIZE)
        {
          FLASH_PageErase(address);
 80014d8:	68b8      	ldr	r0, [r7, #8]
 80014da:	f000 f849 	bl	8001570 <FLASH_PageErase>
          
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80014de:	f24c 3050 	movw	r0, #50000	; 0xc350
 80014e2:	f7ff ff27 	bl	8001334 <FLASH_WaitForLastOperation>
 80014e6:	4603      	mov	r3, r0
 80014e8:	73fb      	strb	r3, [r7, #15]
          
          /* If the erase operation is completed, disable the PER Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 80014ea:	4b12      	ldr	r3, [pc, #72]	; (8001534 <HAL_FLASHEx_Erase+0xd4>)
 80014ec:	691b      	ldr	r3, [r3, #16]
 80014ee:	4a11      	ldr	r2, [pc, #68]	; (8001534 <HAL_FLASHEx_Erase+0xd4>)
 80014f0:	f023 0302 	bic.w	r3, r3, #2
 80014f4:	6113      	str	r3, [r2, #16]
          
          if (status != HAL_OK)
 80014f6:	7bfb      	ldrb	r3, [r7, #15]
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d003      	beq.n	8001504 <HAL_FLASHEx_Erase+0xa4>
          {
            /* In case of error, stop erase procedure and return the faulty address */
            *PageError = address;
 80014fc:	683b      	ldr	r3, [r7, #0]
 80014fe:	68ba      	ldr	r2, [r7, #8]
 8001500:	601a      	str	r2, [r3, #0]
            break;
 8001502:	e00c      	b.n	800151e <HAL_FLASHEx_Erase+0xbe>
            address += FLASH_PAGE_SIZE)
 8001504:	68bb      	ldr	r3, [r7, #8]
 8001506:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800150a:	60bb      	str	r3, [r7, #8]
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	68db      	ldr	r3, [r3, #12]
 8001510:	029a      	lsls	r2, r3, #10
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	689b      	ldr	r3, [r3, #8]
 8001516:	4413      	add	r3, r2
        for(address = pEraseInit->PageAddress;
 8001518:	68ba      	ldr	r2, [r7, #8]
 800151a:	429a      	cmp	r2, r3
 800151c:	d3dc      	bcc.n	80014d8 <HAL_FLASHEx_Erase+0x78>
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800151e:	4b04      	ldr	r3, [pc, #16]	; (8001530 <HAL_FLASHEx_Erase+0xd0>)
 8001520:	2200      	movs	r2, #0
 8001522:	761a      	strb	r2, [r3, #24]

  return status;
 8001524:	7bfb      	ldrb	r3, [r7, #15]
}
 8001526:	4618      	mov	r0, r3
 8001528:	3710      	adds	r7, #16
 800152a:	46bd      	mov	sp, r7
 800152c:	bd80      	pop	{r7, pc}
 800152e:	bf00      	nop
 8001530:	200004f8 	.word	0x200004f8
 8001534:	40022000 	.word	0x40022000

08001538 <FLASH_MassErase>:
  @endif
  *
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 8001538:	b480      	push	{r7}
 800153a:	b083      	sub	sp, #12
 800153c:	af00      	add	r7, sp, #0
 800153e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));

  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001540:	4b09      	ldr	r3, [pc, #36]	; (8001568 <FLASH_MassErase+0x30>)
 8001542:	2200      	movs	r2, #0
 8001544:	61da      	str	r2, [r3, #28]
#if !defined(FLASH_BANK2_END)
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif /* FLASH_BANK2_END */  
    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 8001546:	4b09      	ldr	r3, [pc, #36]	; (800156c <FLASH_MassErase+0x34>)
 8001548:	691b      	ldr	r3, [r3, #16]
 800154a:	4a08      	ldr	r2, [pc, #32]	; (800156c <FLASH_MassErase+0x34>)
 800154c:	f043 0304 	orr.w	r3, r3, #4
 8001550:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8001552:	4b06      	ldr	r3, [pc, #24]	; (800156c <FLASH_MassErase+0x34>)
 8001554:	691b      	ldr	r3, [r3, #16]
 8001556:	4a05      	ldr	r2, [pc, #20]	; (800156c <FLASH_MassErase+0x34>)
 8001558:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800155c:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 800155e:	bf00      	nop
 8001560:	370c      	adds	r7, #12
 8001562:	46bd      	mov	sp, r7
 8001564:	bc80      	pop	{r7}
 8001566:	4770      	bx	lr
 8001568:	200004f8 	.word	0x200004f8
 800156c:	40022000 	.word	0x40022000

08001570 <FLASH_PageErase>:
  *         The value of this parameter depend on device used within the same series      
  * 
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 8001570:	b480      	push	{r7}
 8001572:	b083      	sub	sp, #12
 8001574:	af00      	add	r7, sp, #0
 8001576:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001578:	4b0b      	ldr	r3, [pc, #44]	; (80015a8 <FLASH_PageErase+0x38>)
 800157a:	2200      	movs	r2, #0
 800157c:	61da      	str	r2, [r3, #28]
  }
  else
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 800157e:	4b0b      	ldr	r3, [pc, #44]	; (80015ac <FLASH_PageErase+0x3c>)
 8001580:	691b      	ldr	r3, [r3, #16]
 8001582:	4a0a      	ldr	r2, [pc, #40]	; (80015ac <FLASH_PageErase+0x3c>)
 8001584:	f043 0302 	orr.w	r3, r3, #2
 8001588:	6113      	str	r3, [r2, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 800158a:	4a08      	ldr	r2, [pc, #32]	; (80015ac <FLASH_PageErase+0x3c>)
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8001590:	4b06      	ldr	r3, [pc, #24]	; (80015ac <FLASH_PageErase+0x3c>)
 8001592:	691b      	ldr	r3, [r3, #16]
 8001594:	4a05      	ldr	r2, [pc, #20]	; (80015ac <FLASH_PageErase+0x3c>)
 8001596:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800159a:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 800159c:	bf00      	nop
 800159e:	370c      	adds	r7, #12
 80015a0:	46bd      	mov	sp, r7
 80015a2:	bc80      	pop	{r7}
 80015a4:	4770      	bx	lr
 80015a6:	bf00      	nop
 80015a8:	200004f8 	.word	0x200004f8
 80015ac:	40022000 	.word	0x40022000

080015b0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80015b0:	b480      	push	{r7}
 80015b2:	b08b      	sub	sp, #44	; 0x2c
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	6078      	str	r0, [r7, #4]
 80015b8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80015ba:	2300      	movs	r3, #0
 80015bc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80015be:	2300      	movs	r3, #0
 80015c0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80015c2:	e169      	b.n	8001898 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80015c4:	2201      	movs	r2, #1
 80015c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015c8:	fa02 f303 	lsl.w	r3, r2, r3
 80015cc:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80015ce:	683b      	ldr	r3, [r7, #0]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	69fa      	ldr	r2, [r7, #28]
 80015d4:	4013      	ands	r3, r2
 80015d6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80015d8:	69ba      	ldr	r2, [r7, #24]
 80015da:	69fb      	ldr	r3, [r7, #28]
 80015dc:	429a      	cmp	r2, r3
 80015de:	f040 8158 	bne.w	8001892 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80015e2:	683b      	ldr	r3, [r7, #0]
 80015e4:	685b      	ldr	r3, [r3, #4]
 80015e6:	4a9a      	ldr	r2, [pc, #616]	; (8001850 <HAL_GPIO_Init+0x2a0>)
 80015e8:	4293      	cmp	r3, r2
 80015ea:	d05e      	beq.n	80016aa <HAL_GPIO_Init+0xfa>
 80015ec:	4a98      	ldr	r2, [pc, #608]	; (8001850 <HAL_GPIO_Init+0x2a0>)
 80015ee:	4293      	cmp	r3, r2
 80015f0:	d875      	bhi.n	80016de <HAL_GPIO_Init+0x12e>
 80015f2:	4a98      	ldr	r2, [pc, #608]	; (8001854 <HAL_GPIO_Init+0x2a4>)
 80015f4:	4293      	cmp	r3, r2
 80015f6:	d058      	beq.n	80016aa <HAL_GPIO_Init+0xfa>
 80015f8:	4a96      	ldr	r2, [pc, #600]	; (8001854 <HAL_GPIO_Init+0x2a4>)
 80015fa:	4293      	cmp	r3, r2
 80015fc:	d86f      	bhi.n	80016de <HAL_GPIO_Init+0x12e>
 80015fe:	4a96      	ldr	r2, [pc, #600]	; (8001858 <HAL_GPIO_Init+0x2a8>)
 8001600:	4293      	cmp	r3, r2
 8001602:	d052      	beq.n	80016aa <HAL_GPIO_Init+0xfa>
 8001604:	4a94      	ldr	r2, [pc, #592]	; (8001858 <HAL_GPIO_Init+0x2a8>)
 8001606:	4293      	cmp	r3, r2
 8001608:	d869      	bhi.n	80016de <HAL_GPIO_Init+0x12e>
 800160a:	4a94      	ldr	r2, [pc, #592]	; (800185c <HAL_GPIO_Init+0x2ac>)
 800160c:	4293      	cmp	r3, r2
 800160e:	d04c      	beq.n	80016aa <HAL_GPIO_Init+0xfa>
 8001610:	4a92      	ldr	r2, [pc, #584]	; (800185c <HAL_GPIO_Init+0x2ac>)
 8001612:	4293      	cmp	r3, r2
 8001614:	d863      	bhi.n	80016de <HAL_GPIO_Init+0x12e>
 8001616:	4a92      	ldr	r2, [pc, #584]	; (8001860 <HAL_GPIO_Init+0x2b0>)
 8001618:	4293      	cmp	r3, r2
 800161a:	d046      	beq.n	80016aa <HAL_GPIO_Init+0xfa>
 800161c:	4a90      	ldr	r2, [pc, #576]	; (8001860 <HAL_GPIO_Init+0x2b0>)
 800161e:	4293      	cmp	r3, r2
 8001620:	d85d      	bhi.n	80016de <HAL_GPIO_Init+0x12e>
 8001622:	2b12      	cmp	r3, #18
 8001624:	d82a      	bhi.n	800167c <HAL_GPIO_Init+0xcc>
 8001626:	2b12      	cmp	r3, #18
 8001628:	d859      	bhi.n	80016de <HAL_GPIO_Init+0x12e>
 800162a:	a201      	add	r2, pc, #4	; (adr r2, 8001630 <HAL_GPIO_Init+0x80>)
 800162c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001630:	080016ab 	.word	0x080016ab
 8001634:	08001685 	.word	0x08001685
 8001638:	08001697 	.word	0x08001697
 800163c:	080016d9 	.word	0x080016d9
 8001640:	080016df 	.word	0x080016df
 8001644:	080016df 	.word	0x080016df
 8001648:	080016df 	.word	0x080016df
 800164c:	080016df 	.word	0x080016df
 8001650:	080016df 	.word	0x080016df
 8001654:	080016df 	.word	0x080016df
 8001658:	080016df 	.word	0x080016df
 800165c:	080016df 	.word	0x080016df
 8001660:	080016df 	.word	0x080016df
 8001664:	080016df 	.word	0x080016df
 8001668:	080016df 	.word	0x080016df
 800166c:	080016df 	.word	0x080016df
 8001670:	080016df 	.word	0x080016df
 8001674:	0800168d 	.word	0x0800168d
 8001678:	080016a1 	.word	0x080016a1
 800167c:	4a79      	ldr	r2, [pc, #484]	; (8001864 <HAL_GPIO_Init+0x2b4>)
 800167e:	4293      	cmp	r3, r2
 8001680:	d013      	beq.n	80016aa <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001682:	e02c      	b.n	80016de <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001684:	683b      	ldr	r3, [r7, #0]
 8001686:	68db      	ldr	r3, [r3, #12]
 8001688:	623b      	str	r3, [r7, #32]
          break;
 800168a:	e029      	b.n	80016e0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800168c:	683b      	ldr	r3, [r7, #0]
 800168e:	68db      	ldr	r3, [r3, #12]
 8001690:	3304      	adds	r3, #4
 8001692:	623b      	str	r3, [r7, #32]
          break;
 8001694:	e024      	b.n	80016e0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001696:	683b      	ldr	r3, [r7, #0]
 8001698:	68db      	ldr	r3, [r3, #12]
 800169a:	3308      	adds	r3, #8
 800169c:	623b      	str	r3, [r7, #32]
          break;
 800169e:	e01f      	b.n	80016e0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80016a0:	683b      	ldr	r3, [r7, #0]
 80016a2:	68db      	ldr	r3, [r3, #12]
 80016a4:	330c      	adds	r3, #12
 80016a6:	623b      	str	r3, [r7, #32]
          break;
 80016a8:	e01a      	b.n	80016e0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80016aa:	683b      	ldr	r3, [r7, #0]
 80016ac:	689b      	ldr	r3, [r3, #8]
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d102      	bne.n	80016b8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80016b2:	2304      	movs	r3, #4
 80016b4:	623b      	str	r3, [r7, #32]
          break;
 80016b6:	e013      	b.n	80016e0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80016b8:	683b      	ldr	r3, [r7, #0]
 80016ba:	689b      	ldr	r3, [r3, #8]
 80016bc:	2b01      	cmp	r3, #1
 80016be:	d105      	bne.n	80016cc <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80016c0:	2308      	movs	r3, #8
 80016c2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	69fa      	ldr	r2, [r7, #28]
 80016c8:	611a      	str	r2, [r3, #16]
          break;
 80016ca:	e009      	b.n	80016e0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80016cc:	2308      	movs	r3, #8
 80016ce:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	69fa      	ldr	r2, [r7, #28]
 80016d4:	615a      	str	r2, [r3, #20]
          break;
 80016d6:	e003      	b.n	80016e0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80016d8:	2300      	movs	r3, #0
 80016da:	623b      	str	r3, [r7, #32]
          break;
 80016dc:	e000      	b.n	80016e0 <HAL_GPIO_Init+0x130>
          break;
 80016de:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80016e0:	69bb      	ldr	r3, [r7, #24]
 80016e2:	2bff      	cmp	r3, #255	; 0xff
 80016e4:	d801      	bhi.n	80016ea <HAL_GPIO_Init+0x13a>
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	e001      	b.n	80016ee <HAL_GPIO_Init+0x13e>
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	3304      	adds	r3, #4
 80016ee:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80016f0:	69bb      	ldr	r3, [r7, #24]
 80016f2:	2bff      	cmp	r3, #255	; 0xff
 80016f4:	d802      	bhi.n	80016fc <HAL_GPIO_Init+0x14c>
 80016f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016f8:	009b      	lsls	r3, r3, #2
 80016fa:	e002      	b.n	8001702 <HAL_GPIO_Init+0x152>
 80016fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016fe:	3b08      	subs	r3, #8
 8001700:	009b      	lsls	r3, r3, #2
 8001702:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001704:	697b      	ldr	r3, [r7, #20]
 8001706:	681a      	ldr	r2, [r3, #0]
 8001708:	210f      	movs	r1, #15
 800170a:	693b      	ldr	r3, [r7, #16]
 800170c:	fa01 f303 	lsl.w	r3, r1, r3
 8001710:	43db      	mvns	r3, r3
 8001712:	401a      	ands	r2, r3
 8001714:	6a39      	ldr	r1, [r7, #32]
 8001716:	693b      	ldr	r3, [r7, #16]
 8001718:	fa01 f303 	lsl.w	r3, r1, r3
 800171c:	431a      	orrs	r2, r3
 800171e:	697b      	ldr	r3, [r7, #20]
 8001720:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001722:	683b      	ldr	r3, [r7, #0]
 8001724:	685b      	ldr	r3, [r3, #4]
 8001726:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800172a:	2b00      	cmp	r3, #0
 800172c:	f000 80b1 	beq.w	8001892 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001730:	4b4d      	ldr	r3, [pc, #308]	; (8001868 <HAL_GPIO_Init+0x2b8>)
 8001732:	699b      	ldr	r3, [r3, #24]
 8001734:	4a4c      	ldr	r2, [pc, #304]	; (8001868 <HAL_GPIO_Init+0x2b8>)
 8001736:	f043 0301 	orr.w	r3, r3, #1
 800173a:	6193      	str	r3, [r2, #24]
 800173c:	4b4a      	ldr	r3, [pc, #296]	; (8001868 <HAL_GPIO_Init+0x2b8>)
 800173e:	699b      	ldr	r3, [r3, #24]
 8001740:	f003 0301 	and.w	r3, r3, #1
 8001744:	60bb      	str	r3, [r7, #8]
 8001746:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001748:	4a48      	ldr	r2, [pc, #288]	; (800186c <HAL_GPIO_Init+0x2bc>)
 800174a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800174c:	089b      	lsrs	r3, r3, #2
 800174e:	3302      	adds	r3, #2
 8001750:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001754:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001756:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001758:	f003 0303 	and.w	r3, r3, #3
 800175c:	009b      	lsls	r3, r3, #2
 800175e:	220f      	movs	r2, #15
 8001760:	fa02 f303 	lsl.w	r3, r2, r3
 8001764:	43db      	mvns	r3, r3
 8001766:	68fa      	ldr	r2, [r7, #12]
 8001768:	4013      	ands	r3, r2
 800176a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	4a40      	ldr	r2, [pc, #256]	; (8001870 <HAL_GPIO_Init+0x2c0>)
 8001770:	4293      	cmp	r3, r2
 8001772:	d013      	beq.n	800179c <HAL_GPIO_Init+0x1ec>
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	4a3f      	ldr	r2, [pc, #252]	; (8001874 <HAL_GPIO_Init+0x2c4>)
 8001778:	4293      	cmp	r3, r2
 800177a:	d00d      	beq.n	8001798 <HAL_GPIO_Init+0x1e8>
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	4a3e      	ldr	r2, [pc, #248]	; (8001878 <HAL_GPIO_Init+0x2c8>)
 8001780:	4293      	cmp	r3, r2
 8001782:	d007      	beq.n	8001794 <HAL_GPIO_Init+0x1e4>
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	4a3d      	ldr	r2, [pc, #244]	; (800187c <HAL_GPIO_Init+0x2cc>)
 8001788:	4293      	cmp	r3, r2
 800178a:	d101      	bne.n	8001790 <HAL_GPIO_Init+0x1e0>
 800178c:	2303      	movs	r3, #3
 800178e:	e006      	b.n	800179e <HAL_GPIO_Init+0x1ee>
 8001790:	2304      	movs	r3, #4
 8001792:	e004      	b.n	800179e <HAL_GPIO_Init+0x1ee>
 8001794:	2302      	movs	r3, #2
 8001796:	e002      	b.n	800179e <HAL_GPIO_Init+0x1ee>
 8001798:	2301      	movs	r3, #1
 800179a:	e000      	b.n	800179e <HAL_GPIO_Init+0x1ee>
 800179c:	2300      	movs	r3, #0
 800179e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80017a0:	f002 0203 	and.w	r2, r2, #3
 80017a4:	0092      	lsls	r2, r2, #2
 80017a6:	4093      	lsls	r3, r2
 80017a8:	68fa      	ldr	r2, [r7, #12]
 80017aa:	4313      	orrs	r3, r2
 80017ac:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80017ae:	492f      	ldr	r1, [pc, #188]	; (800186c <HAL_GPIO_Init+0x2bc>)
 80017b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017b2:	089b      	lsrs	r3, r3, #2
 80017b4:	3302      	adds	r3, #2
 80017b6:	68fa      	ldr	r2, [r7, #12]
 80017b8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80017bc:	683b      	ldr	r3, [r7, #0]
 80017be:	685b      	ldr	r3, [r3, #4]
 80017c0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d006      	beq.n	80017d6 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80017c8:	4b2d      	ldr	r3, [pc, #180]	; (8001880 <HAL_GPIO_Init+0x2d0>)
 80017ca:	681a      	ldr	r2, [r3, #0]
 80017cc:	492c      	ldr	r1, [pc, #176]	; (8001880 <HAL_GPIO_Init+0x2d0>)
 80017ce:	69bb      	ldr	r3, [r7, #24]
 80017d0:	4313      	orrs	r3, r2
 80017d2:	600b      	str	r3, [r1, #0]
 80017d4:	e006      	b.n	80017e4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80017d6:	4b2a      	ldr	r3, [pc, #168]	; (8001880 <HAL_GPIO_Init+0x2d0>)
 80017d8:	681a      	ldr	r2, [r3, #0]
 80017da:	69bb      	ldr	r3, [r7, #24]
 80017dc:	43db      	mvns	r3, r3
 80017de:	4928      	ldr	r1, [pc, #160]	; (8001880 <HAL_GPIO_Init+0x2d0>)
 80017e0:	4013      	ands	r3, r2
 80017e2:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80017e4:	683b      	ldr	r3, [r7, #0]
 80017e6:	685b      	ldr	r3, [r3, #4]
 80017e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d006      	beq.n	80017fe <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80017f0:	4b23      	ldr	r3, [pc, #140]	; (8001880 <HAL_GPIO_Init+0x2d0>)
 80017f2:	685a      	ldr	r2, [r3, #4]
 80017f4:	4922      	ldr	r1, [pc, #136]	; (8001880 <HAL_GPIO_Init+0x2d0>)
 80017f6:	69bb      	ldr	r3, [r7, #24]
 80017f8:	4313      	orrs	r3, r2
 80017fa:	604b      	str	r3, [r1, #4]
 80017fc:	e006      	b.n	800180c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80017fe:	4b20      	ldr	r3, [pc, #128]	; (8001880 <HAL_GPIO_Init+0x2d0>)
 8001800:	685a      	ldr	r2, [r3, #4]
 8001802:	69bb      	ldr	r3, [r7, #24]
 8001804:	43db      	mvns	r3, r3
 8001806:	491e      	ldr	r1, [pc, #120]	; (8001880 <HAL_GPIO_Init+0x2d0>)
 8001808:	4013      	ands	r3, r2
 800180a:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800180c:	683b      	ldr	r3, [r7, #0]
 800180e:	685b      	ldr	r3, [r3, #4]
 8001810:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001814:	2b00      	cmp	r3, #0
 8001816:	d006      	beq.n	8001826 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001818:	4b19      	ldr	r3, [pc, #100]	; (8001880 <HAL_GPIO_Init+0x2d0>)
 800181a:	689a      	ldr	r2, [r3, #8]
 800181c:	4918      	ldr	r1, [pc, #96]	; (8001880 <HAL_GPIO_Init+0x2d0>)
 800181e:	69bb      	ldr	r3, [r7, #24]
 8001820:	4313      	orrs	r3, r2
 8001822:	608b      	str	r3, [r1, #8]
 8001824:	e006      	b.n	8001834 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001826:	4b16      	ldr	r3, [pc, #88]	; (8001880 <HAL_GPIO_Init+0x2d0>)
 8001828:	689a      	ldr	r2, [r3, #8]
 800182a:	69bb      	ldr	r3, [r7, #24]
 800182c:	43db      	mvns	r3, r3
 800182e:	4914      	ldr	r1, [pc, #80]	; (8001880 <HAL_GPIO_Init+0x2d0>)
 8001830:	4013      	ands	r3, r2
 8001832:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001834:	683b      	ldr	r3, [r7, #0]
 8001836:	685b      	ldr	r3, [r3, #4]
 8001838:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800183c:	2b00      	cmp	r3, #0
 800183e:	d021      	beq.n	8001884 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001840:	4b0f      	ldr	r3, [pc, #60]	; (8001880 <HAL_GPIO_Init+0x2d0>)
 8001842:	68da      	ldr	r2, [r3, #12]
 8001844:	490e      	ldr	r1, [pc, #56]	; (8001880 <HAL_GPIO_Init+0x2d0>)
 8001846:	69bb      	ldr	r3, [r7, #24]
 8001848:	4313      	orrs	r3, r2
 800184a:	60cb      	str	r3, [r1, #12]
 800184c:	e021      	b.n	8001892 <HAL_GPIO_Init+0x2e2>
 800184e:	bf00      	nop
 8001850:	10320000 	.word	0x10320000
 8001854:	10310000 	.word	0x10310000
 8001858:	10220000 	.word	0x10220000
 800185c:	10210000 	.word	0x10210000
 8001860:	10120000 	.word	0x10120000
 8001864:	10110000 	.word	0x10110000
 8001868:	40021000 	.word	0x40021000
 800186c:	40010000 	.word	0x40010000
 8001870:	40010800 	.word	0x40010800
 8001874:	40010c00 	.word	0x40010c00
 8001878:	40011000 	.word	0x40011000
 800187c:	40011400 	.word	0x40011400
 8001880:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001884:	4b0b      	ldr	r3, [pc, #44]	; (80018b4 <HAL_GPIO_Init+0x304>)
 8001886:	68da      	ldr	r2, [r3, #12]
 8001888:	69bb      	ldr	r3, [r7, #24]
 800188a:	43db      	mvns	r3, r3
 800188c:	4909      	ldr	r1, [pc, #36]	; (80018b4 <HAL_GPIO_Init+0x304>)
 800188e:	4013      	ands	r3, r2
 8001890:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001892:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001894:	3301      	adds	r3, #1
 8001896:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001898:	683b      	ldr	r3, [r7, #0]
 800189a:	681a      	ldr	r2, [r3, #0]
 800189c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800189e:	fa22 f303 	lsr.w	r3, r2, r3
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	f47f ae8e 	bne.w	80015c4 <HAL_GPIO_Init+0x14>
  }
}
 80018a8:	bf00      	nop
 80018aa:	bf00      	nop
 80018ac:	372c      	adds	r7, #44	; 0x2c
 80018ae:	46bd      	mov	sp, r7
 80018b0:	bc80      	pop	{r7}
 80018b2:	4770      	bx	lr
 80018b4:	40010400 	.word	0x40010400

080018b8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80018b8:	b480      	push	{r7}
 80018ba:	b083      	sub	sp, #12
 80018bc:	af00      	add	r7, sp, #0
 80018be:	6078      	str	r0, [r7, #4]
 80018c0:	460b      	mov	r3, r1
 80018c2:	807b      	strh	r3, [r7, #2]
 80018c4:	4613      	mov	r3, r2
 80018c6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80018c8:	787b      	ldrb	r3, [r7, #1]
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d003      	beq.n	80018d6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80018ce:	887a      	ldrh	r2, [r7, #2]
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80018d4:	e003      	b.n	80018de <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80018d6:	887b      	ldrh	r3, [r7, #2]
 80018d8:	041a      	lsls	r2, r3, #16
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	611a      	str	r2, [r3, #16]
}
 80018de:	bf00      	nop
 80018e0:	370c      	adds	r7, #12
 80018e2:	46bd      	mov	sp, r7
 80018e4:	bc80      	pop	{r7}
 80018e6:	4770      	bx	lr

080018e8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	b086      	sub	sp, #24
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d101      	bne.n	80018fa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80018f6:	2301      	movs	r3, #1
 80018f8:	e272      	b.n	8001de0 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	f003 0301 	and.w	r3, r3, #1
 8001902:	2b00      	cmp	r3, #0
 8001904:	f000 8087 	beq.w	8001a16 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001908:	4b92      	ldr	r3, [pc, #584]	; (8001b54 <HAL_RCC_OscConfig+0x26c>)
 800190a:	685b      	ldr	r3, [r3, #4]
 800190c:	f003 030c 	and.w	r3, r3, #12
 8001910:	2b04      	cmp	r3, #4
 8001912:	d00c      	beq.n	800192e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001914:	4b8f      	ldr	r3, [pc, #572]	; (8001b54 <HAL_RCC_OscConfig+0x26c>)
 8001916:	685b      	ldr	r3, [r3, #4]
 8001918:	f003 030c 	and.w	r3, r3, #12
 800191c:	2b08      	cmp	r3, #8
 800191e:	d112      	bne.n	8001946 <HAL_RCC_OscConfig+0x5e>
 8001920:	4b8c      	ldr	r3, [pc, #560]	; (8001b54 <HAL_RCC_OscConfig+0x26c>)
 8001922:	685b      	ldr	r3, [r3, #4]
 8001924:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001928:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800192c:	d10b      	bne.n	8001946 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800192e:	4b89      	ldr	r3, [pc, #548]	; (8001b54 <HAL_RCC_OscConfig+0x26c>)
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001936:	2b00      	cmp	r3, #0
 8001938:	d06c      	beq.n	8001a14 <HAL_RCC_OscConfig+0x12c>
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	685b      	ldr	r3, [r3, #4]
 800193e:	2b00      	cmp	r3, #0
 8001940:	d168      	bne.n	8001a14 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001942:	2301      	movs	r3, #1
 8001944:	e24c      	b.n	8001de0 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	685b      	ldr	r3, [r3, #4]
 800194a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800194e:	d106      	bne.n	800195e <HAL_RCC_OscConfig+0x76>
 8001950:	4b80      	ldr	r3, [pc, #512]	; (8001b54 <HAL_RCC_OscConfig+0x26c>)
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	4a7f      	ldr	r2, [pc, #508]	; (8001b54 <HAL_RCC_OscConfig+0x26c>)
 8001956:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800195a:	6013      	str	r3, [r2, #0]
 800195c:	e02e      	b.n	80019bc <HAL_RCC_OscConfig+0xd4>
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	685b      	ldr	r3, [r3, #4]
 8001962:	2b00      	cmp	r3, #0
 8001964:	d10c      	bne.n	8001980 <HAL_RCC_OscConfig+0x98>
 8001966:	4b7b      	ldr	r3, [pc, #492]	; (8001b54 <HAL_RCC_OscConfig+0x26c>)
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	4a7a      	ldr	r2, [pc, #488]	; (8001b54 <HAL_RCC_OscConfig+0x26c>)
 800196c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001970:	6013      	str	r3, [r2, #0]
 8001972:	4b78      	ldr	r3, [pc, #480]	; (8001b54 <HAL_RCC_OscConfig+0x26c>)
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	4a77      	ldr	r2, [pc, #476]	; (8001b54 <HAL_RCC_OscConfig+0x26c>)
 8001978:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800197c:	6013      	str	r3, [r2, #0]
 800197e:	e01d      	b.n	80019bc <HAL_RCC_OscConfig+0xd4>
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	685b      	ldr	r3, [r3, #4]
 8001984:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001988:	d10c      	bne.n	80019a4 <HAL_RCC_OscConfig+0xbc>
 800198a:	4b72      	ldr	r3, [pc, #456]	; (8001b54 <HAL_RCC_OscConfig+0x26c>)
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	4a71      	ldr	r2, [pc, #452]	; (8001b54 <HAL_RCC_OscConfig+0x26c>)
 8001990:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001994:	6013      	str	r3, [r2, #0]
 8001996:	4b6f      	ldr	r3, [pc, #444]	; (8001b54 <HAL_RCC_OscConfig+0x26c>)
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	4a6e      	ldr	r2, [pc, #440]	; (8001b54 <HAL_RCC_OscConfig+0x26c>)
 800199c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80019a0:	6013      	str	r3, [r2, #0]
 80019a2:	e00b      	b.n	80019bc <HAL_RCC_OscConfig+0xd4>
 80019a4:	4b6b      	ldr	r3, [pc, #428]	; (8001b54 <HAL_RCC_OscConfig+0x26c>)
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	4a6a      	ldr	r2, [pc, #424]	; (8001b54 <HAL_RCC_OscConfig+0x26c>)
 80019aa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80019ae:	6013      	str	r3, [r2, #0]
 80019b0:	4b68      	ldr	r3, [pc, #416]	; (8001b54 <HAL_RCC_OscConfig+0x26c>)
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	4a67      	ldr	r2, [pc, #412]	; (8001b54 <HAL_RCC_OscConfig+0x26c>)
 80019b6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80019ba:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	685b      	ldr	r3, [r3, #4]
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d013      	beq.n	80019ec <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019c4:	f7ff f9fc 	bl	8000dc0 <HAL_GetTick>
 80019c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019ca:	e008      	b.n	80019de <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80019cc:	f7ff f9f8 	bl	8000dc0 <HAL_GetTick>
 80019d0:	4602      	mov	r2, r0
 80019d2:	693b      	ldr	r3, [r7, #16]
 80019d4:	1ad3      	subs	r3, r2, r3
 80019d6:	2b64      	cmp	r3, #100	; 0x64
 80019d8:	d901      	bls.n	80019de <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80019da:	2303      	movs	r3, #3
 80019dc:	e200      	b.n	8001de0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019de:	4b5d      	ldr	r3, [pc, #372]	; (8001b54 <HAL_RCC_OscConfig+0x26c>)
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d0f0      	beq.n	80019cc <HAL_RCC_OscConfig+0xe4>
 80019ea:	e014      	b.n	8001a16 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019ec:	f7ff f9e8 	bl	8000dc0 <HAL_GetTick>
 80019f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80019f2:	e008      	b.n	8001a06 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80019f4:	f7ff f9e4 	bl	8000dc0 <HAL_GetTick>
 80019f8:	4602      	mov	r2, r0
 80019fa:	693b      	ldr	r3, [r7, #16]
 80019fc:	1ad3      	subs	r3, r2, r3
 80019fe:	2b64      	cmp	r3, #100	; 0x64
 8001a00:	d901      	bls.n	8001a06 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001a02:	2303      	movs	r3, #3
 8001a04:	e1ec      	b.n	8001de0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a06:	4b53      	ldr	r3, [pc, #332]	; (8001b54 <HAL_RCC_OscConfig+0x26c>)
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d1f0      	bne.n	80019f4 <HAL_RCC_OscConfig+0x10c>
 8001a12:	e000      	b.n	8001a16 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a14:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	f003 0302 	and.w	r3, r3, #2
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d063      	beq.n	8001aea <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001a22:	4b4c      	ldr	r3, [pc, #304]	; (8001b54 <HAL_RCC_OscConfig+0x26c>)
 8001a24:	685b      	ldr	r3, [r3, #4]
 8001a26:	f003 030c 	and.w	r3, r3, #12
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d00b      	beq.n	8001a46 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001a2e:	4b49      	ldr	r3, [pc, #292]	; (8001b54 <HAL_RCC_OscConfig+0x26c>)
 8001a30:	685b      	ldr	r3, [r3, #4]
 8001a32:	f003 030c 	and.w	r3, r3, #12
 8001a36:	2b08      	cmp	r3, #8
 8001a38:	d11c      	bne.n	8001a74 <HAL_RCC_OscConfig+0x18c>
 8001a3a:	4b46      	ldr	r3, [pc, #280]	; (8001b54 <HAL_RCC_OscConfig+0x26c>)
 8001a3c:	685b      	ldr	r3, [r3, #4]
 8001a3e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d116      	bne.n	8001a74 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a46:	4b43      	ldr	r3, [pc, #268]	; (8001b54 <HAL_RCC_OscConfig+0x26c>)
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	f003 0302 	and.w	r3, r3, #2
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d005      	beq.n	8001a5e <HAL_RCC_OscConfig+0x176>
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	691b      	ldr	r3, [r3, #16]
 8001a56:	2b01      	cmp	r3, #1
 8001a58:	d001      	beq.n	8001a5e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001a5a:	2301      	movs	r3, #1
 8001a5c:	e1c0      	b.n	8001de0 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a5e:	4b3d      	ldr	r3, [pc, #244]	; (8001b54 <HAL_RCC_OscConfig+0x26c>)
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	695b      	ldr	r3, [r3, #20]
 8001a6a:	00db      	lsls	r3, r3, #3
 8001a6c:	4939      	ldr	r1, [pc, #228]	; (8001b54 <HAL_RCC_OscConfig+0x26c>)
 8001a6e:	4313      	orrs	r3, r2
 8001a70:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a72:	e03a      	b.n	8001aea <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	691b      	ldr	r3, [r3, #16]
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d020      	beq.n	8001abe <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001a7c:	4b36      	ldr	r3, [pc, #216]	; (8001b58 <HAL_RCC_OscConfig+0x270>)
 8001a7e:	2201      	movs	r2, #1
 8001a80:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a82:	f7ff f99d 	bl	8000dc0 <HAL_GetTick>
 8001a86:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a88:	e008      	b.n	8001a9c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a8a:	f7ff f999 	bl	8000dc0 <HAL_GetTick>
 8001a8e:	4602      	mov	r2, r0
 8001a90:	693b      	ldr	r3, [r7, #16]
 8001a92:	1ad3      	subs	r3, r2, r3
 8001a94:	2b02      	cmp	r3, #2
 8001a96:	d901      	bls.n	8001a9c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001a98:	2303      	movs	r3, #3
 8001a9a:	e1a1      	b.n	8001de0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a9c:	4b2d      	ldr	r3, [pc, #180]	; (8001b54 <HAL_RCC_OscConfig+0x26c>)
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	f003 0302 	and.w	r3, r3, #2
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d0f0      	beq.n	8001a8a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001aa8:	4b2a      	ldr	r3, [pc, #168]	; (8001b54 <HAL_RCC_OscConfig+0x26c>)
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	695b      	ldr	r3, [r3, #20]
 8001ab4:	00db      	lsls	r3, r3, #3
 8001ab6:	4927      	ldr	r1, [pc, #156]	; (8001b54 <HAL_RCC_OscConfig+0x26c>)
 8001ab8:	4313      	orrs	r3, r2
 8001aba:	600b      	str	r3, [r1, #0]
 8001abc:	e015      	b.n	8001aea <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001abe:	4b26      	ldr	r3, [pc, #152]	; (8001b58 <HAL_RCC_OscConfig+0x270>)
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ac4:	f7ff f97c 	bl	8000dc0 <HAL_GetTick>
 8001ac8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001aca:	e008      	b.n	8001ade <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001acc:	f7ff f978 	bl	8000dc0 <HAL_GetTick>
 8001ad0:	4602      	mov	r2, r0
 8001ad2:	693b      	ldr	r3, [r7, #16]
 8001ad4:	1ad3      	subs	r3, r2, r3
 8001ad6:	2b02      	cmp	r3, #2
 8001ad8:	d901      	bls.n	8001ade <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001ada:	2303      	movs	r3, #3
 8001adc:	e180      	b.n	8001de0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ade:	4b1d      	ldr	r3, [pc, #116]	; (8001b54 <HAL_RCC_OscConfig+0x26c>)
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	f003 0302 	and.w	r3, r3, #2
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d1f0      	bne.n	8001acc <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	f003 0308 	and.w	r3, r3, #8
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d03a      	beq.n	8001b6c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	699b      	ldr	r3, [r3, #24]
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d019      	beq.n	8001b32 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001afe:	4b17      	ldr	r3, [pc, #92]	; (8001b5c <HAL_RCC_OscConfig+0x274>)
 8001b00:	2201      	movs	r2, #1
 8001b02:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b04:	f7ff f95c 	bl	8000dc0 <HAL_GetTick>
 8001b08:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b0a:	e008      	b.n	8001b1e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b0c:	f7ff f958 	bl	8000dc0 <HAL_GetTick>
 8001b10:	4602      	mov	r2, r0
 8001b12:	693b      	ldr	r3, [r7, #16]
 8001b14:	1ad3      	subs	r3, r2, r3
 8001b16:	2b02      	cmp	r3, #2
 8001b18:	d901      	bls.n	8001b1e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001b1a:	2303      	movs	r3, #3
 8001b1c:	e160      	b.n	8001de0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b1e:	4b0d      	ldr	r3, [pc, #52]	; (8001b54 <HAL_RCC_OscConfig+0x26c>)
 8001b20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b22:	f003 0302 	and.w	r3, r3, #2
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d0f0      	beq.n	8001b0c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001b2a:	2001      	movs	r0, #1
 8001b2c:	f000 fb10 	bl	8002150 <RCC_Delay>
 8001b30:	e01c      	b.n	8001b6c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001b32:	4b0a      	ldr	r3, [pc, #40]	; (8001b5c <HAL_RCC_OscConfig+0x274>)
 8001b34:	2200      	movs	r2, #0
 8001b36:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b38:	f7ff f942 	bl	8000dc0 <HAL_GetTick>
 8001b3c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b3e:	e00f      	b.n	8001b60 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b40:	f7ff f93e 	bl	8000dc0 <HAL_GetTick>
 8001b44:	4602      	mov	r2, r0
 8001b46:	693b      	ldr	r3, [r7, #16]
 8001b48:	1ad3      	subs	r3, r2, r3
 8001b4a:	2b02      	cmp	r3, #2
 8001b4c:	d908      	bls.n	8001b60 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001b4e:	2303      	movs	r3, #3
 8001b50:	e146      	b.n	8001de0 <HAL_RCC_OscConfig+0x4f8>
 8001b52:	bf00      	nop
 8001b54:	40021000 	.word	0x40021000
 8001b58:	42420000 	.word	0x42420000
 8001b5c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b60:	4b92      	ldr	r3, [pc, #584]	; (8001dac <HAL_RCC_OscConfig+0x4c4>)
 8001b62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b64:	f003 0302 	and.w	r3, r3, #2
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d1e9      	bne.n	8001b40 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	f003 0304 	and.w	r3, r3, #4
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	f000 80a6 	beq.w	8001cc6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001b7e:	4b8b      	ldr	r3, [pc, #556]	; (8001dac <HAL_RCC_OscConfig+0x4c4>)
 8001b80:	69db      	ldr	r3, [r3, #28]
 8001b82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d10d      	bne.n	8001ba6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001b8a:	4b88      	ldr	r3, [pc, #544]	; (8001dac <HAL_RCC_OscConfig+0x4c4>)
 8001b8c:	69db      	ldr	r3, [r3, #28]
 8001b8e:	4a87      	ldr	r2, [pc, #540]	; (8001dac <HAL_RCC_OscConfig+0x4c4>)
 8001b90:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b94:	61d3      	str	r3, [r2, #28]
 8001b96:	4b85      	ldr	r3, [pc, #532]	; (8001dac <HAL_RCC_OscConfig+0x4c4>)
 8001b98:	69db      	ldr	r3, [r3, #28]
 8001b9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b9e:	60bb      	str	r3, [r7, #8]
 8001ba0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001ba2:	2301      	movs	r3, #1
 8001ba4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ba6:	4b82      	ldr	r3, [pc, #520]	; (8001db0 <HAL_RCC_OscConfig+0x4c8>)
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d118      	bne.n	8001be4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001bb2:	4b7f      	ldr	r3, [pc, #508]	; (8001db0 <HAL_RCC_OscConfig+0x4c8>)
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	4a7e      	ldr	r2, [pc, #504]	; (8001db0 <HAL_RCC_OscConfig+0x4c8>)
 8001bb8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001bbc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001bbe:	f7ff f8ff 	bl	8000dc0 <HAL_GetTick>
 8001bc2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001bc4:	e008      	b.n	8001bd8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001bc6:	f7ff f8fb 	bl	8000dc0 <HAL_GetTick>
 8001bca:	4602      	mov	r2, r0
 8001bcc:	693b      	ldr	r3, [r7, #16]
 8001bce:	1ad3      	subs	r3, r2, r3
 8001bd0:	2b64      	cmp	r3, #100	; 0x64
 8001bd2:	d901      	bls.n	8001bd8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001bd4:	2303      	movs	r3, #3
 8001bd6:	e103      	b.n	8001de0 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001bd8:	4b75      	ldr	r3, [pc, #468]	; (8001db0 <HAL_RCC_OscConfig+0x4c8>)
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d0f0      	beq.n	8001bc6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	68db      	ldr	r3, [r3, #12]
 8001be8:	2b01      	cmp	r3, #1
 8001bea:	d106      	bne.n	8001bfa <HAL_RCC_OscConfig+0x312>
 8001bec:	4b6f      	ldr	r3, [pc, #444]	; (8001dac <HAL_RCC_OscConfig+0x4c4>)
 8001bee:	6a1b      	ldr	r3, [r3, #32]
 8001bf0:	4a6e      	ldr	r2, [pc, #440]	; (8001dac <HAL_RCC_OscConfig+0x4c4>)
 8001bf2:	f043 0301 	orr.w	r3, r3, #1
 8001bf6:	6213      	str	r3, [r2, #32]
 8001bf8:	e02d      	b.n	8001c56 <HAL_RCC_OscConfig+0x36e>
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	68db      	ldr	r3, [r3, #12]
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d10c      	bne.n	8001c1c <HAL_RCC_OscConfig+0x334>
 8001c02:	4b6a      	ldr	r3, [pc, #424]	; (8001dac <HAL_RCC_OscConfig+0x4c4>)
 8001c04:	6a1b      	ldr	r3, [r3, #32]
 8001c06:	4a69      	ldr	r2, [pc, #420]	; (8001dac <HAL_RCC_OscConfig+0x4c4>)
 8001c08:	f023 0301 	bic.w	r3, r3, #1
 8001c0c:	6213      	str	r3, [r2, #32]
 8001c0e:	4b67      	ldr	r3, [pc, #412]	; (8001dac <HAL_RCC_OscConfig+0x4c4>)
 8001c10:	6a1b      	ldr	r3, [r3, #32]
 8001c12:	4a66      	ldr	r2, [pc, #408]	; (8001dac <HAL_RCC_OscConfig+0x4c4>)
 8001c14:	f023 0304 	bic.w	r3, r3, #4
 8001c18:	6213      	str	r3, [r2, #32]
 8001c1a:	e01c      	b.n	8001c56 <HAL_RCC_OscConfig+0x36e>
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	68db      	ldr	r3, [r3, #12]
 8001c20:	2b05      	cmp	r3, #5
 8001c22:	d10c      	bne.n	8001c3e <HAL_RCC_OscConfig+0x356>
 8001c24:	4b61      	ldr	r3, [pc, #388]	; (8001dac <HAL_RCC_OscConfig+0x4c4>)
 8001c26:	6a1b      	ldr	r3, [r3, #32]
 8001c28:	4a60      	ldr	r2, [pc, #384]	; (8001dac <HAL_RCC_OscConfig+0x4c4>)
 8001c2a:	f043 0304 	orr.w	r3, r3, #4
 8001c2e:	6213      	str	r3, [r2, #32]
 8001c30:	4b5e      	ldr	r3, [pc, #376]	; (8001dac <HAL_RCC_OscConfig+0x4c4>)
 8001c32:	6a1b      	ldr	r3, [r3, #32]
 8001c34:	4a5d      	ldr	r2, [pc, #372]	; (8001dac <HAL_RCC_OscConfig+0x4c4>)
 8001c36:	f043 0301 	orr.w	r3, r3, #1
 8001c3a:	6213      	str	r3, [r2, #32]
 8001c3c:	e00b      	b.n	8001c56 <HAL_RCC_OscConfig+0x36e>
 8001c3e:	4b5b      	ldr	r3, [pc, #364]	; (8001dac <HAL_RCC_OscConfig+0x4c4>)
 8001c40:	6a1b      	ldr	r3, [r3, #32]
 8001c42:	4a5a      	ldr	r2, [pc, #360]	; (8001dac <HAL_RCC_OscConfig+0x4c4>)
 8001c44:	f023 0301 	bic.w	r3, r3, #1
 8001c48:	6213      	str	r3, [r2, #32]
 8001c4a:	4b58      	ldr	r3, [pc, #352]	; (8001dac <HAL_RCC_OscConfig+0x4c4>)
 8001c4c:	6a1b      	ldr	r3, [r3, #32]
 8001c4e:	4a57      	ldr	r2, [pc, #348]	; (8001dac <HAL_RCC_OscConfig+0x4c4>)
 8001c50:	f023 0304 	bic.w	r3, r3, #4
 8001c54:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	68db      	ldr	r3, [r3, #12]
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d015      	beq.n	8001c8a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c5e:	f7ff f8af 	bl	8000dc0 <HAL_GetTick>
 8001c62:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c64:	e00a      	b.n	8001c7c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c66:	f7ff f8ab 	bl	8000dc0 <HAL_GetTick>
 8001c6a:	4602      	mov	r2, r0
 8001c6c:	693b      	ldr	r3, [r7, #16]
 8001c6e:	1ad3      	subs	r3, r2, r3
 8001c70:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c74:	4293      	cmp	r3, r2
 8001c76:	d901      	bls.n	8001c7c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001c78:	2303      	movs	r3, #3
 8001c7a:	e0b1      	b.n	8001de0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c7c:	4b4b      	ldr	r3, [pc, #300]	; (8001dac <HAL_RCC_OscConfig+0x4c4>)
 8001c7e:	6a1b      	ldr	r3, [r3, #32]
 8001c80:	f003 0302 	and.w	r3, r3, #2
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d0ee      	beq.n	8001c66 <HAL_RCC_OscConfig+0x37e>
 8001c88:	e014      	b.n	8001cb4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c8a:	f7ff f899 	bl	8000dc0 <HAL_GetTick>
 8001c8e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c90:	e00a      	b.n	8001ca8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c92:	f7ff f895 	bl	8000dc0 <HAL_GetTick>
 8001c96:	4602      	mov	r2, r0
 8001c98:	693b      	ldr	r3, [r7, #16]
 8001c9a:	1ad3      	subs	r3, r2, r3
 8001c9c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ca0:	4293      	cmp	r3, r2
 8001ca2:	d901      	bls.n	8001ca8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001ca4:	2303      	movs	r3, #3
 8001ca6:	e09b      	b.n	8001de0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ca8:	4b40      	ldr	r3, [pc, #256]	; (8001dac <HAL_RCC_OscConfig+0x4c4>)
 8001caa:	6a1b      	ldr	r3, [r3, #32]
 8001cac:	f003 0302 	and.w	r3, r3, #2
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d1ee      	bne.n	8001c92 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001cb4:	7dfb      	ldrb	r3, [r7, #23]
 8001cb6:	2b01      	cmp	r3, #1
 8001cb8:	d105      	bne.n	8001cc6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001cba:	4b3c      	ldr	r3, [pc, #240]	; (8001dac <HAL_RCC_OscConfig+0x4c4>)
 8001cbc:	69db      	ldr	r3, [r3, #28]
 8001cbe:	4a3b      	ldr	r2, [pc, #236]	; (8001dac <HAL_RCC_OscConfig+0x4c4>)
 8001cc0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001cc4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	69db      	ldr	r3, [r3, #28]
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	f000 8087 	beq.w	8001dde <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001cd0:	4b36      	ldr	r3, [pc, #216]	; (8001dac <HAL_RCC_OscConfig+0x4c4>)
 8001cd2:	685b      	ldr	r3, [r3, #4]
 8001cd4:	f003 030c 	and.w	r3, r3, #12
 8001cd8:	2b08      	cmp	r3, #8
 8001cda:	d061      	beq.n	8001da0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	69db      	ldr	r3, [r3, #28]
 8001ce0:	2b02      	cmp	r3, #2
 8001ce2:	d146      	bne.n	8001d72 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ce4:	4b33      	ldr	r3, [pc, #204]	; (8001db4 <HAL_RCC_OscConfig+0x4cc>)
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cea:	f7ff f869 	bl	8000dc0 <HAL_GetTick>
 8001cee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001cf0:	e008      	b.n	8001d04 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001cf2:	f7ff f865 	bl	8000dc0 <HAL_GetTick>
 8001cf6:	4602      	mov	r2, r0
 8001cf8:	693b      	ldr	r3, [r7, #16]
 8001cfa:	1ad3      	subs	r3, r2, r3
 8001cfc:	2b02      	cmp	r3, #2
 8001cfe:	d901      	bls.n	8001d04 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001d00:	2303      	movs	r3, #3
 8001d02:	e06d      	b.n	8001de0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d04:	4b29      	ldr	r3, [pc, #164]	; (8001dac <HAL_RCC_OscConfig+0x4c4>)
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d1f0      	bne.n	8001cf2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	6a1b      	ldr	r3, [r3, #32]
 8001d14:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d18:	d108      	bne.n	8001d2c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001d1a:	4b24      	ldr	r3, [pc, #144]	; (8001dac <HAL_RCC_OscConfig+0x4c4>)
 8001d1c:	685b      	ldr	r3, [r3, #4]
 8001d1e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	689b      	ldr	r3, [r3, #8]
 8001d26:	4921      	ldr	r1, [pc, #132]	; (8001dac <HAL_RCC_OscConfig+0x4c4>)
 8001d28:	4313      	orrs	r3, r2
 8001d2a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001d2c:	4b1f      	ldr	r3, [pc, #124]	; (8001dac <HAL_RCC_OscConfig+0x4c4>)
 8001d2e:	685b      	ldr	r3, [r3, #4]
 8001d30:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	6a19      	ldr	r1, [r3, #32]
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d3c:	430b      	orrs	r3, r1
 8001d3e:	491b      	ldr	r1, [pc, #108]	; (8001dac <HAL_RCC_OscConfig+0x4c4>)
 8001d40:	4313      	orrs	r3, r2
 8001d42:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001d44:	4b1b      	ldr	r3, [pc, #108]	; (8001db4 <HAL_RCC_OscConfig+0x4cc>)
 8001d46:	2201      	movs	r2, #1
 8001d48:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d4a:	f7ff f839 	bl	8000dc0 <HAL_GetTick>
 8001d4e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001d50:	e008      	b.n	8001d64 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d52:	f7ff f835 	bl	8000dc0 <HAL_GetTick>
 8001d56:	4602      	mov	r2, r0
 8001d58:	693b      	ldr	r3, [r7, #16]
 8001d5a:	1ad3      	subs	r3, r2, r3
 8001d5c:	2b02      	cmp	r3, #2
 8001d5e:	d901      	bls.n	8001d64 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001d60:	2303      	movs	r3, #3
 8001d62:	e03d      	b.n	8001de0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001d64:	4b11      	ldr	r3, [pc, #68]	; (8001dac <HAL_RCC_OscConfig+0x4c4>)
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d0f0      	beq.n	8001d52 <HAL_RCC_OscConfig+0x46a>
 8001d70:	e035      	b.n	8001dde <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d72:	4b10      	ldr	r3, [pc, #64]	; (8001db4 <HAL_RCC_OscConfig+0x4cc>)
 8001d74:	2200      	movs	r2, #0
 8001d76:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d78:	f7ff f822 	bl	8000dc0 <HAL_GetTick>
 8001d7c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d7e:	e008      	b.n	8001d92 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d80:	f7ff f81e 	bl	8000dc0 <HAL_GetTick>
 8001d84:	4602      	mov	r2, r0
 8001d86:	693b      	ldr	r3, [r7, #16]
 8001d88:	1ad3      	subs	r3, r2, r3
 8001d8a:	2b02      	cmp	r3, #2
 8001d8c:	d901      	bls.n	8001d92 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001d8e:	2303      	movs	r3, #3
 8001d90:	e026      	b.n	8001de0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d92:	4b06      	ldr	r3, [pc, #24]	; (8001dac <HAL_RCC_OscConfig+0x4c4>)
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d1f0      	bne.n	8001d80 <HAL_RCC_OscConfig+0x498>
 8001d9e:	e01e      	b.n	8001dde <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	69db      	ldr	r3, [r3, #28]
 8001da4:	2b01      	cmp	r3, #1
 8001da6:	d107      	bne.n	8001db8 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001da8:	2301      	movs	r3, #1
 8001daa:	e019      	b.n	8001de0 <HAL_RCC_OscConfig+0x4f8>
 8001dac:	40021000 	.word	0x40021000
 8001db0:	40007000 	.word	0x40007000
 8001db4:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001db8:	4b0b      	ldr	r3, [pc, #44]	; (8001de8 <HAL_RCC_OscConfig+0x500>)
 8001dba:	685b      	ldr	r3, [r3, #4]
 8001dbc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	6a1b      	ldr	r3, [r3, #32]
 8001dc8:	429a      	cmp	r2, r3
 8001dca:	d106      	bne.n	8001dda <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001dd6:	429a      	cmp	r2, r3
 8001dd8:	d001      	beq.n	8001dde <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001dda:	2301      	movs	r3, #1
 8001ddc:	e000      	b.n	8001de0 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001dde:	2300      	movs	r3, #0
}
 8001de0:	4618      	mov	r0, r3
 8001de2:	3718      	adds	r7, #24
 8001de4:	46bd      	mov	sp, r7
 8001de6:	bd80      	pop	{r7, pc}
 8001de8:	40021000 	.word	0x40021000

08001dec <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001dec:	b580      	push	{r7, lr}
 8001dee:	b084      	sub	sp, #16
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	6078      	str	r0, [r7, #4]
 8001df4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d101      	bne.n	8001e00 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001dfc:	2301      	movs	r3, #1
 8001dfe:	e0d0      	b.n	8001fa2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001e00:	4b6a      	ldr	r3, [pc, #424]	; (8001fac <HAL_RCC_ClockConfig+0x1c0>)
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	f003 0307 	and.w	r3, r3, #7
 8001e08:	683a      	ldr	r2, [r7, #0]
 8001e0a:	429a      	cmp	r2, r3
 8001e0c:	d910      	bls.n	8001e30 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e0e:	4b67      	ldr	r3, [pc, #412]	; (8001fac <HAL_RCC_ClockConfig+0x1c0>)
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	f023 0207 	bic.w	r2, r3, #7
 8001e16:	4965      	ldr	r1, [pc, #404]	; (8001fac <HAL_RCC_ClockConfig+0x1c0>)
 8001e18:	683b      	ldr	r3, [r7, #0]
 8001e1a:	4313      	orrs	r3, r2
 8001e1c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e1e:	4b63      	ldr	r3, [pc, #396]	; (8001fac <HAL_RCC_ClockConfig+0x1c0>)
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	f003 0307 	and.w	r3, r3, #7
 8001e26:	683a      	ldr	r2, [r7, #0]
 8001e28:	429a      	cmp	r2, r3
 8001e2a:	d001      	beq.n	8001e30 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001e2c:	2301      	movs	r3, #1
 8001e2e:	e0b8      	b.n	8001fa2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	f003 0302 	and.w	r3, r3, #2
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d020      	beq.n	8001e7e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	f003 0304 	and.w	r3, r3, #4
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d005      	beq.n	8001e54 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001e48:	4b59      	ldr	r3, [pc, #356]	; (8001fb0 <HAL_RCC_ClockConfig+0x1c4>)
 8001e4a:	685b      	ldr	r3, [r3, #4]
 8001e4c:	4a58      	ldr	r2, [pc, #352]	; (8001fb0 <HAL_RCC_ClockConfig+0x1c4>)
 8001e4e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001e52:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	f003 0308 	and.w	r3, r3, #8
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d005      	beq.n	8001e6c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001e60:	4b53      	ldr	r3, [pc, #332]	; (8001fb0 <HAL_RCC_ClockConfig+0x1c4>)
 8001e62:	685b      	ldr	r3, [r3, #4]
 8001e64:	4a52      	ldr	r2, [pc, #328]	; (8001fb0 <HAL_RCC_ClockConfig+0x1c4>)
 8001e66:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001e6a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e6c:	4b50      	ldr	r3, [pc, #320]	; (8001fb0 <HAL_RCC_ClockConfig+0x1c4>)
 8001e6e:	685b      	ldr	r3, [r3, #4]
 8001e70:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	689b      	ldr	r3, [r3, #8]
 8001e78:	494d      	ldr	r1, [pc, #308]	; (8001fb0 <HAL_RCC_ClockConfig+0x1c4>)
 8001e7a:	4313      	orrs	r3, r2
 8001e7c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	f003 0301 	and.w	r3, r3, #1
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d040      	beq.n	8001f0c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	685b      	ldr	r3, [r3, #4]
 8001e8e:	2b01      	cmp	r3, #1
 8001e90:	d107      	bne.n	8001ea2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e92:	4b47      	ldr	r3, [pc, #284]	; (8001fb0 <HAL_RCC_ClockConfig+0x1c4>)
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d115      	bne.n	8001eca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e9e:	2301      	movs	r3, #1
 8001ea0:	e07f      	b.n	8001fa2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	685b      	ldr	r3, [r3, #4]
 8001ea6:	2b02      	cmp	r3, #2
 8001ea8:	d107      	bne.n	8001eba <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001eaa:	4b41      	ldr	r3, [pc, #260]	; (8001fb0 <HAL_RCC_ClockConfig+0x1c4>)
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d109      	bne.n	8001eca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001eb6:	2301      	movs	r3, #1
 8001eb8:	e073      	b.n	8001fa2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001eba:	4b3d      	ldr	r3, [pc, #244]	; (8001fb0 <HAL_RCC_ClockConfig+0x1c4>)
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	f003 0302 	and.w	r3, r3, #2
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d101      	bne.n	8001eca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ec6:	2301      	movs	r3, #1
 8001ec8:	e06b      	b.n	8001fa2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001eca:	4b39      	ldr	r3, [pc, #228]	; (8001fb0 <HAL_RCC_ClockConfig+0x1c4>)
 8001ecc:	685b      	ldr	r3, [r3, #4]
 8001ece:	f023 0203 	bic.w	r2, r3, #3
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	685b      	ldr	r3, [r3, #4]
 8001ed6:	4936      	ldr	r1, [pc, #216]	; (8001fb0 <HAL_RCC_ClockConfig+0x1c4>)
 8001ed8:	4313      	orrs	r3, r2
 8001eda:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001edc:	f7fe ff70 	bl	8000dc0 <HAL_GetTick>
 8001ee0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ee2:	e00a      	b.n	8001efa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ee4:	f7fe ff6c 	bl	8000dc0 <HAL_GetTick>
 8001ee8:	4602      	mov	r2, r0
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	1ad3      	subs	r3, r2, r3
 8001eee:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ef2:	4293      	cmp	r3, r2
 8001ef4:	d901      	bls.n	8001efa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001ef6:	2303      	movs	r3, #3
 8001ef8:	e053      	b.n	8001fa2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001efa:	4b2d      	ldr	r3, [pc, #180]	; (8001fb0 <HAL_RCC_ClockConfig+0x1c4>)
 8001efc:	685b      	ldr	r3, [r3, #4]
 8001efe:	f003 020c 	and.w	r2, r3, #12
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	685b      	ldr	r3, [r3, #4]
 8001f06:	009b      	lsls	r3, r3, #2
 8001f08:	429a      	cmp	r2, r3
 8001f0a:	d1eb      	bne.n	8001ee4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001f0c:	4b27      	ldr	r3, [pc, #156]	; (8001fac <HAL_RCC_ClockConfig+0x1c0>)
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	f003 0307 	and.w	r3, r3, #7
 8001f14:	683a      	ldr	r2, [r7, #0]
 8001f16:	429a      	cmp	r2, r3
 8001f18:	d210      	bcs.n	8001f3c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f1a:	4b24      	ldr	r3, [pc, #144]	; (8001fac <HAL_RCC_ClockConfig+0x1c0>)
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	f023 0207 	bic.w	r2, r3, #7
 8001f22:	4922      	ldr	r1, [pc, #136]	; (8001fac <HAL_RCC_ClockConfig+0x1c0>)
 8001f24:	683b      	ldr	r3, [r7, #0]
 8001f26:	4313      	orrs	r3, r2
 8001f28:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f2a:	4b20      	ldr	r3, [pc, #128]	; (8001fac <HAL_RCC_ClockConfig+0x1c0>)
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	f003 0307 	and.w	r3, r3, #7
 8001f32:	683a      	ldr	r2, [r7, #0]
 8001f34:	429a      	cmp	r2, r3
 8001f36:	d001      	beq.n	8001f3c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001f38:	2301      	movs	r3, #1
 8001f3a:	e032      	b.n	8001fa2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	f003 0304 	and.w	r3, r3, #4
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d008      	beq.n	8001f5a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001f48:	4b19      	ldr	r3, [pc, #100]	; (8001fb0 <HAL_RCC_ClockConfig+0x1c4>)
 8001f4a:	685b      	ldr	r3, [r3, #4]
 8001f4c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	68db      	ldr	r3, [r3, #12]
 8001f54:	4916      	ldr	r1, [pc, #88]	; (8001fb0 <HAL_RCC_ClockConfig+0x1c4>)
 8001f56:	4313      	orrs	r3, r2
 8001f58:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	f003 0308 	and.w	r3, r3, #8
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d009      	beq.n	8001f7a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001f66:	4b12      	ldr	r3, [pc, #72]	; (8001fb0 <HAL_RCC_ClockConfig+0x1c4>)
 8001f68:	685b      	ldr	r3, [r3, #4]
 8001f6a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	691b      	ldr	r3, [r3, #16]
 8001f72:	00db      	lsls	r3, r3, #3
 8001f74:	490e      	ldr	r1, [pc, #56]	; (8001fb0 <HAL_RCC_ClockConfig+0x1c4>)
 8001f76:	4313      	orrs	r3, r2
 8001f78:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001f7a:	f000 f859 	bl	8002030 <HAL_RCC_GetSysClockFreq>
 8001f7e:	4602      	mov	r2, r0
 8001f80:	4b0b      	ldr	r3, [pc, #44]	; (8001fb0 <HAL_RCC_ClockConfig+0x1c4>)
 8001f82:	685b      	ldr	r3, [r3, #4]
 8001f84:	091b      	lsrs	r3, r3, #4
 8001f86:	f003 030f 	and.w	r3, r3, #15
 8001f8a:	490a      	ldr	r1, [pc, #40]	; (8001fb4 <HAL_RCC_ClockConfig+0x1c8>)
 8001f8c:	5ccb      	ldrb	r3, [r1, r3]
 8001f8e:	fa22 f303 	lsr.w	r3, r2, r3
 8001f92:	4a09      	ldr	r2, [pc, #36]	; (8001fb8 <HAL_RCC_ClockConfig+0x1cc>)
 8001f94:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001f96:	4b09      	ldr	r3, [pc, #36]	; (8001fbc <HAL_RCC_ClockConfig+0x1d0>)
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	4618      	mov	r0, r3
 8001f9c:	f7fe fece 	bl	8000d3c <HAL_InitTick>

  return HAL_OK;
 8001fa0:	2300      	movs	r3, #0
}
 8001fa2:	4618      	mov	r0, r3
 8001fa4:	3710      	adds	r7, #16
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	bd80      	pop	{r7, pc}
 8001faa:	bf00      	nop
 8001fac:	40022000 	.word	0x40022000
 8001fb0:	40021000 	.word	0x40021000
 8001fb4:	08004a90 	.word	0x08004a90
 8001fb8:	20000000 	.word	0x20000000
 8001fbc:	20000008 	.word	0x20000008

08001fc0 <HAL_RCC_MCOConfig>:
  *          This parameter can be one of the following values:
  *            @arg @ref RCC_MCODIV_1 no division applied to MCO clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	b08a      	sub	sp, #40	; 0x28
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	60f8      	str	r0, [r7, #12]
 8001fc8:	60b9      	str	r1, [r7, #8]
 8001fca:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef gpio = {0U};
 8001fcc:	f107 0318 	add.w	r3, r7, #24
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	601a      	str	r2, [r3, #0]
 8001fd4:	605a      	str	r2, [r3, #4]
 8001fd6:	609a      	str	r2, [r3, #8]
 8001fd8:	60da      	str	r2, [r3, #12]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(RCC_MCOx);
  UNUSED(RCC_MCODiv);

  /* Configure the MCO1 pin in alternate function mode */
  gpio.Mode      = GPIO_MODE_AF_PP;
 8001fda:	2302      	movs	r3, #2
 8001fdc:	61fb      	str	r3, [r7, #28]
  gpio.Speed     = GPIO_SPEED_FREQ_HIGH;
 8001fde:	2303      	movs	r3, #3
 8001fe0:	627b      	str	r3, [r7, #36]	; 0x24
  gpio.Pull      = GPIO_NOPULL;
 8001fe2:	2300      	movs	r3, #0
 8001fe4:	623b      	str	r3, [r7, #32]
  gpio.Pin       = MCO1_PIN;
 8001fe6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001fea:	61bb      	str	r3, [r7, #24]

  /* MCO1 Clock Enable */
  MCO1_CLK_ENABLE();
 8001fec:	4b0e      	ldr	r3, [pc, #56]	; (8002028 <HAL_RCC_MCOConfig+0x68>)
 8001fee:	699b      	ldr	r3, [r3, #24]
 8001ff0:	4a0d      	ldr	r2, [pc, #52]	; (8002028 <HAL_RCC_MCOConfig+0x68>)
 8001ff2:	f043 0304 	orr.w	r3, r3, #4
 8001ff6:	6193      	str	r3, [r2, #24]
 8001ff8:	4b0b      	ldr	r3, [pc, #44]	; (8002028 <HAL_RCC_MCOConfig+0x68>)
 8001ffa:	699b      	ldr	r3, [r3, #24]
 8001ffc:	f003 0304 	and.w	r3, r3, #4
 8002000:	617b      	str	r3, [r7, #20]
 8002002:	697b      	ldr	r3, [r7, #20]

  HAL_GPIO_Init(MCO1_GPIO_PORT, &gpio);
 8002004:	f107 0318 	add.w	r3, r7, #24
 8002008:	4619      	mov	r1, r3
 800200a:	4808      	ldr	r0, [pc, #32]	; (800202c <HAL_RCC_MCOConfig+0x6c>)
 800200c:	f7ff fad0 	bl	80015b0 <HAL_GPIO_Init>

  /* Configure the MCO clock source */
  __HAL_RCC_MCO1_CONFIG(RCC_MCOSource, RCC_MCODiv);
 8002010:	4b05      	ldr	r3, [pc, #20]	; (8002028 <HAL_RCC_MCOConfig+0x68>)
 8002012:	685b      	ldr	r3, [r3, #4]
 8002014:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8002018:	4903      	ldr	r1, [pc, #12]	; (8002028 <HAL_RCC_MCOConfig+0x68>)
 800201a:	68bb      	ldr	r3, [r7, #8]
 800201c:	4313      	orrs	r3, r2
 800201e:	604b      	str	r3, [r1, #4]
}
 8002020:	bf00      	nop
 8002022:	3728      	adds	r7, #40	; 0x28
 8002024:	46bd      	mov	sp, r7
 8002026:	bd80      	pop	{r7, pc}
 8002028:	40021000 	.word	0x40021000
 800202c:	40010800 	.word	0x40010800

08002030 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002030:	b490      	push	{r4, r7}
 8002032:	b08a      	sub	sp, #40	; 0x28
 8002034:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002036:	4b29      	ldr	r3, [pc, #164]	; (80020dc <HAL_RCC_GetSysClockFreq+0xac>)
 8002038:	1d3c      	adds	r4, r7, #4
 800203a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800203c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002040:	f240 2301 	movw	r3, #513	; 0x201
 8002044:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002046:	2300      	movs	r3, #0
 8002048:	61fb      	str	r3, [r7, #28]
 800204a:	2300      	movs	r3, #0
 800204c:	61bb      	str	r3, [r7, #24]
 800204e:	2300      	movs	r3, #0
 8002050:	627b      	str	r3, [r7, #36]	; 0x24
 8002052:	2300      	movs	r3, #0
 8002054:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002056:	2300      	movs	r3, #0
 8002058:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800205a:	4b21      	ldr	r3, [pc, #132]	; (80020e0 <HAL_RCC_GetSysClockFreq+0xb0>)
 800205c:	685b      	ldr	r3, [r3, #4]
 800205e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002060:	69fb      	ldr	r3, [r7, #28]
 8002062:	f003 030c 	and.w	r3, r3, #12
 8002066:	2b04      	cmp	r3, #4
 8002068:	d002      	beq.n	8002070 <HAL_RCC_GetSysClockFreq+0x40>
 800206a:	2b08      	cmp	r3, #8
 800206c:	d003      	beq.n	8002076 <HAL_RCC_GetSysClockFreq+0x46>
 800206e:	e02b      	b.n	80020c8 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002070:	4b1c      	ldr	r3, [pc, #112]	; (80020e4 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002072:	623b      	str	r3, [r7, #32]
      break;
 8002074:	e02b      	b.n	80020ce <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002076:	69fb      	ldr	r3, [r7, #28]
 8002078:	0c9b      	lsrs	r3, r3, #18
 800207a:	f003 030f 	and.w	r3, r3, #15
 800207e:	3328      	adds	r3, #40	; 0x28
 8002080:	443b      	add	r3, r7
 8002082:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002086:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002088:	69fb      	ldr	r3, [r7, #28]
 800208a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800208e:	2b00      	cmp	r3, #0
 8002090:	d012      	beq.n	80020b8 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002092:	4b13      	ldr	r3, [pc, #76]	; (80020e0 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002094:	685b      	ldr	r3, [r3, #4]
 8002096:	0c5b      	lsrs	r3, r3, #17
 8002098:	f003 0301 	and.w	r3, r3, #1
 800209c:	3328      	adds	r3, #40	; 0x28
 800209e:	443b      	add	r3, r7
 80020a0:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80020a4:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80020a6:	697b      	ldr	r3, [r7, #20]
 80020a8:	4a0e      	ldr	r2, [pc, #56]	; (80020e4 <HAL_RCC_GetSysClockFreq+0xb4>)
 80020aa:	fb03 f202 	mul.w	r2, r3, r2
 80020ae:	69bb      	ldr	r3, [r7, #24]
 80020b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80020b4:	627b      	str	r3, [r7, #36]	; 0x24
 80020b6:	e004      	b.n	80020c2 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80020b8:	697b      	ldr	r3, [r7, #20]
 80020ba:	4a0b      	ldr	r2, [pc, #44]	; (80020e8 <HAL_RCC_GetSysClockFreq+0xb8>)
 80020bc:	fb02 f303 	mul.w	r3, r2, r3
 80020c0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80020c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020c4:	623b      	str	r3, [r7, #32]
      break;
 80020c6:	e002      	b.n	80020ce <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80020c8:	4b06      	ldr	r3, [pc, #24]	; (80020e4 <HAL_RCC_GetSysClockFreq+0xb4>)
 80020ca:	623b      	str	r3, [r7, #32]
      break;
 80020cc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80020ce:	6a3b      	ldr	r3, [r7, #32]
}
 80020d0:	4618      	mov	r0, r3
 80020d2:	3728      	adds	r7, #40	; 0x28
 80020d4:	46bd      	mov	sp, r7
 80020d6:	bc90      	pop	{r4, r7}
 80020d8:	4770      	bx	lr
 80020da:	bf00      	nop
 80020dc:	08004a74 	.word	0x08004a74
 80020e0:	40021000 	.word	0x40021000
 80020e4:	007a1200 	.word	0x007a1200
 80020e8:	003d0900 	.word	0x003d0900

080020ec <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80020ec:	b480      	push	{r7}
 80020ee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80020f0:	4b02      	ldr	r3, [pc, #8]	; (80020fc <HAL_RCC_GetHCLKFreq+0x10>)
 80020f2:	681b      	ldr	r3, [r3, #0]
}
 80020f4:	4618      	mov	r0, r3
 80020f6:	46bd      	mov	sp, r7
 80020f8:	bc80      	pop	{r7}
 80020fa:	4770      	bx	lr
 80020fc:	20000000 	.word	0x20000000

08002100 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002100:	b580      	push	{r7, lr}
 8002102:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002104:	f7ff fff2 	bl	80020ec <HAL_RCC_GetHCLKFreq>
 8002108:	4602      	mov	r2, r0
 800210a:	4b05      	ldr	r3, [pc, #20]	; (8002120 <HAL_RCC_GetPCLK1Freq+0x20>)
 800210c:	685b      	ldr	r3, [r3, #4]
 800210e:	0a1b      	lsrs	r3, r3, #8
 8002110:	f003 0307 	and.w	r3, r3, #7
 8002114:	4903      	ldr	r1, [pc, #12]	; (8002124 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002116:	5ccb      	ldrb	r3, [r1, r3]
 8002118:	fa22 f303 	lsr.w	r3, r2, r3
}
 800211c:	4618      	mov	r0, r3
 800211e:	bd80      	pop	{r7, pc}
 8002120:	40021000 	.word	0x40021000
 8002124:	08004aa0 	.word	0x08004aa0

08002128 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002128:	b580      	push	{r7, lr}
 800212a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800212c:	f7ff ffde 	bl	80020ec <HAL_RCC_GetHCLKFreq>
 8002130:	4602      	mov	r2, r0
 8002132:	4b05      	ldr	r3, [pc, #20]	; (8002148 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002134:	685b      	ldr	r3, [r3, #4]
 8002136:	0adb      	lsrs	r3, r3, #11
 8002138:	f003 0307 	and.w	r3, r3, #7
 800213c:	4903      	ldr	r1, [pc, #12]	; (800214c <HAL_RCC_GetPCLK2Freq+0x24>)
 800213e:	5ccb      	ldrb	r3, [r1, r3]
 8002140:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002144:	4618      	mov	r0, r3
 8002146:	bd80      	pop	{r7, pc}
 8002148:	40021000 	.word	0x40021000
 800214c:	08004aa0 	.word	0x08004aa0

08002150 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002150:	b480      	push	{r7}
 8002152:	b085      	sub	sp, #20
 8002154:	af00      	add	r7, sp, #0
 8002156:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002158:	4b0a      	ldr	r3, [pc, #40]	; (8002184 <RCC_Delay+0x34>)
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	4a0a      	ldr	r2, [pc, #40]	; (8002188 <RCC_Delay+0x38>)
 800215e:	fba2 2303 	umull	r2, r3, r2, r3
 8002162:	0a5b      	lsrs	r3, r3, #9
 8002164:	687a      	ldr	r2, [r7, #4]
 8002166:	fb02 f303 	mul.w	r3, r2, r3
 800216a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800216c:	bf00      	nop
  }
  while (Delay --);
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	1e5a      	subs	r2, r3, #1
 8002172:	60fa      	str	r2, [r7, #12]
 8002174:	2b00      	cmp	r3, #0
 8002176:	d1f9      	bne.n	800216c <RCC_Delay+0x1c>
}
 8002178:	bf00      	nop
 800217a:	bf00      	nop
 800217c:	3714      	adds	r7, #20
 800217e:	46bd      	mov	sp, r7
 8002180:	bc80      	pop	{r7}
 8002182:	4770      	bx	lr
 8002184:	20000000 	.word	0x20000000
 8002188:	10624dd3 	.word	0x10624dd3

0800218c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800218c:	b580      	push	{r7, lr}
 800218e:	b082      	sub	sp, #8
 8002190:	af00      	add	r7, sp, #0
 8002192:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	2b00      	cmp	r3, #0
 8002198:	d101      	bne.n	800219e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800219a:	2301      	movs	r3, #1
 800219c:	e03f      	b.n	800221e <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80021a4:	b2db      	uxtb	r3, r3
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d106      	bne.n	80021b8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	2200      	movs	r2, #0
 80021ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80021b2:	6878      	ldr	r0, [r7, #4]
 80021b4:	f7fe fbde 	bl	8000974 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	2224      	movs	r2, #36	; 0x24
 80021bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	68da      	ldr	r2, [r3, #12]
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80021ce:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80021d0:	6878      	ldr	r0, [r7, #4]
 80021d2:	f000 fd81 	bl	8002cd8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	691a      	ldr	r2, [r3, #16]
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80021e4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	695a      	ldr	r2, [r3, #20]
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80021f4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	68da      	ldr	r2, [r3, #12]
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002204:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	2200      	movs	r2, #0
 800220a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	2220      	movs	r2, #32
 8002210:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	2220      	movs	r2, #32
 8002218:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800221c:	2300      	movs	r3, #0
}
 800221e:	4618      	mov	r0, r3
 8002220:	3708      	adds	r7, #8
 8002222:	46bd      	mov	sp, r7
 8002224:	bd80      	pop	{r7, pc}

08002226 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002226:	b580      	push	{r7, lr}
 8002228:	b08a      	sub	sp, #40	; 0x28
 800222a:	af02      	add	r7, sp, #8
 800222c:	60f8      	str	r0, [r7, #12]
 800222e:	60b9      	str	r1, [r7, #8]
 8002230:	603b      	str	r3, [r7, #0]
 8002232:	4613      	mov	r3, r2
 8002234:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002236:	2300      	movs	r3, #0
 8002238:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002240:	b2db      	uxtb	r3, r3
 8002242:	2b20      	cmp	r3, #32
 8002244:	d17c      	bne.n	8002340 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002246:	68bb      	ldr	r3, [r7, #8]
 8002248:	2b00      	cmp	r3, #0
 800224a:	d002      	beq.n	8002252 <HAL_UART_Transmit+0x2c>
 800224c:	88fb      	ldrh	r3, [r7, #6]
 800224e:	2b00      	cmp	r3, #0
 8002250:	d101      	bne.n	8002256 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002252:	2301      	movs	r3, #1
 8002254:	e075      	b.n	8002342 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800225c:	2b01      	cmp	r3, #1
 800225e:	d101      	bne.n	8002264 <HAL_UART_Transmit+0x3e>
 8002260:	2302      	movs	r3, #2
 8002262:	e06e      	b.n	8002342 <HAL_UART_Transmit+0x11c>
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	2201      	movs	r2, #1
 8002268:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	2200      	movs	r2, #0
 8002270:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	2221      	movs	r2, #33	; 0x21
 8002276:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800227a:	f7fe fda1 	bl	8000dc0 <HAL_GetTick>
 800227e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	88fa      	ldrh	r2, [r7, #6]
 8002284:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	88fa      	ldrh	r2, [r7, #6]
 800228a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	689b      	ldr	r3, [r3, #8]
 8002290:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002294:	d108      	bne.n	80022a8 <HAL_UART_Transmit+0x82>
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	691b      	ldr	r3, [r3, #16]
 800229a:	2b00      	cmp	r3, #0
 800229c:	d104      	bne.n	80022a8 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800229e:	2300      	movs	r3, #0
 80022a0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80022a2:	68bb      	ldr	r3, [r7, #8]
 80022a4:	61bb      	str	r3, [r7, #24]
 80022a6:	e003      	b.n	80022b0 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80022a8:	68bb      	ldr	r3, [r7, #8]
 80022aa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80022ac:	2300      	movs	r3, #0
 80022ae:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	2200      	movs	r2, #0
 80022b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80022b8:	e02a      	b.n	8002310 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80022ba:	683b      	ldr	r3, [r7, #0]
 80022bc:	9300      	str	r3, [sp, #0]
 80022be:	697b      	ldr	r3, [r7, #20]
 80022c0:	2200      	movs	r2, #0
 80022c2:	2180      	movs	r1, #128	; 0x80
 80022c4:	68f8      	ldr	r0, [r7, #12]
 80022c6:	f000 fb34 	bl	8002932 <UART_WaitOnFlagUntilTimeout>
 80022ca:	4603      	mov	r3, r0
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d001      	beq.n	80022d4 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80022d0:	2303      	movs	r3, #3
 80022d2:	e036      	b.n	8002342 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80022d4:	69fb      	ldr	r3, [r7, #28]
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d10b      	bne.n	80022f2 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80022da:	69bb      	ldr	r3, [r7, #24]
 80022dc:	881b      	ldrh	r3, [r3, #0]
 80022de:	461a      	mov	r2, r3
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80022e8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80022ea:	69bb      	ldr	r3, [r7, #24]
 80022ec:	3302      	adds	r3, #2
 80022ee:	61bb      	str	r3, [r7, #24]
 80022f0:	e007      	b.n	8002302 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80022f2:	69fb      	ldr	r3, [r7, #28]
 80022f4:	781a      	ldrb	r2, [r3, #0]
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80022fc:	69fb      	ldr	r3, [r7, #28]
 80022fe:	3301      	adds	r3, #1
 8002300:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002306:	b29b      	uxth	r3, r3
 8002308:	3b01      	subs	r3, #1
 800230a:	b29a      	uxth	r2, r3
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002314:	b29b      	uxth	r3, r3
 8002316:	2b00      	cmp	r3, #0
 8002318:	d1cf      	bne.n	80022ba <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800231a:	683b      	ldr	r3, [r7, #0]
 800231c:	9300      	str	r3, [sp, #0]
 800231e:	697b      	ldr	r3, [r7, #20]
 8002320:	2200      	movs	r2, #0
 8002322:	2140      	movs	r1, #64	; 0x40
 8002324:	68f8      	ldr	r0, [r7, #12]
 8002326:	f000 fb04 	bl	8002932 <UART_WaitOnFlagUntilTimeout>
 800232a:	4603      	mov	r3, r0
 800232c:	2b00      	cmp	r3, #0
 800232e:	d001      	beq.n	8002334 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002330:	2303      	movs	r3, #3
 8002332:	e006      	b.n	8002342 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	2220      	movs	r2, #32
 8002338:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800233c:	2300      	movs	r3, #0
 800233e:	e000      	b.n	8002342 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002340:	2302      	movs	r3, #2
  }
}
 8002342:	4618      	mov	r0, r3
 8002344:	3720      	adds	r7, #32
 8002346:	46bd      	mov	sp, r7
 8002348:	bd80      	pop	{r7, pc}

0800234a <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800234a:	b580      	push	{r7, lr}
 800234c:	b08a      	sub	sp, #40	; 0x28
 800234e:	af02      	add	r7, sp, #8
 8002350:	60f8      	str	r0, [r7, #12]
 8002352:	60b9      	str	r1, [r7, #8]
 8002354:	603b      	str	r3, [r7, #0]
 8002356:	4613      	mov	r3, r2
 8002358:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800235a:	2300      	movs	r3, #0
 800235c:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002364:	b2db      	uxtb	r3, r3
 8002366:	2b20      	cmp	r3, #32
 8002368:	f040 808c 	bne.w	8002484 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 800236c:	68bb      	ldr	r3, [r7, #8]
 800236e:	2b00      	cmp	r3, #0
 8002370:	d002      	beq.n	8002378 <HAL_UART_Receive+0x2e>
 8002372:	88fb      	ldrh	r3, [r7, #6]
 8002374:	2b00      	cmp	r3, #0
 8002376:	d101      	bne.n	800237c <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8002378:	2301      	movs	r3, #1
 800237a:	e084      	b.n	8002486 <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002382:	2b01      	cmp	r3, #1
 8002384:	d101      	bne.n	800238a <HAL_UART_Receive+0x40>
 8002386:	2302      	movs	r3, #2
 8002388:	e07d      	b.n	8002486 <HAL_UART_Receive+0x13c>
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	2201      	movs	r2, #1
 800238e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	2200      	movs	r2, #0
 8002396:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	2222      	movs	r2, #34	; 0x22
 800239c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	2200      	movs	r2, #0
 80023a4:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80023a6:	f7fe fd0b 	bl	8000dc0 <HAL_GetTick>
 80023aa:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	88fa      	ldrh	r2, [r7, #6]
 80023b0:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	88fa      	ldrh	r2, [r7, #6]
 80023b6:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	689b      	ldr	r3, [r3, #8]
 80023bc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80023c0:	d108      	bne.n	80023d4 <HAL_UART_Receive+0x8a>
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	691b      	ldr	r3, [r3, #16]
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d104      	bne.n	80023d4 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 80023ca:	2300      	movs	r3, #0
 80023cc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80023ce:	68bb      	ldr	r3, [r7, #8]
 80023d0:	61bb      	str	r3, [r7, #24]
 80023d2:	e003      	b.n	80023dc <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 80023d4:	68bb      	ldr	r3, [r7, #8]
 80023d6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80023d8:	2300      	movs	r3, #0
 80023da:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	2200      	movs	r2, #0
 80023e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 80023e4:	e043      	b.n	800246e <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80023e6:	683b      	ldr	r3, [r7, #0]
 80023e8:	9300      	str	r3, [sp, #0]
 80023ea:	697b      	ldr	r3, [r7, #20]
 80023ec:	2200      	movs	r2, #0
 80023ee:	2120      	movs	r1, #32
 80023f0:	68f8      	ldr	r0, [r7, #12]
 80023f2:	f000 fa9e 	bl	8002932 <UART_WaitOnFlagUntilTimeout>
 80023f6:	4603      	mov	r3, r0
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d001      	beq.n	8002400 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 80023fc:	2303      	movs	r3, #3
 80023fe:	e042      	b.n	8002486 <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8002400:	69fb      	ldr	r3, [r7, #28]
 8002402:	2b00      	cmp	r3, #0
 8002404:	d10c      	bne.n	8002420 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	685b      	ldr	r3, [r3, #4]
 800240c:	b29b      	uxth	r3, r3
 800240e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002412:	b29a      	uxth	r2, r3
 8002414:	69bb      	ldr	r3, [r7, #24]
 8002416:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8002418:	69bb      	ldr	r3, [r7, #24]
 800241a:	3302      	adds	r3, #2
 800241c:	61bb      	str	r3, [r7, #24]
 800241e:	e01f      	b.n	8002460 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	689b      	ldr	r3, [r3, #8]
 8002424:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002428:	d007      	beq.n	800243a <HAL_UART_Receive+0xf0>
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	689b      	ldr	r3, [r3, #8]
 800242e:	2b00      	cmp	r3, #0
 8002430:	d10a      	bne.n	8002448 <HAL_UART_Receive+0xfe>
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	691b      	ldr	r3, [r3, #16]
 8002436:	2b00      	cmp	r3, #0
 8002438:	d106      	bne.n	8002448 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	685b      	ldr	r3, [r3, #4]
 8002440:	b2da      	uxtb	r2, r3
 8002442:	69fb      	ldr	r3, [r7, #28]
 8002444:	701a      	strb	r2, [r3, #0]
 8002446:	e008      	b.n	800245a <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	685b      	ldr	r3, [r3, #4]
 800244e:	b2db      	uxtb	r3, r3
 8002450:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002454:	b2da      	uxtb	r2, r3
 8002456:	69fb      	ldr	r3, [r7, #28]
 8002458:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 800245a:	69fb      	ldr	r3, [r7, #28]
 800245c:	3301      	adds	r3, #1
 800245e:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002464:	b29b      	uxth	r3, r3
 8002466:	3b01      	subs	r3, #1
 8002468:	b29a      	uxth	r2, r3
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002472:	b29b      	uxth	r3, r3
 8002474:	2b00      	cmp	r3, #0
 8002476:	d1b6      	bne.n	80023e6 <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	2220      	movs	r2, #32
 800247c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8002480:	2300      	movs	r3, #0
 8002482:	e000      	b.n	8002486 <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 8002484:	2302      	movs	r3, #2
  }
}
 8002486:	4618      	mov	r0, r3
 8002488:	3720      	adds	r7, #32
 800248a:	46bd      	mov	sp, r7
 800248c:	bd80      	pop	{r7, pc}

0800248e <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800248e:	b580      	push	{r7, lr}
 8002490:	b084      	sub	sp, #16
 8002492:	af00      	add	r7, sp, #0
 8002494:	60f8      	str	r0, [r7, #12]
 8002496:	60b9      	str	r1, [r7, #8]
 8002498:	4613      	mov	r3, r2
 800249a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80024a2:	b2db      	uxtb	r3, r3
 80024a4:	2b20      	cmp	r3, #32
 80024a6:	d11d      	bne.n	80024e4 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80024a8:	68bb      	ldr	r3, [r7, #8]
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d002      	beq.n	80024b4 <HAL_UART_Receive_IT+0x26>
 80024ae:	88fb      	ldrh	r3, [r7, #6]
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d101      	bne.n	80024b8 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80024b4:	2301      	movs	r3, #1
 80024b6:	e016      	b.n	80024e6 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80024be:	2b01      	cmp	r3, #1
 80024c0:	d101      	bne.n	80024c6 <HAL_UART_Receive_IT+0x38>
 80024c2:	2302      	movs	r3, #2
 80024c4:	e00f      	b.n	80024e6 <HAL_UART_Receive_IT+0x58>
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	2201      	movs	r2, #1
 80024ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	2200      	movs	r2, #0
 80024d2:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 80024d4:	88fb      	ldrh	r3, [r7, #6]
 80024d6:	461a      	mov	r2, r3
 80024d8:	68b9      	ldr	r1, [r7, #8]
 80024da:	68f8      	ldr	r0, [r7, #12]
 80024dc:	f000 fa73 	bl	80029c6 <UART_Start_Receive_IT>
 80024e0:	4603      	mov	r3, r0
 80024e2:	e000      	b.n	80024e6 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 80024e4:	2302      	movs	r3, #2
  }
}
 80024e6:	4618      	mov	r0, r3
 80024e8:	3710      	adds	r7, #16
 80024ea:	46bd      	mov	sp, r7
 80024ec:	bd80      	pop	{r7, pc}

080024ee <HAL_UART_AbortReceive>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_UART_AbortReceive(UART_HandleTypeDef *huart)
{
 80024ee:	b580      	push	{r7, lr}
 80024f0:	b082      	sub	sp, #8
 80024f2:	af00      	add	r7, sp, #0
 80024f4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	68da      	ldr	r2, [r3, #12]
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8002504:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	695a      	ldr	r2, [r3, #20]
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	f022 0201 	bic.w	r2, r2, #1
 8002514:	615a      	str	r2, [r3, #20]

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800251a:	2b01      	cmp	r3, #1
 800251c:	d107      	bne.n	800252e <HAL_UART_AbortReceive+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	68da      	ldr	r2, [r3, #12]
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	f022 0210 	bic.w	r2, r2, #16
 800252c:	60da      	str	r2, [r3, #12]
  }

  /* Disable the UART DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	695b      	ldr	r3, [r3, #20]
 8002534:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002538:	2b00      	cmp	r3, #0
 800253a:	d024      	beq.n	8002586 <HAL_UART_AbortReceive+0x98>
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	695a      	ldr	r2, [r3, #20]
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800254a:	615a      	str	r2, [r3, #20]

    /* Abort the UART DMA Rx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002550:	2b00      	cmp	r3, #0
 8002552:	d018      	beq.n	8002586 <HAL_UART_AbortReceive+0x98>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002558:	2200      	movs	r2, #0
 800255a:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002560:	4618      	mov	r0, r3
 8002562:	f7fe fd68 	bl	8001036 <HAL_DMA_Abort>
 8002566:	4603      	mov	r3, r0
 8002568:	2b00      	cmp	r3, #0
 800256a:	d00c      	beq.n	8002586 <HAL_UART_AbortReceive+0x98>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002570:	4618      	mov	r0, r3
 8002572:	f7fe fe11 	bl	8001198 <HAL_DMA_GetError>
 8002576:	4603      	mov	r3, r0
 8002578:	2b20      	cmp	r3, #32
 800257a:	d104      	bne.n	8002586 <HAL_UART_AbortReceive+0x98>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	2210      	movs	r2, #16
 8002580:	641a      	str	r2, [r3, #64]	; 0x40

          return HAL_TIMEOUT;
 8002582:	2303      	movs	r3, #3
 8002584:	e00a      	b.n	800259c <HAL_UART_AbortReceive+0xae>
      }
    }
  }

  /* Reset Rx transfer counter */
  huart->RxXferCount = 0x00U;
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	2200      	movs	r2, #0
 800258a:	85da      	strh	r2, [r3, #46]	; 0x2e

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	2220      	movs	r2, #32
 8002590:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	2200      	movs	r2, #0
 8002598:	631a      	str	r2, [r3, #48]	; 0x30

  return HAL_OK;
 800259a:	2300      	movs	r3, #0
}
 800259c:	4618      	mov	r0, r3
 800259e:	3708      	adds	r7, #8
 80025a0:	46bd      	mov	sp, r7
 80025a2:	bd80      	pop	{r7, pc}

080025a4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80025a4:	b580      	push	{r7, lr}
 80025a6:	b08a      	sub	sp, #40	; 0x28
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	68db      	ldr	r3, [r3, #12]
 80025ba:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	695b      	ldr	r3, [r3, #20]
 80025c2:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 80025c4:	2300      	movs	r3, #0
 80025c6:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 80025c8:	2300      	movs	r3, #0
 80025ca:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80025cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025ce:	f003 030f 	and.w	r3, r3, #15
 80025d2:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 80025d4:	69bb      	ldr	r3, [r7, #24]
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d10d      	bne.n	80025f6 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80025da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025dc:	f003 0320 	and.w	r3, r3, #32
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d008      	beq.n	80025f6 <HAL_UART_IRQHandler+0x52>
 80025e4:	6a3b      	ldr	r3, [r7, #32]
 80025e6:	f003 0320 	and.w	r3, r3, #32
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d003      	beq.n	80025f6 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80025ee:	6878      	ldr	r0, [r7, #4]
 80025f0:	f000 fac9 	bl	8002b86 <UART_Receive_IT>
      return;
 80025f4:	e17b      	b.n	80028ee <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80025f6:	69bb      	ldr	r3, [r7, #24]
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	f000 80b1 	beq.w	8002760 <HAL_UART_IRQHandler+0x1bc>
 80025fe:	69fb      	ldr	r3, [r7, #28]
 8002600:	f003 0301 	and.w	r3, r3, #1
 8002604:	2b00      	cmp	r3, #0
 8002606:	d105      	bne.n	8002614 <HAL_UART_IRQHandler+0x70>
 8002608:	6a3b      	ldr	r3, [r7, #32]
 800260a:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800260e:	2b00      	cmp	r3, #0
 8002610:	f000 80a6 	beq.w	8002760 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002614:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002616:	f003 0301 	and.w	r3, r3, #1
 800261a:	2b00      	cmp	r3, #0
 800261c:	d00a      	beq.n	8002634 <HAL_UART_IRQHandler+0x90>
 800261e:	6a3b      	ldr	r3, [r7, #32]
 8002620:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002624:	2b00      	cmp	r3, #0
 8002626:	d005      	beq.n	8002634 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800262c:	f043 0201 	orr.w	r2, r3, #1
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002634:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002636:	f003 0304 	and.w	r3, r3, #4
 800263a:	2b00      	cmp	r3, #0
 800263c:	d00a      	beq.n	8002654 <HAL_UART_IRQHandler+0xb0>
 800263e:	69fb      	ldr	r3, [r7, #28]
 8002640:	f003 0301 	and.w	r3, r3, #1
 8002644:	2b00      	cmp	r3, #0
 8002646:	d005      	beq.n	8002654 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800264c:	f043 0202 	orr.w	r2, r3, #2
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002654:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002656:	f003 0302 	and.w	r3, r3, #2
 800265a:	2b00      	cmp	r3, #0
 800265c:	d00a      	beq.n	8002674 <HAL_UART_IRQHandler+0xd0>
 800265e:	69fb      	ldr	r3, [r7, #28]
 8002660:	f003 0301 	and.w	r3, r3, #1
 8002664:	2b00      	cmp	r3, #0
 8002666:	d005      	beq.n	8002674 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800266c:	f043 0204 	orr.w	r2, r3, #4
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8002674:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002676:	f003 0308 	and.w	r3, r3, #8
 800267a:	2b00      	cmp	r3, #0
 800267c:	d00f      	beq.n	800269e <HAL_UART_IRQHandler+0xfa>
 800267e:	6a3b      	ldr	r3, [r7, #32]
 8002680:	f003 0320 	and.w	r3, r3, #32
 8002684:	2b00      	cmp	r3, #0
 8002686:	d104      	bne.n	8002692 <HAL_UART_IRQHandler+0xee>
 8002688:	69fb      	ldr	r3, [r7, #28]
 800268a:	f003 0301 	and.w	r3, r3, #1
 800268e:	2b00      	cmp	r3, #0
 8002690:	d005      	beq.n	800269e <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002696:	f043 0208 	orr.w	r2, r3, #8
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	f000 811e 	beq.w	80028e4 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80026a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026aa:	f003 0320 	and.w	r3, r3, #32
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d007      	beq.n	80026c2 <HAL_UART_IRQHandler+0x11e>
 80026b2:	6a3b      	ldr	r3, [r7, #32]
 80026b4:	f003 0320 	and.w	r3, r3, #32
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d002      	beq.n	80026c2 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 80026bc:	6878      	ldr	r0, [r7, #4]
 80026be:	f000 fa62 	bl	8002b86 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	695b      	ldr	r3, [r3, #20]
 80026c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	bf14      	ite	ne
 80026d0:	2301      	movne	r3, #1
 80026d2:	2300      	moveq	r3, #0
 80026d4:	b2db      	uxtb	r3, r3
 80026d6:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026dc:	f003 0308 	and.w	r3, r3, #8
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d102      	bne.n	80026ea <HAL_UART_IRQHandler+0x146>
 80026e4:	697b      	ldr	r3, [r7, #20]
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d031      	beq.n	800274e <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80026ea:	6878      	ldr	r0, [r7, #4]
 80026ec:	f000 f9a4 	bl	8002a38 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	695b      	ldr	r3, [r3, #20]
 80026f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d023      	beq.n	8002746 <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	695a      	ldr	r2, [r3, #20]
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800270c:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002712:	2b00      	cmp	r3, #0
 8002714:	d013      	beq.n	800273e <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800271a:	4a76      	ldr	r2, [pc, #472]	; (80028f4 <HAL_UART_IRQHandler+0x350>)
 800271c:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002722:	4618      	mov	r0, r3
 8002724:	f7fe fcc2 	bl	80010ac <HAL_DMA_Abort_IT>
 8002728:	4603      	mov	r3, r0
 800272a:	2b00      	cmp	r3, #0
 800272c:	d016      	beq.n	800275c <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002732:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002734:	687a      	ldr	r2, [r7, #4]
 8002736:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002738:	4610      	mov	r0, r2
 800273a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800273c:	e00e      	b.n	800275c <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800273e:	6878      	ldr	r0, [r7, #4]
 8002740:	f000 f8e3 	bl	800290a <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002744:	e00a      	b.n	800275c <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002746:	6878      	ldr	r0, [r7, #4]
 8002748:	f000 f8df 	bl	800290a <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800274c:	e006      	b.n	800275c <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800274e:	6878      	ldr	r0, [r7, #4]
 8002750:	f000 f8db 	bl	800290a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	2200      	movs	r2, #0
 8002758:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800275a:	e0c3      	b.n	80028e4 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800275c:	bf00      	nop
    return;
 800275e:	e0c1      	b.n	80028e4 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002764:	2b01      	cmp	r3, #1
 8002766:	f040 80a1 	bne.w	80028ac <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 800276a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800276c:	f003 0310 	and.w	r3, r3, #16
 8002770:	2b00      	cmp	r3, #0
 8002772:	f000 809b 	beq.w	80028ac <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8002776:	6a3b      	ldr	r3, [r7, #32]
 8002778:	f003 0310 	and.w	r3, r3, #16
 800277c:	2b00      	cmp	r3, #0
 800277e:	f000 8095 	beq.w	80028ac <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002782:	2300      	movs	r3, #0
 8002784:	60fb      	str	r3, [r7, #12]
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	60fb      	str	r3, [r7, #12]
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	685b      	ldr	r3, [r3, #4]
 8002794:	60fb      	str	r3, [r7, #12]
 8002796:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	695b      	ldr	r3, [r3, #20]
 800279e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d04e      	beq.n	8002844 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	685b      	ldr	r3, [r3, #4]
 80027ae:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 80027b0:	8a3b      	ldrh	r3, [r7, #16]
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	f000 8098 	beq.w	80028e8 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80027bc:	8a3a      	ldrh	r2, [r7, #16]
 80027be:	429a      	cmp	r2, r3
 80027c0:	f080 8092 	bcs.w	80028e8 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	8a3a      	ldrh	r2, [r7, #16]
 80027c8:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027ce:	699b      	ldr	r3, [r3, #24]
 80027d0:	2b20      	cmp	r3, #32
 80027d2:	d02b      	beq.n	800282c <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	68da      	ldr	r2, [r3, #12]
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80027e2:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	695a      	ldr	r2, [r3, #20]
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f022 0201 	bic.w	r2, r2, #1
 80027f2:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	695a      	ldr	r2, [r3, #20]
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002802:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	2220      	movs	r2, #32
 8002808:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	2200      	movs	r2, #0
 8002810:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	68da      	ldr	r2, [r3, #12]
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f022 0210 	bic.w	r2, r2, #16
 8002820:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002826:	4618      	mov	r0, r3
 8002828:	f7fe fc05 	bl	8001036 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002834:	b29b      	uxth	r3, r3
 8002836:	1ad3      	subs	r3, r2, r3
 8002838:	b29b      	uxth	r3, r3
 800283a:	4619      	mov	r1, r3
 800283c:	6878      	ldr	r0, [r7, #4]
 800283e:	f000 f86d 	bl	800291c <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8002842:	e051      	b.n	80028e8 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800284c:	b29b      	uxth	r3, r3
 800284e:	1ad3      	subs	r3, r2, r3
 8002850:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002856:	b29b      	uxth	r3, r3
 8002858:	2b00      	cmp	r3, #0
 800285a:	d047      	beq.n	80028ec <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 800285c:	8a7b      	ldrh	r3, [r7, #18]
 800285e:	2b00      	cmp	r3, #0
 8002860:	d044      	beq.n	80028ec <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	68da      	ldr	r2, [r3, #12]
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8002870:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	695a      	ldr	r2, [r3, #20]
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	f022 0201 	bic.w	r2, r2, #1
 8002880:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	2220      	movs	r2, #32
 8002886:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	2200      	movs	r2, #0
 800288e:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	68da      	ldr	r2, [r3, #12]
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	f022 0210 	bic.w	r2, r2, #16
 800289e:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80028a0:	8a7b      	ldrh	r3, [r7, #18]
 80028a2:	4619      	mov	r1, r3
 80028a4:	6878      	ldr	r0, [r7, #4]
 80028a6:	f000 f839 	bl	800291c <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80028aa:	e01f      	b.n	80028ec <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80028ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d008      	beq.n	80028c8 <HAL_UART_IRQHandler+0x324>
 80028b6:	6a3b      	ldr	r3, [r7, #32]
 80028b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d003      	beq.n	80028c8 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 80028c0:	6878      	ldr	r0, [r7, #4]
 80028c2:	f000 f8f9 	bl	8002ab8 <UART_Transmit_IT>
    return;
 80028c6:	e012      	b.n	80028ee <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80028c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d00d      	beq.n	80028ee <HAL_UART_IRQHandler+0x34a>
 80028d2:	6a3b      	ldr	r3, [r7, #32]
 80028d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d008      	beq.n	80028ee <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 80028dc:	6878      	ldr	r0, [r7, #4]
 80028de:	f000 f93a 	bl	8002b56 <UART_EndTransmit_IT>
    return;
 80028e2:	e004      	b.n	80028ee <HAL_UART_IRQHandler+0x34a>
    return;
 80028e4:	bf00      	nop
 80028e6:	e002      	b.n	80028ee <HAL_UART_IRQHandler+0x34a>
      return;
 80028e8:	bf00      	nop
 80028ea:	e000      	b.n	80028ee <HAL_UART_IRQHandler+0x34a>
      return;
 80028ec:	bf00      	nop
  }
}
 80028ee:	3728      	adds	r7, #40	; 0x28
 80028f0:	46bd      	mov	sp, r7
 80028f2:	bd80      	pop	{r7, pc}
 80028f4:	08002a91 	.word	0x08002a91

080028f8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80028f8:	b480      	push	{r7}
 80028fa:	b083      	sub	sp, #12
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002900:	bf00      	nop
 8002902:	370c      	adds	r7, #12
 8002904:	46bd      	mov	sp, r7
 8002906:	bc80      	pop	{r7}
 8002908:	4770      	bx	lr

0800290a <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800290a:	b480      	push	{r7}
 800290c:	b083      	sub	sp, #12
 800290e:	af00      	add	r7, sp, #0
 8002910:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002912:	bf00      	nop
 8002914:	370c      	adds	r7, #12
 8002916:	46bd      	mov	sp, r7
 8002918:	bc80      	pop	{r7}
 800291a:	4770      	bx	lr

0800291c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800291c:	b480      	push	{r7}
 800291e:	b083      	sub	sp, #12
 8002920:	af00      	add	r7, sp, #0
 8002922:	6078      	str	r0, [r7, #4]
 8002924:	460b      	mov	r3, r1
 8002926:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002928:	bf00      	nop
 800292a:	370c      	adds	r7, #12
 800292c:	46bd      	mov	sp, r7
 800292e:	bc80      	pop	{r7}
 8002930:	4770      	bx	lr

08002932 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8002932:	b580      	push	{r7, lr}
 8002934:	b084      	sub	sp, #16
 8002936:	af00      	add	r7, sp, #0
 8002938:	60f8      	str	r0, [r7, #12]
 800293a:	60b9      	str	r1, [r7, #8]
 800293c:	603b      	str	r3, [r7, #0]
 800293e:	4613      	mov	r3, r2
 8002940:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002942:	e02c      	b.n	800299e <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002944:	69bb      	ldr	r3, [r7, #24]
 8002946:	f1b3 3fff 	cmp.w	r3, #4294967295
 800294a:	d028      	beq.n	800299e <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800294c:	69bb      	ldr	r3, [r7, #24]
 800294e:	2b00      	cmp	r3, #0
 8002950:	d007      	beq.n	8002962 <UART_WaitOnFlagUntilTimeout+0x30>
 8002952:	f7fe fa35 	bl	8000dc0 <HAL_GetTick>
 8002956:	4602      	mov	r2, r0
 8002958:	683b      	ldr	r3, [r7, #0]
 800295a:	1ad3      	subs	r3, r2, r3
 800295c:	69ba      	ldr	r2, [r7, #24]
 800295e:	429a      	cmp	r2, r3
 8002960:	d21d      	bcs.n	800299e <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	68da      	ldr	r2, [r3, #12]
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002970:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	695a      	ldr	r2, [r3, #20]
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	f022 0201 	bic.w	r2, r2, #1
 8002980:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	2220      	movs	r2, #32
 8002986:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	2220      	movs	r2, #32
 800298e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	2200      	movs	r2, #0
 8002996:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800299a:	2303      	movs	r3, #3
 800299c:	e00f      	b.n	80029be <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	681a      	ldr	r2, [r3, #0]
 80029a4:	68bb      	ldr	r3, [r7, #8]
 80029a6:	4013      	ands	r3, r2
 80029a8:	68ba      	ldr	r2, [r7, #8]
 80029aa:	429a      	cmp	r2, r3
 80029ac:	bf0c      	ite	eq
 80029ae:	2301      	moveq	r3, #1
 80029b0:	2300      	movne	r3, #0
 80029b2:	b2db      	uxtb	r3, r3
 80029b4:	461a      	mov	r2, r3
 80029b6:	79fb      	ldrb	r3, [r7, #7]
 80029b8:	429a      	cmp	r2, r3
 80029ba:	d0c3      	beq.n	8002944 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80029bc:	2300      	movs	r3, #0
}
 80029be:	4618      	mov	r0, r3
 80029c0:	3710      	adds	r7, #16
 80029c2:	46bd      	mov	sp, r7
 80029c4:	bd80      	pop	{r7, pc}

080029c6 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80029c6:	b480      	push	{r7}
 80029c8:	b085      	sub	sp, #20
 80029ca:	af00      	add	r7, sp, #0
 80029cc:	60f8      	str	r0, [r7, #12]
 80029ce:	60b9      	str	r1, [r7, #8]
 80029d0:	4613      	mov	r3, r2
 80029d2:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	68ba      	ldr	r2, [r7, #8]
 80029d8:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	88fa      	ldrh	r2, [r7, #6]
 80029de:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	88fa      	ldrh	r2, [r7, #6]
 80029e4:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	2200      	movs	r2, #0
 80029ea:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	2222      	movs	r2, #34	; 0x22
 80029f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	2200      	movs	r2, #0
 80029f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	68da      	ldr	r2, [r3, #12]
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002a0a:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	695a      	ldr	r2, [r3, #20]
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	f042 0201 	orr.w	r2, r2, #1
 8002a1a:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	68da      	ldr	r2, [r3, #12]
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	f042 0220 	orr.w	r2, r2, #32
 8002a2a:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8002a2c:	2300      	movs	r3, #0
}
 8002a2e:	4618      	mov	r0, r3
 8002a30:	3714      	adds	r7, #20
 8002a32:	46bd      	mov	sp, r7
 8002a34:	bc80      	pop	{r7}
 8002a36:	4770      	bx	lr

08002a38 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002a38:	b480      	push	{r7}
 8002a3a:	b083      	sub	sp, #12
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	68da      	ldr	r2, [r3, #12]
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8002a4e:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	695a      	ldr	r2, [r3, #20]
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f022 0201 	bic.w	r2, r2, #1
 8002a5e:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a64:	2b01      	cmp	r3, #1
 8002a66:	d107      	bne.n	8002a78 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	68da      	ldr	r2, [r3, #12]
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f022 0210 	bic.w	r2, r2, #16
 8002a76:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	2220      	movs	r2, #32
 8002a7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	2200      	movs	r2, #0
 8002a84:	631a      	str	r2, [r3, #48]	; 0x30
}
 8002a86:	bf00      	nop
 8002a88:	370c      	adds	r7, #12
 8002a8a:	46bd      	mov	sp, r7
 8002a8c:	bc80      	pop	{r7}
 8002a8e:	4770      	bx	lr

08002a90 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002a90:	b580      	push	{r7, lr}
 8002a92:	b084      	sub	sp, #16
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a9c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	2200      	movs	r2, #0
 8002aa2:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	2200      	movs	r2, #0
 8002aa8:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002aaa:	68f8      	ldr	r0, [r7, #12]
 8002aac:	f7ff ff2d 	bl	800290a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002ab0:	bf00      	nop
 8002ab2:	3710      	adds	r7, #16
 8002ab4:	46bd      	mov	sp, r7
 8002ab6:	bd80      	pop	{r7, pc}

08002ab8 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002ab8:	b480      	push	{r7}
 8002aba:	b085      	sub	sp, #20
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ac6:	b2db      	uxtb	r3, r3
 8002ac8:	2b21      	cmp	r3, #33	; 0x21
 8002aca:	d13e      	bne.n	8002b4a <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	689b      	ldr	r3, [r3, #8]
 8002ad0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ad4:	d114      	bne.n	8002b00 <UART_Transmit_IT+0x48>
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	691b      	ldr	r3, [r3, #16]
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d110      	bne.n	8002b00 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	6a1b      	ldr	r3, [r3, #32]
 8002ae2:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	881b      	ldrh	r3, [r3, #0]
 8002ae8:	461a      	mov	r2, r3
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002af2:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	6a1b      	ldr	r3, [r3, #32]
 8002af8:	1c9a      	adds	r2, r3, #2
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	621a      	str	r2, [r3, #32]
 8002afe:	e008      	b.n	8002b12 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	6a1b      	ldr	r3, [r3, #32]
 8002b04:	1c59      	adds	r1, r3, #1
 8002b06:	687a      	ldr	r2, [r7, #4]
 8002b08:	6211      	str	r1, [r2, #32]
 8002b0a:	781a      	ldrb	r2, [r3, #0]
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002b16:	b29b      	uxth	r3, r3
 8002b18:	3b01      	subs	r3, #1
 8002b1a:	b29b      	uxth	r3, r3
 8002b1c:	687a      	ldr	r2, [r7, #4]
 8002b1e:	4619      	mov	r1, r3
 8002b20:	84d1      	strh	r1, [r2, #38]	; 0x26
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d10f      	bne.n	8002b46 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	68da      	ldr	r2, [r3, #12]
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002b34:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	68da      	ldr	r2, [r3, #12]
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002b44:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002b46:	2300      	movs	r3, #0
 8002b48:	e000      	b.n	8002b4c <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8002b4a:	2302      	movs	r3, #2
  }
}
 8002b4c:	4618      	mov	r0, r3
 8002b4e:	3714      	adds	r7, #20
 8002b50:	46bd      	mov	sp, r7
 8002b52:	bc80      	pop	{r7}
 8002b54:	4770      	bx	lr

08002b56 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002b56:	b580      	push	{r7, lr}
 8002b58:	b082      	sub	sp, #8
 8002b5a:	af00      	add	r7, sp, #0
 8002b5c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	68da      	ldr	r2, [r3, #12]
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002b6c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	2220      	movs	r2, #32
 8002b72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002b76:	6878      	ldr	r0, [r7, #4]
 8002b78:	f7ff febe 	bl	80028f8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002b7c:	2300      	movs	r3, #0
}
 8002b7e:	4618      	mov	r0, r3
 8002b80:	3708      	adds	r7, #8
 8002b82:	46bd      	mov	sp, r7
 8002b84:	bd80      	pop	{r7, pc}

08002b86 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002b86:	b580      	push	{r7, lr}
 8002b88:	b086      	sub	sp, #24
 8002b8a:	af00      	add	r7, sp, #0
 8002b8c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002b94:	b2db      	uxtb	r3, r3
 8002b96:	2b22      	cmp	r3, #34	; 0x22
 8002b98:	f040 8099 	bne.w	8002cce <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	689b      	ldr	r3, [r3, #8]
 8002ba0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ba4:	d117      	bne.n	8002bd6 <UART_Receive_IT+0x50>
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	691b      	ldr	r3, [r3, #16]
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d113      	bne.n	8002bd6 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8002bae:	2300      	movs	r3, #0
 8002bb0:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bb6:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	685b      	ldr	r3, [r3, #4]
 8002bbe:	b29b      	uxth	r3, r3
 8002bc0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002bc4:	b29a      	uxth	r2, r3
 8002bc6:	693b      	ldr	r3, [r7, #16]
 8002bc8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bce:	1c9a      	adds	r2, r3, #2
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	629a      	str	r2, [r3, #40]	; 0x28
 8002bd4:	e026      	b.n	8002c24 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bda:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8002bdc:	2300      	movs	r3, #0
 8002bde:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	689b      	ldr	r3, [r3, #8]
 8002be4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002be8:	d007      	beq.n	8002bfa <UART_Receive_IT+0x74>
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	689b      	ldr	r3, [r3, #8]
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d10a      	bne.n	8002c08 <UART_Receive_IT+0x82>
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	691b      	ldr	r3, [r3, #16]
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d106      	bne.n	8002c08 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	685b      	ldr	r3, [r3, #4]
 8002c00:	b2da      	uxtb	r2, r3
 8002c02:	697b      	ldr	r3, [r7, #20]
 8002c04:	701a      	strb	r2, [r3, #0]
 8002c06:	e008      	b.n	8002c1a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	685b      	ldr	r3, [r3, #4]
 8002c0e:	b2db      	uxtb	r3, r3
 8002c10:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002c14:	b2da      	uxtb	r2, r3
 8002c16:	697b      	ldr	r3, [r7, #20]
 8002c18:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c1e:	1c5a      	adds	r2, r3, #1
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002c28:	b29b      	uxth	r3, r3
 8002c2a:	3b01      	subs	r3, #1
 8002c2c:	b29b      	uxth	r3, r3
 8002c2e:	687a      	ldr	r2, [r7, #4]
 8002c30:	4619      	mov	r1, r3
 8002c32:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d148      	bne.n	8002cca <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	68da      	ldr	r2, [r3, #12]
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	f022 0220 	bic.w	r2, r2, #32
 8002c46:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	68da      	ldr	r2, [r3, #12]
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002c56:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	695a      	ldr	r2, [r3, #20]
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	f022 0201 	bic.w	r2, r2, #1
 8002c66:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	2220      	movs	r2, #32
 8002c6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c74:	2b01      	cmp	r3, #1
 8002c76:	d123      	bne.n	8002cc0 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	2200      	movs	r2, #0
 8002c7c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	68da      	ldr	r2, [r3, #12]
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	f022 0210 	bic.w	r2, r2, #16
 8002c8c:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	f003 0310 	and.w	r3, r3, #16
 8002c98:	2b10      	cmp	r3, #16
 8002c9a:	d10a      	bne.n	8002cb2 <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002c9c:	2300      	movs	r3, #0
 8002c9e:	60fb      	str	r3, [r7, #12]
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	60fb      	str	r3, [r7, #12]
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	685b      	ldr	r3, [r3, #4]
 8002cae:	60fb      	str	r3, [r7, #12]
 8002cb0:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002cb6:	4619      	mov	r1, r3
 8002cb8:	6878      	ldr	r0, [r7, #4]
 8002cba:	f7ff fe2f 	bl	800291c <HAL_UARTEx_RxEventCallback>
 8002cbe:	e002      	b.n	8002cc6 <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8002cc0:	6878      	ldr	r0, [r7, #4]
 8002cc2:	f7fd fce7 	bl	8000694 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8002cc6:	2300      	movs	r3, #0
 8002cc8:	e002      	b.n	8002cd0 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 8002cca:	2300      	movs	r3, #0
 8002ccc:	e000      	b.n	8002cd0 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8002cce:	2302      	movs	r3, #2
  }
}
 8002cd0:	4618      	mov	r0, r3
 8002cd2:	3718      	adds	r7, #24
 8002cd4:	46bd      	mov	sp, r7
 8002cd6:	bd80      	pop	{r7, pc}

08002cd8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002cd8:	b580      	push	{r7, lr}
 8002cda:	b084      	sub	sp, #16
 8002cdc:	af00      	add	r7, sp, #0
 8002cde:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	691b      	ldr	r3, [r3, #16]
 8002ce6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	68da      	ldr	r2, [r3, #12]
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	430a      	orrs	r2, r1
 8002cf4:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	689a      	ldr	r2, [r3, #8]
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	691b      	ldr	r3, [r3, #16]
 8002cfe:	431a      	orrs	r2, r3
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	695b      	ldr	r3, [r3, #20]
 8002d04:	4313      	orrs	r3, r2
 8002d06:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	68db      	ldr	r3, [r3, #12]
 8002d0e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8002d12:	f023 030c 	bic.w	r3, r3, #12
 8002d16:	687a      	ldr	r2, [r7, #4]
 8002d18:	6812      	ldr	r2, [r2, #0]
 8002d1a:	68b9      	ldr	r1, [r7, #8]
 8002d1c:	430b      	orrs	r3, r1
 8002d1e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	695b      	ldr	r3, [r3, #20]
 8002d26:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	699a      	ldr	r2, [r3, #24]
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	430a      	orrs	r2, r1
 8002d34:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	4a2c      	ldr	r2, [pc, #176]	; (8002dec <UART_SetConfig+0x114>)
 8002d3c:	4293      	cmp	r3, r2
 8002d3e:	d103      	bne.n	8002d48 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002d40:	f7ff f9f2 	bl	8002128 <HAL_RCC_GetPCLK2Freq>
 8002d44:	60f8      	str	r0, [r7, #12]
 8002d46:	e002      	b.n	8002d4e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002d48:	f7ff f9da 	bl	8002100 <HAL_RCC_GetPCLK1Freq>
 8002d4c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002d4e:	68fa      	ldr	r2, [r7, #12]
 8002d50:	4613      	mov	r3, r2
 8002d52:	009b      	lsls	r3, r3, #2
 8002d54:	4413      	add	r3, r2
 8002d56:	009a      	lsls	r2, r3, #2
 8002d58:	441a      	add	r2, r3
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	685b      	ldr	r3, [r3, #4]
 8002d5e:	009b      	lsls	r3, r3, #2
 8002d60:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d64:	4a22      	ldr	r2, [pc, #136]	; (8002df0 <UART_SetConfig+0x118>)
 8002d66:	fba2 2303 	umull	r2, r3, r2, r3
 8002d6a:	095b      	lsrs	r3, r3, #5
 8002d6c:	0119      	lsls	r1, r3, #4
 8002d6e:	68fa      	ldr	r2, [r7, #12]
 8002d70:	4613      	mov	r3, r2
 8002d72:	009b      	lsls	r3, r3, #2
 8002d74:	4413      	add	r3, r2
 8002d76:	009a      	lsls	r2, r3, #2
 8002d78:	441a      	add	r2, r3
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	685b      	ldr	r3, [r3, #4]
 8002d7e:	009b      	lsls	r3, r3, #2
 8002d80:	fbb2 f2f3 	udiv	r2, r2, r3
 8002d84:	4b1a      	ldr	r3, [pc, #104]	; (8002df0 <UART_SetConfig+0x118>)
 8002d86:	fba3 0302 	umull	r0, r3, r3, r2
 8002d8a:	095b      	lsrs	r3, r3, #5
 8002d8c:	2064      	movs	r0, #100	; 0x64
 8002d8e:	fb00 f303 	mul.w	r3, r0, r3
 8002d92:	1ad3      	subs	r3, r2, r3
 8002d94:	011b      	lsls	r3, r3, #4
 8002d96:	3332      	adds	r3, #50	; 0x32
 8002d98:	4a15      	ldr	r2, [pc, #84]	; (8002df0 <UART_SetConfig+0x118>)
 8002d9a:	fba2 2303 	umull	r2, r3, r2, r3
 8002d9e:	095b      	lsrs	r3, r3, #5
 8002da0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002da4:	4419      	add	r1, r3
 8002da6:	68fa      	ldr	r2, [r7, #12]
 8002da8:	4613      	mov	r3, r2
 8002daa:	009b      	lsls	r3, r3, #2
 8002dac:	4413      	add	r3, r2
 8002dae:	009a      	lsls	r2, r3, #2
 8002db0:	441a      	add	r2, r3
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	685b      	ldr	r3, [r3, #4]
 8002db6:	009b      	lsls	r3, r3, #2
 8002db8:	fbb2 f2f3 	udiv	r2, r2, r3
 8002dbc:	4b0c      	ldr	r3, [pc, #48]	; (8002df0 <UART_SetConfig+0x118>)
 8002dbe:	fba3 0302 	umull	r0, r3, r3, r2
 8002dc2:	095b      	lsrs	r3, r3, #5
 8002dc4:	2064      	movs	r0, #100	; 0x64
 8002dc6:	fb00 f303 	mul.w	r3, r0, r3
 8002dca:	1ad3      	subs	r3, r2, r3
 8002dcc:	011b      	lsls	r3, r3, #4
 8002dce:	3332      	adds	r3, #50	; 0x32
 8002dd0:	4a07      	ldr	r2, [pc, #28]	; (8002df0 <UART_SetConfig+0x118>)
 8002dd2:	fba2 2303 	umull	r2, r3, r2, r3
 8002dd6:	095b      	lsrs	r3, r3, #5
 8002dd8:	f003 020f 	and.w	r2, r3, #15
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	440a      	add	r2, r1
 8002de2:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002de4:	bf00      	nop
 8002de6:	3710      	adds	r7, #16
 8002de8:	46bd      	mov	sp, r7
 8002dea:	bd80      	pop	{r7, pc}
 8002dec:	40013800 	.word	0x40013800
 8002df0:	51eb851f 	.word	0x51eb851f

08002df4 <__errno>:
 8002df4:	4b01      	ldr	r3, [pc, #4]	; (8002dfc <__errno+0x8>)
 8002df6:	6818      	ldr	r0, [r3, #0]
 8002df8:	4770      	bx	lr
 8002dfa:	bf00      	nop
 8002dfc:	20000010 	.word	0x20000010

08002e00 <__libc_init_array>:
 8002e00:	b570      	push	{r4, r5, r6, lr}
 8002e02:	2600      	movs	r6, #0
 8002e04:	4d0c      	ldr	r5, [pc, #48]	; (8002e38 <__libc_init_array+0x38>)
 8002e06:	4c0d      	ldr	r4, [pc, #52]	; (8002e3c <__libc_init_array+0x3c>)
 8002e08:	1b64      	subs	r4, r4, r5
 8002e0a:	10a4      	asrs	r4, r4, #2
 8002e0c:	42a6      	cmp	r6, r4
 8002e0e:	d109      	bne.n	8002e24 <__libc_init_array+0x24>
 8002e10:	f001 fd26 	bl	8004860 <_init>
 8002e14:	2600      	movs	r6, #0
 8002e16:	4d0a      	ldr	r5, [pc, #40]	; (8002e40 <__libc_init_array+0x40>)
 8002e18:	4c0a      	ldr	r4, [pc, #40]	; (8002e44 <__libc_init_array+0x44>)
 8002e1a:	1b64      	subs	r4, r4, r5
 8002e1c:	10a4      	asrs	r4, r4, #2
 8002e1e:	42a6      	cmp	r6, r4
 8002e20:	d105      	bne.n	8002e2e <__libc_init_array+0x2e>
 8002e22:	bd70      	pop	{r4, r5, r6, pc}
 8002e24:	f855 3b04 	ldr.w	r3, [r5], #4
 8002e28:	4798      	blx	r3
 8002e2a:	3601      	adds	r6, #1
 8002e2c:	e7ee      	b.n	8002e0c <__libc_init_array+0xc>
 8002e2e:	f855 3b04 	ldr.w	r3, [r5], #4
 8002e32:	4798      	blx	r3
 8002e34:	3601      	adds	r6, #1
 8002e36:	e7f2      	b.n	8002e1e <__libc_init_array+0x1e>
 8002e38:	08004c5c 	.word	0x08004c5c
 8002e3c:	08004c5c 	.word	0x08004c5c
 8002e40:	08004c5c 	.word	0x08004c5c
 8002e44:	08004c60 	.word	0x08004c60

08002e48 <memset>:
 8002e48:	4603      	mov	r3, r0
 8002e4a:	4402      	add	r2, r0
 8002e4c:	4293      	cmp	r3, r2
 8002e4e:	d100      	bne.n	8002e52 <memset+0xa>
 8002e50:	4770      	bx	lr
 8002e52:	f803 1b01 	strb.w	r1, [r3], #1
 8002e56:	e7f9      	b.n	8002e4c <memset+0x4>

08002e58 <iprintf>:
 8002e58:	b40f      	push	{r0, r1, r2, r3}
 8002e5a:	4b0a      	ldr	r3, [pc, #40]	; (8002e84 <iprintf+0x2c>)
 8002e5c:	b513      	push	{r0, r1, r4, lr}
 8002e5e:	681c      	ldr	r4, [r3, #0]
 8002e60:	b124      	cbz	r4, 8002e6c <iprintf+0x14>
 8002e62:	69a3      	ldr	r3, [r4, #24]
 8002e64:	b913      	cbnz	r3, 8002e6c <iprintf+0x14>
 8002e66:	4620      	mov	r0, r4
 8002e68:	f000 faec 	bl	8003444 <__sinit>
 8002e6c:	ab05      	add	r3, sp, #20
 8002e6e:	4620      	mov	r0, r4
 8002e70:	9a04      	ldr	r2, [sp, #16]
 8002e72:	68a1      	ldr	r1, [r4, #8]
 8002e74:	9301      	str	r3, [sp, #4]
 8002e76:	f000 fed5 	bl	8003c24 <_vfiprintf_r>
 8002e7a:	b002      	add	sp, #8
 8002e7c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002e80:	b004      	add	sp, #16
 8002e82:	4770      	bx	lr
 8002e84:	20000010 	.word	0x20000010

08002e88 <_puts_r>:
 8002e88:	b570      	push	{r4, r5, r6, lr}
 8002e8a:	460e      	mov	r6, r1
 8002e8c:	4605      	mov	r5, r0
 8002e8e:	b118      	cbz	r0, 8002e98 <_puts_r+0x10>
 8002e90:	6983      	ldr	r3, [r0, #24]
 8002e92:	b90b      	cbnz	r3, 8002e98 <_puts_r+0x10>
 8002e94:	f000 fad6 	bl	8003444 <__sinit>
 8002e98:	69ab      	ldr	r3, [r5, #24]
 8002e9a:	68ac      	ldr	r4, [r5, #8]
 8002e9c:	b913      	cbnz	r3, 8002ea4 <_puts_r+0x1c>
 8002e9e:	4628      	mov	r0, r5
 8002ea0:	f000 fad0 	bl	8003444 <__sinit>
 8002ea4:	4b2c      	ldr	r3, [pc, #176]	; (8002f58 <_puts_r+0xd0>)
 8002ea6:	429c      	cmp	r4, r3
 8002ea8:	d120      	bne.n	8002eec <_puts_r+0x64>
 8002eaa:	686c      	ldr	r4, [r5, #4]
 8002eac:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002eae:	07db      	lsls	r3, r3, #31
 8002eb0:	d405      	bmi.n	8002ebe <_puts_r+0x36>
 8002eb2:	89a3      	ldrh	r3, [r4, #12]
 8002eb4:	0598      	lsls	r0, r3, #22
 8002eb6:	d402      	bmi.n	8002ebe <_puts_r+0x36>
 8002eb8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002eba:	f000 fb61 	bl	8003580 <__retarget_lock_acquire_recursive>
 8002ebe:	89a3      	ldrh	r3, [r4, #12]
 8002ec0:	0719      	lsls	r1, r3, #28
 8002ec2:	d51d      	bpl.n	8002f00 <_puts_r+0x78>
 8002ec4:	6923      	ldr	r3, [r4, #16]
 8002ec6:	b1db      	cbz	r3, 8002f00 <_puts_r+0x78>
 8002ec8:	3e01      	subs	r6, #1
 8002eca:	68a3      	ldr	r3, [r4, #8]
 8002ecc:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8002ed0:	3b01      	subs	r3, #1
 8002ed2:	60a3      	str	r3, [r4, #8]
 8002ed4:	bb39      	cbnz	r1, 8002f26 <_puts_r+0x9e>
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	da38      	bge.n	8002f4c <_puts_r+0xc4>
 8002eda:	4622      	mov	r2, r4
 8002edc:	210a      	movs	r1, #10
 8002ede:	4628      	mov	r0, r5
 8002ee0:	f000 f8b8 	bl	8003054 <__swbuf_r>
 8002ee4:	3001      	adds	r0, #1
 8002ee6:	d011      	beq.n	8002f0c <_puts_r+0x84>
 8002ee8:	250a      	movs	r5, #10
 8002eea:	e011      	b.n	8002f10 <_puts_r+0x88>
 8002eec:	4b1b      	ldr	r3, [pc, #108]	; (8002f5c <_puts_r+0xd4>)
 8002eee:	429c      	cmp	r4, r3
 8002ef0:	d101      	bne.n	8002ef6 <_puts_r+0x6e>
 8002ef2:	68ac      	ldr	r4, [r5, #8]
 8002ef4:	e7da      	b.n	8002eac <_puts_r+0x24>
 8002ef6:	4b1a      	ldr	r3, [pc, #104]	; (8002f60 <_puts_r+0xd8>)
 8002ef8:	429c      	cmp	r4, r3
 8002efa:	bf08      	it	eq
 8002efc:	68ec      	ldreq	r4, [r5, #12]
 8002efe:	e7d5      	b.n	8002eac <_puts_r+0x24>
 8002f00:	4621      	mov	r1, r4
 8002f02:	4628      	mov	r0, r5
 8002f04:	f000 f90a 	bl	800311c <__swsetup_r>
 8002f08:	2800      	cmp	r0, #0
 8002f0a:	d0dd      	beq.n	8002ec8 <_puts_r+0x40>
 8002f0c:	f04f 35ff 	mov.w	r5, #4294967295
 8002f10:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002f12:	07da      	lsls	r2, r3, #31
 8002f14:	d405      	bmi.n	8002f22 <_puts_r+0x9a>
 8002f16:	89a3      	ldrh	r3, [r4, #12]
 8002f18:	059b      	lsls	r3, r3, #22
 8002f1a:	d402      	bmi.n	8002f22 <_puts_r+0x9a>
 8002f1c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002f1e:	f000 fb30 	bl	8003582 <__retarget_lock_release_recursive>
 8002f22:	4628      	mov	r0, r5
 8002f24:	bd70      	pop	{r4, r5, r6, pc}
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	da04      	bge.n	8002f34 <_puts_r+0xac>
 8002f2a:	69a2      	ldr	r2, [r4, #24]
 8002f2c:	429a      	cmp	r2, r3
 8002f2e:	dc06      	bgt.n	8002f3e <_puts_r+0xb6>
 8002f30:	290a      	cmp	r1, #10
 8002f32:	d004      	beq.n	8002f3e <_puts_r+0xb6>
 8002f34:	6823      	ldr	r3, [r4, #0]
 8002f36:	1c5a      	adds	r2, r3, #1
 8002f38:	6022      	str	r2, [r4, #0]
 8002f3a:	7019      	strb	r1, [r3, #0]
 8002f3c:	e7c5      	b.n	8002eca <_puts_r+0x42>
 8002f3e:	4622      	mov	r2, r4
 8002f40:	4628      	mov	r0, r5
 8002f42:	f000 f887 	bl	8003054 <__swbuf_r>
 8002f46:	3001      	adds	r0, #1
 8002f48:	d1bf      	bne.n	8002eca <_puts_r+0x42>
 8002f4a:	e7df      	b.n	8002f0c <_puts_r+0x84>
 8002f4c:	250a      	movs	r5, #10
 8002f4e:	6823      	ldr	r3, [r4, #0]
 8002f50:	1c5a      	adds	r2, r3, #1
 8002f52:	6022      	str	r2, [r4, #0]
 8002f54:	701d      	strb	r5, [r3, #0]
 8002f56:	e7db      	b.n	8002f10 <_puts_r+0x88>
 8002f58:	08004acc 	.word	0x08004acc
 8002f5c:	08004aec 	.word	0x08004aec
 8002f60:	08004aac 	.word	0x08004aac

08002f64 <puts>:
 8002f64:	4b02      	ldr	r3, [pc, #8]	; (8002f70 <puts+0xc>)
 8002f66:	4601      	mov	r1, r0
 8002f68:	6818      	ldr	r0, [r3, #0]
 8002f6a:	f7ff bf8d 	b.w	8002e88 <_puts_r>
 8002f6e:	bf00      	nop
 8002f70:	20000010 	.word	0x20000010

08002f74 <siscanf>:
 8002f74:	b40e      	push	{r1, r2, r3}
 8002f76:	f44f 7201 	mov.w	r2, #516	; 0x204
 8002f7a:	b530      	push	{r4, r5, lr}
 8002f7c:	b09c      	sub	sp, #112	; 0x70
 8002f7e:	ac1f      	add	r4, sp, #124	; 0x7c
 8002f80:	f854 5b04 	ldr.w	r5, [r4], #4
 8002f84:	f8ad 2014 	strh.w	r2, [sp, #20]
 8002f88:	9002      	str	r0, [sp, #8]
 8002f8a:	9006      	str	r0, [sp, #24]
 8002f8c:	f7fd f8e8 	bl	8000160 <strlen>
 8002f90:	4b0b      	ldr	r3, [pc, #44]	; (8002fc0 <siscanf+0x4c>)
 8002f92:	9003      	str	r0, [sp, #12]
 8002f94:	930b      	str	r3, [sp, #44]	; 0x2c
 8002f96:	2300      	movs	r3, #0
 8002f98:	930f      	str	r3, [sp, #60]	; 0x3c
 8002f9a:	9314      	str	r3, [sp, #80]	; 0x50
 8002f9c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002fa0:	9007      	str	r0, [sp, #28]
 8002fa2:	4808      	ldr	r0, [pc, #32]	; (8002fc4 <siscanf+0x50>)
 8002fa4:	f8ad 3016 	strh.w	r3, [sp, #22]
 8002fa8:	462a      	mov	r2, r5
 8002faa:	4623      	mov	r3, r4
 8002fac:	a902      	add	r1, sp, #8
 8002fae:	6800      	ldr	r0, [r0, #0]
 8002fb0:	9401      	str	r4, [sp, #4]
 8002fb2:	f000 fc95 	bl	80038e0 <__ssvfiscanf_r>
 8002fb6:	b01c      	add	sp, #112	; 0x70
 8002fb8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8002fbc:	b003      	add	sp, #12
 8002fbe:	4770      	bx	lr
 8002fc0:	08002feb 	.word	0x08002feb
 8002fc4:	20000010 	.word	0x20000010

08002fc8 <__sread>:
 8002fc8:	b510      	push	{r4, lr}
 8002fca:	460c      	mov	r4, r1
 8002fcc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002fd0:	f001 fa40 	bl	8004454 <_read_r>
 8002fd4:	2800      	cmp	r0, #0
 8002fd6:	bfab      	itete	ge
 8002fd8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8002fda:	89a3      	ldrhlt	r3, [r4, #12]
 8002fdc:	181b      	addge	r3, r3, r0
 8002fde:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8002fe2:	bfac      	ite	ge
 8002fe4:	6563      	strge	r3, [r4, #84]	; 0x54
 8002fe6:	81a3      	strhlt	r3, [r4, #12]
 8002fe8:	bd10      	pop	{r4, pc}

08002fea <__seofread>:
 8002fea:	2000      	movs	r0, #0
 8002fec:	4770      	bx	lr

08002fee <__swrite>:
 8002fee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002ff2:	461f      	mov	r7, r3
 8002ff4:	898b      	ldrh	r3, [r1, #12]
 8002ff6:	4605      	mov	r5, r0
 8002ff8:	05db      	lsls	r3, r3, #23
 8002ffa:	460c      	mov	r4, r1
 8002ffc:	4616      	mov	r6, r2
 8002ffe:	d505      	bpl.n	800300c <__swrite+0x1e>
 8003000:	2302      	movs	r3, #2
 8003002:	2200      	movs	r2, #0
 8003004:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003008:	f000 fabc 	bl	8003584 <_lseek_r>
 800300c:	89a3      	ldrh	r3, [r4, #12]
 800300e:	4632      	mov	r2, r6
 8003010:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003014:	81a3      	strh	r3, [r4, #12]
 8003016:	4628      	mov	r0, r5
 8003018:	463b      	mov	r3, r7
 800301a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800301e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003022:	f000 b869 	b.w	80030f8 <_write_r>

08003026 <__sseek>:
 8003026:	b510      	push	{r4, lr}
 8003028:	460c      	mov	r4, r1
 800302a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800302e:	f000 faa9 	bl	8003584 <_lseek_r>
 8003032:	1c43      	adds	r3, r0, #1
 8003034:	89a3      	ldrh	r3, [r4, #12]
 8003036:	bf15      	itete	ne
 8003038:	6560      	strne	r0, [r4, #84]	; 0x54
 800303a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800303e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8003042:	81a3      	strheq	r3, [r4, #12]
 8003044:	bf18      	it	ne
 8003046:	81a3      	strhne	r3, [r4, #12]
 8003048:	bd10      	pop	{r4, pc}

0800304a <__sclose>:
 800304a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800304e:	f000 b8d3 	b.w	80031f8 <_close_r>
	...

08003054 <__swbuf_r>:
 8003054:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003056:	460e      	mov	r6, r1
 8003058:	4614      	mov	r4, r2
 800305a:	4605      	mov	r5, r0
 800305c:	b118      	cbz	r0, 8003066 <__swbuf_r+0x12>
 800305e:	6983      	ldr	r3, [r0, #24]
 8003060:	b90b      	cbnz	r3, 8003066 <__swbuf_r+0x12>
 8003062:	f000 f9ef 	bl	8003444 <__sinit>
 8003066:	4b21      	ldr	r3, [pc, #132]	; (80030ec <__swbuf_r+0x98>)
 8003068:	429c      	cmp	r4, r3
 800306a:	d12b      	bne.n	80030c4 <__swbuf_r+0x70>
 800306c:	686c      	ldr	r4, [r5, #4]
 800306e:	69a3      	ldr	r3, [r4, #24]
 8003070:	60a3      	str	r3, [r4, #8]
 8003072:	89a3      	ldrh	r3, [r4, #12]
 8003074:	071a      	lsls	r2, r3, #28
 8003076:	d52f      	bpl.n	80030d8 <__swbuf_r+0x84>
 8003078:	6923      	ldr	r3, [r4, #16]
 800307a:	b36b      	cbz	r3, 80030d8 <__swbuf_r+0x84>
 800307c:	6923      	ldr	r3, [r4, #16]
 800307e:	6820      	ldr	r0, [r4, #0]
 8003080:	b2f6      	uxtb	r6, r6
 8003082:	1ac0      	subs	r0, r0, r3
 8003084:	6963      	ldr	r3, [r4, #20]
 8003086:	4637      	mov	r7, r6
 8003088:	4283      	cmp	r3, r0
 800308a:	dc04      	bgt.n	8003096 <__swbuf_r+0x42>
 800308c:	4621      	mov	r1, r4
 800308e:	4628      	mov	r0, r5
 8003090:	f000 f944 	bl	800331c <_fflush_r>
 8003094:	bb30      	cbnz	r0, 80030e4 <__swbuf_r+0x90>
 8003096:	68a3      	ldr	r3, [r4, #8]
 8003098:	3001      	adds	r0, #1
 800309a:	3b01      	subs	r3, #1
 800309c:	60a3      	str	r3, [r4, #8]
 800309e:	6823      	ldr	r3, [r4, #0]
 80030a0:	1c5a      	adds	r2, r3, #1
 80030a2:	6022      	str	r2, [r4, #0]
 80030a4:	701e      	strb	r6, [r3, #0]
 80030a6:	6963      	ldr	r3, [r4, #20]
 80030a8:	4283      	cmp	r3, r0
 80030aa:	d004      	beq.n	80030b6 <__swbuf_r+0x62>
 80030ac:	89a3      	ldrh	r3, [r4, #12]
 80030ae:	07db      	lsls	r3, r3, #31
 80030b0:	d506      	bpl.n	80030c0 <__swbuf_r+0x6c>
 80030b2:	2e0a      	cmp	r6, #10
 80030b4:	d104      	bne.n	80030c0 <__swbuf_r+0x6c>
 80030b6:	4621      	mov	r1, r4
 80030b8:	4628      	mov	r0, r5
 80030ba:	f000 f92f 	bl	800331c <_fflush_r>
 80030be:	b988      	cbnz	r0, 80030e4 <__swbuf_r+0x90>
 80030c0:	4638      	mov	r0, r7
 80030c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80030c4:	4b0a      	ldr	r3, [pc, #40]	; (80030f0 <__swbuf_r+0x9c>)
 80030c6:	429c      	cmp	r4, r3
 80030c8:	d101      	bne.n	80030ce <__swbuf_r+0x7a>
 80030ca:	68ac      	ldr	r4, [r5, #8]
 80030cc:	e7cf      	b.n	800306e <__swbuf_r+0x1a>
 80030ce:	4b09      	ldr	r3, [pc, #36]	; (80030f4 <__swbuf_r+0xa0>)
 80030d0:	429c      	cmp	r4, r3
 80030d2:	bf08      	it	eq
 80030d4:	68ec      	ldreq	r4, [r5, #12]
 80030d6:	e7ca      	b.n	800306e <__swbuf_r+0x1a>
 80030d8:	4621      	mov	r1, r4
 80030da:	4628      	mov	r0, r5
 80030dc:	f000 f81e 	bl	800311c <__swsetup_r>
 80030e0:	2800      	cmp	r0, #0
 80030e2:	d0cb      	beq.n	800307c <__swbuf_r+0x28>
 80030e4:	f04f 37ff 	mov.w	r7, #4294967295
 80030e8:	e7ea      	b.n	80030c0 <__swbuf_r+0x6c>
 80030ea:	bf00      	nop
 80030ec:	08004acc 	.word	0x08004acc
 80030f0:	08004aec 	.word	0x08004aec
 80030f4:	08004aac 	.word	0x08004aac

080030f8 <_write_r>:
 80030f8:	b538      	push	{r3, r4, r5, lr}
 80030fa:	4604      	mov	r4, r0
 80030fc:	4608      	mov	r0, r1
 80030fe:	4611      	mov	r1, r2
 8003100:	2200      	movs	r2, #0
 8003102:	4d05      	ldr	r5, [pc, #20]	; (8003118 <_write_r+0x20>)
 8003104:	602a      	str	r2, [r5, #0]
 8003106:	461a      	mov	r2, r3
 8003108:	f7fd fb79 	bl	80007fe <_write>
 800310c:	1c43      	adds	r3, r0, #1
 800310e:	d102      	bne.n	8003116 <_write_r+0x1e>
 8003110:	682b      	ldr	r3, [r5, #0]
 8003112:	b103      	cbz	r3, 8003116 <_write_r+0x1e>
 8003114:	6023      	str	r3, [r4, #0]
 8003116:	bd38      	pop	{r3, r4, r5, pc}
 8003118:	20000524 	.word	0x20000524

0800311c <__swsetup_r>:
 800311c:	4b32      	ldr	r3, [pc, #200]	; (80031e8 <__swsetup_r+0xcc>)
 800311e:	b570      	push	{r4, r5, r6, lr}
 8003120:	681d      	ldr	r5, [r3, #0]
 8003122:	4606      	mov	r6, r0
 8003124:	460c      	mov	r4, r1
 8003126:	b125      	cbz	r5, 8003132 <__swsetup_r+0x16>
 8003128:	69ab      	ldr	r3, [r5, #24]
 800312a:	b913      	cbnz	r3, 8003132 <__swsetup_r+0x16>
 800312c:	4628      	mov	r0, r5
 800312e:	f000 f989 	bl	8003444 <__sinit>
 8003132:	4b2e      	ldr	r3, [pc, #184]	; (80031ec <__swsetup_r+0xd0>)
 8003134:	429c      	cmp	r4, r3
 8003136:	d10f      	bne.n	8003158 <__swsetup_r+0x3c>
 8003138:	686c      	ldr	r4, [r5, #4]
 800313a:	89a3      	ldrh	r3, [r4, #12]
 800313c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003140:	0719      	lsls	r1, r3, #28
 8003142:	d42c      	bmi.n	800319e <__swsetup_r+0x82>
 8003144:	06dd      	lsls	r5, r3, #27
 8003146:	d411      	bmi.n	800316c <__swsetup_r+0x50>
 8003148:	2309      	movs	r3, #9
 800314a:	6033      	str	r3, [r6, #0]
 800314c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8003150:	f04f 30ff 	mov.w	r0, #4294967295
 8003154:	81a3      	strh	r3, [r4, #12]
 8003156:	e03e      	b.n	80031d6 <__swsetup_r+0xba>
 8003158:	4b25      	ldr	r3, [pc, #148]	; (80031f0 <__swsetup_r+0xd4>)
 800315a:	429c      	cmp	r4, r3
 800315c:	d101      	bne.n	8003162 <__swsetup_r+0x46>
 800315e:	68ac      	ldr	r4, [r5, #8]
 8003160:	e7eb      	b.n	800313a <__swsetup_r+0x1e>
 8003162:	4b24      	ldr	r3, [pc, #144]	; (80031f4 <__swsetup_r+0xd8>)
 8003164:	429c      	cmp	r4, r3
 8003166:	bf08      	it	eq
 8003168:	68ec      	ldreq	r4, [r5, #12]
 800316a:	e7e6      	b.n	800313a <__swsetup_r+0x1e>
 800316c:	0758      	lsls	r0, r3, #29
 800316e:	d512      	bpl.n	8003196 <__swsetup_r+0x7a>
 8003170:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003172:	b141      	cbz	r1, 8003186 <__swsetup_r+0x6a>
 8003174:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003178:	4299      	cmp	r1, r3
 800317a:	d002      	beq.n	8003182 <__swsetup_r+0x66>
 800317c:	4630      	mov	r0, r6
 800317e:	f000 fa79 	bl	8003674 <_free_r>
 8003182:	2300      	movs	r3, #0
 8003184:	6363      	str	r3, [r4, #52]	; 0x34
 8003186:	89a3      	ldrh	r3, [r4, #12]
 8003188:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800318c:	81a3      	strh	r3, [r4, #12]
 800318e:	2300      	movs	r3, #0
 8003190:	6063      	str	r3, [r4, #4]
 8003192:	6923      	ldr	r3, [r4, #16]
 8003194:	6023      	str	r3, [r4, #0]
 8003196:	89a3      	ldrh	r3, [r4, #12]
 8003198:	f043 0308 	orr.w	r3, r3, #8
 800319c:	81a3      	strh	r3, [r4, #12]
 800319e:	6923      	ldr	r3, [r4, #16]
 80031a0:	b94b      	cbnz	r3, 80031b6 <__swsetup_r+0x9a>
 80031a2:	89a3      	ldrh	r3, [r4, #12]
 80031a4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80031a8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80031ac:	d003      	beq.n	80031b6 <__swsetup_r+0x9a>
 80031ae:	4621      	mov	r1, r4
 80031b0:	4630      	mov	r0, r6
 80031b2:	f000 fa1f 	bl	80035f4 <__smakebuf_r>
 80031b6:	89a0      	ldrh	r0, [r4, #12]
 80031b8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80031bc:	f010 0301 	ands.w	r3, r0, #1
 80031c0:	d00a      	beq.n	80031d8 <__swsetup_r+0xbc>
 80031c2:	2300      	movs	r3, #0
 80031c4:	60a3      	str	r3, [r4, #8]
 80031c6:	6963      	ldr	r3, [r4, #20]
 80031c8:	425b      	negs	r3, r3
 80031ca:	61a3      	str	r3, [r4, #24]
 80031cc:	6923      	ldr	r3, [r4, #16]
 80031ce:	b943      	cbnz	r3, 80031e2 <__swsetup_r+0xc6>
 80031d0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80031d4:	d1ba      	bne.n	800314c <__swsetup_r+0x30>
 80031d6:	bd70      	pop	{r4, r5, r6, pc}
 80031d8:	0781      	lsls	r1, r0, #30
 80031da:	bf58      	it	pl
 80031dc:	6963      	ldrpl	r3, [r4, #20]
 80031de:	60a3      	str	r3, [r4, #8]
 80031e0:	e7f4      	b.n	80031cc <__swsetup_r+0xb0>
 80031e2:	2000      	movs	r0, #0
 80031e4:	e7f7      	b.n	80031d6 <__swsetup_r+0xba>
 80031e6:	bf00      	nop
 80031e8:	20000010 	.word	0x20000010
 80031ec:	08004acc 	.word	0x08004acc
 80031f0:	08004aec 	.word	0x08004aec
 80031f4:	08004aac 	.word	0x08004aac

080031f8 <_close_r>:
 80031f8:	b538      	push	{r3, r4, r5, lr}
 80031fa:	2300      	movs	r3, #0
 80031fc:	4d05      	ldr	r5, [pc, #20]	; (8003214 <_close_r+0x1c>)
 80031fe:	4604      	mov	r4, r0
 8003200:	4608      	mov	r0, r1
 8003202:	602b      	str	r3, [r5, #0]
 8003204:	f7fd fb17 	bl	8000836 <_close>
 8003208:	1c43      	adds	r3, r0, #1
 800320a:	d102      	bne.n	8003212 <_close_r+0x1a>
 800320c:	682b      	ldr	r3, [r5, #0]
 800320e:	b103      	cbz	r3, 8003212 <_close_r+0x1a>
 8003210:	6023      	str	r3, [r4, #0]
 8003212:	bd38      	pop	{r3, r4, r5, pc}
 8003214:	20000524 	.word	0x20000524

08003218 <__sflush_r>:
 8003218:	898a      	ldrh	r2, [r1, #12]
 800321a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800321c:	4605      	mov	r5, r0
 800321e:	0710      	lsls	r0, r2, #28
 8003220:	460c      	mov	r4, r1
 8003222:	d457      	bmi.n	80032d4 <__sflush_r+0xbc>
 8003224:	684b      	ldr	r3, [r1, #4]
 8003226:	2b00      	cmp	r3, #0
 8003228:	dc04      	bgt.n	8003234 <__sflush_r+0x1c>
 800322a:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800322c:	2b00      	cmp	r3, #0
 800322e:	dc01      	bgt.n	8003234 <__sflush_r+0x1c>
 8003230:	2000      	movs	r0, #0
 8003232:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003234:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003236:	2e00      	cmp	r6, #0
 8003238:	d0fa      	beq.n	8003230 <__sflush_r+0x18>
 800323a:	2300      	movs	r3, #0
 800323c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8003240:	682f      	ldr	r7, [r5, #0]
 8003242:	602b      	str	r3, [r5, #0]
 8003244:	d032      	beq.n	80032ac <__sflush_r+0x94>
 8003246:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003248:	89a3      	ldrh	r3, [r4, #12]
 800324a:	075a      	lsls	r2, r3, #29
 800324c:	d505      	bpl.n	800325a <__sflush_r+0x42>
 800324e:	6863      	ldr	r3, [r4, #4]
 8003250:	1ac0      	subs	r0, r0, r3
 8003252:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003254:	b10b      	cbz	r3, 800325a <__sflush_r+0x42>
 8003256:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003258:	1ac0      	subs	r0, r0, r3
 800325a:	2300      	movs	r3, #0
 800325c:	4602      	mov	r2, r0
 800325e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003260:	4628      	mov	r0, r5
 8003262:	6a21      	ldr	r1, [r4, #32]
 8003264:	47b0      	blx	r6
 8003266:	1c43      	adds	r3, r0, #1
 8003268:	89a3      	ldrh	r3, [r4, #12]
 800326a:	d106      	bne.n	800327a <__sflush_r+0x62>
 800326c:	6829      	ldr	r1, [r5, #0]
 800326e:	291d      	cmp	r1, #29
 8003270:	d82c      	bhi.n	80032cc <__sflush_r+0xb4>
 8003272:	4a29      	ldr	r2, [pc, #164]	; (8003318 <__sflush_r+0x100>)
 8003274:	40ca      	lsrs	r2, r1
 8003276:	07d6      	lsls	r6, r2, #31
 8003278:	d528      	bpl.n	80032cc <__sflush_r+0xb4>
 800327a:	2200      	movs	r2, #0
 800327c:	6062      	str	r2, [r4, #4]
 800327e:	6922      	ldr	r2, [r4, #16]
 8003280:	04d9      	lsls	r1, r3, #19
 8003282:	6022      	str	r2, [r4, #0]
 8003284:	d504      	bpl.n	8003290 <__sflush_r+0x78>
 8003286:	1c42      	adds	r2, r0, #1
 8003288:	d101      	bne.n	800328e <__sflush_r+0x76>
 800328a:	682b      	ldr	r3, [r5, #0]
 800328c:	b903      	cbnz	r3, 8003290 <__sflush_r+0x78>
 800328e:	6560      	str	r0, [r4, #84]	; 0x54
 8003290:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003292:	602f      	str	r7, [r5, #0]
 8003294:	2900      	cmp	r1, #0
 8003296:	d0cb      	beq.n	8003230 <__sflush_r+0x18>
 8003298:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800329c:	4299      	cmp	r1, r3
 800329e:	d002      	beq.n	80032a6 <__sflush_r+0x8e>
 80032a0:	4628      	mov	r0, r5
 80032a2:	f000 f9e7 	bl	8003674 <_free_r>
 80032a6:	2000      	movs	r0, #0
 80032a8:	6360      	str	r0, [r4, #52]	; 0x34
 80032aa:	e7c2      	b.n	8003232 <__sflush_r+0x1a>
 80032ac:	6a21      	ldr	r1, [r4, #32]
 80032ae:	2301      	movs	r3, #1
 80032b0:	4628      	mov	r0, r5
 80032b2:	47b0      	blx	r6
 80032b4:	1c41      	adds	r1, r0, #1
 80032b6:	d1c7      	bne.n	8003248 <__sflush_r+0x30>
 80032b8:	682b      	ldr	r3, [r5, #0]
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d0c4      	beq.n	8003248 <__sflush_r+0x30>
 80032be:	2b1d      	cmp	r3, #29
 80032c0:	d001      	beq.n	80032c6 <__sflush_r+0xae>
 80032c2:	2b16      	cmp	r3, #22
 80032c4:	d101      	bne.n	80032ca <__sflush_r+0xb2>
 80032c6:	602f      	str	r7, [r5, #0]
 80032c8:	e7b2      	b.n	8003230 <__sflush_r+0x18>
 80032ca:	89a3      	ldrh	r3, [r4, #12]
 80032cc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80032d0:	81a3      	strh	r3, [r4, #12]
 80032d2:	e7ae      	b.n	8003232 <__sflush_r+0x1a>
 80032d4:	690f      	ldr	r7, [r1, #16]
 80032d6:	2f00      	cmp	r7, #0
 80032d8:	d0aa      	beq.n	8003230 <__sflush_r+0x18>
 80032da:	0793      	lsls	r3, r2, #30
 80032dc:	bf18      	it	ne
 80032de:	2300      	movne	r3, #0
 80032e0:	680e      	ldr	r6, [r1, #0]
 80032e2:	bf08      	it	eq
 80032e4:	694b      	ldreq	r3, [r1, #20]
 80032e6:	1bf6      	subs	r6, r6, r7
 80032e8:	600f      	str	r7, [r1, #0]
 80032ea:	608b      	str	r3, [r1, #8]
 80032ec:	2e00      	cmp	r6, #0
 80032ee:	dd9f      	ble.n	8003230 <__sflush_r+0x18>
 80032f0:	4633      	mov	r3, r6
 80032f2:	463a      	mov	r2, r7
 80032f4:	4628      	mov	r0, r5
 80032f6:	6a21      	ldr	r1, [r4, #32]
 80032f8:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 80032fc:	47e0      	blx	ip
 80032fe:	2800      	cmp	r0, #0
 8003300:	dc06      	bgt.n	8003310 <__sflush_r+0xf8>
 8003302:	89a3      	ldrh	r3, [r4, #12]
 8003304:	f04f 30ff 	mov.w	r0, #4294967295
 8003308:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800330c:	81a3      	strh	r3, [r4, #12]
 800330e:	e790      	b.n	8003232 <__sflush_r+0x1a>
 8003310:	4407      	add	r7, r0
 8003312:	1a36      	subs	r6, r6, r0
 8003314:	e7ea      	b.n	80032ec <__sflush_r+0xd4>
 8003316:	bf00      	nop
 8003318:	20400001 	.word	0x20400001

0800331c <_fflush_r>:
 800331c:	b538      	push	{r3, r4, r5, lr}
 800331e:	690b      	ldr	r3, [r1, #16]
 8003320:	4605      	mov	r5, r0
 8003322:	460c      	mov	r4, r1
 8003324:	b913      	cbnz	r3, 800332c <_fflush_r+0x10>
 8003326:	2500      	movs	r5, #0
 8003328:	4628      	mov	r0, r5
 800332a:	bd38      	pop	{r3, r4, r5, pc}
 800332c:	b118      	cbz	r0, 8003336 <_fflush_r+0x1a>
 800332e:	6983      	ldr	r3, [r0, #24]
 8003330:	b90b      	cbnz	r3, 8003336 <_fflush_r+0x1a>
 8003332:	f000 f887 	bl	8003444 <__sinit>
 8003336:	4b14      	ldr	r3, [pc, #80]	; (8003388 <_fflush_r+0x6c>)
 8003338:	429c      	cmp	r4, r3
 800333a:	d11b      	bne.n	8003374 <_fflush_r+0x58>
 800333c:	686c      	ldr	r4, [r5, #4]
 800333e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003342:	2b00      	cmp	r3, #0
 8003344:	d0ef      	beq.n	8003326 <_fflush_r+0xa>
 8003346:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8003348:	07d0      	lsls	r0, r2, #31
 800334a:	d404      	bmi.n	8003356 <_fflush_r+0x3a>
 800334c:	0599      	lsls	r1, r3, #22
 800334e:	d402      	bmi.n	8003356 <_fflush_r+0x3a>
 8003350:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003352:	f000 f915 	bl	8003580 <__retarget_lock_acquire_recursive>
 8003356:	4628      	mov	r0, r5
 8003358:	4621      	mov	r1, r4
 800335a:	f7ff ff5d 	bl	8003218 <__sflush_r>
 800335e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003360:	4605      	mov	r5, r0
 8003362:	07da      	lsls	r2, r3, #31
 8003364:	d4e0      	bmi.n	8003328 <_fflush_r+0xc>
 8003366:	89a3      	ldrh	r3, [r4, #12]
 8003368:	059b      	lsls	r3, r3, #22
 800336a:	d4dd      	bmi.n	8003328 <_fflush_r+0xc>
 800336c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800336e:	f000 f908 	bl	8003582 <__retarget_lock_release_recursive>
 8003372:	e7d9      	b.n	8003328 <_fflush_r+0xc>
 8003374:	4b05      	ldr	r3, [pc, #20]	; (800338c <_fflush_r+0x70>)
 8003376:	429c      	cmp	r4, r3
 8003378:	d101      	bne.n	800337e <_fflush_r+0x62>
 800337a:	68ac      	ldr	r4, [r5, #8]
 800337c:	e7df      	b.n	800333e <_fflush_r+0x22>
 800337e:	4b04      	ldr	r3, [pc, #16]	; (8003390 <_fflush_r+0x74>)
 8003380:	429c      	cmp	r4, r3
 8003382:	bf08      	it	eq
 8003384:	68ec      	ldreq	r4, [r5, #12]
 8003386:	e7da      	b.n	800333e <_fflush_r+0x22>
 8003388:	08004acc 	.word	0x08004acc
 800338c:	08004aec 	.word	0x08004aec
 8003390:	08004aac 	.word	0x08004aac

08003394 <std>:
 8003394:	2300      	movs	r3, #0
 8003396:	b510      	push	{r4, lr}
 8003398:	4604      	mov	r4, r0
 800339a:	e9c0 3300 	strd	r3, r3, [r0]
 800339e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80033a2:	6083      	str	r3, [r0, #8]
 80033a4:	8181      	strh	r1, [r0, #12]
 80033a6:	6643      	str	r3, [r0, #100]	; 0x64
 80033a8:	81c2      	strh	r2, [r0, #14]
 80033aa:	6183      	str	r3, [r0, #24]
 80033ac:	4619      	mov	r1, r3
 80033ae:	2208      	movs	r2, #8
 80033b0:	305c      	adds	r0, #92	; 0x5c
 80033b2:	f7ff fd49 	bl	8002e48 <memset>
 80033b6:	4b05      	ldr	r3, [pc, #20]	; (80033cc <std+0x38>)
 80033b8:	6224      	str	r4, [r4, #32]
 80033ba:	6263      	str	r3, [r4, #36]	; 0x24
 80033bc:	4b04      	ldr	r3, [pc, #16]	; (80033d0 <std+0x3c>)
 80033be:	62a3      	str	r3, [r4, #40]	; 0x28
 80033c0:	4b04      	ldr	r3, [pc, #16]	; (80033d4 <std+0x40>)
 80033c2:	62e3      	str	r3, [r4, #44]	; 0x2c
 80033c4:	4b04      	ldr	r3, [pc, #16]	; (80033d8 <std+0x44>)
 80033c6:	6323      	str	r3, [r4, #48]	; 0x30
 80033c8:	bd10      	pop	{r4, pc}
 80033ca:	bf00      	nop
 80033cc:	08002fc9 	.word	0x08002fc9
 80033d0:	08002fef 	.word	0x08002fef
 80033d4:	08003027 	.word	0x08003027
 80033d8:	0800304b 	.word	0x0800304b

080033dc <_cleanup_r>:
 80033dc:	4901      	ldr	r1, [pc, #4]	; (80033e4 <_cleanup_r+0x8>)
 80033de:	f000 b8af 	b.w	8003540 <_fwalk_reent>
 80033e2:	bf00      	nop
 80033e4:	0800331d 	.word	0x0800331d

080033e8 <__sfmoreglue>:
 80033e8:	2268      	movs	r2, #104	; 0x68
 80033ea:	b570      	push	{r4, r5, r6, lr}
 80033ec:	1e4d      	subs	r5, r1, #1
 80033ee:	4355      	muls	r5, r2
 80033f0:	460e      	mov	r6, r1
 80033f2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80033f6:	f000 f9a5 	bl	8003744 <_malloc_r>
 80033fa:	4604      	mov	r4, r0
 80033fc:	b140      	cbz	r0, 8003410 <__sfmoreglue+0x28>
 80033fe:	2100      	movs	r1, #0
 8003400:	e9c0 1600 	strd	r1, r6, [r0]
 8003404:	300c      	adds	r0, #12
 8003406:	60a0      	str	r0, [r4, #8]
 8003408:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800340c:	f7ff fd1c 	bl	8002e48 <memset>
 8003410:	4620      	mov	r0, r4
 8003412:	bd70      	pop	{r4, r5, r6, pc}

08003414 <__sfp_lock_acquire>:
 8003414:	4801      	ldr	r0, [pc, #4]	; (800341c <__sfp_lock_acquire+0x8>)
 8003416:	f000 b8b3 	b.w	8003580 <__retarget_lock_acquire_recursive>
 800341a:	bf00      	nop
 800341c:	20000519 	.word	0x20000519

08003420 <__sfp_lock_release>:
 8003420:	4801      	ldr	r0, [pc, #4]	; (8003428 <__sfp_lock_release+0x8>)
 8003422:	f000 b8ae 	b.w	8003582 <__retarget_lock_release_recursive>
 8003426:	bf00      	nop
 8003428:	20000519 	.word	0x20000519

0800342c <__sinit_lock_acquire>:
 800342c:	4801      	ldr	r0, [pc, #4]	; (8003434 <__sinit_lock_acquire+0x8>)
 800342e:	f000 b8a7 	b.w	8003580 <__retarget_lock_acquire_recursive>
 8003432:	bf00      	nop
 8003434:	2000051a 	.word	0x2000051a

08003438 <__sinit_lock_release>:
 8003438:	4801      	ldr	r0, [pc, #4]	; (8003440 <__sinit_lock_release+0x8>)
 800343a:	f000 b8a2 	b.w	8003582 <__retarget_lock_release_recursive>
 800343e:	bf00      	nop
 8003440:	2000051a 	.word	0x2000051a

08003444 <__sinit>:
 8003444:	b510      	push	{r4, lr}
 8003446:	4604      	mov	r4, r0
 8003448:	f7ff fff0 	bl	800342c <__sinit_lock_acquire>
 800344c:	69a3      	ldr	r3, [r4, #24]
 800344e:	b11b      	cbz	r3, 8003458 <__sinit+0x14>
 8003450:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003454:	f7ff bff0 	b.w	8003438 <__sinit_lock_release>
 8003458:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800345c:	6523      	str	r3, [r4, #80]	; 0x50
 800345e:	4b13      	ldr	r3, [pc, #76]	; (80034ac <__sinit+0x68>)
 8003460:	4a13      	ldr	r2, [pc, #76]	; (80034b0 <__sinit+0x6c>)
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	62a2      	str	r2, [r4, #40]	; 0x28
 8003466:	42a3      	cmp	r3, r4
 8003468:	bf08      	it	eq
 800346a:	2301      	moveq	r3, #1
 800346c:	4620      	mov	r0, r4
 800346e:	bf08      	it	eq
 8003470:	61a3      	streq	r3, [r4, #24]
 8003472:	f000 f81f 	bl	80034b4 <__sfp>
 8003476:	6060      	str	r0, [r4, #4]
 8003478:	4620      	mov	r0, r4
 800347a:	f000 f81b 	bl	80034b4 <__sfp>
 800347e:	60a0      	str	r0, [r4, #8]
 8003480:	4620      	mov	r0, r4
 8003482:	f000 f817 	bl	80034b4 <__sfp>
 8003486:	2200      	movs	r2, #0
 8003488:	2104      	movs	r1, #4
 800348a:	60e0      	str	r0, [r4, #12]
 800348c:	6860      	ldr	r0, [r4, #4]
 800348e:	f7ff ff81 	bl	8003394 <std>
 8003492:	2201      	movs	r2, #1
 8003494:	2109      	movs	r1, #9
 8003496:	68a0      	ldr	r0, [r4, #8]
 8003498:	f7ff ff7c 	bl	8003394 <std>
 800349c:	2202      	movs	r2, #2
 800349e:	2112      	movs	r1, #18
 80034a0:	68e0      	ldr	r0, [r4, #12]
 80034a2:	f7ff ff77 	bl	8003394 <std>
 80034a6:	2301      	movs	r3, #1
 80034a8:	61a3      	str	r3, [r4, #24]
 80034aa:	e7d1      	b.n	8003450 <__sinit+0xc>
 80034ac:	08004aa8 	.word	0x08004aa8
 80034b0:	080033dd 	.word	0x080033dd

080034b4 <__sfp>:
 80034b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80034b6:	4607      	mov	r7, r0
 80034b8:	f7ff ffac 	bl	8003414 <__sfp_lock_acquire>
 80034bc:	4b1e      	ldr	r3, [pc, #120]	; (8003538 <__sfp+0x84>)
 80034be:	681e      	ldr	r6, [r3, #0]
 80034c0:	69b3      	ldr	r3, [r6, #24]
 80034c2:	b913      	cbnz	r3, 80034ca <__sfp+0x16>
 80034c4:	4630      	mov	r0, r6
 80034c6:	f7ff ffbd 	bl	8003444 <__sinit>
 80034ca:	3648      	adds	r6, #72	; 0x48
 80034cc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80034d0:	3b01      	subs	r3, #1
 80034d2:	d503      	bpl.n	80034dc <__sfp+0x28>
 80034d4:	6833      	ldr	r3, [r6, #0]
 80034d6:	b30b      	cbz	r3, 800351c <__sfp+0x68>
 80034d8:	6836      	ldr	r6, [r6, #0]
 80034da:	e7f7      	b.n	80034cc <__sfp+0x18>
 80034dc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80034e0:	b9d5      	cbnz	r5, 8003518 <__sfp+0x64>
 80034e2:	4b16      	ldr	r3, [pc, #88]	; (800353c <__sfp+0x88>)
 80034e4:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80034e8:	60e3      	str	r3, [r4, #12]
 80034ea:	6665      	str	r5, [r4, #100]	; 0x64
 80034ec:	f000 f847 	bl	800357e <__retarget_lock_init_recursive>
 80034f0:	f7ff ff96 	bl	8003420 <__sfp_lock_release>
 80034f4:	2208      	movs	r2, #8
 80034f6:	4629      	mov	r1, r5
 80034f8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80034fc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8003500:	6025      	str	r5, [r4, #0]
 8003502:	61a5      	str	r5, [r4, #24]
 8003504:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8003508:	f7ff fc9e 	bl	8002e48 <memset>
 800350c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8003510:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8003514:	4620      	mov	r0, r4
 8003516:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003518:	3468      	adds	r4, #104	; 0x68
 800351a:	e7d9      	b.n	80034d0 <__sfp+0x1c>
 800351c:	2104      	movs	r1, #4
 800351e:	4638      	mov	r0, r7
 8003520:	f7ff ff62 	bl	80033e8 <__sfmoreglue>
 8003524:	4604      	mov	r4, r0
 8003526:	6030      	str	r0, [r6, #0]
 8003528:	2800      	cmp	r0, #0
 800352a:	d1d5      	bne.n	80034d8 <__sfp+0x24>
 800352c:	f7ff ff78 	bl	8003420 <__sfp_lock_release>
 8003530:	230c      	movs	r3, #12
 8003532:	603b      	str	r3, [r7, #0]
 8003534:	e7ee      	b.n	8003514 <__sfp+0x60>
 8003536:	bf00      	nop
 8003538:	08004aa8 	.word	0x08004aa8
 800353c:	ffff0001 	.word	0xffff0001

08003540 <_fwalk_reent>:
 8003540:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003544:	4606      	mov	r6, r0
 8003546:	4688      	mov	r8, r1
 8003548:	2700      	movs	r7, #0
 800354a:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800354e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003552:	f1b9 0901 	subs.w	r9, r9, #1
 8003556:	d505      	bpl.n	8003564 <_fwalk_reent+0x24>
 8003558:	6824      	ldr	r4, [r4, #0]
 800355a:	2c00      	cmp	r4, #0
 800355c:	d1f7      	bne.n	800354e <_fwalk_reent+0xe>
 800355e:	4638      	mov	r0, r7
 8003560:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003564:	89ab      	ldrh	r3, [r5, #12]
 8003566:	2b01      	cmp	r3, #1
 8003568:	d907      	bls.n	800357a <_fwalk_reent+0x3a>
 800356a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800356e:	3301      	adds	r3, #1
 8003570:	d003      	beq.n	800357a <_fwalk_reent+0x3a>
 8003572:	4629      	mov	r1, r5
 8003574:	4630      	mov	r0, r6
 8003576:	47c0      	blx	r8
 8003578:	4307      	orrs	r7, r0
 800357a:	3568      	adds	r5, #104	; 0x68
 800357c:	e7e9      	b.n	8003552 <_fwalk_reent+0x12>

0800357e <__retarget_lock_init_recursive>:
 800357e:	4770      	bx	lr

08003580 <__retarget_lock_acquire_recursive>:
 8003580:	4770      	bx	lr

08003582 <__retarget_lock_release_recursive>:
 8003582:	4770      	bx	lr

08003584 <_lseek_r>:
 8003584:	b538      	push	{r3, r4, r5, lr}
 8003586:	4604      	mov	r4, r0
 8003588:	4608      	mov	r0, r1
 800358a:	4611      	mov	r1, r2
 800358c:	2200      	movs	r2, #0
 800358e:	4d05      	ldr	r5, [pc, #20]	; (80035a4 <_lseek_r+0x20>)
 8003590:	602a      	str	r2, [r5, #0]
 8003592:	461a      	mov	r2, r3
 8003594:	f7fd f973 	bl	800087e <_lseek>
 8003598:	1c43      	adds	r3, r0, #1
 800359a:	d102      	bne.n	80035a2 <_lseek_r+0x1e>
 800359c:	682b      	ldr	r3, [r5, #0]
 800359e:	b103      	cbz	r3, 80035a2 <_lseek_r+0x1e>
 80035a0:	6023      	str	r3, [r4, #0]
 80035a2:	bd38      	pop	{r3, r4, r5, pc}
 80035a4:	20000524 	.word	0x20000524

080035a8 <__swhatbuf_r>:
 80035a8:	b570      	push	{r4, r5, r6, lr}
 80035aa:	460e      	mov	r6, r1
 80035ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80035b0:	4614      	mov	r4, r2
 80035b2:	2900      	cmp	r1, #0
 80035b4:	461d      	mov	r5, r3
 80035b6:	b096      	sub	sp, #88	; 0x58
 80035b8:	da08      	bge.n	80035cc <__swhatbuf_r+0x24>
 80035ba:	2200      	movs	r2, #0
 80035bc:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80035c0:	602a      	str	r2, [r5, #0]
 80035c2:	061a      	lsls	r2, r3, #24
 80035c4:	d410      	bmi.n	80035e8 <__swhatbuf_r+0x40>
 80035c6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80035ca:	e00e      	b.n	80035ea <__swhatbuf_r+0x42>
 80035cc:	466a      	mov	r2, sp
 80035ce:	f001 f8c5 	bl	800475c <_fstat_r>
 80035d2:	2800      	cmp	r0, #0
 80035d4:	dbf1      	blt.n	80035ba <__swhatbuf_r+0x12>
 80035d6:	9a01      	ldr	r2, [sp, #4]
 80035d8:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80035dc:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80035e0:	425a      	negs	r2, r3
 80035e2:	415a      	adcs	r2, r3
 80035e4:	602a      	str	r2, [r5, #0]
 80035e6:	e7ee      	b.n	80035c6 <__swhatbuf_r+0x1e>
 80035e8:	2340      	movs	r3, #64	; 0x40
 80035ea:	2000      	movs	r0, #0
 80035ec:	6023      	str	r3, [r4, #0]
 80035ee:	b016      	add	sp, #88	; 0x58
 80035f0:	bd70      	pop	{r4, r5, r6, pc}
	...

080035f4 <__smakebuf_r>:
 80035f4:	898b      	ldrh	r3, [r1, #12]
 80035f6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80035f8:	079d      	lsls	r5, r3, #30
 80035fa:	4606      	mov	r6, r0
 80035fc:	460c      	mov	r4, r1
 80035fe:	d507      	bpl.n	8003610 <__smakebuf_r+0x1c>
 8003600:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8003604:	6023      	str	r3, [r4, #0]
 8003606:	6123      	str	r3, [r4, #16]
 8003608:	2301      	movs	r3, #1
 800360a:	6163      	str	r3, [r4, #20]
 800360c:	b002      	add	sp, #8
 800360e:	bd70      	pop	{r4, r5, r6, pc}
 8003610:	466a      	mov	r2, sp
 8003612:	ab01      	add	r3, sp, #4
 8003614:	f7ff ffc8 	bl	80035a8 <__swhatbuf_r>
 8003618:	9900      	ldr	r1, [sp, #0]
 800361a:	4605      	mov	r5, r0
 800361c:	4630      	mov	r0, r6
 800361e:	f000 f891 	bl	8003744 <_malloc_r>
 8003622:	b948      	cbnz	r0, 8003638 <__smakebuf_r+0x44>
 8003624:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003628:	059a      	lsls	r2, r3, #22
 800362a:	d4ef      	bmi.n	800360c <__smakebuf_r+0x18>
 800362c:	f023 0303 	bic.w	r3, r3, #3
 8003630:	f043 0302 	orr.w	r3, r3, #2
 8003634:	81a3      	strh	r3, [r4, #12]
 8003636:	e7e3      	b.n	8003600 <__smakebuf_r+0xc>
 8003638:	4b0d      	ldr	r3, [pc, #52]	; (8003670 <__smakebuf_r+0x7c>)
 800363a:	62b3      	str	r3, [r6, #40]	; 0x28
 800363c:	89a3      	ldrh	r3, [r4, #12]
 800363e:	6020      	str	r0, [r4, #0]
 8003640:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003644:	81a3      	strh	r3, [r4, #12]
 8003646:	9b00      	ldr	r3, [sp, #0]
 8003648:	6120      	str	r0, [r4, #16]
 800364a:	6163      	str	r3, [r4, #20]
 800364c:	9b01      	ldr	r3, [sp, #4]
 800364e:	b15b      	cbz	r3, 8003668 <__smakebuf_r+0x74>
 8003650:	4630      	mov	r0, r6
 8003652:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003656:	f001 f893 	bl	8004780 <_isatty_r>
 800365a:	b128      	cbz	r0, 8003668 <__smakebuf_r+0x74>
 800365c:	89a3      	ldrh	r3, [r4, #12]
 800365e:	f023 0303 	bic.w	r3, r3, #3
 8003662:	f043 0301 	orr.w	r3, r3, #1
 8003666:	81a3      	strh	r3, [r4, #12]
 8003668:	89a0      	ldrh	r0, [r4, #12]
 800366a:	4305      	orrs	r5, r0
 800366c:	81a5      	strh	r5, [r4, #12]
 800366e:	e7cd      	b.n	800360c <__smakebuf_r+0x18>
 8003670:	080033dd 	.word	0x080033dd

08003674 <_free_r>:
 8003674:	b538      	push	{r3, r4, r5, lr}
 8003676:	4605      	mov	r5, r0
 8003678:	2900      	cmp	r1, #0
 800367a:	d040      	beq.n	80036fe <_free_r+0x8a>
 800367c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003680:	1f0c      	subs	r4, r1, #4
 8003682:	2b00      	cmp	r3, #0
 8003684:	bfb8      	it	lt
 8003686:	18e4      	addlt	r4, r4, r3
 8003688:	f001 f8a6 	bl	80047d8 <__malloc_lock>
 800368c:	4a1c      	ldr	r2, [pc, #112]	; (8003700 <_free_r+0x8c>)
 800368e:	6813      	ldr	r3, [r2, #0]
 8003690:	b933      	cbnz	r3, 80036a0 <_free_r+0x2c>
 8003692:	6063      	str	r3, [r4, #4]
 8003694:	6014      	str	r4, [r2, #0]
 8003696:	4628      	mov	r0, r5
 8003698:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800369c:	f001 b8a2 	b.w	80047e4 <__malloc_unlock>
 80036a0:	42a3      	cmp	r3, r4
 80036a2:	d908      	bls.n	80036b6 <_free_r+0x42>
 80036a4:	6820      	ldr	r0, [r4, #0]
 80036a6:	1821      	adds	r1, r4, r0
 80036a8:	428b      	cmp	r3, r1
 80036aa:	bf01      	itttt	eq
 80036ac:	6819      	ldreq	r1, [r3, #0]
 80036ae:	685b      	ldreq	r3, [r3, #4]
 80036b0:	1809      	addeq	r1, r1, r0
 80036b2:	6021      	streq	r1, [r4, #0]
 80036b4:	e7ed      	b.n	8003692 <_free_r+0x1e>
 80036b6:	461a      	mov	r2, r3
 80036b8:	685b      	ldr	r3, [r3, #4]
 80036ba:	b10b      	cbz	r3, 80036c0 <_free_r+0x4c>
 80036bc:	42a3      	cmp	r3, r4
 80036be:	d9fa      	bls.n	80036b6 <_free_r+0x42>
 80036c0:	6811      	ldr	r1, [r2, #0]
 80036c2:	1850      	adds	r0, r2, r1
 80036c4:	42a0      	cmp	r0, r4
 80036c6:	d10b      	bne.n	80036e0 <_free_r+0x6c>
 80036c8:	6820      	ldr	r0, [r4, #0]
 80036ca:	4401      	add	r1, r0
 80036cc:	1850      	adds	r0, r2, r1
 80036ce:	4283      	cmp	r3, r0
 80036d0:	6011      	str	r1, [r2, #0]
 80036d2:	d1e0      	bne.n	8003696 <_free_r+0x22>
 80036d4:	6818      	ldr	r0, [r3, #0]
 80036d6:	685b      	ldr	r3, [r3, #4]
 80036d8:	4401      	add	r1, r0
 80036da:	6011      	str	r1, [r2, #0]
 80036dc:	6053      	str	r3, [r2, #4]
 80036de:	e7da      	b.n	8003696 <_free_r+0x22>
 80036e0:	d902      	bls.n	80036e8 <_free_r+0x74>
 80036e2:	230c      	movs	r3, #12
 80036e4:	602b      	str	r3, [r5, #0]
 80036e6:	e7d6      	b.n	8003696 <_free_r+0x22>
 80036e8:	6820      	ldr	r0, [r4, #0]
 80036ea:	1821      	adds	r1, r4, r0
 80036ec:	428b      	cmp	r3, r1
 80036ee:	bf01      	itttt	eq
 80036f0:	6819      	ldreq	r1, [r3, #0]
 80036f2:	685b      	ldreq	r3, [r3, #4]
 80036f4:	1809      	addeq	r1, r1, r0
 80036f6:	6021      	streq	r1, [r4, #0]
 80036f8:	6063      	str	r3, [r4, #4]
 80036fa:	6054      	str	r4, [r2, #4]
 80036fc:	e7cb      	b.n	8003696 <_free_r+0x22>
 80036fe:	bd38      	pop	{r3, r4, r5, pc}
 8003700:	2000051c 	.word	0x2000051c

08003704 <sbrk_aligned>:
 8003704:	b570      	push	{r4, r5, r6, lr}
 8003706:	4e0e      	ldr	r6, [pc, #56]	; (8003740 <sbrk_aligned+0x3c>)
 8003708:	460c      	mov	r4, r1
 800370a:	6831      	ldr	r1, [r6, #0]
 800370c:	4605      	mov	r5, r0
 800370e:	b911      	cbnz	r1, 8003716 <sbrk_aligned+0x12>
 8003710:	f000 feb2 	bl	8004478 <_sbrk_r>
 8003714:	6030      	str	r0, [r6, #0]
 8003716:	4621      	mov	r1, r4
 8003718:	4628      	mov	r0, r5
 800371a:	f000 fead 	bl	8004478 <_sbrk_r>
 800371e:	1c43      	adds	r3, r0, #1
 8003720:	d00a      	beq.n	8003738 <sbrk_aligned+0x34>
 8003722:	1cc4      	adds	r4, r0, #3
 8003724:	f024 0403 	bic.w	r4, r4, #3
 8003728:	42a0      	cmp	r0, r4
 800372a:	d007      	beq.n	800373c <sbrk_aligned+0x38>
 800372c:	1a21      	subs	r1, r4, r0
 800372e:	4628      	mov	r0, r5
 8003730:	f000 fea2 	bl	8004478 <_sbrk_r>
 8003734:	3001      	adds	r0, #1
 8003736:	d101      	bne.n	800373c <sbrk_aligned+0x38>
 8003738:	f04f 34ff 	mov.w	r4, #4294967295
 800373c:	4620      	mov	r0, r4
 800373e:	bd70      	pop	{r4, r5, r6, pc}
 8003740:	20000520 	.word	0x20000520

08003744 <_malloc_r>:
 8003744:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003748:	1ccd      	adds	r5, r1, #3
 800374a:	f025 0503 	bic.w	r5, r5, #3
 800374e:	3508      	adds	r5, #8
 8003750:	2d0c      	cmp	r5, #12
 8003752:	bf38      	it	cc
 8003754:	250c      	movcc	r5, #12
 8003756:	2d00      	cmp	r5, #0
 8003758:	4607      	mov	r7, r0
 800375a:	db01      	blt.n	8003760 <_malloc_r+0x1c>
 800375c:	42a9      	cmp	r1, r5
 800375e:	d905      	bls.n	800376c <_malloc_r+0x28>
 8003760:	230c      	movs	r3, #12
 8003762:	2600      	movs	r6, #0
 8003764:	603b      	str	r3, [r7, #0]
 8003766:	4630      	mov	r0, r6
 8003768:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800376c:	4e2e      	ldr	r6, [pc, #184]	; (8003828 <_malloc_r+0xe4>)
 800376e:	f001 f833 	bl	80047d8 <__malloc_lock>
 8003772:	6833      	ldr	r3, [r6, #0]
 8003774:	461c      	mov	r4, r3
 8003776:	bb34      	cbnz	r4, 80037c6 <_malloc_r+0x82>
 8003778:	4629      	mov	r1, r5
 800377a:	4638      	mov	r0, r7
 800377c:	f7ff ffc2 	bl	8003704 <sbrk_aligned>
 8003780:	1c43      	adds	r3, r0, #1
 8003782:	4604      	mov	r4, r0
 8003784:	d14d      	bne.n	8003822 <_malloc_r+0xde>
 8003786:	6834      	ldr	r4, [r6, #0]
 8003788:	4626      	mov	r6, r4
 800378a:	2e00      	cmp	r6, #0
 800378c:	d140      	bne.n	8003810 <_malloc_r+0xcc>
 800378e:	6823      	ldr	r3, [r4, #0]
 8003790:	4631      	mov	r1, r6
 8003792:	4638      	mov	r0, r7
 8003794:	eb04 0803 	add.w	r8, r4, r3
 8003798:	f000 fe6e 	bl	8004478 <_sbrk_r>
 800379c:	4580      	cmp	r8, r0
 800379e:	d13a      	bne.n	8003816 <_malloc_r+0xd2>
 80037a0:	6821      	ldr	r1, [r4, #0]
 80037a2:	3503      	adds	r5, #3
 80037a4:	1a6d      	subs	r5, r5, r1
 80037a6:	f025 0503 	bic.w	r5, r5, #3
 80037aa:	3508      	adds	r5, #8
 80037ac:	2d0c      	cmp	r5, #12
 80037ae:	bf38      	it	cc
 80037b0:	250c      	movcc	r5, #12
 80037b2:	4638      	mov	r0, r7
 80037b4:	4629      	mov	r1, r5
 80037b6:	f7ff ffa5 	bl	8003704 <sbrk_aligned>
 80037ba:	3001      	adds	r0, #1
 80037bc:	d02b      	beq.n	8003816 <_malloc_r+0xd2>
 80037be:	6823      	ldr	r3, [r4, #0]
 80037c0:	442b      	add	r3, r5
 80037c2:	6023      	str	r3, [r4, #0]
 80037c4:	e00e      	b.n	80037e4 <_malloc_r+0xa0>
 80037c6:	6822      	ldr	r2, [r4, #0]
 80037c8:	1b52      	subs	r2, r2, r5
 80037ca:	d41e      	bmi.n	800380a <_malloc_r+0xc6>
 80037cc:	2a0b      	cmp	r2, #11
 80037ce:	d916      	bls.n	80037fe <_malloc_r+0xba>
 80037d0:	1961      	adds	r1, r4, r5
 80037d2:	42a3      	cmp	r3, r4
 80037d4:	6025      	str	r5, [r4, #0]
 80037d6:	bf18      	it	ne
 80037d8:	6059      	strne	r1, [r3, #4]
 80037da:	6863      	ldr	r3, [r4, #4]
 80037dc:	bf08      	it	eq
 80037de:	6031      	streq	r1, [r6, #0]
 80037e0:	5162      	str	r2, [r4, r5]
 80037e2:	604b      	str	r3, [r1, #4]
 80037e4:	4638      	mov	r0, r7
 80037e6:	f104 060b 	add.w	r6, r4, #11
 80037ea:	f000 fffb 	bl	80047e4 <__malloc_unlock>
 80037ee:	f026 0607 	bic.w	r6, r6, #7
 80037f2:	1d23      	adds	r3, r4, #4
 80037f4:	1af2      	subs	r2, r6, r3
 80037f6:	d0b6      	beq.n	8003766 <_malloc_r+0x22>
 80037f8:	1b9b      	subs	r3, r3, r6
 80037fa:	50a3      	str	r3, [r4, r2]
 80037fc:	e7b3      	b.n	8003766 <_malloc_r+0x22>
 80037fe:	6862      	ldr	r2, [r4, #4]
 8003800:	42a3      	cmp	r3, r4
 8003802:	bf0c      	ite	eq
 8003804:	6032      	streq	r2, [r6, #0]
 8003806:	605a      	strne	r2, [r3, #4]
 8003808:	e7ec      	b.n	80037e4 <_malloc_r+0xa0>
 800380a:	4623      	mov	r3, r4
 800380c:	6864      	ldr	r4, [r4, #4]
 800380e:	e7b2      	b.n	8003776 <_malloc_r+0x32>
 8003810:	4634      	mov	r4, r6
 8003812:	6876      	ldr	r6, [r6, #4]
 8003814:	e7b9      	b.n	800378a <_malloc_r+0x46>
 8003816:	230c      	movs	r3, #12
 8003818:	4638      	mov	r0, r7
 800381a:	603b      	str	r3, [r7, #0]
 800381c:	f000 ffe2 	bl	80047e4 <__malloc_unlock>
 8003820:	e7a1      	b.n	8003766 <_malloc_r+0x22>
 8003822:	6025      	str	r5, [r4, #0]
 8003824:	e7de      	b.n	80037e4 <_malloc_r+0xa0>
 8003826:	bf00      	nop
 8003828:	2000051c 	.word	0x2000051c

0800382c <_sungetc_r>:
 800382c:	b538      	push	{r3, r4, r5, lr}
 800382e:	1c4b      	adds	r3, r1, #1
 8003830:	4614      	mov	r4, r2
 8003832:	d103      	bne.n	800383c <_sungetc_r+0x10>
 8003834:	f04f 35ff 	mov.w	r5, #4294967295
 8003838:	4628      	mov	r0, r5
 800383a:	bd38      	pop	{r3, r4, r5, pc}
 800383c:	8993      	ldrh	r3, [r2, #12]
 800383e:	b2cd      	uxtb	r5, r1
 8003840:	f023 0320 	bic.w	r3, r3, #32
 8003844:	8193      	strh	r3, [r2, #12]
 8003846:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003848:	6852      	ldr	r2, [r2, #4]
 800384a:	b18b      	cbz	r3, 8003870 <_sungetc_r+0x44>
 800384c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800384e:	4293      	cmp	r3, r2
 8003850:	dd08      	ble.n	8003864 <_sungetc_r+0x38>
 8003852:	6823      	ldr	r3, [r4, #0]
 8003854:	1e5a      	subs	r2, r3, #1
 8003856:	6022      	str	r2, [r4, #0]
 8003858:	f803 5c01 	strb.w	r5, [r3, #-1]
 800385c:	6863      	ldr	r3, [r4, #4]
 800385e:	3301      	adds	r3, #1
 8003860:	6063      	str	r3, [r4, #4]
 8003862:	e7e9      	b.n	8003838 <_sungetc_r+0xc>
 8003864:	4621      	mov	r1, r4
 8003866:	f000 ff41 	bl	80046ec <__submore>
 800386a:	2800      	cmp	r0, #0
 800386c:	d0f1      	beq.n	8003852 <_sungetc_r+0x26>
 800386e:	e7e1      	b.n	8003834 <_sungetc_r+0x8>
 8003870:	6921      	ldr	r1, [r4, #16]
 8003872:	6823      	ldr	r3, [r4, #0]
 8003874:	b151      	cbz	r1, 800388c <_sungetc_r+0x60>
 8003876:	4299      	cmp	r1, r3
 8003878:	d208      	bcs.n	800388c <_sungetc_r+0x60>
 800387a:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 800387e:	42a9      	cmp	r1, r5
 8003880:	d104      	bne.n	800388c <_sungetc_r+0x60>
 8003882:	3b01      	subs	r3, #1
 8003884:	3201      	adds	r2, #1
 8003886:	6023      	str	r3, [r4, #0]
 8003888:	6062      	str	r2, [r4, #4]
 800388a:	e7d5      	b.n	8003838 <_sungetc_r+0xc>
 800388c:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8003890:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003894:	6363      	str	r3, [r4, #52]	; 0x34
 8003896:	2303      	movs	r3, #3
 8003898:	63a3      	str	r3, [r4, #56]	; 0x38
 800389a:	4623      	mov	r3, r4
 800389c:	f803 5f46 	strb.w	r5, [r3, #70]!
 80038a0:	6023      	str	r3, [r4, #0]
 80038a2:	2301      	movs	r3, #1
 80038a4:	e7dc      	b.n	8003860 <_sungetc_r+0x34>

080038a6 <__ssrefill_r>:
 80038a6:	b510      	push	{r4, lr}
 80038a8:	460c      	mov	r4, r1
 80038aa:	6b49      	ldr	r1, [r1, #52]	; 0x34
 80038ac:	b169      	cbz	r1, 80038ca <__ssrefill_r+0x24>
 80038ae:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80038b2:	4299      	cmp	r1, r3
 80038b4:	d001      	beq.n	80038ba <__ssrefill_r+0x14>
 80038b6:	f7ff fedd 	bl	8003674 <_free_r>
 80038ba:	2000      	movs	r0, #0
 80038bc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80038be:	6360      	str	r0, [r4, #52]	; 0x34
 80038c0:	6063      	str	r3, [r4, #4]
 80038c2:	b113      	cbz	r3, 80038ca <__ssrefill_r+0x24>
 80038c4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80038c6:	6023      	str	r3, [r4, #0]
 80038c8:	bd10      	pop	{r4, pc}
 80038ca:	6923      	ldr	r3, [r4, #16]
 80038cc:	f04f 30ff 	mov.w	r0, #4294967295
 80038d0:	6023      	str	r3, [r4, #0]
 80038d2:	2300      	movs	r3, #0
 80038d4:	6063      	str	r3, [r4, #4]
 80038d6:	89a3      	ldrh	r3, [r4, #12]
 80038d8:	f043 0320 	orr.w	r3, r3, #32
 80038dc:	81a3      	strh	r3, [r4, #12]
 80038de:	e7f3      	b.n	80038c8 <__ssrefill_r+0x22>

080038e0 <__ssvfiscanf_r>:
 80038e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80038e4:	460c      	mov	r4, r1
 80038e6:	2100      	movs	r1, #0
 80038e8:	4606      	mov	r6, r0
 80038ea:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 80038ee:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 80038f2:	49a7      	ldr	r1, [pc, #668]	; (8003b90 <__ssvfiscanf_r+0x2b0>)
 80038f4:	f10d 0804 	add.w	r8, sp, #4
 80038f8:	91a0      	str	r1, [sp, #640]	; 0x280
 80038fa:	49a6      	ldr	r1, [pc, #664]	; (8003b94 <__ssvfiscanf_r+0x2b4>)
 80038fc:	4fa6      	ldr	r7, [pc, #664]	; (8003b98 <__ssvfiscanf_r+0x2b8>)
 80038fe:	f8df 929c 	ldr.w	r9, [pc, #668]	; 8003b9c <__ssvfiscanf_r+0x2bc>
 8003902:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8003906:	91a1      	str	r1, [sp, #644]	; 0x284
 8003908:	9300      	str	r3, [sp, #0]
 800390a:	7813      	ldrb	r3, [r2, #0]
 800390c:	2b00      	cmp	r3, #0
 800390e:	f000 815c 	beq.w	8003bca <__ssvfiscanf_r+0x2ea>
 8003912:	5dd9      	ldrb	r1, [r3, r7]
 8003914:	1c55      	adds	r5, r2, #1
 8003916:	f011 0108 	ands.w	r1, r1, #8
 800391a:	d019      	beq.n	8003950 <__ssvfiscanf_r+0x70>
 800391c:	6863      	ldr	r3, [r4, #4]
 800391e:	2b00      	cmp	r3, #0
 8003920:	dd0f      	ble.n	8003942 <__ssvfiscanf_r+0x62>
 8003922:	6823      	ldr	r3, [r4, #0]
 8003924:	781a      	ldrb	r2, [r3, #0]
 8003926:	5cba      	ldrb	r2, [r7, r2]
 8003928:	0712      	lsls	r2, r2, #28
 800392a:	d401      	bmi.n	8003930 <__ssvfiscanf_r+0x50>
 800392c:	462a      	mov	r2, r5
 800392e:	e7ec      	b.n	800390a <__ssvfiscanf_r+0x2a>
 8003930:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8003932:	3301      	adds	r3, #1
 8003934:	3201      	adds	r2, #1
 8003936:	9245      	str	r2, [sp, #276]	; 0x114
 8003938:	6862      	ldr	r2, [r4, #4]
 800393a:	6023      	str	r3, [r4, #0]
 800393c:	3a01      	subs	r2, #1
 800393e:	6062      	str	r2, [r4, #4]
 8003940:	e7ec      	b.n	800391c <__ssvfiscanf_r+0x3c>
 8003942:	4621      	mov	r1, r4
 8003944:	4630      	mov	r0, r6
 8003946:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8003948:	4798      	blx	r3
 800394a:	2800      	cmp	r0, #0
 800394c:	d0e9      	beq.n	8003922 <__ssvfiscanf_r+0x42>
 800394e:	e7ed      	b.n	800392c <__ssvfiscanf_r+0x4c>
 8003950:	2b25      	cmp	r3, #37	; 0x25
 8003952:	d012      	beq.n	800397a <__ssvfiscanf_r+0x9a>
 8003954:	469a      	mov	sl, r3
 8003956:	6863      	ldr	r3, [r4, #4]
 8003958:	2b00      	cmp	r3, #0
 800395a:	f340 8094 	ble.w	8003a86 <__ssvfiscanf_r+0x1a6>
 800395e:	6822      	ldr	r2, [r4, #0]
 8003960:	7813      	ldrb	r3, [r2, #0]
 8003962:	4553      	cmp	r3, sl
 8003964:	f040 8131 	bne.w	8003bca <__ssvfiscanf_r+0x2ea>
 8003968:	6863      	ldr	r3, [r4, #4]
 800396a:	3201      	adds	r2, #1
 800396c:	3b01      	subs	r3, #1
 800396e:	6063      	str	r3, [r4, #4]
 8003970:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8003972:	6022      	str	r2, [r4, #0]
 8003974:	3301      	adds	r3, #1
 8003976:	9345      	str	r3, [sp, #276]	; 0x114
 8003978:	e7d8      	b.n	800392c <__ssvfiscanf_r+0x4c>
 800397a:	9141      	str	r1, [sp, #260]	; 0x104
 800397c:	9143      	str	r1, [sp, #268]	; 0x10c
 800397e:	7853      	ldrb	r3, [r2, #1]
 8003980:	2b2a      	cmp	r3, #42	; 0x2a
 8003982:	bf04      	itt	eq
 8003984:	2310      	moveq	r3, #16
 8003986:	1c95      	addeq	r5, r2, #2
 8003988:	f04f 020a 	mov.w	r2, #10
 800398c:	bf08      	it	eq
 800398e:	9341      	streq	r3, [sp, #260]	; 0x104
 8003990:	46aa      	mov	sl, r5
 8003992:	f81a 1b01 	ldrb.w	r1, [sl], #1
 8003996:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 800399a:	2b09      	cmp	r3, #9
 800399c:	d91d      	bls.n	80039da <__ssvfiscanf_r+0xfa>
 800399e:	2203      	movs	r2, #3
 80039a0:	487e      	ldr	r0, [pc, #504]	; (8003b9c <__ssvfiscanf_r+0x2bc>)
 80039a2:	f000 fefd 	bl	80047a0 <memchr>
 80039a6:	b140      	cbz	r0, 80039ba <__ssvfiscanf_r+0xda>
 80039a8:	2301      	movs	r3, #1
 80039aa:	4655      	mov	r5, sl
 80039ac:	eba0 0009 	sub.w	r0, r0, r9
 80039b0:	fa03 f000 	lsl.w	r0, r3, r0
 80039b4:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80039b6:	4318      	orrs	r0, r3
 80039b8:	9041      	str	r0, [sp, #260]	; 0x104
 80039ba:	f815 3b01 	ldrb.w	r3, [r5], #1
 80039be:	2b78      	cmp	r3, #120	; 0x78
 80039c0:	d806      	bhi.n	80039d0 <__ssvfiscanf_r+0xf0>
 80039c2:	2b57      	cmp	r3, #87	; 0x57
 80039c4:	d810      	bhi.n	80039e8 <__ssvfiscanf_r+0x108>
 80039c6:	2b25      	cmp	r3, #37	; 0x25
 80039c8:	d0c4      	beq.n	8003954 <__ssvfiscanf_r+0x74>
 80039ca:	d857      	bhi.n	8003a7c <__ssvfiscanf_r+0x19c>
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d065      	beq.n	8003a9c <__ssvfiscanf_r+0x1bc>
 80039d0:	2303      	movs	r3, #3
 80039d2:	9347      	str	r3, [sp, #284]	; 0x11c
 80039d4:	230a      	movs	r3, #10
 80039d6:	9342      	str	r3, [sp, #264]	; 0x108
 80039d8:	e072      	b.n	8003ac0 <__ssvfiscanf_r+0x1e0>
 80039da:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 80039dc:	4655      	mov	r5, sl
 80039de:	fb02 1103 	mla	r1, r2, r3, r1
 80039e2:	3930      	subs	r1, #48	; 0x30
 80039e4:	9143      	str	r1, [sp, #268]	; 0x10c
 80039e6:	e7d3      	b.n	8003990 <__ssvfiscanf_r+0xb0>
 80039e8:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 80039ec:	2a20      	cmp	r2, #32
 80039ee:	d8ef      	bhi.n	80039d0 <__ssvfiscanf_r+0xf0>
 80039f0:	a101      	add	r1, pc, #4	; (adr r1, 80039f8 <__ssvfiscanf_r+0x118>)
 80039f2:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80039f6:	bf00      	nop
 80039f8:	08003aab 	.word	0x08003aab
 80039fc:	080039d1 	.word	0x080039d1
 8003a00:	080039d1 	.word	0x080039d1
 8003a04:	08003b09 	.word	0x08003b09
 8003a08:	080039d1 	.word	0x080039d1
 8003a0c:	080039d1 	.word	0x080039d1
 8003a10:	080039d1 	.word	0x080039d1
 8003a14:	080039d1 	.word	0x080039d1
 8003a18:	080039d1 	.word	0x080039d1
 8003a1c:	080039d1 	.word	0x080039d1
 8003a20:	080039d1 	.word	0x080039d1
 8003a24:	08003b1f 	.word	0x08003b1f
 8003a28:	08003af5 	.word	0x08003af5
 8003a2c:	08003a83 	.word	0x08003a83
 8003a30:	08003a83 	.word	0x08003a83
 8003a34:	08003a83 	.word	0x08003a83
 8003a38:	080039d1 	.word	0x080039d1
 8003a3c:	08003af9 	.word	0x08003af9
 8003a40:	080039d1 	.word	0x080039d1
 8003a44:	080039d1 	.word	0x080039d1
 8003a48:	080039d1 	.word	0x080039d1
 8003a4c:	080039d1 	.word	0x080039d1
 8003a50:	08003b2f 	.word	0x08003b2f
 8003a54:	08003b01 	.word	0x08003b01
 8003a58:	08003aa3 	.word	0x08003aa3
 8003a5c:	080039d1 	.word	0x080039d1
 8003a60:	080039d1 	.word	0x080039d1
 8003a64:	08003b2b 	.word	0x08003b2b
 8003a68:	080039d1 	.word	0x080039d1
 8003a6c:	08003af5 	.word	0x08003af5
 8003a70:	080039d1 	.word	0x080039d1
 8003a74:	080039d1 	.word	0x080039d1
 8003a78:	08003aab 	.word	0x08003aab
 8003a7c:	3b45      	subs	r3, #69	; 0x45
 8003a7e:	2b02      	cmp	r3, #2
 8003a80:	d8a6      	bhi.n	80039d0 <__ssvfiscanf_r+0xf0>
 8003a82:	2305      	movs	r3, #5
 8003a84:	e01b      	b.n	8003abe <__ssvfiscanf_r+0x1de>
 8003a86:	4621      	mov	r1, r4
 8003a88:	4630      	mov	r0, r6
 8003a8a:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8003a8c:	4798      	blx	r3
 8003a8e:	2800      	cmp	r0, #0
 8003a90:	f43f af65 	beq.w	800395e <__ssvfiscanf_r+0x7e>
 8003a94:	9844      	ldr	r0, [sp, #272]	; 0x110
 8003a96:	2800      	cmp	r0, #0
 8003a98:	f040 808d 	bne.w	8003bb6 <__ssvfiscanf_r+0x2d6>
 8003a9c:	f04f 30ff 	mov.w	r0, #4294967295
 8003aa0:	e08f      	b.n	8003bc2 <__ssvfiscanf_r+0x2e2>
 8003aa2:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8003aa4:	f042 0220 	orr.w	r2, r2, #32
 8003aa8:	9241      	str	r2, [sp, #260]	; 0x104
 8003aaa:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8003aac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003ab0:	9241      	str	r2, [sp, #260]	; 0x104
 8003ab2:	2210      	movs	r2, #16
 8003ab4:	2b6f      	cmp	r3, #111	; 0x6f
 8003ab6:	bf34      	ite	cc
 8003ab8:	2303      	movcc	r3, #3
 8003aba:	2304      	movcs	r3, #4
 8003abc:	9242      	str	r2, [sp, #264]	; 0x108
 8003abe:	9347      	str	r3, [sp, #284]	; 0x11c
 8003ac0:	6863      	ldr	r3, [r4, #4]
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	dd42      	ble.n	8003b4c <__ssvfiscanf_r+0x26c>
 8003ac6:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8003ac8:	0659      	lsls	r1, r3, #25
 8003aca:	d404      	bmi.n	8003ad6 <__ssvfiscanf_r+0x1f6>
 8003acc:	6823      	ldr	r3, [r4, #0]
 8003ace:	781a      	ldrb	r2, [r3, #0]
 8003ad0:	5cba      	ldrb	r2, [r7, r2]
 8003ad2:	0712      	lsls	r2, r2, #28
 8003ad4:	d441      	bmi.n	8003b5a <__ssvfiscanf_r+0x27a>
 8003ad6:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8003ad8:	2b02      	cmp	r3, #2
 8003ada:	dc50      	bgt.n	8003b7e <__ssvfiscanf_r+0x29e>
 8003adc:	466b      	mov	r3, sp
 8003ade:	4622      	mov	r2, r4
 8003ae0:	4630      	mov	r0, r6
 8003ae2:	a941      	add	r1, sp, #260	; 0x104
 8003ae4:	f000 fb64 	bl	80041b0 <_scanf_chars>
 8003ae8:	2801      	cmp	r0, #1
 8003aea:	d06e      	beq.n	8003bca <__ssvfiscanf_r+0x2ea>
 8003aec:	2802      	cmp	r0, #2
 8003aee:	f47f af1d 	bne.w	800392c <__ssvfiscanf_r+0x4c>
 8003af2:	e7cf      	b.n	8003a94 <__ssvfiscanf_r+0x1b4>
 8003af4:	220a      	movs	r2, #10
 8003af6:	e7dd      	b.n	8003ab4 <__ssvfiscanf_r+0x1d4>
 8003af8:	2300      	movs	r3, #0
 8003afa:	9342      	str	r3, [sp, #264]	; 0x108
 8003afc:	2303      	movs	r3, #3
 8003afe:	e7de      	b.n	8003abe <__ssvfiscanf_r+0x1de>
 8003b00:	2308      	movs	r3, #8
 8003b02:	9342      	str	r3, [sp, #264]	; 0x108
 8003b04:	2304      	movs	r3, #4
 8003b06:	e7da      	b.n	8003abe <__ssvfiscanf_r+0x1de>
 8003b08:	4629      	mov	r1, r5
 8003b0a:	4640      	mov	r0, r8
 8003b0c:	f000 fcc4 	bl	8004498 <__sccl>
 8003b10:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8003b12:	4605      	mov	r5, r0
 8003b14:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003b18:	9341      	str	r3, [sp, #260]	; 0x104
 8003b1a:	2301      	movs	r3, #1
 8003b1c:	e7cf      	b.n	8003abe <__ssvfiscanf_r+0x1de>
 8003b1e:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8003b20:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003b24:	9341      	str	r3, [sp, #260]	; 0x104
 8003b26:	2300      	movs	r3, #0
 8003b28:	e7c9      	b.n	8003abe <__ssvfiscanf_r+0x1de>
 8003b2a:	2302      	movs	r3, #2
 8003b2c:	e7c7      	b.n	8003abe <__ssvfiscanf_r+0x1de>
 8003b2e:	9841      	ldr	r0, [sp, #260]	; 0x104
 8003b30:	06c3      	lsls	r3, r0, #27
 8003b32:	f53f aefb 	bmi.w	800392c <__ssvfiscanf_r+0x4c>
 8003b36:	9b00      	ldr	r3, [sp, #0]
 8003b38:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8003b3a:	1d19      	adds	r1, r3, #4
 8003b3c:	9100      	str	r1, [sp, #0]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	f010 0f01 	tst.w	r0, #1
 8003b44:	bf14      	ite	ne
 8003b46:	801a      	strhne	r2, [r3, #0]
 8003b48:	601a      	streq	r2, [r3, #0]
 8003b4a:	e6ef      	b.n	800392c <__ssvfiscanf_r+0x4c>
 8003b4c:	4621      	mov	r1, r4
 8003b4e:	4630      	mov	r0, r6
 8003b50:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8003b52:	4798      	blx	r3
 8003b54:	2800      	cmp	r0, #0
 8003b56:	d0b6      	beq.n	8003ac6 <__ssvfiscanf_r+0x1e6>
 8003b58:	e79c      	b.n	8003a94 <__ssvfiscanf_r+0x1b4>
 8003b5a:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8003b5c:	3201      	adds	r2, #1
 8003b5e:	9245      	str	r2, [sp, #276]	; 0x114
 8003b60:	6862      	ldr	r2, [r4, #4]
 8003b62:	3a01      	subs	r2, #1
 8003b64:	2a00      	cmp	r2, #0
 8003b66:	6062      	str	r2, [r4, #4]
 8003b68:	dd02      	ble.n	8003b70 <__ssvfiscanf_r+0x290>
 8003b6a:	3301      	adds	r3, #1
 8003b6c:	6023      	str	r3, [r4, #0]
 8003b6e:	e7ad      	b.n	8003acc <__ssvfiscanf_r+0x1ec>
 8003b70:	4621      	mov	r1, r4
 8003b72:	4630      	mov	r0, r6
 8003b74:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8003b76:	4798      	blx	r3
 8003b78:	2800      	cmp	r0, #0
 8003b7a:	d0a7      	beq.n	8003acc <__ssvfiscanf_r+0x1ec>
 8003b7c:	e78a      	b.n	8003a94 <__ssvfiscanf_r+0x1b4>
 8003b7e:	2b04      	cmp	r3, #4
 8003b80:	dc0e      	bgt.n	8003ba0 <__ssvfiscanf_r+0x2c0>
 8003b82:	466b      	mov	r3, sp
 8003b84:	4622      	mov	r2, r4
 8003b86:	4630      	mov	r0, r6
 8003b88:	a941      	add	r1, sp, #260	; 0x104
 8003b8a:	f000 fb6b 	bl	8004264 <_scanf_i>
 8003b8e:	e7ab      	b.n	8003ae8 <__ssvfiscanf_r+0x208>
 8003b90:	0800382d 	.word	0x0800382d
 8003b94:	080038a7 	.word	0x080038a7
 8003b98:	08004b5b 	.word	0x08004b5b
 8003b9c:	08004b0c 	.word	0x08004b0c
 8003ba0:	4b0b      	ldr	r3, [pc, #44]	; (8003bd0 <__ssvfiscanf_r+0x2f0>)
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	f43f aec2 	beq.w	800392c <__ssvfiscanf_r+0x4c>
 8003ba8:	466b      	mov	r3, sp
 8003baa:	4622      	mov	r2, r4
 8003bac:	4630      	mov	r0, r6
 8003bae:	a941      	add	r1, sp, #260	; 0x104
 8003bb0:	f3af 8000 	nop.w
 8003bb4:	e798      	b.n	8003ae8 <__ssvfiscanf_r+0x208>
 8003bb6:	89a3      	ldrh	r3, [r4, #12]
 8003bb8:	f013 0f40 	tst.w	r3, #64	; 0x40
 8003bbc:	bf18      	it	ne
 8003bbe:	f04f 30ff 	movne.w	r0, #4294967295
 8003bc2:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 8003bc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003bca:	9844      	ldr	r0, [sp, #272]	; 0x110
 8003bcc:	e7f9      	b.n	8003bc2 <__ssvfiscanf_r+0x2e2>
 8003bce:	bf00      	nop
 8003bd0:	00000000 	.word	0x00000000

08003bd4 <__sfputc_r>:
 8003bd4:	6893      	ldr	r3, [r2, #8]
 8003bd6:	b410      	push	{r4}
 8003bd8:	3b01      	subs	r3, #1
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	6093      	str	r3, [r2, #8]
 8003bde:	da07      	bge.n	8003bf0 <__sfputc_r+0x1c>
 8003be0:	6994      	ldr	r4, [r2, #24]
 8003be2:	42a3      	cmp	r3, r4
 8003be4:	db01      	blt.n	8003bea <__sfputc_r+0x16>
 8003be6:	290a      	cmp	r1, #10
 8003be8:	d102      	bne.n	8003bf0 <__sfputc_r+0x1c>
 8003bea:	bc10      	pop	{r4}
 8003bec:	f7ff ba32 	b.w	8003054 <__swbuf_r>
 8003bf0:	6813      	ldr	r3, [r2, #0]
 8003bf2:	1c58      	adds	r0, r3, #1
 8003bf4:	6010      	str	r0, [r2, #0]
 8003bf6:	7019      	strb	r1, [r3, #0]
 8003bf8:	4608      	mov	r0, r1
 8003bfa:	bc10      	pop	{r4}
 8003bfc:	4770      	bx	lr

08003bfe <__sfputs_r>:
 8003bfe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c00:	4606      	mov	r6, r0
 8003c02:	460f      	mov	r7, r1
 8003c04:	4614      	mov	r4, r2
 8003c06:	18d5      	adds	r5, r2, r3
 8003c08:	42ac      	cmp	r4, r5
 8003c0a:	d101      	bne.n	8003c10 <__sfputs_r+0x12>
 8003c0c:	2000      	movs	r0, #0
 8003c0e:	e007      	b.n	8003c20 <__sfputs_r+0x22>
 8003c10:	463a      	mov	r2, r7
 8003c12:	4630      	mov	r0, r6
 8003c14:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003c18:	f7ff ffdc 	bl	8003bd4 <__sfputc_r>
 8003c1c:	1c43      	adds	r3, r0, #1
 8003c1e:	d1f3      	bne.n	8003c08 <__sfputs_r+0xa>
 8003c20:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003c24 <_vfiprintf_r>:
 8003c24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003c28:	460d      	mov	r5, r1
 8003c2a:	4614      	mov	r4, r2
 8003c2c:	4698      	mov	r8, r3
 8003c2e:	4606      	mov	r6, r0
 8003c30:	b09d      	sub	sp, #116	; 0x74
 8003c32:	b118      	cbz	r0, 8003c3c <_vfiprintf_r+0x18>
 8003c34:	6983      	ldr	r3, [r0, #24]
 8003c36:	b90b      	cbnz	r3, 8003c3c <_vfiprintf_r+0x18>
 8003c38:	f7ff fc04 	bl	8003444 <__sinit>
 8003c3c:	4b89      	ldr	r3, [pc, #548]	; (8003e64 <_vfiprintf_r+0x240>)
 8003c3e:	429d      	cmp	r5, r3
 8003c40:	d11b      	bne.n	8003c7a <_vfiprintf_r+0x56>
 8003c42:	6875      	ldr	r5, [r6, #4]
 8003c44:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003c46:	07d9      	lsls	r1, r3, #31
 8003c48:	d405      	bmi.n	8003c56 <_vfiprintf_r+0x32>
 8003c4a:	89ab      	ldrh	r3, [r5, #12]
 8003c4c:	059a      	lsls	r2, r3, #22
 8003c4e:	d402      	bmi.n	8003c56 <_vfiprintf_r+0x32>
 8003c50:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003c52:	f7ff fc95 	bl	8003580 <__retarget_lock_acquire_recursive>
 8003c56:	89ab      	ldrh	r3, [r5, #12]
 8003c58:	071b      	lsls	r3, r3, #28
 8003c5a:	d501      	bpl.n	8003c60 <_vfiprintf_r+0x3c>
 8003c5c:	692b      	ldr	r3, [r5, #16]
 8003c5e:	b9eb      	cbnz	r3, 8003c9c <_vfiprintf_r+0x78>
 8003c60:	4629      	mov	r1, r5
 8003c62:	4630      	mov	r0, r6
 8003c64:	f7ff fa5a 	bl	800311c <__swsetup_r>
 8003c68:	b1c0      	cbz	r0, 8003c9c <_vfiprintf_r+0x78>
 8003c6a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003c6c:	07dc      	lsls	r4, r3, #31
 8003c6e:	d50e      	bpl.n	8003c8e <_vfiprintf_r+0x6a>
 8003c70:	f04f 30ff 	mov.w	r0, #4294967295
 8003c74:	b01d      	add	sp, #116	; 0x74
 8003c76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003c7a:	4b7b      	ldr	r3, [pc, #492]	; (8003e68 <_vfiprintf_r+0x244>)
 8003c7c:	429d      	cmp	r5, r3
 8003c7e:	d101      	bne.n	8003c84 <_vfiprintf_r+0x60>
 8003c80:	68b5      	ldr	r5, [r6, #8]
 8003c82:	e7df      	b.n	8003c44 <_vfiprintf_r+0x20>
 8003c84:	4b79      	ldr	r3, [pc, #484]	; (8003e6c <_vfiprintf_r+0x248>)
 8003c86:	429d      	cmp	r5, r3
 8003c88:	bf08      	it	eq
 8003c8a:	68f5      	ldreq	r5, [r6, #12]
 8003c8c:	e7da      	b.n	8003c44 <_vfiprintf_r+0x20>
 8003c8e:	89ab      	ldrh	r3, [r5, #12]
 8003c90:	0598      	lsls	r0, r3, #22
 8003c92:	d4ed      	bmi.n	8003c70 <_vfiprintf_r+0x4c>
 8003c94:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003c96:	f7ff fc74 	bl	8003582 <__retarget_lock_release_recursive>
 8003c9a:	e7e9      	b.n	8003c70 <_vfiprintf_r+0x4c>
 8003c9c:	2300      	movs	r3, #0
 8003c9e:	9309      	str	r3, [sp, #36]	; 0x24
 8003ca0:	2320      	movs	r3, #32
 8003ca2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003ca6:	2330      	movs	r3, #48	; 0x30
 8003ca8:	f04f 0901 	mov.w	r9, #1
 8003cac:	f8cd 800c 	str.w	r8, [sp, #12]
 8003cb0:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8003e70 <_vfiprintf_r+0x24c>
 8003cb4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003cb8:	4623      	mov	r3, r4
 8003cba:	469a      	mov	sl, r3
 8003cbc:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003cc0:	b10a      	cbz	r2, 8003cc6 <_vfiprintf_r+0xa2>
 8003cc2:	2a25      	cmp	r2, #37	; 0x25
 8003cc4:	d1f9      	bne.n	8003cba <_vfiprintf_r+0x96>
 8003cc6:	ebba 0b04 	subs.w	fp, sl, r4
 8003cca:	d00b      	beq.n	8003ce4 <_vfiprintf_r+0xc0>
 8003ccc:	465b      	mov	r3, fp
 8003cce:	4622      	mov	r2, r4
 8003cd0:	4629      	mov	r1, r5
 8003cd2:	4630      	mov	r0, r6
 8003cd4:	f7ff ff93 	bl	8003bfe <__sfputs_r>
 8003cd8:	3001      	adds	r0, #1
 8003cda:	f000 80aa 	beq.w	8003e32 <_vfiprintf_r+0x20e>
 8003cde:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003ce0:	445a      	add	r2, fp
 8003ce2:	9209      	str	r2, [sp, #36]	; 0x24
 8003ce4:	f89a 3000 	ldrb.w	r3, [sl]
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	f000 80a2 	beq.w	8003e32 <_vfiprintf_r+0x20e>
 8003cee:	2300      	movs	r3, #0
 8003cf0:	f04f 32ff 	mov.w	r2, #4294967295
 8003cf4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003cf8:	f10a 0a01 	add.w	sl, sl, #1
 8003cfc:	9304      	str	r3, [sp, #16]
 8003cfe:	9307      	str	r3, [sp, #28]
 8003d00:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003d04:	931a      	str	r3, [sp, #104]	; 0x68
 8003d06:	4654      	mov	r4, sl
 8003d08:	2205      	movs	r2, #5
 8003d0a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003d0e:	4858      	ldr	r0, [pc, #352]	; (8003e70 <_vfiprintf_r+0x24c>)
 8003d10:	f000 fd46 	bl	80047a0 <memchr>
 8003d14:	9a04      	ldr	r2, [sp, #16]
 8003d16:	b9d8      	cbnz	r0, 8003d50 <_vfiprintf_r+0x12c>
 8003d18:	06d1      	lsls	r1, r2, #27
 8003d1a:	bf44      	itt	mi
 8003d1c:	2320      	movmi	r3, #32
 8003d1e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003d22:	0713      	lsls	r3, r2, #28
 8003d24:	bf44      	itt	mi
 8003d26:	232b      	movmi	r3, #43	; 0x2b
 8003d28:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003d2c:	f89a 3000 	ldrb.w	r3, [sl]
 8003d30:	2b2a      	cmp	r3, #42	; 0x2a
 8003d32:	d015      	beq.n	8003d60 <_vfiprintf_r+0x13c>
 8003d34:	4654      	mov	r4, sl
 8003d36:	2000      	movs	r0, #0
 8003d38:	f04f 0c0a 	mov.w	ip, #10
 8003d3c:	9a07      	ldr	r2, [sp, #28]
 8003d3e:	4621      	mov	r1, r4
 8003d40:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003d44:	3b30      	subs	r3, #48	; 0x30
 8003d46:	2b09      	cmp	r3, #9
 8003d48:	d94e      	bls.n	8003de8 <_vfiprintf_r+0x1c4>
 8003d4a:	b1b0      	cbz	r0, 8003d7a <_vfiprintf_r+0x156>
 8003d4c:	9207      	str	r2, [sp, #28]
 8003d4e:	e014      	b.n	8003d7a <_vfiprintf_r+0x156>
 8003d50:	eba0 0308 	sub.w	r3, r0, r8
 8003d54:	fa09 f303 	lsl.w	r3, r9, r3
 8003d58:	4313      	orrs	r3, r2
 8003d5a:	46a2      	mov	sl, r4
 8003d5c:	9304      	str	r3, [sp, #16]
 8003d5e:	e7d2      	b.n	8003d06 <_vfiprintf_r+0xe2>
 8003d60:	9b03      	ldr	r3, [sp, #12]
 8003d62:	1d19      	adds	r1, r3, #4
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	9103      	str	r1, [sp, #12]
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	bfbb      	ittet	lt
 8003d6c:	425b      	neglt	r3, r3
 8003d6e:	f042 0202 	orrlt.w	r2, r2, #2
 8003d72:	9307      	strge	r3, [sp, #28]
 8003d74:	9307      	strlt	r3, [sp, #28]
 8003d76:	bfb8      	it	lt
 8003d78:	9204      	strlt	r2, [sp, #16]
 8003d7a:	7823      	ldrb	r3, [r4, #0]
 8003d7c:	2b2e      	cmp	r3, #46	; 0x2e
 8003d7e:	d10c      	bne.n	8003d9a <_vfiprintf_r+0x176>
 8003d80:	7863      	ldrb	r3, [r4, #1]
 8003d82:	2b2a      	cmp	r3, #42	; 0x2a
 8003d84:	d135      	bne.n	8003df2 <_vfiprintf_r+0x1ce>
 8003d86:	9b03      	ldr	r3, [sp, #12]
 8003d88:	3402      	adds	r4, #2
 8003d8a:	1d1a      	adds	r2, r3, #4
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	9203      	str	r2, [sp, #12]
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	bfb8      	it	lt
 8003d94:	f04f 33ff 	movlt.w	r3, #4294967295
 8003d98:	9305      	str	r3, [sp, #20]
 8003d9a:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8003e74 <_vfiprintf_r+0x250>
 8003d9e:	2203      	movs	r2, #3
 8003da0:	4650      	mov	r0, sl
 8003da2:	7821      	ldrb	r1, [r4, #0]
 8003da4:	f000 fcfc 	bl	80047a0 <memchr>
 8003da8:	b140      	cbz	r0, 8003dbc <_vfiprintf_r+0x198>
 8003daa:	2340      	movs	r3, #64	; 0x40
 8003dac:	eba0 000a 	sub.w	r0, r0, sl
 8003db0:	fa03 f000 	lsl.w	r0, r3, r0
 8003db4:	9b04      	ldr	r3, [sp, #16]
 8003db6:	3401      	adds	r4, #1
 8003db8:	4303      	orrs	r3, r0
 8003dba:	9304      	str	r3, [sp, #16]
 8003dbc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003dc0:	2206      	movs	r2, #6
 8003dc2:	482d      	ldr	r0, [pc, #180]	; (8003e78 <_vfiprintf_r+0x254>)
 8003dc4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003dc8:	f000 fcea 	bl	80047a0 <memchr>
 8003dcc:	2800      	cmp	r0, #0
 8003dce:	d03f      	beq.n	8003e50 <_vfiprintf_r+0x22c>
 8003dd0:	4b2a      	ldr	r3, [pc, #168]	; (8003e7c <_vfiprintf_r+0x258>)
 8003dd2:	bb1b      	cbnz	r3, 8003e1c <_vfiprintf_r+0x1f8>
 8003dd4:	9b03      	ldr	r3, [sp, #12]
 8003dd6:	3307      	adds	r3, #7
 8003dd8:	f023 0307 	bic.w	r3, r3, #7
 8003ddc:	3308      	adds	r3, #8
 8003dde:	9303      	str	r3, [sp, #12]
 8003de0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003de2:	443b      	add	r3, r7
 8003de4:	9309      	str	r3, [sp, #36]	; 0x24
 8003de6:	e767      	b.n	8003cb8 <_vfiprintf_r+0x94>
 8003de8:	460c      	mov	r4, r1
 8003dea:	2001      	movs	r0, #1
 8003dec:	fb0c 3202 	mla	r2, ip, r2, r3
 8003df0:	e7a5      	b.n	8003d3e <_vfiprintf_r+0x11a>
 8003df2:	2300      	movs	r3, #0
 8003df4:	f04f 0c0a 	mov.w	ip, #10
 8003df8:	4619      	mov	r1, r3
 8003dfa:	3401      	adds	r4, #1
 8003dfc:	9305      	str	r3, [sp, #20]
 8003dfe:	4620      	mov	r0, r4
 8003e00:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003e04:	3a30      	subs	r2, #48	; 0x30
 8003e06:	2a09      	cmp	r2, #9
 8003e08:	d903      	bls.n	8003e12 <_vfiprintf_r+0x1ee>
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d0c5      	beq.n	8003d9a <_vfiprintf_r+0x176>
 8003e0e:	9105      	str	r1, [sp, #20]
 8003e10:	e7c3      	b.n	8003d9a <_vfiprintf_r+0x176>
 8003e12:	4604      	mov	r4, r0
 8003e14:	2301      	movs	r3, #1
 8003e16:	fb0c 2101 	mla	r1, ip, r1, r2
 8003e1a:	e7f0      	b.n	8003dfe <_vfiprintf_r+0x1da>
 8003e1c:	ab03      	add	r3, sp, #12
 8003e1e:	9300      	str	r3, [sp, #0]
 8003e20:	462a      	mov	r2, r5
 8003e22:	4630      	mov	r0, r6
 8003e24:	4b16      	ldr	r3, [pc, #88]	; (8003e80 <_vfiprintf_r+0x25c>)
 8003e26:	a904      	add	r1, sp, #16
 8003e28:	f3af 8000 	nop.w
 8003e2c:	4607      	mov	r7, r0
 8003e2e:	1c78      	adds	r0, r7, #1
 8003e30:	d1d6      	bne.n	8003de0 <_vfiprintf_r+0x1bc>
 8003e32:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003e34:	07d9      	lsls	r1, r3, #31
 8003e36:	d405      	bmi.n	8003e44 <_vfiprintf_r+0x220>
 8003e38:	89ab      	ldrh	r3, [r5, #12]
 8003e3a:	059a      	lsls	r2, r3, #22
 8003e3c:	d402      	bmi.n	8003e44 <_vfiprintf_r+0x220>
 8003e3e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003e40:	f7ff fb9f 	bl	8003582 <__retarget_lock_release_recursive>
 8003e44:	89ab      	ldrh	r3, [r5, #12]
 8003e46:	065b      	lsls	r3, r3, #25
 8003e48:	f53f af12 	bmi.w	8003c70 <_vfiprintf_r+0x4c>
 8003e4c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003e4e:	e711      	b.n	8003c74 <_vfiprintf_r+0x50>
 8003e50:	ab03      	add	r3, sp, #12
 8003e52:	9300      	str	r3, [sp, #0]
 8003e54:	462a      	mov	r2, r5
 8003e56:	4630      	mov	r0, r6
 8003e58:	4b09      	ldr	r3, [pc, #36]	; (8003e80 <_vfiprintf_r+0x25c>)
 8003e5a:	a904      	add	r1, sp, #16
 8003e5c:	f000 f882 	bl	8003f64 <_printf_i>
 8003e60:	e7e4      	b.n	8003e2c <_vfiprintf_r+0x208>
 8003e62:	bf00      	nop
 8003e64:	08004acc 	.word	0x08004acc
 8003e68:	08004aec 	.word	0x08004aec
 8003e6c:	08004aac 	.word	0x08004aac
 8003e70:	08004b10 	.word	0x08004b10
 8003e74:	08004b0c 	.word	0x08004b0c
 8003e78:	08004b16 	.word	0x08004b16
 8003e7c:	00000000 	.word	0x00000000
 8003e80:	08003bff 	.word	0x08003bff

08003e84 <_printf_common>:
 8003e84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003e88:	4616      	mov	r6, r2
 8003e8a:	4699      	mov	r9, r3
 8003e8c:	688a      	ldr	r2, [r1, #8]
 8003e8e:	690b      	ldr	r3, [r1, #16]
 8003e90:	4607      	mov	r7, r0
 8003e92:	4293      	cmp	r3, r2
 8003e94:	bfb8      	it	lt
 8003e96:	4613      	movlt	r3, r2
 8003e98:	6033      	str	r3, [r6, #0]
 8003e9a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003e9e:	460c      	mov	r4, r1
 8003ea0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003ea4:	b10a      	cbz	r2, 8003eaa <_printf_common+0x26>
 8003ea6:	3301      	adds	r3, #1
 8003ea8:	6033      	str	r3, [r6, #0]
 8003eaa:	6823      	ldr	r3, [r4, #0]
 8003eac:	0699      	lsls	r1, r3, #26
 8003eae:	bf42      	ittt	mi
 8003eb0:	6833      	ldrmi	r3, [r6, #0]
 8003eb2:	3302      	addmi	r3, #2
 8003eb4:	6033      	strmi	r3, [r6, #0]
 8003eb6:	6825      	ldr	r5, [r4, #0]
 8003eb8:	f015 0506 	ands.w	r5, r5, #6
 8003ebc:	d106      	bne.n	8003ecc <_printf_common+0x48>
 8003ebe:	f104 0a19 	add.w	sl, r4, #25
 8003ec2:	68e3      	ldr	r3, [r4, #12]
 8003ec4:	6832      	ldr	r2, [r6, #0]
 8003ec6:	1a9b      	subs	r3, r3, r2
 8003ec8:	42ab      	cmp	r3, r5
 8003eca:	dc28      	bgt.n	8003f1e <_printf_common+0x9a>
 8003ecc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003ed0:	1e13      	subs	r3, r2, #0
 8003ed2:	6822      	ldr	r2, [r4, #0]
 8003ed4:	bf18      	it	ne
 8003ed6:	2301      	movne	r3, #1
 8003ed8:	0692      	lsls	r2, r2, #26
 8003eda:	d42d      	bmi.n	8003f38 <_printf_common+0xb4>
 8003edc:	4649      	mov	r1, r9
 8003ede:	4638      	mov	r0, r7
 8003ee0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003ee4:	47c0      	blx	r8
 8003ee6:	3001      	adds	r0, #1
 8003ee8:	d020      	beq.n	8003f2c <_printf_common+0xa8>
 8003eea:	6823      	ldr	r3, [r4, #0]
 8003eec:	68e5      	ldr	r5, [r4, #12]
 8003eee:	f003 0306 	and.w	r3, r3, #6
 8003ef2:	2b04      	cmp	r3, #4
 8003ef4:	bf18      	it	ne
 8003ef6:	2500      	movne	r5, #0
 8003ef8:	6832      	ldr	r2, [r6, #0]
 8003efa:	f04f 0600 	mov.w	r6, #0
 8003efe:	68a3      	ldr	r3, [r4, #8]
 8003f00:	bf08      	it	eq
 8003f02:	1aad      	subeq	r5, r5, r2
 8003f04:	6922      	ldr	r2, [r4, #16]
 8003f06:	bf08      	it	eq
 8003f08:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003f0c:	4293      	cmp	r3, r2
 8003f0e:	bfc4      	itt	gt
 8003f10:	1a9b      	subgt	r3, r3, r2
 8003f12:	18ed      	addgt	r5, r5, r3
 8003f14:	341a      	adds	r4, #26
 8003f16:	42b5      	cmp	r5, r6
 8003f18:	d11a      	bne.n	8003f50 <_printf_common+0xcc>
 8003f1a:	2000      	movs	r0, #0
 8003f1c:	e008      	b.n	8003f30 <_printf_common+0xac>
 8003f1e:	2301      	movs	r3, #1
 8003f20:	4652      	mov	r2, sl
 8003f22:	4649      	mov	r1, r9
 8003f24:	4638      	mov	r0, r7
 8003f26:	47c0      	blx	r8
 8003f28:	3001      	adds	r0, #1
 8003f2a:	d103      	bne.n	8003f34 <_printf_common+0xb0>
 8003f2c:	f04f 30ff 	mov.w	r0, #4294967295
 8003f30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003f34:	3501      	adds	r5, #1
 8003f36:	e7c4      	b.n	8003ec2 <_printf_common+0x3e>
 8003f38:	2030      	movs	r0, #48	; 0x30
 8003f3a:	18e1      	adds	r1, r4, r3
 8003f3c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003f40:	1c5a      	adds	r2, r3, #1
 8003f42:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003f46:	4422      	add	r2, r4
 8003f48:	3302      	adds	r3, #2
 8003f4a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003f4e:	e7c5      	b.n	8003edc <_printf_common+0x58>
 8003f50:	2301      	movs	r3, #1
 8003f52:	4622      	mov	r2, r4
 8003f54:	4649      	mov	r1, r9
 8003f56:	4638      	mov	r0, r7
 8003f58:	47c0      	blx	r8
 8003f5a:	3001      	adds	r0, #1
 8003f5c:	d0e6      	beq.n	8003f2c <_printf_common+0xa8>
 8003f5e:	3601      	adds	r6, #1
 8003f60:	e7d9      	b.n	8003f16 <_printf_common+0x92>
	...

08003f64 <_printf_i>:
 8003f64:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003f68:	7e0f      	ldrb	r7, [r1, #24]
 8003f6a:	4691      	mov	r9, r2
 8003f6c:	2f78      	cmp	r7, #120	; 0x78
 8003f6e:	4680      	mov	r8, r0
 8003f70:	460c      	mov	r4, r1
 8003f72:	469a      	mov	sl, r3
 8003f74:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003f76:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003f7a:	d807      	bhi.n	8003f8c <_printf_i+0x28>
 8003f7c:	2f62      	cmp	r7, #98	; 0x62
 8003f7e:	d80a      	bhi.n	8003f96 <_printf_i+0x32>
 8003f80:	2f00      	cmp	r7, #0
 8003f82:	f000 80d9 	beq.w	8004138 <_printf_i+0x1d4>
 8003f86:	2f58      	cmp	r7, #88	; 0x58
 8003f88:	f000 80a4 	beq.w	80040d4 <_printf_i+0x170>
 8003f8c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003f90:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003f94:	e03a      	b.n	800400c <_printf_i+0xa8>
 8003f96:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003f9a:	2b15      	cmp	r3, #21
 8003f9c:	d8f6      	bhi.n	8003f8c <_printf_i+0x28>
 8003f9e:	a101      	add	r1, pc, #4	; (adr r1, 8003fa4 <_printf_i+0x40>)
 8003fa0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003fa4:	08003ffd 	.word	0x08003ffd
 8003fa8:	08004011 	.word	0x08004011
 8003fac:	08003f8d 	.word	0x08003f8d
 8003fb0:	08003f8d 	.word	0x08003f8d
 8003fb4:	08003f8d 	.word	0x08003f8d
 8003fb8:	08003f8d 	.word	0x08003f8d
 8003fbc:	08004011 	.word	0x08004011
 8003fc0:	08003f8d 	.word	0x08003f8d
 8003fc4:	08003f8d 	.word	0x08003f8d
 8003fc8:	08003f8d 	.word	0x08003f8d
 8003fcc:	08003f8d 	.word	0x08003f8d
 8003fd0:	0800411f 	.word	0x0800411f
 8003fd4:	08004041 	.word	0x08004041
 8003fd8:	08004101 	.word	0x08004101
 8003fdc:	08003f8d 	.word	0x08003f8d
 8003fe0:	08003f8d 	.word	0x08003f8d
 8003fe4:	08004141 	.word	0x08004141
 8003fe8:	08003f8d 	.word	0x08003f8d
 8003fec:	08004041 	.word	0x08004041
 8003ff0:	08003f8d 	.word	0x08003f8d
 8003ff4:	08003f8d 	.word	0x08003f8d
 8003ff8:	08004109 	.word	0x08004109
 8003ffc:	682b      	ldr	r3, [r5, #0]
 8003ffe:	1d1a      	adds	r2, r3, #4
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	602a      	str	r2, [r5, #0]
 8004004:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004008:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800400c:	2301      	movs	r3, #1
 800400e:	e0a4      	b.n	800415a <_printf_i+0x1f6>
 8004010:	6820      	ldr	r0, [r4, #0]
 8004012:	6829      	ldr	r1, [r5, #0]
 8004014:	0606      	lsls	r6, r0, #24
 8004016:	f101 0304 	add.w	r3, r1, #4
 800401a:	d50a      	bpl.n	8004032 <_printf_i+0xce>
 800401c:	680e      	ldr	r6, [r1, #0]
 800401e:	602b      	str	r3, [r5, #0]
 8004020:	2e00      	cmp	r6, #0
 8004022:	da03      	bge.n	800402c <_printf_i+0xc8>
 8004024:	232d      	movs	r3, #45	; 0x2d
 8004026:	4276      	negs	r6, r6
 8004028:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800402c:	230a      	movs	r3, #10
 800402e:	485e      	ldr	r0, [pc, #376]	; (80041a8 <_printf_i+0x244>)
 8004030:	e019      	b.n	8004066 <_printf_i+0x102>
 8004032:	680e      	ldr	r6, [r1, #0]
 8004034:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004038:	602b      	str	r3, [r5, #0]
 800403a:	bf18      	it	ne
 800403c:	b236      	sxthne	r6, r6
 800403e:	e7ef      	b.n	8004020 <_printf_i+0xbc>
 8004040:	682b      	ldr	r3, [r5, #0]
 8004042:	6820      	ldr	r0, [r4, #0]
 8004044:	1d19      	adds	r1, r3, #4
 8004046:	6029      	str	r1, [r5, #0]
 8004048:	0601      	lsls	r1, r0, #24
 800404a:	d501      	bpl.n	8004050 <_printf_i+0xec>
 800404c:	681e      	ldr	r6, [r3, #0]
 800404e:	e002      	b.n	8004056 <_printf_i+0xf2>
 8004050:	0646      	lsls	r6, r0, #25
 8004052:	d5fb      	bpl.n	800404c <_printf_i+0xe8>
 8004054:	881e      	ldrh	r6, [r3, #0]
 8004056:	2f6f      	cmp	r7, #111	; 0x6f
 8004058:	bf0c      	ite	eq
 800405a:	2308      	moveq	r3, #8
 800405c:	230a      	movne	r3, #10
 800405e:	4852      	ldr	r0, [pc, #328]	; (80041a8 <_printf_i+0x244>)
 8004060:	2100      	movs	r1, #0
 8004062:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004066:	6865      	ldr	r5, [r4, #4]
 8004068:	2d00      	cmp	r5, #0
 800406a:	bfa8      	it	ge
 800406c:	6821      	ldrge	r1, [r4, #0]
 800406e:	60a5      	str	r5, [r4, #8]
 8004070:	bfa4      	itt	ge
 8004072:	f021 0104 	bicge.w	r1, r1, #4
 8004076:	6021      	strge	r1, [r4, #0]
 8004078:	b90e      	cbnz	r6, 800407e <_printf_i+0x11a>
 800407a:	2d00      	cmp	r5, #0
 800407c:	d04d      	beq.n	800411a <_printf_i+0x1b6>
 800407e:	4615      	mov	r5, r2
 8004080:	fbb6 f1f3 	udiv	r1, r6, r3
 8004084:	fb03 6711 	mls	r7, r3, r1, r6
 8004088:	5dc7      	ldrb	r7, [r0, r7]
 800408a:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800408e:	4637      	mov	r7, r6
 8004090:	42bb      	cmp	r3, r7
 8004092:	460e      	mov	r6, r1
 8004094:	d9f4      	bls.n	8004080 <_printf_i+0x11c>
 8004096:	2b08      	cmp	r3, #8
 8004098:	d10b      	bne.n	80040b2 <_printf_i+0x14e>
 800409a:	6823      	ldr	r3, [r4, #0]
 800409c:	07de      	lsls	r6, r3, #31
 800409e:	d508      	bpl.n	80040b2 <_printf_i+0x14e>
 80040a0:	6923      	ldr	r3, [r4, #16]
 80040a2:	6861      	ldr	r1, [r4, #4]
 80040a4:	4299      	cmp	r1, r3
 80040a6:	bfde      	ittt	le
 80040a8:	2330      	movle	r3, #48	; 0x30
 80040aa:	f805 3c01 	strble.w	r3, [r5, #-1]
 80040ae:	f105 35ff 	addle.w	r5, r5, #4294967295
 80040b2:	1b52      	subs	r2, r2, r5
 80040b4:	6122      	str	r2, [r4, #16]
 80040b6:	464b      	mov	r3, r9
 80040b8:	4621      	mov	r1, r4
 80040ba:	4640      	mov	r0, r8
 80040bc:	f8cd a000 	str.w	sl, [sp]
 80040c0:	aa03      	add	r2, sp, #12
 80040c2:	f7ff fedf 	bl	8003e84 <_printf_common>
 80040c6:	3001      	adds	r0, #1
 80040c8:	d14c      	bne.n	8004164 <_printf_i+0x200>
 80040ca:	f04f 30ff 	mov.w	r0, #4294967295
 80040ce:	b004      	add	sp, #16
 80040d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80040d4:	4834      	ldr	r0, [pc, #208]	; (80041a8 <_printf_i+0x244>)
 80040d6:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80040da:	6829      	ldr	r1, [r5, #0]
 80040dc:	6823      	ldr	r3, [r4, #0]
 80040de:	f851 6b04 	ldr.w	r6, [r1], #4
 80040e2:	6029      	str	r1, [r5, #0]
 80040e4:	061d      	lsls	r5, r3, #24
 80040e6:	d514      	bpl.n	8004112 <_printf_i+0x1ae>
 80040e8:	07df      	lsls	r7, r3, #31
 80040ea:	bf44      	itt	mi
 80040ec:	f043 0320 	orrmi.w	r3, r3, #32
 80040f0:	6023      	strmi	r3, [r4, #0]
 80040f2:	b91e      	cbnz	r6, 80040fc <_printf_i+0x198>
 80040f4:	6823      	ldr	r3, [r4, #0]
 80040f6:	f023 0320 	bic.w	r3, r3, #32
 80040fa:	6023      	str	r3, [r4, #0]
 80040fc:	2310      	movs	r3, #16
 80040fe:	e7af      	b.n	8004060 <_printf_i+0xfc>
 8004100:	6823      	ldr	r3, [r4, #0]
 8004102:	f043 0320 	orr.w	r3, r3, #32
 8004106:	6023      	str	r3, [r4, #0]
 8004108:	2378      	movs	r3, #120	; 0x78
 800410a:	4828      	ldr	r0, [pc, #160]	; (80041ac <_printf_i+0x248>)
 800410c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004110:	e7e3      	b.n	80040da <_printf_i+0x176>
 8004112:	0659      	lsls	r1, r3, #25
 8004114:	bf48      	it	mi
 8004116:	b2b6      	uxthmi	r6, r6
 8004118:	e7e6      	b.n	80040e8 <_printf_i+0x184>
 800411a:	4615      	mov	r5, r2
 800411c:	e7bb      	b.n	8004096 <_printf_i+0x132>
 800411e:	682b      	ldr	r3, [r5, #0]
 8004120:	6826      	ldr	r6, [r4, #0]
 8004122:	1d18      	adds	r0, r3, #4
 8004124:	6961      	ldr	r1, [r4, #20]
 8004126:	6028      	str	r0, [r5, #0]
 8004128:	0635      	lsls	r5, r6, #24
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	d501      	bpl.n	8004132 <_printf_i+0x1ce>
 800412e:	6019      	str	r1, [r3, #0]
 8004130:	e002      	b.n	8004138 <_printf_i+0x1d4>
 8004132:	0670      	lsls	r0, r6, #25
 8004134:	d5fb      	bpl.n	800412e <_printf_i+0x1ca>
 8004136:	8019      	strh	r1, [r3, #0]
 8004138:	2300      	movs	r3, #0
 800413a:	4615      	mov	r5, r2
 800413c:	6123      	str	r3, [r4, #16]
 800413e:	e7ba      	b.n	80040b6 <_printf_i+0x152>
 8004140:	682b      	ldr	r3, [r5, #0]
 8004142:	2100      	movs	r1, #0
 8004144:	1d1a      	adds	r2, r3, #4
 8004146:	602a      	str	r2, [r5, #0]
 8004148:	681d      	ldr	r5, [r3, #0]
 800414a:	6862      	ldr	r2, [r4, #4]
 800414c:	4628      	mov	r0, r5
 800414e:	f000 fb27 	bl	80047a0 <memchr>
 8004152:	b108      	cbz	r0, 8004158 <_printf_i+0x1f4>
 8004154:	1b40      	subs	r0, r0, r5
 8004156:	6060      	str	r0, [r4, #4]
 8004158:	6863      	ldr	r3, [r4, #4]
 800415a:	6123      	str	r3, [r4, #16]
 800415c:	2300      	movs	r3, #0
 800415e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004162:	e7a8      	b.n	80040b6 <_printf_i+0x152>
 8004164:	462a      	mov	r2, r5
 8004166:	4649      	mov	r1, r9
 8004168:	4640      	mov	r0, r8
 800416a:	6923      	ldr	r3, [r4, #16]
 800416c:	47d0      	blx	sl
 800416e:	3001      	adds	r0, #1
 8004170:	d0ab      	beq.n	80040ca <_printf_i+0x166>
 8004172:	6823      	ldr	r3, [r4, #0]
 8004174:	079b      	lsls	r3, r3, #30
 8004176:	d413      	bmi.n	80041a0 <_printf_i+0x23c>
 8004178:	68e0      	ldr	r0, [r4, #12]
 800417a:	9b03      	ldr	r3, [sp, #12]
 800417c:	4298      	cmp	r0, r3
 800417e:	bfb8      	it	lt
 8004180:	4618      	movlt	r0, r3
 8004182:	e7a4      	b.n	80040ce <_printf_i+0x16a>
 8004184:	2301      	movs	r3, #1
 8004186:	4632      	mov	r2, r6
 8004188:	4649      	mov	r1, r9
 800418a:	4640      	mov	r0, r8
 800418c:	47d0      	blx	sl
 800418e:	3001      	adds	r0, #1
 8004190:	d09b      	beq.n	80040ca <_printf_i+0x166>
 8004192:	3501      	adds	r5, #1
 8004194:	68e3      	ldr	r3, [r4, #12]
 8004196:	9903      	ldr	r1, [sp, #12]
 8004198:	1a5b      	subs	r3, r3, r1
 800419a:	42ab      	cmp	r3, r5
 800419c:	dcf2      	bgt.n	8004184 <_printf_i+0x220>
 800419e:	e7eb      	b.n	8004178 <_printf_i+0x214>
 80041a0:	2500      	movs	r5, #0
 80041a2:	f104 0619 	add.w	r6, r4, #25
 80041a6:	e7f5      	b.n	8004194 <_printf_i+0x230>
 80041a8:	08004b1d 	.word	0x08004b1d
 80041ac:	08004b2e 	.word	0x08004b2e

080041b0 <_scanf_chars>:
 80041b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80041b4:	4615      	mov	r5, r2
 80041b6:	688a      	ldr	r2, [r1, #8]
 80041b8:	4680      	mov	r8, r0
 80041ba:	460c      	mov	r4, r1
 80041bc:	b932      	cbnz	r2, 80041cc <_scanf_chars+0x1c>
 80041be:	698a      	ldr	r2, [r1, #24]
 80041c0:	2a00      	cmp	r2, #0
 80041c2:	bf0c      	ite	eq
 80041c4:	2201      	moveq	r2, #1
 80041c6:	f04f 32ff 	movne.w	r2, #4294967295
 80041ca:	608a      	str	r2, [r1, #8]
 80041cc:	2700      	movs	r7, #0
 80041ce:	6822      	ldr	r2, [r4, #0]
 80041d0:	f8df 908c 	ldr.w	r9, [pc, #140]	; 8004260 <_scanf_chars+0xb0>
 80041d4:	06d1      	lsls	r1, r2, #27
 80041d6:	bf5f      	itttt	pl
 80041d8:	681a      	ldrpl	r2, [r3, #0]
 80041da:	1d11      	addpl	r1, r2, #4
 80041dc:	6019      	strpl	r1, [r3, #0]
 80041de:	6816      	ldrpl	r6, [r2, #0]
 80041e0:	69a0      	ldr	r0, [r4, #24]
 80041e2:	b188      	cbz	r0, 8004208 <_scanf_chars+0x58>
 80041e4:	2801      	cmp	r0, #1
 80041e6:	d107      	bne.n	80041f8 <_scanf_chars+0x48>
 80041e8:	682b      	ldr	r3, [r5, #0]
 80041ea:	781a      	ldrb	r2, [r3, #0]
 80041ec:	6963      	ldr	r3, [r4, #20]
 80041ee:	5c9b      	ldrb	r3, [r3, r2]
 80041f0:	b953      	cbnz	r3, 8004208 <_scanf_chars+0x58>
 80041f2:	2f00      	cmp	r7, #0
 80041f4:	d031      	beq.n	800425a <_scanf_chars+0xaa>
 80041f6:	e022      	b.n	800423e <_scanf_chars+0x8e>
 80041f8:	2802      	cmp	r0, #2
 80041fa:	d120      	bne.n	800423e <_scanf_chars+0x8e>
 80041fc:	682b      	ldr	r3, [r5, #0]
 80041fe:	781b      	ldrb	r3, [r3, #0]
 8004200:	f813 3009 	ldrb.w	r3, [r3, r9]
 8004204:	071b      	lsls	r3, r3, #28
 8004206:	d41a      	bmi.n	800423e <_scanf_chars+0x8e>
 8004208:	6823      	ldr	r3, [r4, #0]
 800420a:	3701      	adds	r7, #1
 800420c:	06da      	lsls	r2, r3, #27
 800420e:	bf5e      	ittt	pl
 8004210:	682b      	ldrpl	r3, [r5, #0]
 8004212:	781b      	ldrbpl	r3, [r3, #0]
 8004214:	f806 3b01 	strbpl.w	r3, [r6], #1
 8004218:	682a      	ldr	r2, [r5, #0]
 800421a:	686b      	ldr	r3, [r5, #4]
 800421c:	3201      	adds	r2, #1
 800421e:	602a      	str	r2, [r5, #0]
 8004220:	68a2      	ldr	r2, [r4, #8]
 8004222:	3b01      	subs	r3, #1
 8004224:	3a01      	subs	r2, #1
 8004226:	606b      	str	r3, [r5, #4]
 8004228:	60a2      	str	r2, [r4, #8]
 800422a:	b142      	cbz	r2, 800423e <_scanf_chars+0x8e>
 800422c:	2b00      	cmp	r3, #0
 800422e:	dcd7      	bgt.n	80041e0 <_scanf_chars+0x30>
 8004230:	4629      	mov	r1, r5
 8004232:	4640      	mov	r0, r8
 8004234:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8004238:	4798      	blx	r3
 800423a:	2800      	cmp	r0, #0
 800423c:	d0d0      	beq.n	80041e0 <_scanf_chars+0x30>
 800423e:	6823      	ldr	r3, [r4, #0]
 8004240:	f013 0310 	ands.w	r3, r3, #16
 8004244:	d105      	bne.n	8004252 <_scanf_chars+0xa2>
 8004246:	68e2      	ldr	r2, [r4, #12]
 8004248:	3201      	adds	r2, #1
 800424a:	60e2      	str	r2, [r4, #12]
 800424c:	69a2      	ldr	r2, [r4, #24]
 800424e:	b102      	cbz	r2, 8004252 <_scanf_chars+0xa2>
 8004250:	7033      	strb	r3, [r6, #0]
 8004252:	2000      	movs	r0, #0
 8004254:	6923      	ldr	r3, [r4, #16]
 8004256:	443b      	add	r3, r7
 8004258:	6123      	str	r3, [r4, #16]
 800425a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800425e:	bf00      	nop
 8004260:	08004b5b 	.word	0x08004b5b

08004264 <_scanf_i>:
 8004264:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004268:	460c      	mov	r4, r1
 800426a:	4698      	mov	r8, r3
 800426c:	4b75      	ldr	r3, [pc, #468]	; (8004444 <_scanf_i+0x1e0>)
 800426e:	b087      	sub	sp, #28
 8004270:	4682      	mov	sl, r0
 8004272:	4616      	mov	r6, r2
 8004274:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8004278:	ab03      	add	r3, sp, #12
 800427a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800427e:	4b72      	ldr	r3, [pc, #456]	; (8004448 <_scanf_i+0x1e4>)
 8004280:	69a1      	ldr	r1, [r4, #24]
 8004282:	4a72      	ldr	r2, [pc, #456]	; (800444c <_scanf_i+0x1e8>)
 8004284:	4627      	mov	r7, r4
 8004286:	2903      	cmp	r1, #3
 8004288:	bf18      	it	ne
 800428a:	461a      	movne	r2, r3
 800428c:	68a3      	ldr	r3, [r4, #8]
 800428e:	9201      	str	r2, [sp, #4]
 8004290:	1e5a      	subs	r2, r3, #1
 8004292:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8004296:	bf81      	itttt	hi
 8004298:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800429c:	eb03 0905 	addhi.w	r9, r3, r5
 80042a0:	f240 135d 	movwhi	r3, #349	; 0x15d
 80042a4:	60a3      	strhi	r3, [r4, #8]
 80042a6:	f857 3b1c 	ldr.w	r3, [r7], #28
 80042aa:	bf98      	it	ls
 80042ac:	f04f 0900 	movls.w	r9, #0
 80042b0:	463d      	mov	r5, r7
 80042b2:	f04f 0b00 	mov.w	fp, #0
 80042b6:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 80042ba:	6023      	str	r3, [r4, #0]
 80042bc:	6831      	ldr	r1, [r6, #0]
 80042be:	ab03      	add	r3, sp, #12
 80042c0:	2202      	movs	r2, #2
 80042c2:	7809      	ldrb	r1, [r1, #0]
 80042c4:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 80042c8:	f000 fa6a 	bl	80047a0 <memchr>
 80042cc:	b328      	cbz	r0, 800431a <_scanf_i+0xb6>
 80042ce:	f1bb 0f01 	cmp.w	fp, #1
 80042d2:	d159      	bne.n	8004388 <_scanf_i+0x124>
 80042d4:	6862      	ldr	r2, [r4, #4]
 80042d6:	b92a      	cbnz	r2, 80042e4 <_scanf_i+0x80>
 80042d8:	2308      	movs	r3, #8
 80042da:	6822      	ldr	r2, [r4, #0]
 80042dc:	6063      	str	r3, [r4, #4]
 80042de:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80042e2:	6022      	str	r2, [r4, #0]
 80042e4:	6822      	ldr	r2, [r4, #0]
 80042e6:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 80042ea:	6022      	str	r2, [r4, #0]
 80042ec:	68a2      	ldr	r2, [r4, #8]
 80042ee:	1e51      	subs	r1, r2, #1
 80042f0:	60a1      	str	r1, [r4, #8]
 80042f2:	b192      	cbz	r2, 800431a <_scanf_i+0xb6>
 80042f4:	6832      	ldr	r2, [r6, #0]
 80042f6:	1c51      	adds	r1, r2, #1
 80042f8:	6031      	str	r1, [r6, #0]
 80042fa:	7812      	ldrb	r2, [r2, #0]
 80042fc:	f805 2b01 	strb.w	r2, [r5], #1
 8004300:	6872      	ldr	r2, [r6, #4]
 8004302:	3a01      	subs	r2, #1
 8004304:	2a00      	cmp	r2, #0
 8004306:	6072      	str	r2, [r6, #4]
 8004308:	dc07      	bgt.n	800431a <_scanf_i+0xb6>
 800430a:	4631      	mov	r1, r6
 800430c:	4650      	mov	r0, sl
 800430e:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 8004312:	4790      	blx	r2
 8004314:	2800      	cmp	r0, #0
 8004316:	f040 8085 	bne.w	8004424 <_scanf_i+0x1c0>
 800431a:	f10b 0b01 	add.w	fp, fp, #1
 800431e:	f1bb 0f03 	cmp.w	fp, #3
 8004322:	d1cb      	bne.n	80042bc <_scanf_i+0x58>
 8004324:	6863      	ldr	r3, [r4, #4]
 8004326:	b90b      	cbnz	r3, 800432c <_scanf_i+0xc8>
 8004328:	230a      	movs	r3, #10
 800432a:	6063      	str	r3, [r4, #4]
 800432c:	6863      	ldr	r3, [r4, #4]
 800432e:	4948      	ldr	r1, [pc, #288]	; (8004450 <_scanf_i+0x1ec>)
 8004330:	6960      	ldr	r0, [r4, #20]
 8004332:	1ac9      	subs	r1, r1, r3
 8004334:	f000 f8b0 	bl	8004498 <__sccl>
 8004338:	f04f 0b00 	mov.w	fp, #0
 800433c:	68a3      	ldr	r3, [r4, #8]
 800433e:	6822      	ldr	r2, [r4, #0]
 8004340:	2b00      	cmp	r3, #0
 8004342:	d03d      	beq.n	80043c0 <_scanf_i+0x15c>
 8004344:	6831      	ldr	r1, [r6, #0]
 8004346:	6960      	ldr	r0, [r4, #20]
 8004348:	f891 c000 	ldrb.w	ip, [r1]
 800434c:	f810 000c 	ldrb.w	r0, [r0, ip]
 8004350:	2800      	cmp	r0, #0
 8004352:	d035      	beq.n	80043c0 <_scanf_i+0x15c>
 8004354:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 8004358:	d124      	bne.n	80043a4 <_scanf_i+0x140>
 800435a:	0510      	lsls	r0, r2, #20
 800435c:	d522      	bpl.n	80043a4 <_scanf_i+0x140>
 800435e:	f10b 0b01 	add.w	fp, fp, #1
 8004362:	f1b9 0f00 	cmp.w	r9, #0
 8004366:	d003      	beq.n	8004370 <_scanf_i+0x10c>
 8004368:	3301      	adds	r3, #1
 800436a:	f109 39ff 	add.w	r9, r9, #4294967295
 800436e:	60a3      	str	r3, [r4, #8]
 8004370:	6873      	ldr	r3, [r6, #4]
 8004372:	3b01      	subs	r3, #1
 8004374:	2b00      	cmp	r3, #0
 8004376:	6073      	str	r3, [r6, #4]
 8004378:	dd1b      	ble.n	80043b2 <_scanf_i+0x14e>
 800437a:	6833      	ldr	r3, [r6, #0]
 800437c:	3301      	adds	r3, #1
 800437e:	6033      	str	r3, [r6, #0]
 8004380:	68a3      	ldr	r3, [r4, #8]
 8004382:	3b01      	subs	r3, #1
 8004384:	60a3      	str	r3, [r4, #8]
 8004386:	e7d9      	b.n	800433c <_scanf_i+0xd8>
 8004388:	f1bb 0f02 	cmp.w	fp, #2
 800438c:	d1ae      	bne.n	80042ec <_scanf_i+0x88>
 800438e:	6822      	ldr	r2, [r4, #0]
 8004390:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 8004394:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8004398:	d1bf      	bne.n	800431a <_scanf_i+0xb6>
 800439a:	2310      	movs	r3, #16
 800439c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80043a0:	6063      	str	r3, [r4, #4]
 80043a2:	e7a2      	b.n	80042ea <_scanf_i+0x86>
 80043a4:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 80043a8:	6022      	str	r2, [r4, #0]
 80043aa:	780b      	ldrb	r3, [r1, #0]
 80043ac:	f805 3b01 	strb.w	r3, [r5], #1
 80043b0:	e7de      	b.n	8004370 <_scanf_i+0x10c>
 80043b2:	4631      	mov	r1, r6
 80043b4:	4650      	mov	r0, sl
 80043b6:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80043ba:	4798      	blx	r3
 80043bc:	2800      	cmp	r0, #0
 80043be:	d0df      	beq.n	8004380 <_scanf_i+0x11c>
 80043c0:	6823      	ldr	r3, [r4, #0]
 80043c2:	05db      	lsls	r3, r3, #23
 80043c4:	d50d      	bpl.n	80043e2 <_scanf_i+0x17e>
 80043c6:	42bd      	cmp	r5, r7
 80043c8:	d909      	bls.n	80043de <_scanf_i+0x17a>
 80043ca:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 80043ce:	4632      	mov	r2, r6
 80043d0:	4650      	mov	r0, sl
 80043d2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80043d6:	f105 39ff 	add.w	r9, r5, #4294967295
 80043da:	4798      	blx	r3
 80043dc:	464d      	mov	r5, r9
 80043de:	42bd      	cmp	r5, r7
 80043e0:	d02d      	beq.n	800443e <_scanf_i+0x1da>
 80043e2:	6822      	ldr	r2, [r4, #0]
 80043e4:	f012 0210 	ands.w	r2, r2, #16
 80043e8:	d113      	bne.n	8004412 <_scanf_i+0x1ae>
 80043ea:	702a      	strb	r2, [r5, #0]
 80043ec:	4639      	mov	r1, r7
 80043ee:	6863      	ldr	r3, [r4, #4]
 80043f0:	4650      	mov	r0, sl
 80043f2:	9e01      	ldr	r6, [sp, #4]
 80043f4:	47b0      	blx	r6
 80043f6:	6821      	ldr	r1, [r4, #0]
 80043f8:	f8d8 3000 	ldr.w	r3, [r8]
 80043fc:	f011 0f20 	tst.w	r1, #32
 8004400:	d013      	beq.n	800442a <_scanf_i+0x1c6>
 8004402:	1d1a      	adds	r2, r3, #4
 8004404:	f8c8 2000 	str.w	r2, [r8]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	6018      	str	r0, [r3, #0]
 800440c:	68e3      	ldr	r3, [r4, #12]
 800440e:	3301      	adds	r3, #1
 8004410:	60e3      	str	r3, [r4, #12]
 8004412:	2000      	movs	r0, #0
 8004414:	1bed      	subs	r5, r5, r7
 8004416:	44ab      	add	fp, r5
 8004418:	6925      	ldr	r5, [r4, #16]
 800441a:	445d      	add	r5, fp
 800441c:	6125      	str	r5, [r4, #16]
 800441e:	b007      	add	sp, #28
 8004420:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004424:	f04f 0b00 	mov.w	fp, #0
 8004428:	e7ca      	b.n	80043c0 <_scanf_i+0x15c>
 800442a:	1d1a      	adds	r2, r3, #4
 800442c:	f8c8 2000 	str.w	r2, [r8]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	f011 0f01 	tst.w	r1, #1
 8004436:	bf14      	ite	ne
 8004438:	8018      	strhne	r0, [r3, #0]
 800443a:	6018      	streq	r0, [r3, #0]
 800443c:	e7e6      	b.n	800440c <_scanf_i+0x1a8>
 800443e:	2001      	movs	r0, #1
 8004440:	e7ed      	b.n	800441e <_scanf_i+0x1ba>
 8004442:	bf00      	nop
 8004444:	08004a84 	.word	0x08004a84
 8004448:	080046e9 	.word	0x080046e9
 800444c:	08004601 	.word	0x08004601
 8004450:	08004b58 	.word	0x08004b58

08004454 <_read_r>:
 8004454:	b538      	push	{r3, r4, r5, lr}
 8004456:	4604      	mov	r4, r0
 8004458:	4608      	mov	r0, r1
 800445a:	4611      	mov	r1, r2
 800445c:	2200      	movs	r2, #0
 800445e:	4d05      	ldr	r5, [pc, #20]	; (8004474 <_read_r+0x20>)
 8004460:	602a      	str	r2, [r5, #0]
 8004462:	461a      	mov	r2, r3
 8004464:	f7fc f9ae 	bl	80007c4 <_read>
 8004468:	1c43      	adds	r3, r0, #1
 800446a:	d102      	bne.n	8004472 <_read_r+0x1e>
 800446c:	682b      	ldr	r3, [r5, #0]
 800446e:	b103      	cbz	r3, 8004472 <_read_r+0x1e>
 8004470:	6023      	str	r3, [r4, #0]
 8004472:	bd38      	pop	{r3, r4, r5, pc}
 8004474:	20000524 	.word	0x20000524

08004478 <_sbrk_r>:
 8004478:	b538      	push	{r3, r4, r5, lr}
 800447a:	2300      	movs	r3, #0
 800447c:	4d05      	ldr	r5, [pc, #20]	; (8004494 <_sbrk_r+0x1c>)
 800447e:	4604      	mov	r4, r0
 8004480:	4608      	mov	r0, r1
 8004482:	602b      	str	r3, [r5, #0]
 8004484:	f7fc fa08 	bl	8000898 <_sbrk>
 8004488:	1c43      	adds	r3, r0, #1
 800448a:	d102      	bne.n	8004492 <_sbrk_r+0x1a>
 800448c:	682b      	ldr	r3, [r5, #0]
 800448e:	b103      	cbz	r3, 8004492 <_sbrk_r+0x1a>
 8004490:	6023      	str	r3, [r4, #0]
 8004492:	bd38      	pop	{r3, r4, r5, pc}
 8004494:	20000524 	.word	0x20000524

08004498 <__sccl>:
 8004498:	b570      	push	{r4, r5, r6, lr}
 800449a:	780b      	ldrb	r3, [r1, #0]
 800449c:	4604      	mov	r4, r0
 800449e:	2b5e      	cmp	r3, #94	; 0x5e
 80044a0:	bf13      	iteet	ne
 80044a2:	2200      	movne	r2, #0
 80044a4:	2201      	moveq	r2, #1
 80044a6:	784b      	ldrbeq	r3, [r1, #1]
 80044a8:	1c48      	addne	r0, r1, #1
 80044aa:	bf08      	it	eq
 80044ac:	1c88      	addeq	r0, r1, #2
 80044ae:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 80044b2:	1e61      	subs	r1, r4, #1
 80044b4:	f801 2f01 	strb.w	r2, [r1, #1]!
 80044b8:	42a9      	cmp	r1, r5
 80044ba:	d1fb      	bne.n	80044b4 <__sccl+0x1c>
 80044bc:	b90b      	cbnz	r3, 80044c2 <__sccl+0x2a>
 80044be:	3801      	subs	r0, #1
 80044c0:	bd70      	pop	{r4, r5, r6, pc}
 80044c2:	f082 0201 	eor.w	r2, r2, #1
 80044c6:	4605      	mov	r5, r0
 80044c8:	54e2      	strb	r2, [r4, r3]
 80044ca:	4628      	mov	r0, r5
 80044cc:	f810 1b01 	ldrb.w	r1, [r0], #1
 80044d0:	292d      	cmp	r1, #45	; 0x2d
 80044d2:	d006      	beq.n	80044e2 <__sccl+0x4a>
 80044d4:	295d      	cmp	r1, #93	; 0x5d
 80044d6:	d0f3      	beq.n	80044c0 <__sccl+0x28>
 80044d8:	b909      	cbnz	r1, 80044de <__sccl+0x46>
 80044da:	4628      	mov	r0, r5
 80044dc:	e7f0      	b.n	80044c0 <__sccl+0x28>
 80044de:	460b      	mov	r3, r1
 80044e0:	e7f1      	b.n	80044c6 <__sccl+0x2e>
 80044e2:	786e      	ldrb	r6, [r5, #1]
 80044e4:	2e5d      	cmp	r6, #93	; 0x5d
 80044e6:	d0fa      	beq.n	80044de <__sccl+0x46>
 80044e8:	42b3      	cmp	r3, r6
 80044ea:	dcf8      	bgt.n	80044de <__sccl+0x46>
 80044ec:	4619      	mov	r1, r3
 80044ee:	3502      	adds	r5, #2
 80044f0:	3101      	adds	r1, #1
 80044f2:	428e      	cmp	r6, r1
 80044f4:	5462      	strb	r2, [r4, r1]
 80044f6:	dcfb      	bgt.n	80044f0 <__sccl+0x58>
 80044f8:	1af1      	subs	r1, r6, r3
 80044fa:	3901      	subs	r1, #1
 80044fc:	42b3      	cmp	r3, r6
 80044fe:	bfa8      	it	ge
 8004500:	2100      	movge	r1, #0
 8004502:	1c58      	adds	r0, r3, #1
 8004504:	1843      	adds	r3, r0, r1
 8004506:	e7e0      	b.n	80044ca <__sccl+0x32>

08004508 <_strtol_l.constprop.0>:
 8004508:	2b01      	cmp	r3, #1
 800450a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800450e:	4680      	mov	r8, r0
 8004510:	d001      	beq.n	8004516 <_strtol_l.constprop.0+0xe>
 8004512:	2b24      	cmp	r3, #36	; 0x24
 8004514:	d906      	bls.n	8004524 <_strtol_l.constprop.0+0x1c>
 8004516:	f7fe fc6d 	bl	8002df4 <__errno>
 800451a:	2316      	movs	r3, #22
 800451c:	6003      	str	r3, [r0, #0]
 800451e:	2000      	movs	r0, #0
 8004520:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004524:	460d      	mov	r5, r1
 8004526:	4f35      	ldr	r7, [pc, #212]	; (80045fc <_strtol_l.constprop.0+0xf4>)
 8004528:	4628      	mov	r0, r5
 800452a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800452e:	5de6      	ldrb	r6, [r4, r7]
 8004530:	f016 0608 	ands.w	r6, r6, #8
 8004534:	d1f8      	bne.n	8004528 <_strtol_l.constprop.0+0x20>
 8004536:	2c2d      	cmp	r4, #45	; 0x2d
 8004538:	d12f      	bne.n	800459a <_strtol_l.constprop.0+0x92>
 800453a:	2601      	movs	r6, #1
 800453c:	782c      	ldrb	r4, [r5, #0]
 800453e:	1c85      	adds	r5, r0, #2
 8004540:	2b00      	cmp	r3, #0
 8004542:	d057      	beq.n	80045f4 <_strtol_l.constprop.0+0xec>
 8004544:	2b10      	cmp	r3, #16
 8004546:	d109      	bne.n	800455c <_strtol_l.constprop.0+0x54>
 8004548:	2c30      	cmp	r4, #48	; 0x30
 800454a:	d107      	bne.n	800455c <_strtol_l.constprop.0+0x54>
 800454c:	7828      	ldrb	r0, [r5, #0]
 800454e:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8004552:	2858      	cmp	r0, #88	; 0x58
 8004554:	d149      	bne.n	80045ea <_strtol_l.constprop.0+0xe2>
 8004556:	2310      	movs	r3, #16
 8004558:	786c      	ldrb	r4, [r5, #1]
 800455a:	3502      	adds	r5, #2
 800455c:	2700      	movs	r7, #0
 800455e:	f106 4e00 	add.w	lr, r6, #2147483648	; 0x80000000
 8004562:	f10e 3eff 	add.w	lr, lr, #4294967295
 8004566:	fbbe f9f3 	udiv	r9, lr, r3
 800456a:	4638      	mov	r0, r7
 800456c:	fb03 ea19 	mls	sl, r3, r9, lr
 8004570:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8004574:	f1bc 0f09 	cmp.w	ip, #9
 8004578:	d814      	bhi.n	80045a4 <_strtol_l.constprop.0+0x9c>
 800457a:	4664      	mov	r4, ip
 800457c:	42a3      	cmp	r3, r4
 800457e:	dd22      	ble.n	80045c6 <_strtol_l.constprop.0+0xbe>
 8004580:	2f00      	cmp	r7, #0
 8004582:	db1d      	blt.n	80045c0 <_strtol_l.constprop.0+0xb8>
 8004584:	4581      	cmp	r9, r0
 8004586:	d31b      	bcc.n	80045c0 <_strtol_l.constprop.0+0xb8>
 8004588:	d101      	bne.n	800458e <_strtol_l.constprop.0+0x86>
 800458a:	45a2      	cmp	sl, r4
 800458c:	db18      	blt.n	80045c0 <_strtol_l.constprop.0+0xb8>
 800458e:	2701      	movs	r7, #1
 8004590:	fb00 4003 	mla	r0, r0, r3, r4
 8004594:	f815 4b01 	ldrb.w	r4, [r5], #1
 8004598:	e7ea      	b.n	8004570 <_strtol_l.constprop.0+0x68>
 800459a:	2c2b      	cmp	r4, #43	; 0x2b
 800459c:	bf04      	itt	eq
 800459e:	782c      	ldrbeq	r4, [r5, #0]
 80045a0:	1c85      	addeq	r5, r0, #2
 80045a2:	e7cd      	b.n	8004540 <_strtol_l.constprop.0+0x38>
 80045a4:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 80045a8:	f1bc 0f19 	cmp.w	ip, #25
 80045ac:	d801      	bhi.n	80045b2 <_strtol_l.constprop.0+0xaa>
 80045ae:	3c37      	subs	r4, #55	; 0x37
 80045b0:	e7e4      	b.n	800457c <_strtol_l.constprop.0+0x74>
 80045b2:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 80045b6:	f1bc 0f19 	cmp.w	ip, #25
 80045ba:	d804      	bhi.n	80045c6 <_strtol_l.constprop.0+0xbe>
 80045bc:	3c57      	subs	r4, #87	; 0x57
 80045be:	e7dd      	b.n	800457c <_strtol_l.constprop.0+0x74>
 80045c0:	f04f 37ff 	mov.w	r7, #4294967295
 80045c4:	e7e6      	b.n	8004594 <_strtol_l.constprop.0+0x8c>
 80045c6:	2f00      	cmp	r7, #0
 80045c8:	da07      	bge.n	80045da <_strtol_l.constprop.0+0xd2>
 80045ca:	2322      	movs	r3, #34	; 0x22
 80045cc:	4670      	mov	r0, lr
 80045ce:	f8c8 3000 	str.w	r3, [r8]
 80045d2:	2a00      	cmp	r2, #0
 80045d4:	d0a4      	beq.n	8004520 <_strtol_l.constprop.0+0x18>
 80045d6:	1e69      	subs	r1, r5, #1
 80045d8:	e005      	b.n	80045e6 <_strtol_l.constprop.0+0xde>
 80045da:	b106      	cbz	r6, 80045de <_strtol_l.constprop.0+0xd6>
 80045dc:	4240      	negs	r0, r0
 80045de:	2a00      	cmp	r2, #0
 80045e0:	d09e      	beq.n	8004520 <_strtol_l.constprop.0+0x18>
 80045e2:	2f00      	cmp	r7, #0
 80045e4:	d1f7      	bne.n	80045d6 <_strtol_l.constprop.0+0xce>
 80045e6:	6011      	str	r1, [r2, #0]
 80045e8:	e79a      	b.n	8004520 <_strtol_l.constprop.0+0x18>
 80045ea:	2430      	movs	r4, #48	; 0x30
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d1b5      	bne.n	800455c <_strtol_l.constprop.0+0x54>
 80045f0:	2308      	movs	r3, #8
 80045f2:	e7b3      	b.n	800455c <_strtol_l.constprop.0+0x54>
 80045f4:	2c30      	cmp	r4, #48	; 0x30
 80045f6:	d0a9      	beq.n	800454c <_strtol_l.constprop.0+0x44>
 80045f8:	230a      	movs	r3, #10
 80045fa:	e7af      	b.n	800455c <_strtol_l.constprop.0+0x54>
 80045fc:	08004b5b 	.word	0x08004b5b

08004600 <_strtol_r>:
 8004600:	f7ff bf82 	b.w	8004508 <_strtol_l.constprop.0>

08004604 <_strtoul_l.constprop.0>:
 8004604:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004608:	4686      	mov	lr, r0
 800460a:	460d      	mov	r5, r1
 800460c:	4f35      	ldr	r7, [pc, #212]	; (80046e4 <_strtoul_l.constprop.0+0xe0>)
 800460e:	4628      	mov	r0, r5
 8004610:	f815 4b01 	ldrb.w	r4, [r5], #1
 8004614:	5de6      	ldrb	r6, [r4, r7]
 8004616:	f016 0608 	ands.w	r6, r6, #8
 800461a:	d1f8      	bne.n	800460e <_strtoul_l.constprop.0+0xa>
 800461c:	2c2d      	cmp	r4, #45	; 0x2d
 800461e:	d12f      	bne.n	8004680 <_strtoul_l.constprop.0+0x7c>
 8004620:	2601      	movs	r6, #1
 8004622:	782c      	ldrb	r4, [r5, #0]
 8004624:	1c85      	adds	r5, r0, #2
 8004626:	2b00      	cmp	r3, #0
 8004628:	d057      	beq.n	80046da <_strtoul_l.constprop.0+0xd6>
 800462a:	2b10      	cmp	r3, #16
 800462c:	d109      	bne.n	8004642 <_strtoul_l.constprop.0+0x3e>
 800462e:	2c30      	cmp	r4, #48	; 0x30
 8004630:	d107      	bne.n	8004642 <_strtoul_l.constprop.0+0x3e>
 8004632:	7828      	ldrb	r0, [r5, #0]
 8004634:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8004638:	2858      	cmp	r0, #88	; 0x58
 800463a:	d149      	bne.n	80046d0 <_strtoul_l.constprop.0+0xcc>
 800463c:	2310      	movs	r3, #16
 800463e:	786c      	ldrb	r4, [r5, #1]
 8004640:	3502      	adds	r5, #2
 8004642:	f04f 38ff 	mov.w	r8, #4294967295
 8004646:	fbb8 f8f3 	udiv	r8, r8, r3
 800464a:	2700      	movs	r7, #0
 800464c:	fb03 f908 	mul.w	r9, r3, r8
 8004650:	4638      	mov	r0, r7
 8004652:	ea6f 0909 	mvn.w	r9, r9
 8004656:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800465a:	f1bc 0f09 	cmp.w	ip, #9
 800465e:	d814      	bhi.n	800468a <_strtoul_l.constprop.0+0x86>
 8004660:	4664      	mov	r4, ip
 8004662:	42a3      	cmp	r3, r4
 8004664:	dd22      	ble.n	80046ac <_strtoul_l.constprop.0+0xa8>
 8004666:	2f00      	cmp	r7, #0
 8004668:	db1d      	blt.n	80046a6 <_strtoul_l.constprop.0+0xa2>
 800466a:	4580      	cmp	r8, r0
 800466c:	d31b      	bcc.n	80046a6 <_strtoul_l.constprop.0+0xa2>
 800466e:	d101      	bne.n	8004674 <_strtoul_l.constprop.0+0x70>
 8004670:	45a1      	cmp	r9, r4
 8004672:	db18      	blt.n	80046a6 <_strtoul_l.constprop.0+0xa2>
 8004674:	2701      	movs	r7, #1
 8004676:	fb00 4003 	mla	r0, r0, r3, r4
 800467a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800467e:	e7ea      	b.n	8004656 <_strtoul_l.constprop.0+0x52>
 8004680:	2c2b      	cmp	r4, #43	; 0x2b
 8004682:	bf04      	itt	eq
 8004684:	782c      	ldrbeq	r4, [r5, #0]
 8004686:	1c85      	addeq	r5, r0, #2
 8004688:	e7cd      	b.n	8004626 <_strtoul_l.constprop.0+0x22>
 800468a:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800468e:	f1bc 0f19 	cmp.w	ip, #25
 8004692:	d801      	bhi.n	8004698 <_strtoul_l.constprop.0+0x94>
 8004694:	3c37      	subs	r4, #55	; 0x37
 8004696:	e7e4      	b.n	8004662 <_strtoul_l.constprop.0+0x5e>
 8004698:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800469c:	f1bc 0f19 	cmp.w	ip, #25
 80046a0:	d804      	bhi.n	80046ac <_strtoul_l.constprop.0+0xa8>
 80046a2:	3c57      	subs	r4, #87	; 0x57
 80046a4:	e7dd      	b.n	8004662 <_strtoul_l.constprop.0+0x5e>
 80046a6:	f04f 37ff 	mov.w	r7, #4294967295
 80046aa:	e7e6      	b.n	800467a <_strtoul_l.constprop.0+0x76>
 80046ac:	2f00      	cmp	r7, #0
 80046ae:	da07      	bge.n	80046c0 <_strtoul_l.constprop.0+0xbc>
 80046b0:	2322      	movs	r3, #34	; 0x22
 80046b2:	f04f 30ff 	mov.w	r0, #4294967295
 80046b6:	f8ce 3000 	str.w	r3, [lr]
 80046ba:	b932      	cbnz	r2, 80046ca <_strtoul_l.constprop.0+0xc6>
 80046bc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80046c0:	b106      	cbz	r6, 80046c4 <_strtoul_l.constprop.0+0xc0>
 80046c2:	4240      	negs	r0, r0
 80046c4:	2a00      	cmp	r2, #0
 80046c6:	d0f9      	beq.n	80046bc <_strtoul_l.constprop.0+0xb8>
 80046c8:	b107      	cbz	r7, 80046cc <_strtoul_l.constprop.0+0xc8>
 80046ca:	1e69      	subs	r1, r5, #1
 80046cc:	6011      	str	r1, [r2, #0]
 80046ce:	e7f5      	b.n	80046bc <_strtoul_l.constprop.0+0xb8>
 80046d0:	2430      	movs	r4, #48	; 0x30
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d1b5      	bne.n	8004642 <_strtoul_l.constprop.0+0x3e>
 80046d6:	2308      	movs	r3, #8
 80046d8:	e7b3      	b.n	8004642 <_strtoul_l.constprop.0+0x3e>
 80046da:	2c30      	cmp	r4, #48	; 0x30
 80046dc:	d0a9      	beq.n	8004632 <_strtoul_l.constprop.0+0x2e>
 80046de:	230a      	movs	r3, #10
 80046e0:	e7af      	b.n	8004642 <_strtoul_l.constprop.0+0x3e>
 80046e2:	bf00      	nop
 80046e4:	08004b5b 	.word	0x08004b5b

080046e8 <_strtoul_r>:
 80046e8:	f7ff bf8c 	b.w	8004604 <_strtoul_l.constprop.0>

080046ec <__submore>:
 80046ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80046f0:	460c      	mov	r4, r1
 80046f2:	6b49      	ldr	r1, [r1, #52]	; 0x34
 80046f4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80046f8:	4299      	cmp	r1, r3
 80046fa:	d11b      	bne.n	8004734 <__submore+0x48>
 80046fc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004700:	f7ff f820 	bl	8003744 <_malloc_r>
 8004704:	b918      	cbnz	r0, 800470e <__submore+0x22>
 8004706:	f04f 30ff 	mov.w	r0, #4294967295
 800470a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800470e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004712:	63a3      	str	r3, [r4, #56]	; 0x38
 8004714:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8004718:	6360      	str	r0, [r4, #52]	; 0x34
 800471a:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 800471e:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8004722:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 8004726:	7043      	strb	r3, [r0, #1]
 8004728:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800472c:	7003      	strb	r3, [r0, #0]
 800472e:	6020      	str	r0, [r4, #0]
 8004730:	2000      	movs	r0, #0
 8004732:	e7ea      	b.n	800470a <__submore+0x1e>
 8004734:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8004736:	0077      	lsls	r7, r6, #1
 8004738:	463a      	mov	r2, r7
 800473a:	f000 f859 	bl	80047f0 <_realloc_r>
 800473e:	4605      	mov	r5, r0
 8004740:	2800      	cmp	r0, #0
 8004742:	d0e0      	beq.n	8004706 <__submore+0x1a>
 8004744:	eb00 0806 	add.w	r8, r0, r6
 8004748:	4601      	mov	r1, r0
 800474a:	4632      	mov	r2, r6
 800474c:	4640      	mov	r0, r8
 800474e:	f000 f835 	bl	80047bc <memcpy>
 8004752:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 8004756:	f8c4 8000 	str.w	r8, [r4]
 800475a:	e7e9      	b.n	8004730 <__submore+0x44>

0800475c <_fstat_r>:
 800475c:	b538      	push	{r3, r4, r5, lr}
 800475e:	2300      	movs	r3, #0
 8004760:	4d06      	ldr	r5, [pc, #24]	; (800477c <_fstat_r+0x20>)
 8004762:	4604      	mov	r4, r0
 8004764:	4608      	mov	r0, r1
 8004766:	4611      	mov	r1, r2
 8004768:	602b      	str	r3, [r5, #0]
 800476a:	f7fc f86f 	bl	800084c <_fstat>
 800476e:	1c43      	adds	r3, r0, #1
 8004770:	d102      	bne.n	8004778 <_fstat_r+0x1c>
 8004772:	682b      	ldr	r3, [r5, #0]
 8004774:	b103      	cbz	r3, 8004778 <_fstat_r+0x1c>
 8004776:	6023      	str	r3, [r4, #0]
 8004778:	bd38      	pop	{r3, r4, r5, pc}
 800477a:	bf00      	nop
 800477c:	20000524 	.word	0x20000524

08004780 <_isatty_r>:
 8004780:	b538      	push	{r3, r4, r5, lr}
 8004782:	2300      	movs	r3, #0
 8004784:	4d05      	ldr	r5, [pc, #20]	; (800479c <_isatty_r+0x1c>)
 8004786:	4604      	mov	r4, r0
 8004788:	4608      	mov	r0, r1
 800478a:	602b      	str	r3, [r5, #0]
 800478c:	f7fc f86d 	bl	800086a <_isatty>
 8004790:	1c43      	adds	r3, r0, #1
 8004792:	d102      	bne.n	800479a <_isatty_r+0x1a>
 8004794:	682b      	ldr	r3, [r5, #0]
 8004796:	b103      	cbz	r3, 800479a <_isatty_r+0x1a>
 8004798:	6023      	str	r3, [r4, #0]
 800479a:	bd38      	pop	{r3, r4, r5, pc}
 800479c:	20000524 	.word	0x20000524

080047a0 <memchr>:
 80047a0:	4603      	mov	r3, r0
 80047a2:	b510      	push	{r4, lr}
 80047a4:	b2c9      	uxtb	r1, r1
 80047a6:	4402      	add	r2, r0
 80047a8:	4293      	cmp	r3, r2
 80047aa:	4618      	mov	r0, r3
 80047ac:	d101      	bne.n	80047b2 <memchr+0x12>
 80047ae:	2000      	movs	r0, #0
 80047b0:	e003      	b.n	80047ba <memchr+0x1a>
 80047b2:	7804      	ldrb	r4, [r0, #0]
 80047b4:	3301      	adds	r3, #1
 80047b6:	428c      	cmp	r4, r1
 80047b8:	d1f6      	bne.n	80047a8 <memchr+0x8>
 80047ba:	bd10      	pop	{r4, pc}

080047bc <memcpy>:
 80047bc:	440a      	add	r2, r1
 80047be:	4291      	cmp	r1, r2
 80047c0:	f100 33ff 	add.w	r3, r0, #4294967295
 80047c4:	d100      	bne.n	80047c8 <memcpy+0xc>
 80047c6:	4770      	bx	lr
 80047c8:	b510      	push	{r4, lr}
 80047ca:	f811 4b01 	ldrb.w	r4, [r1], #1
 80047ce:	4291      	cmp	r1, r2
 80047d0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80047d4:	d1f9      	bne.n	80047ca <memcpy+0xe>
 80047d6:	bd10      	pop	{r4, pc}

080047d8 <__malloc_lock>:
 80047d8:	4801      	ldr	r0, [pc, #4]	; (80047e0 <__malloc_lock+0x8>)
 80047da:	f7fe bed1 	b.w	8003580 <__retarget_lock_acquire_recursive>
 80047de:	bf00      	nop
 80047e0:	20000518 	.word	0x20000518

080047e4 <__malloc_unlock>:
 80047e4:	4801      	ldr	r0, [pc, #4]	; (80047ec <__malloc_unlock+0x8>)
 80047e6:	f7fe becc 	b.w	8003582 <__retarget_lock_release_recursive>
 80047ea:	bf00      	nop
 80047ec:	20000518 	.word	0x20000518

080047f0 <_realloc_r>:
 80047f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80047f4:	4680      	mov	r8, r0
 80047f6:	4614      	mov	r4, r2
 80047f8:	460e      	mov	r6, r1
 80047fa:	b921      	cbnz	r1, 8004806 <_realloc_r+0x16>
 80047fc:	4611      	mov	r1, r2
 80047fe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004802:	f7fe bf9f 	b.w	8003744 <_malloc_r>
 8004806:	b92a      	cbnz	r2, 8004814 <_realloc_r+0x24>
 8004808:	f7fe ff34 	bl	8003674 <_free_r>
 800480c:	4625      	mov	r5, r4
 800480e:	4628      	mov	r0, r5
 8004810:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004814:	f000 f81b 	bl	800484e <_malloc_usable_size_r>
 8004818:	4284      	cmp	r4, r0
 800481a:	4607      	mov	r7, r0
 800481c:	d802      	bhi.n	8004824 <_realloc_r+0x34>
 800481e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8004822:	d812      	bhi.n	800484a <_realloc_r+0x5a>
 8004824:	4621      	mov	r1, r4
 8004826:	4640      	mov	r0, r8
 8004828:	f7fe ff8c 	bl	8003744 <_malloc_r>
 800482c:	4605      	mov	r5, r0
 800482e:	2800      	cmp	r0, #0
 8004830:	d0ed      	beq.n	800480e <_realloc_r+0x1e>
 8004832:	42bc      	cmp	r4, r7
 8004834:	4622      	mov	r2, r4
 8004836:	4631      	mov	r1, r6
 8004838:	bf28      	it	cs
 800483a:	463a      	movcs	r2, r7
 800483c:	f7ff ffbe 	bl	80047bc <memcpy>
 8004840:	4631      	mov	r1, r6
 8004842:	4640      	mov	r0, r8
 8004844:	f7fe ff16 	bl	8003674 <_free_r>
 8004848:	e7e1      	b.n	800480e <_realloc_r+0x1e>
 800484a:	4635      	mov	r5, r6
 800484c:	e7df      	b.n	800480e <_realloc_r+0x1e>

0800484e <_malloc_usable_size_r>:
 800484e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004852:	1f18      	subs	r0, r3, #4
 8004854:	2b00      	cmp	r3, #0
 8004856:	bfbc      	itt	lt
 8004858:	580b      	ldrlt	r3, [r1, r0]
 800485a:	18c0      	addlt	r0, r0, r3
 800485c:	4770      	bx	lr
	...

08004860 <_init>:
 8004860:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004862:	bf00      	nop
 8004864:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004866:	bc08      	pop	{r3}
 8004868:	469e      	mov	lr, r3
 800486a:	4770      	bx	lr

0800486c <_fini>:
 800486c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800486e:	bf00      	nop
 8004870:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004872:	bc08      	pop	{r3}
 8004874:	469e      	mov	lr, r3
 8004876:	4770      	bx	lr
