
esp2stm.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006a08  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000278  08006b18  08006b18  00016b18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006d90  08006d90  00020078  2**0
                  CONTENTS
  4 .ARM          00000000  08006d90  08006d90  00020078  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006d90  08006d90  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006d90  08006d90  00016d90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006d94  08006d94  00016d94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08006d98  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001bac  20000078  08006e10  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001c24  08006e10  00021c24  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017c24  00000000  00000000  000200a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000036c2  00000000  00000000  00037cc5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001410  00000000  00000000  0003b388  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000012b8  00000000  00000000  0003c798  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001aeed  00000000  00000000  0003da50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001671a  00000000  00000000  0005893d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00095dc8  00000000  00000000  0006f057  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00104e1f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005bd0  00000000  00000000  00104e70  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000078 	.word	0x20000078
 800012c:	00000000 	.word	0x00000000
 8000130:	08006b00 	.word	0x08006b00

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000007c 	.word	0x2000007c
 800014c:	08006b00 	.word	0x08006b00

08000150 <strcmp>:
 8000150:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000154:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000158:	2a01      	cmp	r2, #1
 800015a:	bf28      	it	cs
 800015c:	429a      	cmpcs	r2, r3
 800015e:	d0f7      	beq.n	8000150 <strcmp>
 8000160:	1ad0      	subs	r0, r2, r3
 8000162:	4770      	bx	lr

08000164 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000164:	b5b0      	push	{r4, r5, r7, lr}
 8000166:	b08c      	sub	sp, #48	; 0x30
 8000168:	af02      	add	r7, sp, #8
  /* add semaphores, ... */
  /* USER CODE END RTOS_SEMAPHORES */

  /* Create the timer(s) */
  /* creation of myTimer01 */
  myTimer01Handle = osTimerNew(Callback01, osTimerPeriodic, NULL, &myTimer01_attributes);
 800016a:	4b2b      	ldr	r3, [pc, #172]	; (8000218 <MX_FREERTOS_Init+0xb4>)
 800016c:	2200      	movs	r2, #0
 800016e:	2101      	movs	r1, #1
 8000170:	482a      	ldr	r0, [pc, #168]	; (800021c <MX_FREERTOS_Init+0xb8>)
 8000172:	f002 fe69 	bl	8002e48 <osTimerNew>
 8000176:	4603      	mov	r3, r0
 8000178:	4a29      	ldr	r2, [pc, #164]	; (8000220 <MX_FREERTOS_Init+0xbc>)
 800017a:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 800017c:	4a29      	ldr	r2, [pc, #164]	; (8000224 <MX_FREERTOS_Init+0xc0>)
 800017e:	2100      	movs	r1, #0
 8000180:	4829      	ldr	r0, [pc, #164]	; (8000228 <MX_FREERTOS_Init+0xc4>)
 8000182:	f002 fda1 	bl	8002cc8 <osThreadNew>
 8000186:	4603      	mov	r3, r0
 8000188:	4a28      	ldr	r2, [pc, #160]	; (800022c <MX_FREERTOS_Init+0xc8>)
 800018a:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  if(xTaskCreate(StartSerialWithESP,Serial_ESP,Serial_usStackDepth,NULL,Serial_uxPriority,NULL) != pdPASS) {
 800018c:	4b28      	ldr	r3, [pc, #160]	; (8000230 <MX_FREERTOS_Init+0xcc>)
 800018e:	6819      	ldr	r1, [r3, #0]
 8000190:	2080      	movs	r0, #128	; 0x80
 8000192:	2319      	movs	r3, #25
 8000194:	2200      	movs	r2, #0
 8000196:	9201      	str	r2, [sp, #4]
 8000198:	9300      	str	r3, [sp, #0]
 800019a:	2300      	movs	r3, #0
 800019c:	4602      	mov	r2, r0
 800019e:	4825      	ldr	r0, [pc, #148]	; (8000234 <MX_FREERTOS_Init+0xd0>)
 80001a0:	f003 fcf8 	bl	8003b94 <xTaskCreate>
 80001a4:	4603      	mov	r3, r0
 80001a6:	2b01      	cmp	r3, #1
 80001a8:	d00e      	beq.n	80001c8 <MX_FREERTOS_Init+0x64>
      uint8_t ch[] = "Fail to create SerialWithESP!!!\r\n";
 80001aa:	4b23      	ldr	r3, [pc, #140]	; (8000238 <MX_FREERTOS_Init+0xd4>)
 80001ac:	1d3c      	adds	r4, r7, #4
 80001ae:	461d      	mov	r5, r3
 80001b0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80001b2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80001b4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80001b6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80001b8:	682b      	ldr	r3, [r5, #0]
 80001ba:	8023      	strh	r3, [r4, #0]
      printf("%s",ch);
 80001bc:	1d3b      	adds	r3, r7, #4
 80001be:	4619      	mov	r1, r3
 80001c0:	481e      	ldr	r0, [pc, #120]	; (800023c <MX_FREERTOS_Init+0xd8>)
 80001c2:	f005 fcd9 	bl	8005b78 <iprintf>
 80001c6:	e002      	b.n	80001ce <MX_FREERTOS_Init+0x6a>
  } else {
    printf("Create SerialRxWithESP Success\r\n");
 80001c8:	481d      	ldr	r0, [pc, #116]	; (8000240 <MX_FREERTOS_Init+0xdc>)
 80001ca:	f005 fd5b 	bl	8005c84 <puts>
  }

  if(xTaskCreate(StartTxWithESP,"Serial_Tx",Serial_usStackDepth,NULL,Serial_uxPriority,NULL) != pdPASS) {
 80001ce:	2180      	movs	r1, #128	; 0x80
 80001d0:	2319      	movs	r3, #25
 80001d2:	2200      	movs	r2, #0
 80001d4:	9201      	str	r2, [sp, #4]
 80001d6:	9300      	str	r3, [sp, #0]
 80001d8:	2300      	movs	r3, #0
 80001da:	460a      	mov	r2, r1
 80001dc:	4919      	ldr	r1, [pc, #100]	; (8000244 <MX_FREERTOS_Init+0xe0>)
 80001de:	481a      	ldr	r0, [pc, #104]	; (8000248 <MX_FREERTOS_Init+0xe4>)
 80001e0:	f003 fcd8 	bl	8003b94 <xTaskCreate>
 80001e4:	4603      	mov	r3, r0
 80001e6:	2b01      	cmp	r3, #1
 80001e8:	d00e      	beq.n	8000208 <MX_FREERTOS_Init+0xa4>
        uint8_t ch[] = "Fail to create SerialWithESP!!!\r\n";
 80001ea:	4b13      	ldr	r3, [pc, #76]	; (8000238 <MX_FREERTOS_Init+0xd4>)
 80001ec:	1d3c      	adds	r4, r7, #4
 80001ee:	461d      	mov	r5, r3
 80001f0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80001f2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80001f4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80001f6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80001f8:	682b      	ldr	r3, [r5, #0]
 80001fa:	8023      	strh	r3, [r4, #0]
        printf("%s",ch);
 80001fc:	1d3b      	adds	r3, r7, #4
 80001fe:	4619      	mov	r1, r3
 8000200:	480e      	ldr	r0, [pc, #56]	; (800023c <MX_FREERTOS_Init+0xd8>)
 8000202:	f005 fcb9 	bl	8005b78 <iprintf>

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8000206:	e002      	b.n	800020e <MX_FREERTOS_Init+0xaa>
      printf("Create SerialTxWithESP Success\r\n");
 8000208:	4810      	ldr	r0, [pc, #64]	; (800024c <MX_FREERTOS_Init+0xe8>)
 800020a:	f005 fd3b 	bl	8005c84 <puts>
}
 800020e:	bf00      	nop
 8000210:	3728      	adds	r7, #40	; 0x28
 8000212:	46bd      	mov	sp, r7
 8000214:	bdb0      	pop	{r4, r5, r7, pc}
 8000216:	bf00      	nop
 8000218:	08006cd0 	.word	0x08006cd0
 800021c:	08000279 	.word	0x08000279
 8000220:	20000098 	.word	0x20000098
 8000224:	08006cac 	.word	0x08006cac
 8000228:	08000251 	.word	0x08000251
 800022c:	20000094 	.word	0x20000094
 8000230:	20000000 	.word	0x20000000
 8000234:	0800028d 	.word	0x0800028d
 8000238:	08006b8c 	.word	0x08006b8c
 800023c:	08006b3c 	.word	0x08006b3c
 8000240:	08006b40 	.word	0x08006b40
 8000244:	08006b60 	.word	0x08006b60
 8000248:	0800030d 	.word	0x0800030d
 800024c:	08006b6c 	.word	0x08006b6c

08000250 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000250:	b580      	push	{r7, lr}
 8000252:	b084      	sub	sp, #16
 8000254:	af00      	add	r7, sp, #0
 8000256:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  int i=0;
 8000258:	2300      	movs	r3, #0
 800025a:	60fb      	str	r3, [r7, #12]
  for(;;)
  {
	  i++;
 800025c:	68fb      	ldr	r3, [r7, #12]
 800025e:	3301      	adds	r3, #1
 8000260:	60fb      	str	r3, [r7, #12]
	  printf("default hello, default%d .\r\n",i);
 8000262:	68f9      	ldr	r1, [r7, #12]
 8000264:	4803      	ldr	r0, [pc, #12]	; (8000274 <StartDefaultTask+0x24>)
 8000266:	f005 fc87 	bl	8005b78 <iprintf>
	  HAL_Delay(1000);
 800026a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800026e:	f000 fc8b 	bl	8000b88 <HAL_Delay>
	  i++;
 8000272:	e7f3      	b.n	800025c <StartDefaultTask+0xc>
 8000274:	08006bb0 	.word	0x08006bb0

08000278 <Callback01>:
  /* USER CODE END StartDefaultTask */
}

/* Callback01 function */
void Callback01(void *argument)
{
 8000278:	b480      	push	{r7}
 800027a:	b083      	sub	sp, #12
 800027c:	af00      	add	r7, sp, #0
 800027e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback01 */

  /* USER CODE END Callback01 */
}
 8000280:	bf00      	nop
 8000282:	370c      	adds	r7, #12
 8000284:	46bd      	mov	sp, r7
 8000286:	bc80      	pop	{r7}
 8000288:	4770      	bx	lr
	...

0800028c <StartSerialWithESP>:
/* USER CODE BEGIN Application */

int ESP_getDHT_flg;
int ESP_sendDHT_flg;
void StartSerialWithESP(void* argument)
{
 800028c:	b580      	push	{r7, lr}
 800028e:	b082      	sub	sp, #8
 8000290:	af00      	add	r7, sp, #0
 8000292:	6078      	str	r0, [r7, #4]
	printf("Entry Rx \r\n");
 8000294:	4814      	ldr	r0, [pc, #80]	; (80002e8 <StartSerialWithESP+0x5c>)
 8000296:	f005 fcf5 	bl	8005c84 <puts>
	for(;;)
	{
		if(UART2_Rx_flg == 1){
 800029a:	4b14      	ldr	r3, [pc, #80]	; (80002ec <StartSerialWithESP+0x60>)
 800029c:	781b      	ldrb	r3, [r3, #0]
 800029e:	2b01      	cmp	r3, #1
 80002a0:	d1fb      	bne.n	800029a <StartSerialWithESP+0xe>
			printf("From ESP32 : %s \r\n",UART2_Rx_Buf);
 80002a2:	4913      	ldr	r1, [pc, #76]	; (80002f0 <StartSerialWithESP+0x64>)
 80002a4:	4813      	ldr	r0, [pc, #76]	; (80002f4 <StartSerialWithESP+0x68>)
 80002a6:	f005 fc67 	bl	8005b78 <iprintf>
			if(!strcmp(UART2_Rx_Buf,"get")){
 80002aa:	4913      	ldr	r1, [pc, #76]	; (80002f8 <StartSerialWithESP+0x6c>)
 80002ac:	4810      	ldr	r0, [pc, #64]	; (80002f0 <StartSerialWithESP+0x64>)
 80002ae:	f7ff ff4f 	bl	8000150 <strcmp>
 80002b2:	4603      	mov	r3, r0
 80002b4:	2b00      	cmp	r3, #0
 80002b6:	d103      	bne.n	80002c0 <StartSerialWithESP+0x34>
				printf("get DHT11 DATA from server TODO\r\n");
 80002b8:	4810      	ldr	r0, [pc, #64]	; (80002fc <StartSerialWithESP+0x70>)
 80002ba:	f005 fce3 	bl	8005c84 <puts>
 80002be:	e006      	b.n	80002ce <StartSerialWithESP+0x42>
        // ESP_getDHT_flg= 1;
			}
			else {
				printf("get DHT11: %s\r\n",UART2_Rx_Buf);
 80002c0:	490b      	ldr	r1, [pc, #44]	; (80002f0 <StartSerialWithESP+0x64>)
 80002c2:	480f      	ldr	r0, [pc, #60]	; (8000300 <StartSerialWithESP+0x74>)
 80002c4:	f005 fc58 	bl	8005b78 <iprintf>
				ESP_sendDHT_flg = 1;
 80002c8:	4b0e      	ldr	r3, [pc, #56]	; (8000304 <StartSerialWithESP+0x78>)
 80002ca:	2201      	movs	r2, #1
 80002cc:	601a      	str	r2, [r3, #0]
			}
			UART2_Rx_flg = 0;
 80002ce:	4b07      	ldr	r3, [pc, #28]	; (80002ec <StartSerialWithESP+0x60>)
 80002d0:	2200      	movs	r2, #0
 80002d2:	701a      	strb	r2, [r3, #0]
			UART2_Rx_cnt = 0;
 80002d4:	4b0c      	ldr	r3, [pc, #48]	; (8000308 <StartSerialWithESP+0x7c>)
 80002d6:	2200      	movs	r2, #0
 80002d8:	601a      	str	r2, [r3, #0]
			memset(UART2_Rx_Buf,0x00,MAX_REC_LENGTH);
 80002da:	2280      	movs	r2, #128	; 0x80
 80002dc:	2100      	movs	r1, #0
 80002de:	4804      	ldr	r0, [pc, #16]	; (80002f0 <StartSerialWithESP+0x64>)
 80002e0:	f005 fbad 	bl	8005a3e <memset>
		if(UART2_Rx_flg == 1){
 80002e4:	e7d9      	b.n	800029a <StartSerialWithESP+0xe>
 80002e6:	bf00      	nop
 80002e8:	08006bd0 	.word	0x08006bd0
 80002ec:	20000124 	.word	0x20000124
 80002f0:	200000a4 	.word	0x200000a4
 80002f4:	08006bdc 	.word	0x08006bdc
 80002f8:	08006bf0 	.word	0x08006bf0
 80002fc:	08006bf4 	.word	0x08006bf4
 8000300:	08006c18 	.word	0x08006c18
 8000304:	200000a0 	.word	0x200000a0
 8000308:	20000128 	.word	0x20000128

0800030c <StartTxWithESP>:
		}
	}
}
extern UART_HandleTypeDef huart2;
void StartTxWithESP(void* argument)
{
 800030c:	b590      	push	{r4, r7, lr}
 800030e:	b087      	sub	sp, #28
 8000310:	af00      	add	r7, sp, #0
 8000312:	6078      	str	r0, [r7, #4]
	printf("Entry Tx\r\n");
 8000314:	4810      	ldr	r0, [pc, #64]	; (8000358 <StartTxWithESP+0x4c>)
 8000316:	f005 fcb5 	bl	8005c84 <puts>
	for(;;){
		if(ESP_sendDHT_flg){
 800031a:	4b10      	ldr	r3, [pc, #64]	; (800035c <StartTxWithESP+0x50>)
 800031c:	681b      	ldr	r3, [r3, #0]
 800031e:	2b00      	cmp	r3, #0
 8000320:	d0fb      	beq.n	800031a <StartTxWithESP+0xe>
			HAL_Delay(2000);
 8000322:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000326:	f000 fc2f 	bl	8000b88 <HAL_Delay>
			char msg[] = "getDHT11data";
 800032a:	4b0d      	ldr	r3, [pc, #52]	; (8000360 <StartTxWithESP+0x54>)
 800032c:	f107 0408 	add.w	r4, r7, #8
 8000330:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000332:	c407      	stmia	r4!, {r0, r1, r2}
 8000334:	7023      	strb	r3, [r4, #0]
			printf("TO ESP32: %s\r\n",msg);
 8000336:	f107 0308 	add.w	r3, r7, #8
 800033a:	4619      	mov	r1, r3
 800033c:	4809      	ldr	r0, [pc, #36]	; (8000364 <StartTxWithESP+0x58>)
 800033e:	f005 fc1b 	bl	8005b78 <iprintf>
			HAL_UART_Transmit_IT(&huart2,msg,sizeof(msg));
 8000342:	f107 0308 	add.w	r3, r7, #8
 8000346:	220d      	movs	r2, #13
 8000348:	4619      	mov	r1, r3
 800034a:	4807      	ldr	r0, [pc, #28]	; (8000368 <StartTxWithESP+0x5c>)
 800034c:	f001 ffb9 	bl	80022c2 <HAL_UART_Transmit_IT>
			ESP_getDHT_flg = 0;
 8000350:	4b06      	ldr	r3, [pc, #24]	; (800036c <StartTxWithESP+0x60>)
 8000352:	2200      	movs	r2, #0
 8000354:	601a      	str	r2, [r3, #0]
		if(ESP_sendDHT_flg){
 8000356:	e7e0      	b.n	800031a <StartTxWithESP+0xe>
 8000358:	08006c28 	.word	0x08006c28
 800035c:	200000a0 	.word	0x200000a0
 8000360:	08006c44 	.word	0x08006c44
 8000364:	08006c34 	.word	0x08006c34
 8000368:	200001c0 	.word	0x200001c0
 800036c:	2000009c 	.word	0x2000009c

08000370 <MX_GPIO_Init>:
        * EVENT_OUT
        * EXTI
     PA8   ------> RCC_MCO
*/
void MX_GPIO_Init(void)
{
 8000370:	b580      	push	{r7, lr}
 8000372:	b088      	sub	sp, #32
 8000374:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000376:	f107 0310 	add.w	r3, r7, #16
 800037a:	2200      	movs	r2, #0
 800037c:	601a      	str	r2, [r3, #0]
 800037e:	605a      	str	r2, [r3, #4]
 8000380:	609a      	str	r2, [r3, #8]
 8000382:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000384:	4b24      	ldr	r3, [pc, #144]	; (8000418 <MX_GPIO_Init+0xa8>)
 8000386:	699b      	ldr	r3, [r3, #24]
 8000388:	4a23      	ldr	r2, [pc, #140]	; (8000418 <MX_GPIO_Init+0xa8>)
 800038a:	f043 0310 	orr.w	r3, r3, #16
 800038e:	6193      	str	r3, [r2, #24]
 8000390:	4b21      	ldr	r3, [pc, #132]	; (8000418 <MX_GPIO_Init+0xa8>)
 8000392:	699b      	ldr	r3, [r3, #24]
 8000394:	f003 0310 	and.w	r3, r3, #16
 8000398:	60fb      	str	r3, [r7, #12]
 800039a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800039c:	4b1e      	ldr	r3, [pc, #120]	; (8000418 <MX_GPIO_Init+0xa8>)
 800039e:	699b      	ldr	r3, [r3, #24]
 80003a0:	4a1d      	ldr	r2, [pc, #116]	; (8000418 <MX_GPIO_Init+0xa8>)
 80003a2:	f043 0320 	orr.w	r3, r3, #32
 80003a6:	6193      	str	r3, [r2, #24]
 80003a8:	4b1b      	ldr	r3, [pc, #108]	; (8000418 <MX_GPIO_Init+0xa8>)
 80003aa:	699b      	ldr	r3, [r3, #24]
 80003ac:	f003 0320 	and.w	r3, r3, #32
 80003b0:	60bb      	str	r3, [r7, #8]
 80003b2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80003b4:	4b18      	ldr	r3, [pc, #96]	; (8000418 <MX_GPIO_Init+0xa8>)
 80003b6:	699b      	ldr	r3, [r3, #24]
 80003b8:	4a17      	ldr	r2, [pc, #92]	; (8000418 <MX_GPIO_Init+0xa8>)
 80003ba:	f043 0304 	orr.w	r3, r3, #4
 80003be:	6193      	str	r3, [r2, #24]
 80003c0:	4b15      	ldr	r3, [pc, #84]	; (8000418 <MX_GPIO_Init+0xa8>)
 80003c2:	699b      	ldr	r3, [r3, #24]
 80003c4:	f003 0304 	and.w	r3, r3, #4
 80003c8:	607b      	str	r3, [r7, #4]
 80003ca:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80003cc:	2200      	movs	r2, #0
 80003ce:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80003d2:	4812      	ldr	r0, [pc, #72]	; (800041c <MX_GPIO_Init+0xac>)
 80003d4:	f000 ff10 	bl	80011f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_Pin;
 80003d8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80003dc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003de:	2301      	movs	r3, #1
 80003e0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003e2:	2300      	movs	r3, #0
 80003e4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003e6:	2302      	movs	r3, #2
 80003e8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80003ea:	f107 0310 	add.w	r3, r7, #16
 80003ee:	4619      	mov	r1, r3
 80003f0:	480a      	ldr	r0, [pc, #40]	; (800041c <MX_GPIO_Init+0xac>)
 80003f2:	f000 fd7d 	bl	8000ef0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 80003f6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80003fa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80003fc:	2302      	movs	r3, #2
 80003fe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000400:	2302      	movs	r3, #2
 8000402:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000404:	f107 0310 	add.w	r3, r7, #16
 8000408:	4619      	mov	r1, r3
 800040a:	4805      	ldr	r0, [pc, #20]	; (8000420 <MX_GPIO_Init+0xb0>)
 800040c:	f000 fd70 	bl	8000ef0 <HAL_GPIO_Init>

}
 8000410:	bf00      	nop
 8000412:	3720      	adds	r7, #32
 8000414:	46bd      	mov	sp, r7
 8000416:	bd80      	pop	{r7, pc}
 8000418:	40021000 	.word	0x40021000
 800041c:	40011000 	.word	0x40011000
 8000420:	40010800 	.word	0x40010800

08000424 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000424:	b580      	push	{r7, lr}
 8000426:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000428:	f000 fb7c 	bl	8000b24 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800042c:	f000 f820 	bl	8000470 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000430:	f7ff ff9e 	bl	8000370 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000434:	f000 fa62 	bl	80008fc <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8000438:	f000 fa8a 	bl	8000950 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  RetargetInit(&huart1);
 800043c:	4809      	ldr	r0, [pc, #36]	; (8000464 <main+0x40>)
 800043e:	f000 f8b9 	bl	80005b4 <RetargetInit>
  HAL_UART_Receive_IT(&huart2, (uint8_t *)UART2_temp, REC_LENGTH);//open the uart1 interrupt
 8000442:	2201      	movs	r2, #1
 8000444:	4908      	ldr	r1, [pc, #32]	; (8000468 <main+0x44>)
 8000446:	4809      	ldr	r0, [pc, #36]	; (800046c <main+0x48>)
 8000448:	f001 ff7f 	bl	800234a <HAL_UART_Receive_IT>
   HAL_Delay(2000);
 800044c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000450:	f000 fb9a 	bl	8000b88 <HAL_Delay>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 8000454:	f002 fbd2 	bl	8002bfc <osKernelInitialize>
  MX_FREERTOS_Init();
 8000458:	f7ff fe84 	bl	8000164 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 800045c:	f002 fc00 	bl	8002c60 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000460:	e7fe      	b.n	8000460 <main+0x3c>
 8000462:	bf00      	nop
 8000464:	2000017c 	.word	0x2000017c
 8000468:	2000012c 	.word	0x2000012c
 800046c:	200001c0 	.word	0x200001c0

08000470 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000470:	b580      	push	{r7, lr}
 8000472:	b090      	sub	sp, #64	; 0x40
 8000474:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000476:	f107 0318 	add.w	r3, r7, #24
 800047a:	2228      	movs	r2, #40	; 0x28
 800047c:	2100      	movs	r1, #0
 800047e:	4618      	mov	r0, r3
 8000480:	f005 fadd 	bl	8005a3e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000484:	1d3b      	adds	r3, r7, #4
 8000486:	2200      	movs	r2, #0
 8000488:	601a      	str	r2, [r3, #0]
 800048a:	605a      	str	r2, [r3, #4]
 800048c:	609a      	str	r2, [r3, #8]
 800048e:	60da      	str	r2, [r3, #12]
 8000490:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000492:	2301      	movs	r3, #1
 8000494:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000496:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800049a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800049c:	2300      	movs	r3, #0
 800049e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80004a0:	2301      	movs	r3, #1
 80004a2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80004a4:	2302      	movs	r3, #2
 80004a6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80004a8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80004ac:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80004ae:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80004b2:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80004b4:	f107 0318 	add.w	r3, r7, #24
 80004b8:	4618      	mov	r0, r3
 80004ba:	f000 feb5 	bl	8001228 <HAL_RCC_OscConfig>
 80004be:	4603      	mov	r3, r0
 80004c0:	2b00      	cmp	r3, #0
 80004c2:	d001      	beq.n	80004c8 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80004c4:	f000 f870 	bl	80005a8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80004c8:	230f      	movs	r3, #15
 80004ca:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80004cc:	2302      	movs	r3, #2
 80004ce:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80004d0:	2300      	movs	r3, #0
 80004d2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80004d4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80004d8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80004da:	2300      	movs	r3, #0
 80004dc:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80004de:	1d3b      	adds	r3, r7, #4
 80004e0:	2102      	movs	r1, #2
 80004e2:	4618      	mov	r0, r3
 80004e4:	f001 f922 	bl	800172c <HAL_RCC_ClockConfig>
 80004e8:	4603      	mov	r3, r0
 80004ea:	2b00      	cmp	r3, #0
 80004ec:	d001      	beq.n	80004f2 <SystemClock_Config+0x82>
  {
    Error_Handler();
 80004ee:	f000 f85b 	bl	80005a8 <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO, RCC_MCO1SOURCE_PLLCLK, RCC_MCODIV_1);
 80004f2:	2200      	movs	r2, #0
 80004f4:	f04f 61e0 	mov.w	r1, #117440512	; 0x7000000
 80004f8:	2000      	movs	r0, #0
 80004fa:	f001 fa01 	bl	8001900 <HAL_RCC_MCOConfig>
}
 80004fe:	bf00      	nop
 8000500:	3740      	adds	r7, #64	; 0x40
 8000502:	46bd      	mov	sp, r7
 8000504:	bd80      	pop	{r7, pc}
	...

08000508 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	b082      	sub	sp, #8
 800050c:	af00      	add	r7, sp, #0
 800050e:	6078      	str	r0, [r7, #4]
	if(huart == &huart2 && UART2_Rx_flg == 0){
 8000510:	687b      	ldr	r3, [r7, #4]
 8000512:	4a16      	ldr	r2, [pc, #88]	; (800056c <HAL_UART_RxCpltCallback+0x64>)
 8000514:	4293      	cmp	r3, r2
 8000516:	d124      	bne.n	8000562 <HAL_UART_RxCpltCallback+0x5a>
 8000518:	4b15      	ldr	r3, [pc, #84]	; (8000570 <HAL_UART_RxCpltCallback+0x68>)
 800051a:	781b      	ldrb	r3, [r3, #0]
 800051c:	2b00      	cmp	r3, #0
 800051e:	d120      	bne.n	8000562 <HAL_UART_RxCpltCallback+0x5a>
		UART2_Rx_Buf[UART2_Rx_cnt] = UART2_temp[0];
 8000520:	4b14      	ldr	r3, [pc, #80]	; (8000574 <HAL_UART_RxCpltCallback+0x6c>)
 8000522:	681b      	ldr	r3, [r3, #0]
 8000524:	4a14      	ldr	r2, [pc, #80]	; (8000578 <HAL_UART_RxCpltCallback+0x70>)
 8000526:	7811      	ldrb	r1, [r2, #0]
 8000528:	4a14      	ldr	r2, [pc, #80]	; (800057c <HAL_UART_RxCpltCallback+0x74>)
 800052a:	54d1      	strb	r1, [r2, r3]
		UART2_Rx_cnt++;
 800052c:	4b11      	ldr	r3, [pc, #68]	; (8000574 <HAL_UART_RxCpltCallback+0x6c>)
 800052e:	681b      	ldr	r3, [r3, #0]
 8000530:	3301      	adds	r3, #1
 8000532:	4a10      	ldr	r2, [pc, #64]	; (8000574 <HAL_UART_RxCpltCallback+0x6c>)
 8000534:	6013      	str	r3, [r2, #0]
		if('\n' == UART2_temp[0]){
 8000536:	4b10      	ldr	r3, [pc, #64]	; (8000578 <HAL_UART_RxCpltCallback+0x70>)
 8000538:	781b      	ldrb	r3, [r3, #0]
 800053a:	2b0a      	cmp	r3, #10
 800053c:	d10c      	bne.n	8000558 <HAL_UART_RxCpltCallback+0x50>
			UART2_Rx_Buf[UART2_Rx_cnt-1] = '\0';
 800053e:	4b0d      	ldr	r3, [pc, #52]	; (8000574 <HAL_UART_RxCpltCallback+0x6c>)
 8000540:	681b      	ldr	r3, [r3, #0]
 8000542:	3b01      	subs	r3, #1
 8000544:	4a0d      	ldr	r2, [pc, #52]	; (800057c <HAL_UART_RxCpltCallback+0x74>)
 8000546:	2100      	movs	r1, #0
 8000548:	54d1      	strb	r1, [r2, r3]
			printf("%s is received \r\n",UART2_Rx_Buf);
 800054a:	490c      	ldr	r1, [pc, #48]	; (800057c <HAL_UART_RxCpltCallback+0x74>)
 800054c:	480c      	ldr	r0, [pc, #48]	; (8000580 <HAL_UART_RxCpltCallback+0x78>)
 800054e:	f005 fb13 	bl	8005b78 <iprintf>
			UART2_Rx_flg = 1;
 8000552:	4b07      	ldr	r3, [pc, #28]	; (8000570 <HAL_UART_RxCpltCallback+0x68>)
 8000554:	2201      	movs	r2, #1
 8000556:	701a      	strb	r2, [r3, #0]
		}
		HAL_UART_Receive_IT(&huart2, (uint8_t *)UART2_temp, REC_LENGTH);
 8000558:	2201      	movs	r2, #1
 800055a:	4907      	ldr	r1, [pc, #28]	; (8000578 <HAL_UART_RxCpltCallback+0x70>)
 800055c:	4803      	ldr	r0, [pc, #12]	; (800056c <HAL_UART_RxCpltCallback+0x64>)
 800055e:	f001 fef4 	bl	800234a <HAL_UART_Receive_IT>
	}
}
 8000562:	bf00      	nop
 8000564:	3708      	adds	r7, #8
 8000566:	46bd      	mov	sp, r7
 8000568:	bd80      	pop	{r7, pc}
 800056a:	bf00      	nop
 800056c:	200001c0 	.word	0x200001c0
 8000570:	20000124 	.word	0x20000124
 8000574:	20000128 	.word	0x20000128
 8000578:	2000012c 	.word	0x2000012c
 800057c:	200000a4 	.word	0x200000a4
 8000580:	08006c70 	.word	0x08006c70

08000584 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	b082      	sub	sp, #8
 8000588:	af00      	add	r7, sp, #0
 800058a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 800058c:	687b      	ldr	r3, [r7, #4]
 800058e:	681b      	ldr	r3, [r3, #0]
 8000590:	4a04      	ldr	r2, [pc, #16]	; (80005a4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000592:	4293      	cmp	r3, r2
 8000594:	d101      	bne.n	800059a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000596:	f000 fadb 	bl	8000b50 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800059a:	bf00      	nop
 800059c:	3708      	adds	r7, #8
 800059e:	46bd      	mov	sp, r7
 80005a0:	bd80      	pop	{r7, pc}
 80005a2:	bf00      	nop
 80005a4:	40012c00 	.word	0x40012c00

080005a8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80005a8:	b480      	push	{r7}
 80005aa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80005ac:	b672      	cpsid	i
}
 80005ae:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80005b0:	e7fe      	b.n	80005b0 <Error_Handler+0x8>
	...

080005b4 <RetargetInit>:
#define STDOUT_FILENO 1
#define STDERR_FILENO 2

UART_HandleTypeDef *gHuart;

void RetargetInit(UART_HandleTypeDef *huart) {
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b082      	sub	sp, #8
 80005b8:	af00      	add	r7, sp, #0
 80005ba:	6078      	str	r0, [r7, #4]
  gHuart = huart;
 80005bc:	4a07      	ldr	r2, [pc, #28]	; (80005dc <RetargetInit+0x28>)
 80005be:	687b      	ldr	r3, [r7, #4]
 80005c0:	6013      	str	r3, [r2, #0]

  /* Disable I/O buffering for STDOUT stream, so that
   * chars are sent out as soon as they are printed. */
  setvbuf(stdout, NULL, _IONBF, 0);
 80005c2:	4b07      	ldr	r3, [pc, #28]	; (80005e0 <RetargetInit+0x2c>)
 80005c4:	681b      	ldr	r3, [r3, #0]
 80005c6:	6898      	ldr	r0, [r3, #8]
 80005c8:	2300      	movs	r3, #0
 80005ca:	2202      	movs	r2, #2
 80005cc:	2100      	movs	r1, #0
 80005ce:	f005 fbdb 	bl	8005d88 <setvbuf>
}
 80005d2:	bf00      	nop
 80005d4:	3708      	adds	r7, #8
 80005d6:	46bd      	mov	sp, r7
 80005d8:	bd80      	pop	{r7, pc}
 80005da:	bf00      	nop
 80005dc:	20000130 	.word	0x20000130
 80005e0:	20000014 	.word	0x20000014

080005e4 <_isatty>:

int _isatty(int fd) {
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b082      	sub	sp, #8
 80005e8:	af00      	add	r7, sp, #0
 80005ea:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 80005ec:	687b      	ldr	r3, [r7, #4]
 80005ee:	2b00      	cmp	r3, #0
 80005f0:	db04      	blt.n	80005fc <_isatty+0x18>
 80005f2:	687b      	ldr	r3, [r7, #4]
 80005f4:	2b02      	cmp	r3, #2
 80005f6:	dc01      	bgt.n	80005fc <_isatty+0x18>
    return 1;
 80005f8:	2301      	movs	r3, #1
 80005fa:	e005      	b.n	8000608 <_isatty+0x24>

  errno = EBADF;
 80005fc:	f005 f8ee 	bl	80057dc <__errno>
 8000600:	4603      	mov	r3, r0
 8000602:	2209      	movs	r2, #9
 8000604:	601a      	str	r2, [r3, #0]
  return 0;
 8000606:	2300      	movs	r3, #0
}
 8000608:	4618      	mov	r0, r3
 800060a:	3708      	adds	r7, #8
 800060c:	46bd      	mov	sp, r7
 800060e:	bd80      	pop	{r7, pc}

08000610 <_write>:

int _write(int fd, char* ptr, int len) {
 8000610:	b580      	push	{r7, lr}
 8000612:	b086      	sub	sp, #24
 8000614:	af00      	add	r7, sp, #0
 8000616:	60f8      	str	r0, [r7, #12]
 8000618:	60b9      	str	r1, [r7, #8]
 800061a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDOUT_FILENO || fd == STDERR_FILENO) {
 800061c:	68fb      	ldr	r3, [r7, #12]
 800061e:	2b01      	cmp	r3, #1
 8000620:	d002      	beq.n	8000628 <_write+0x18>
 8000622:	68fb      	ldr	r3, [r7, #12]
 8000624:	2b02      	cmp	r3, #2
 8000626:	d111      	bne.n	800064c <_write+0x3c>
    hstatus = HAL_UART_Transmit(gHuart, (uint8_t *) ptr, len, HAL_MAX_DELAY);
 8000628:	4b0e      	ldr	r3, [pc, #56]	; (8000664 <_write+0x54>)
 800062a:	6818      	ldr	r0, [r3, #0]
 800062c:	687b      	ldr	r3, [r7, #4]
 800062e:	b29a      	uxth	r2, r3
 8000630:	f04f 33ff 	mov.w	r3, #4294967295
 8000634:	68b9      	ldr	r1, [r7, #8]
 8000636:	f001 fd10 	bl	800205a <HAL_UART_Transmit>
 800063a:	4603      	mov	r3, r0
 800063c:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 800063e:	7dfb      	ldrb	r3, [r7, #23]
 8000640:	2b00      	cmp	r3, #0
 8000642:	d101      	bne.n	8000648 <_write+0x38>
      return len;
 8000644:	687b      	ldr	r3, [r7, #4]
 8000646:	e008      	b.n	800065a <_write+0x4a>
    else
      return EIO;
 8000648:	2305      	movs	r3, #5
 800064a:	e006      	b.n	800065a <_write+0x4a>
  }
  errno = EBADF;
 800064c:	f005 f8c6 	bl	80057dc <__errno>
 8000650:	4603      	mov	r3, r0
 8000652:	2209      	movs	r2, #9
 8000654:	601a      	str	r2, [r3, #0]
  return -1;
 8000656:	f04f 33ff 	mov.w	r3, #4294967295
}
 800065a:	4618      	mov	r0, r3
 800065c:	3718      	adds	r7, #24
 800065e:	46bd      	mov	sp, r7
 8000660:	bd80      	pop	{r7, pc}
 8000662:	bf00      	nop
 8000664:	20000130 	.word	0x20000130

08000668 <_close>:

int _close(int fd) {
 8000668:	b580      	push	{r7, lr}
 800066a:	b082      	sub	sp, #8
 800066c:	af00      	add	r7, sp, #0
 800066e:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 8000670:	687b      	ldr	r3, [r7, #4]
 8000672:	2b00      	cmp	r3, #0
 8000674:	db04      	blt.n	8000680 <_close+0x18>
 8000676:	687b      	ldr	r3, [r7, #4]
 8000678:	2b02      	cmp	r3, #2
 800067a:	dc01      	bgt.n	8000680 <_close+0x18>
    return 0;
 800067c:	2300      	movs	r3, #0
 800067e:	e006      	b.n	800068e <_close+0x26>

  errno = EBADF;
 8000680:	f005 f8ac 	bl	80057dc <__errno>
 8000684:	4603      	mov	r3, r0
 8000686:	2209      	movs	r2, #9
 8000688:	601a      	str	r2, [r3, #0]
  return -1;
 800068a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800068e:	4618      	mov	r0, r3
 8000690:	3708      	adds	r7, #8
 8000692:	46bd      	mov	sp, r7
 8000694:	bd80      	pop	{r7, pc}

08000696 <_lseek>:

int _lseek(int fd, int ptr, int dir) {
 8000696:	b580      	push	{r7, lr}
 8000698:	b084      	sub	sp, #16
 800069a:	af00      	add	r7, sp, #0
 800069c:	60f8      	str	r0, [r7, #12]
 800069e:	60b9      	str	r1, [r7, #8]
 80006a0:	607a      	str	r2, [r7, #4]
  (void) fd;
  (void) ptr;
  (void) dir;

  errno = EBADF;
 80006a2:	f005 f89b 	bl	80057dc <__errno>
 80006a6:	4603      	mov	r3, r0
 80006a8:	2209      	movs	r2, #9
 80006aa:	601a      	str	r2, [r3, #0]
  return -1;
 80006ac:	f04f 33ff 	mov.w	r3, #4294967295
}
 80006b0:	4618      	mov	r0, r3
 80006b2:	3710      	adds	r7, #16
 80006b4:	46bd      	mov	sp, r7
 80006b6:	bd80      	pop	{r7, pc}

080006b8 <_read>:

int _read(int fd, char* ptr, int len) {
 80006b8:	b580      	push	{r7, lr}
 80006ba:	b086      	sub	sp, #24
 80006bc:	af00      	add	r7, sp, #0
 80006be:	60f8      	str	r0, [r7, #12]
 80006c0:	60b9      	str	r1, [r7, #8]
 80006c2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDIN_FILENO) {
 80006c4:	68fb      	ldr	r3, [r7, #12]
 80006c6:	2b00      	cmp	r3, #0
 80006c8:	d110      	bne.n	80006ec <_read+0x34>
    hstatus = HAL_UART_Receive(gHuart, (uint8_t *) ptr, 1, HAL_MAX_DELAY);
 80006ca:	4b0e      	ldr	r3, [pc, #56]	; (8000704 <_read+0x4c>)
 80006cc:	6818      	ldr	r0, [r3, #0]
 80006ce:	f04f 33ff 	mov.w	r3, #4294967295
 80006d2:	2201      	movs	r2, #1
 80006d4:	68b9      	ldr	r1, [r7, #8]
 80006d6:	f001 fd52 	bl	800217e <HAL_UART_Receive>
 80006da:	4603      	mov	r3, r0
 80006dc:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 80006de:	7dfb      	ldrb	r3, [r7, #23]
 80006e0:	2b00      	cmp	r3, #0
 80006e2:	d101      	bne.n	80006e8 <_read+0x30>
      return 1;
 80006e4:	2301      	movs	r3, #1
 80006e6:	e008      	b.n	80006fa <_read+0x42>
    else
      return EIO;
 80006e8:	2305      	movs	r3, #5
 80006ea:	e006      	b.n	80006fa <_read+0x42>
  }
  errno = EBADF;
 80006ec:	f005 f876 	bl	80057dc <__errno>
 80006f0:	4603      	mov	r3, r0
 80006f2:	2209      	movs	r2, #9
 80006f4:	601a      	str	r2, [r3, #0]
  return -1;
 80006f6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80006fa:	4618      	mov	r0, r3
 80006fc:	3718      	adds	r7, #24
 80006fe:	46bd      	mov	sp, r7
 8000700:	bd80      	pop	{r7, pc}
 8000702:	bf00      	nop
 8000704:	20000130 	.word	0x20000130

08000708 <_fstat>:

int _fstat(int fd, struct stat* st) {
 8000708:	b580      	push	{r7, lr}
 800070a:	b082      	sub	sp, #8
 800070c:	af00      	add	r7, sp, #0
 800070e:	6078      	str	r0, [r7, #4]
 8000710:	6039      	str	r1, [r7, #0]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO) {
 8000712:	687b      	ldr	r3, [r7, #4]
 8000714:	2b00      	cmp	r3, #0
 8000716:	db08      	blt.n	800072a <_fstat+0x22>
 8000718:	687b      	ldr	r3, [r7, #4]
 800071a:	2b02      	cmp	r3, #2
 800071c:	dc05      	bgt.n	800072a <_fstat+0x22>
    st->st_mode = S_IFCHR;
 800071e:	683b      	ldr	r3, [r7, #0]
 8000720:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000724:	605a      	str	r2, [r3, #4]
    return 0;
 8000726:	2300      	movs	r3, #0
 8000728:	e005      	b.n	8000736 <_fstat+0x2e>
  }

  errno = EBADF;
 800072a:	f005 f857 	bl	80057dc <__errno>
 800072e:	4603      	mov	r3, r0
 8000730:	2209      	movs	r2, #9
 8000732:	601a      	str	r2, [r3, #0]
  return 0;
 8000734:	2300      	movs	r3, #0
}
 8000736:	4618      	mov	r0, r3
 8000738:	3708      	adds	r7, #8
 800073a:	46bd      	mov	sp, r7
 800073c:	bd80      	pop	{r7, pc}
	...

08000740 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	b084      	sub	sp, #16
 8000744:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000746:	4b18      	ldr	r3, [pc, #96]	; (80007a8 <HAL_MspInit+0x68>)
 8000748:	699b      	ldr	r3, [r3, #24]
 800074a:	4a17      	ldr	r2, [pc, #92]	; (80007a8 <HAL_MspInit+0x68>)
 800074c:	f043 0301 	orr.w	r3, r3, #1
 8000750:	6193      	str	r3, [r2, #24]
 8000752:	4b15      	ldr	r3, [pc, #84]	; (80007a8 <HAL_MspInit+0x68>)
 8000754:	699b      	ldr	r3, [r3, #24]
 8000756:	f003 0301 	and.w	r3, r3, #1
 800075a:	60bb      	str	r3, [r7, #8]
 800075c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800075e:	4b12      	ldr	r3, [pc, #72]	; (80007a8 <HAL_MspInit+0x68>)
 8000760:	69db      	ldr	r3, [r3, #28]
 8000762:	4a11      	ldr	r2, [pc, #68]	; (80007a8 <HAL_MspInit+0x68>)
 8000764:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000768:	61d3      	str	r3, [r2, #28]
 800076a:	4b0f      	ldr	r3, [pc, #60]	; (80007a8 <HAL_MspInit+0x68>)
 800076c:	69db      	ldr	r3, [r3, #28]
 800076e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000772:	607b      	str	r3, [r7, #4]
 8000774:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000776:	2200      	movs	r2, #0
 8000778:	210f      	movs	r1, #15
 800077a:	f06f 0001 	mvn.w	r0, #1
 800077e:	f000 fadc 	bl	8000d3a <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000782:	4b0a      	ldr	r3, [pc, #40]	; (80007ac <HAL_MspInit+0x6c>)
 8000784:	685b      	ldr	r3, [r3, #4]
 8000786:	60fb      	str	r3, [r7, #12]
 8000788:	68fb      	ldr	r3, [r7, #12]
 800078a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800078e:	60fb      	str	r3, [r7, #12]
 8000790:	68fb      	ldr	r3, [r7, #12]
 8000792:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000796:	60fb      	str	r3, [r7, #12]
 8000798:	4a04      	ldr	r2, [pc, #16]	; (80007ac <HAL_MspInit+0x6c>)
 800079a:	68fb      	ldr	r3, [r7, #12]
 800079c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800079e:	bf00      	nop
 80007a0:	3710      	adds	r7, #16
 80007a2:	46bd      	mov	sp, r7
 80007a4:	bd80      	pop	{r7, pc}
 80007a6:	bf00      	nop
 80007a8:	40021000 	.word	0x40021000
 80007ac:	40010000 	.word	0x40010000

080007b0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	b08c      	sub	sp, #48	; 0x30
 80007b4:	af00      	add	r7, sp, #0
 80007b6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 80007b8:	2300      	movs	r3, #0
 80007ba:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 80007bc:	2300      	movs	r3, #0
 80007be:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 80007c0:	2300      	movs	r3, #0
 80007c2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80007c6:	4b2e      	ldr	r3, [pc, #184]	; (8000880 <HAL_InitTick+0xd0>)
 80007c8:	699b      	ldr	r3, [r3, #24]
 80007ca:	4a2d      	ldr	r2, [pc, #180]	; (8000880 <HAL_InitTick+0xd0>)
 80007cc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80007d0:	6193      	str	r3, [r2, #24]
 80007d2:	4b2b      	ldr	r3, [pc, #172]	; (8000880 <HAL_InitTick+0xd0>)
 80007d4:	699b      	ldr	r3, [r3, #24]
 80007d6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80007da:	60bb      	str	r3, [r7, #8]
 80007dc:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80007de:	f107 020c 	add.w	r2, r7, #12
 80007e2:	f107 0310 	add.w	r3, r7, #16
 80007e6:	4611      	mov	r1, r2
 80007e8:	4618      	mov	r0, r3
 80007ea:	f001 f951 	bl	8001a90 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 80007ee:	f001 f93b 	bl	8001a68 <HAL_RCC_GetPCLK2Freq>
 80007f2:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80007f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80007f6:	4a23      	ldr	r2, [pc, #140]	; (8000884 <HAL_InitTick+0xd4>)
 80007f8:	fba2 2303 	umull	r2, r3, r2, r3
 80007fc:	0c9b      	lsrs	r3, r3, #18
 80007fe:	3b01      	subs	r3, #1
 8000800:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000802:	4b21      	ldr	r3, [pc, #132]	; (8000888 <HAL_InitTick+0xd8>)
 8000804:	4a21      	ldr	r2, [pc, #132]	; (800088c <HAL_InitTick+0xdc>)
 8000806:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000808:	4b1f      	ldr	r3, [pc, #124]	; (8000888 <HAL_InitTick+0xd8>)
 800080a:	f240 32e7 	movw	r2, #999	; 0x3e7
 800080e:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000810:	4a1d      	ldr	r2, [pc, #116]	; (8000888 <HAL_InitTick+0xd8>)
 8000812:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000814:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000816:	4b1c      	ldr	r3, [pc, #112]	; (8000888 <HAL_InitTick+0xd8>)
 8000818:	2200      	movs	r2, #0
 800081a:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800081c:	4b1a      	ldr	r3, [pc, #104]	; (8000888 <HAL_InitTick+0xd8>)
 800081e:	2200      	movs	r2, #0
 8000820:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000822:	4b19      	ldr	r3, [pc, #100]	; (8000888 <HAL_InitTick+0xd8>)
 8000824:	2200      	movs	r2, #0
 8000826:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8000828:	4817      	ldr	r0, [pc, #92]	; (8000888 <HAL_InitTick+0xd8>)
 800082a:	f001 f97f 	bl	8001b2c <HAL_TIM_Base_Init>
 800082e:	4603      	mov	r3, r0
 8000830:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8000834:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000838:	2b00      	cmp	r3, #0
 800083a:	d11b      	bne.n	8000874 <HAL_InitTick+0xc4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 800083c:	4812      	ldr	r0, [pc, #72]	; (8000888 <HAL_InitTick+0xd8>)
 800083e:	f001 f9cd 	bl	8001bdc <HAL_TIM_Base_Start_IT>
 8000842:	4603      	mov	r3, r0
 8000844:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8000848:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800084c:	2b00      	cmp	r3, #0
 800084e:	d111      	bne.n	8000874 <HAL_InitTick+0xc4>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8000850:	2019      	movs	r0, #25
 8000852:	f000 fa8e 	bl	8000d72 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000856:	687b      	ldr	r3, [r7, #4]
 8000858:	2b0f      	cmp	r3, #15
 800085a:	d808      	bhi.n	800086e <HAL_InitTick+0xbe>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority, 0U);
 800085c:	2200      	movs	r2, #0
 800085e:	6879      	ldr	r1, [r7, #4]
 8000860:	2019      	movs	r0, #25
 8000862:	f000 fa6a 	bl	8000d3a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000866:	4a0a      	ldr	r2, [pc, #40]	; (8000890 <HAL_InitTick+0xe0>)
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	6013      	str	r3, [r2, #0]
 800086c:	e002      	b.n	8000874 <HAL_InitTick+0xc4>
      }
      else
      {
        status = HAL_ERROR;
 800086e:	2301      	movs	r3, #1
 8000870:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000874:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8000878:	4618      	mov	r0, r3
 800087a:	3730      	adds	r7, #48	; 0x30
 800087c:	46bd      	mov	sp, r7
 800087e:	bd80      	pop	{r7, pc}
 8000880:	40021000 	.word	0x40021000
 8000884:	431bde83 	.word	0x431bde83
 8000888:	20000134 	.word	0x20000134
 800088c:	40012c00 	.word	0x40012c00
 8000890:	20000008 	.word	0x20000008

08000894 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000894:	b480      	push	{r7}
 8000896:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000898:	e7fe      	b.n	8000898 <NMI_Handler+0x4>

0800089a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800089a:	b480      	push	{r7}
 800089c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800089e:	e7fe      	b.n	800089e <HardFault_Handler+0x4>

080008a0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008a0:	b480      	push	{r7}
 80008a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008a4:	e7fe      	b.n	80008a4 <MemManage_Handler+0x4>

080008a6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008a6:	b480      	push	{r7}
 80008a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008aa:	e7fe      	b.n	80008aa <BusFault_Handler+0x4>

080008ac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008ac:	b480      	push	{r7}
 80008ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008b0:	e7fe      	b.n	80008b0 <UsageFault_Handler+0x4>

080008b2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008b2:	b480      	push	{r7}
 80008b4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008b6:	bf00      	nop
 80008b8:	46bd      	mov	sp, r7
 80008ba:	bc80      	pop	{r7}
 80008bc:	4770      	bx	lr
	...

080008c0 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80008c4:	4802      	ldr	r0, [pc, #8]	; (80008d0 <TIM1_UP_IRQHandler+0x10>)
 80008c6:	f001 f9db 	bl	8001c80 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 80008ca:	bf00      	nop
 80008cc:	bd80      	pop	{r7, pc}
 80008ce:	bf00      	nop
 80008d0:	20000134 	.word	0x20000134

080008d4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80008d8:	4802      	ldr	r0, [pc, #8]	; (80008e4 <USART1_IRQHandler+0x10>)
 80008da:	f001 fd67 	bl	80023ac <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80008de:	bf00      	nop
 80008e0:	bd80      	pop	{r7, pc}
 80008e2:	bf00      	nop
 80008e4:	2000017c 	.word	0x2000017c

080008e8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80008ec:	4802      	ldr	r0, [pc, #8]	; (80008f8 <USART2_IRQHandler+0x10>)
 80008ee:	f001 fd5d 	bl	80023ac <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80008f2:	bf00      	nop
 80008f4:	bd80      	pop	{r7, pc}
 80008f6:	bf00      	nop
 80008f8:	200001c0 	.word	0x200001c0

080008fc <MX_USART1_UART_Init>:
UART_HandleTypeDef huart2;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80008fc:	b580      	push	{r7, lr}
 80008fe:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000900:	4b11      	ldr	r3, [pc, #68]	; (8000948 <MX_USART1_UART_Init+0x4c>)
 8000902:	4a12      	ldr	r2, [pc, #72]	; (800094c <MX_USART1_UART_Init+0x50>)
 8000904:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000906:	4b10      	ldr	r3, [pc, #64]	; (8000948 <MX_USART1_UART_Init+0x4c>)
 8000908:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800090c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800090e:	4b0e      	ldr	r3, [pc, #56]	; (8000948 <MX_USART1_UART_Init+0x4c>)
 8000910:	2200      	movs	r2, #0
 8000912:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000914:	4b0c      	ldr	r3, [pc, #48]	; (8000948 <MX_USART1_UART_Init+0x4c>)
 8000916:	2200      	movs	r2, #0
 8000918:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800091a:	4b0b      	ldr	r3, [pc, #44]	; (8000948 <MX_USART1_UART_Init+0x4c>)
 800091c:	2200      	movs	r2, #0
 800091e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000920:	4b09      	ldr	r3, [pc, #36]	; (8000948 <MX_USART1_UART_Init+0x4c>)
 8000922:	220c      	movs	r2, #12
 8000924:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000926:	4b08      	ldr	r3, [pc, #32]	; (8000948 <MX_USART1_UART_Init+0x4c>)
 8000928:	2200      	movs	r2, #0
 800092a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800092c:	4b06      	ldr	r3, [pc, #24]	; (8000948 <MX_USART1_UART_Init+0x4c>)
 800092e:	2200      	movs	r2, #0
 8000930:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000932:	4805      	ldr	r0, [pc, #20]	; (8000948 <MX_USART1_UART_Init+0x4c>)
 8000934:	f001 fb44 	bl	8001fc0 <HAL_UART_Init>
 8000938:	4603      	mov	r3, r0
 800093a:	2b00      	cmp	r3, #0
 800093c:	d001      	beq.n	8000942 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800093e:	f7ff fe33 	bl	80005a8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000942:	bf00      	nop
 8000944:	bd80      	pop	{r7, pc}
 8000946:	bf00      	nop
 8000948:	2000017c 	.word	0x2000017c
 800094c:	40013800 	.word	0x40013800

08000950 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000954:	4b11      	ldr	r3, [pc, #68]	; (800099c <MX_USART2_UART_Init+0x4c>)
 8000956:	4a12      	ldr	r2, [pc, #72]	; (80009a0 <MX_USART2_UART_Init+0x50>)
 8000958:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800095a:	4b10      	ldr	r3, [pc, #64]	; (800099c <MX_USART2_UART_Init+0x4c>)
 800095c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000960:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000962:	4b0e      	ldr	r3, [pc, #56]	; (800099c <MX_USART2_UART_Init+0x4c>)
 8000964:	2200      	movs	r2, #0
 8000966:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000968:	4b0c      	ldr	r3, [pc, #48]	; (800099c <MX_USART2_UART_Init+0x4c>)
 800096a:	2200      	movs	r2, #0
 800096c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800096e:	4b0b      	ldr	r3, [pc, #44]	; (800099c <MX_USART2_UART_Init+0x4c>)
 8000970:	2200      	movs	r2, #0
 8000972:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000974:	4b09      	ldr	r3, [pc, #36]	; (800099c <MX_USART2_UART_Init+0x4c>)
 8000976:	220c      	movs	r2, #12
 8000978:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800097a:	4b08      	ldr	r3, [pc, #32]	; (800099c <MX_USART2_UART_Init+0x4c>)
 800097c:	2200      	movs	r2, #0
 800097e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000980:	4b06      	ldr	r3, [pc, #24]	; (800099c <MX_USART2_UART_Init+0x4c>)
 8000982:	2200      	movs	r2, #0
 8000984:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000986:	4805      	ldr	r0, [pc, #20]	; (800099c <MX_USART2_UART_Init+0x4c>)
 8000988:	f001 fb1a 	bl	8001fc0 <HAL_UART_Init>
 800098c:	4603      	mov	r3, r0
 800098e:	2b00      	cmp	r3, #0
 8000990:	d001      	beq.n	8000996 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000992:	f7ff fe09 	bl	80005a8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000996:	bf00      	nop
 8000998:	bd80      	pop	{r7, pc}
 800099a:	bf00      	nop
 800099c:	200001c0 	.word	0x200001c0
 80009a0:	40004400 	.word	0x40004400

080009a4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	b08a      	sub	sp, #40	; 0x28
 80009a8:	af00      	add	r7, sp, #0
 80009aa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009ac:	f107 0318 	add.w	r3, r7, #24
 80009b0:	2200      	movs	r2, #0
 80009b2:	601a      	str	r2, [r3, #0]
 80009b4:	605a      	str	r2, [r3, #4]
 80009b6:	609a      	str	r2, [r3, #8]
 80009b8:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	681b      	ldr	r3, [r3, #0]
 80009be:	4a3f      	ldr	r2, [pc, #252]	; (8000abc <HAL_UART_MspInit+0x118>)
 80009c0:	4293      	cmp	r3, r2
 80009c2:	d13a      	bne.n	8000a3a <HAL_UART_MspInit+0x96>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80009c4:	4b3e      	ldr	r3, [pc, #248]	; (8000ac0 <HAL_UART_MspInit+0x11c>)
 80009c6:	699b      	ldr	r3, [r3, #24]
 80009c8:	4a3d      	ldr	r2, [pc, #244]	; (8000ac0 <HAL_UART_MspInit+0x11c>)
 80009ca:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009ce:	6193      	str	r3, [r2, #24]
 80009d0:	4b3b      	ldr	r3, [pc, #236]	; (8000ac0 <HAL_UART_MspInit+0x11c>)
 80009d2:	699b      	ldr	r3, [r3, #24]
 80009d4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80009d8:	617b      	str	r3, [r7, #20]
 80009da:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009dc:	4b38      	ldr	r3, [pc, #224]	; (8000ac0 <HAL_UART_MspInit+0x11c>)
 80009de:	699b      	ldr	r3, [r3, #24]
 80009e0:	4a37      	ldr	r2, [pc, #220]	; (8000ac0 <HAL_UART_MspInit+0x11c>)
 80009e2:	f043 0304 	orr.w	r3, r3, #4
 80009e6:	6193      	str	r3, [r2, #24]
 80009e8:	4b35      	ldr	r3, [pc, #212]	; (8000ac0 <HAL_UART_MspInit+0x11c>)
 80009ea:	699b      	ldr	r3, [r3, #24]
 80009ec:	f003 0304 	and.w	r3, r3, #4
 80009f0:	613b      	str	r3, [r7, #16]
 80009f2:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80009f4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80009f8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009fa:	2302      	movs	r3, #2
 80009fc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80009fe:	2303      	movs	r3, #3
 8000a00:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a02:	f107 0318 	add.w	r3, r7, #24
 8000a06:	4619      	mov	r1, r3
 8000a08:	482e      	ldr	r0, [pc, #184]	; (8000ac4 <HAL_UART_MspInit+0x120>)
 8000a0a:	f000 fa71 	bl	8000ef0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000a0e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000a12:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a14:	2300      	movs	r3, #0
 8000a16:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a18:	2300      	movs	r3, #0
 8000a1a:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a1c:	f107 0318 	add.w	r3, r7, #24
 8000a20:	4619      	mov	r1, r3
 8000a22:	4828      	ldr	r0, [pc, #160]	; (8000ac4 <HAL_UART_MspInit+0x120>)
 8000a24:	f000 fa64 	bl	8000ef0 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8000a28:	2200      	movs	r2, #0
 8000a2a:	2105      	movs	r1, #5
 8000a2c:	2025      	movs	r0, #37	; 0x25
 8000a2e:	f000 f984 	bl	8000d3a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000a32:	2025      	movs	r0, #37	; 0x25
 8000a34:	f000 f99d 	bl	8000d72 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000a38:	e03c      	b.n	8000ab4 <HAL_UART_MspInit+0x110>
  else if(uartHandle->Instance==USART2)
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	681b      	ldr	r3, [r3, #0]
 8000a3e:	4a22      	ldr	r2, [pc, #136]	; (8000ac8 <HAL_UART_MspInit+0x124>)
 8000a40:	4293      	cmp	r3, r2
 8000a42:	d137      	bne.n	8000ab4 <HAL_UART_MspInit+0x110>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000a44:	4b1e      	ldr	r3, [pc, #120]	; (8000ac0 <HAL_UART_MspInit+0x11c>)
 8000a46:	69db      	ldr	r3, [r3, #28]
 8000a48:	4a1d      	ldr	r2, [pc, #116]	; (8000ac0 <HAL_UART_MspInit+0x11c>)
 8000a4a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a4e:	61d3      	str	r3, [r2, #28]
 8000a50:	4b1b      	ldr	r3, [pc, #108]	; (8000ac0 <HAL_UART_MspInit+0x11c>)
 8000a52:	69db      	ldr	r3, [r3, #28]
 8000a54:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a58:	60fb      	str	r3, [r7, #12]
 8000a5a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a5c:	4b18      	ldr	r3, [pc, #96]	; (8000ac0 <HAL_UART_MspInit+0x11c>)
 8000a5e:	699b      	ldr	r3, [r3, #24]
 8000a60:	4a17      	ldr	r2, [pc, #92]	; (8000ac0 <HAL_UART_MspInit+0x11c>)
 8000a62:	f043 0304 	orr.w	r3, r3, #4
 8000a66:	6193      	str	r3, [r2, #24]
 8000a68:	4b15      	ldr	r3, [pc, #84]	; (8000ac0 <HAL_UART_MspInit+0x11c>)
 8000a6a:	699b      	ldr	r3, [r3, #24]
 8000a6c:	f003 0304 	and.w	r3, r3, #4
 8000a70:	60bb      	str	r3, [r7, #8]
 8000a72:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000a74:	2304      	movs	r3, #4
 8000a76:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a78:	2302      	movs	r3, #2
 8000a7a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a7c:	2303      	movs	r3, #3
 8000a7e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a80:	f107 0318 	add.w	r3, r7, #24
 8000a84:	4619      	mov	r1, r3
 8000a86:	480f      	ldr	r0, [pc, #60]	; (8000ac4 <HAL_UART_MspInit+0x120>)
 8000a88:	f000 fa32 	bl	8000ef0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000a8c:	2308      	movs	r3, #8
 8000a8e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a90:	2300      	movs	r3, #0
 8000a92:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a94:	2300      	movs	r3, #0
 8000a96:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a98:	f107 0318 	add.w	r3, r7, #24
 8000a9c:	4619      	mov	r1, r3
 8000a9e:	4809      	ldr	r0, [pc, #36]	; (8000ac4 <HAL_UART_MspInit+0x120>)
 8000aa0:	f000 fa26 	bl	8000ef0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	2105      	movs	r1, #5
 8000aa8:	2026      	movs	r0, #38	; 0x26
 8000aaa:	f000 f946 	bl	8000d3a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000aae:	2026      	movs	r0, #38	; 0x26
 8000ab0:	f000 f95f 	bl	8000d72 <HAL_NVIC_EnableIRQ>
}
 8000ab4:	bf00      	nop
 8000ab6:	3728      	adds	r7, #40	; 0x28
 8000ab8:	46bd      	mov	sp, r7
 8000aba:	bd80      	pop	{r7, pc}
 8000abc:	40013800 	.word	0x40013800
 8000ac0:	40021000 	.word	0x40021000
 8000ac4:	40010800 	.word	0x40010800
 8000ac8:	40004400 	.word	0x40004400

08000acc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000acc:	480c      	ldr	r0, [pc, #48]	; (8000b00 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000ace:	490d      	ldr	r1, [pc, #52]	; (8000b04 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000ad0:	4a0d      	ldr	r2, [pc, #52]	; (8000b08 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000ad2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ad4:	e002      	b.n	8000adc <LoopCopyDataInit>

08000ad6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ad6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ad8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ada:	3304      	adds	r3, #4

08000adc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000adc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ade:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ae0:	d3f9      	bcc.n	8000ad6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ae2:	4a0a      	ldr	r2, [pc, #40]	; (8000b0c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000ae4:	4c0a      	ldr	r4, [pc, #40]	; (8000b10 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000ae6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ae8:	e001      	b.n	8000aee <LoopFillZerobss>

08000aea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000aea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000aec:	3204      	adds	r2, #4

08000aee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000aee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000af0:	d3fb      	bcc.n	8000aea <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000af2:	f000 f810 	bl	8000b16 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000af6:	f004 ff6d 	bl	80059d4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000afa:	f7ff fc93 	bl	8000424 <main>
  bx lr
 8000afe:	4770      	bx	lr
  ldr r0, =_sdata
 8000b00:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b04:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8000b08:	08006d98 	.word	0x08006d98
  ldr r2, =_sbss
 8000b0c:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8000b10:	20001c24 	.word	0x20001c24

08000b14 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000b14:	e7fe      	b.n	8000b14 <ADC1_2_IRQHandler>

08000b16 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000b16:	b480      	push	{r7}
 8000b18:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b1a:	bf00      	nop
 8000b1c:	46bd      	mov	sp, r7
 8000b1e:	bc80      	pop	{r7}
 8000b20:	4770      	bx	lr
	...

08000b24 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b28:	4b08      	ldr	r3, [pc, #32]	; (8000b4c <HAL_Init+0x28>)
 8000b2a:	681b      	ldr	r3, [r3, #0]
 8000b2c:	4a07      	ldr	r2, [pc, #28]	; (8000b4c <HAL_Init+0x28>)
 8000b2e:	f043 0310 	orr.w	r3, r3, #16
 8000b32:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b34:	2003      	movs	r0, #3
 8000b36:	f000 f8f5 	bl	8000d24 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b3a:	200f      	movs	r0, #15
 8000b3c:	f7ff fe38 	bl	80007b0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b40:	f7ff fdfe 	bl	8000740 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b44:	2300      	movs	r3, #0
}
 8000b46:	4618      	mov	r0, r3
 8000b48:	bd80      	pop	{r7, pc}
 8000b4a:	bf00      	nop
 8000b4c:	40022000 	.word	0x40022000

08000b50 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b50:	b480      	push	{r7}
 8000b52:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b54:	4b05      	ldr	r3, [pc, #20]	; (8000b6c <HAL_IncTick+0x1c>)
 8000b56:	781b      	ldrb	r3, [r3, #0]
 8000b58:	461a      	mov	r2, r3
 8000b5a:	4b05      	ldr	r3, [pc, #20]	; (8000b70 <HAL_IncTick+0x20>)
 8000b5c:	681b      	ldr	r3, [r3, #0]
 8000b5e:	4413      	add	r3, r2
 8000b60:	4a03      	ldr	r2, [pc, #12]	; (8000b70 <HAL_IncTick+0x20>)
 8000b62:	6013      	str	r3, [r2, #0]
}
 8000b64:	bf00      	nop
 8000b66:	46bd      	mov	sp, r7
 8000b68:	bc80      	pop	{r7}
 8000b6a:	4770      	bx	lr
 8000b6c:	2000000c 	.word	0x2000000c
 8000b70:	20000204 	.word	0x20000204

08000b74 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b74:	b480      	push	{r7}
 8000b76:	af00      	add	r7, sp, #0
  return uwTick;
 8000b78:	4b02      	ldr	r3, [pc, #8]	; (8000b84 <HAL_GetTick+0x10>)
 8000b7a:	681b      	ldr	r3, [r3, #0]
}
 8000b7c:	4618      	mov	r0, r3
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	bc80      	pop	{r7}
 8000b82:	4770      	bx	lr
 8000b84:	20000204 	.word	0x20000204

08000b88 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	b084      	sub	sp, #16
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000b90:	f7ff fff0 	bl	8000b74 <HAL_GetTick>
 8000b94:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000b9a:	68fb      	ldr	r3, [r7, #12]
 8000b9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ba0:	d005      	beq.n	8000bae <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000ba2:	4b0a      	ldr	r3, [pc, #40]	; (8000bcc <HAL_Delay+0x44>)
 8000ba4:	781b      	ldrb	r3, [r3, #0]
 8000ba6:	461a      	mov	r2, r3
 8000ba8:	68fb      	ldr	r3, [r7, #12]
 8000baa:	4413      	add	r3, r2
 8000bac:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000bae:	bf00      	nop
 8000bb0:	f7ff ffe0 	bl	8000b74 <HAL_GetTick>
 8000bb4:	4602      	mov	r2, r0
 8000bb6:	68bb      	ldr	r3, [r7, #8]
 8000bb8:	1ad3      	subs	r3, r2, r3
 8000bba:	68fa      	ldr	r2, [r7, #12]
 8000bbc:	429a      	cmp	r2, r3
 8000bbe:	d8f7      	bhi.n	8000bb0 <HAL_Delay+0x28>
  {
  }
}
 8000bc0:	bf00      	nop
 8000bc2:	bf00      	nop
 8000bc4:	3710      	adds	r7, #16
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	bd80      	pop	{r7, pc}
 8000bca:	bf00      	nop
 8000bcc:	2000000c 	.word	0x2000000c

08000bd0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bd0:	b480      	push	{r7}
 8000bd2:	b085      	sub	sp, #20
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	f003 0307 	and.w	r3, r3, #7
 8000bde:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000be0:	4b0c      	ldr	r3, [pc, #48]	; (8000c14 <__NVIC_SetPriorityGrouping+0x44>)
 8000be2:	68db      	ldr	r3, [r3, #12]
 8000be4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000be6:	68ba      	ldr	r2, [r7, #8]
 8000be8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000bec:	4013      	ands	r3, r2
 8000bee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000bf0:	68fb      	ldr	r3, [r7, #12]
 8000bf2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000bf4:	68bb      	ldr	r3, [r7, #8]
 8000bf6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000bf8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000bfc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c00:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c02:	4a04      	ldr	r2, [pc, #16]	; (8000c14 <__NVIC_SetPriorityGrouping+0x44>)
 8000c04:	68bb      	ldr	r3, [r7, #8]
 8000c06:	60d3      	str	r3, [r2, #12]
}
 8000c08:	bf00      	nop
 8000c0a:	3714      	adds	r7, #20
 8000c0c:	46bd      	mov	sp, r7
 8000c0e:	bc80      	pop	{r7}
 8000c10:	4770      	bx	lr
 8000c12:	bf00      	nop
 8000c14:	e000ed00 	.word	0xe000ed00

08000c18 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c18:	b480      	push	{r7}
 8000c1a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c1c:	4b04      	ldr	r3, [pc, #16]	; (8000c30 <__NVIC_GetPriorityGrouping+0x18>)
 8000c1e:	68db      	ldr	r3, [r3, #12]
 8000c20:	0a1b      	lsrs	r3, r3, #8
 8000c22:	f003 0307 	and.w	r3, r3, #7
}
 8000c26:	4618      	mov	r0, r3
 8000c28:	46bd      	mov	sp, r7
 8000c2a:	bc80      	pop	{r7}
 8000c2c:	4770      	bx	lr
 8000c2e:	bf00      	nop
 8000c30:	e000ed00 	.word	0xe000ed00

08000c34 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c34:	b480      	push	{r7}
 8000c36:	b083      	sub	sp, #12
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	4603      	mov	r3, r0
 8000c3c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	db0b      	blt.n	8000c5e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c46:	79fb      	ldrb	r3, [r7, #7]
 8000c48:	f003 021f 	and.w	r2, r3, #31
 8000c4c:	4906      	ldr	r1, [pc, #24]	; (8000c68 <__NVIC_EnableIRQ+0x34>)
 8000c4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c52:	095b      	lsrs	r3, r3, #5
 8000c54:	2001      	movs	r0, #1
 8000c56:	fa00 f202 	lsl.w	r2, r0, r2
 8000c5a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000c5e:	bf00      	nop
 8000c60:	370c      	adds	r7, #12
 8000c62:	46bd      	mov	sp, r7
 8000c64:	bc80      	pop	{r7}
 8000c66:	4770      	bx	lr
 8000c68:	e000e100 	.word	0xe000e100

08000c6c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c6c:	b480      	push	{r7}
 8000c6e:	b083      	sub	sp, #12
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	4603      	mov	r3, r0
 8000c74:	6039      	str	r1, [r7, #0]
 8000c76:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c78:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	db0a      	blt.n	8000c96 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c80:	683b      	ldr	r3, [r7, #0]
 8000c82:	b2da      	uxtb	r2, r3
 8000c84:	490c      	ldr	r1, [pc, #48]	; (8000cb8 <__NVIC_SetPriority+0x4c>)
 8000c86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c8a:	0112      	lsls	r2, r2, #4
 8000c8c:	b2d2      	uxtb	r2, r2
 8000c8e:	440b      	add	r3, r1
 8000c90:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c94:	e00a      	b.n	8000cac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c96:	683b      	ldr	r3, [r7, #0]
 8000c98:	b2da      	uxtb	r2, r3
 8000c9a:	4908      	ldr	r1, [pc, #32]	; (8000cbc <__NVIC_SetPriority+0x50>)
 8000c9c:	79fb      	ldrb	r3, [r7, #7]
 8000c9e:	f003 030f 	and.w	r3, r3, #15
 8000ca2:	3b04      	subs	r3, #4
 8000ca4:	0112      	lsls	r2, r2, #4
 8000ca6:	b2d2      	uxtb	r2, r2
 8000ca8:	440b      	add	r3, r1
 8000caa:	761a      	strb	r2, [r3, #24]
}
 8000cac:	bf00      	nop
 8000cae:	370c      	adds	r7, #12
 8000cb0:	46bd      	mov	sp, r7
 8000cb2:	bc80      	pop	{r7}
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop
 8000cb8:	e000e100 	.word	0xe000e100
 8000cbc:	e000ed00 	.word	0xe000ed00

08000cc0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000cc0:	b480      	push	{r7}
 8000cc2:	b089      	sub	sp, #36	; 0x24
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	60f8      	str	r0, [r7, #12]
 8000cc8:	60b9      	str	r1, [r7, #8]
 8000cca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ccc:	68fb      	ldr	r3, [r7, #12]
 8000cce:	f003 0307 	and.w	r3, r3, #7
 8000cd2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000cd4:	69fb      	ldr	r3, [r7, #28]
 8000cd6:	f1c3 0307 	rsb	r3, r3, #7
 8000cda:	2b04      	cmp	r3, #4
 8000cdc:	bf28      	it	cs
 8000cde:	2304      	movcs	r3, #4
 8000ce0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ce2:	69fb      	ldr	r3, [r7, #28]
 8000ce4:	3304      	adds	r3, #4
 8000ce6:	2b06      	cmp	r3, #6
 8000ce8:	d902      	bls.n	8000cf0 <NVIC_EncodePriority+0x30>
 8000cea:	69fb      	ldr	r3, [r7, #28]
 8000cec:	3b03      	subs	r3, #3
 8000cee:	e000      	b.n	8000cf2 <NVIC_EncodePriority+0x32>
 8000cf0:	2300      	movs	r3, #0
 8000cf2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cf4:	f04f 32ff 	mov.w	r2, #4294967295
 8000cf8:	69bb      	ldr	r3, [r7, #24]
 8000cfa:	fa02 f303 	lsl.w	r3, r2, r3
 8000cfe:	43da      	mvns	r2, r3
 8000d00:	68bb      	ldr	r3, [r7, #8]
 8000d02:	401a      	ands	r2, r3
 8000d04:	697b      	ldr	r3, [r7, #20]
 8000d06:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d08:	f04f 31ff 	mov.w	r1, #4294967295
 8000d0c:	697b      	ldr	r3, [r7, #20]
 8000d0e:	fa01 f303 	lsl.w	r3, r1, r3
 8000d12:	43d9      	mvns	r1, r3
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d18:	4313      	orrs	r3, r2
         );
}
 8000d1a:	4618      	mov	r0, r3
 8000d1c:	3724      	adds	r7, #36	; 0x24
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	bc80      	pop	{r7}
 8000d22:	4770      	bx	lr

08000d24 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	b082      	sub	sp, #8
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d2c:	6878      	ldr	r0, [r7, #4]
 8000d2e:	f7ff ff4f 	bl	8000bd0 <__NVIC_SetPriorityGrouping>
}
 8000d32:	bf00      	nop
 8000d34:	3708      	adds	r7, #8
 8000d36:	46bd      	mov	sp, r7
 8000d38:	bd80      	pop	{r7, pc}

08000d3a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d3a:	b580      	push	{r7, lr}
 8000d3c:	b086      	sub	sp, #24
 8000d3e:	af00      	add	r7, sp, #0
 8000d40:	4603      	mov	r3, r0
 8000d42:	60b9      	str	r1, [r7, #8]
 8000d44:	607a      	str	r2, [r7, #4]
 8000d46:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000d48:	2300      	movs	r3, #0
 8000d4a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d4c:	f7ff ff64 	bl	8000c18 <__NVIC_GetPriorityGrouping>
 8000d50:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d52:	687a      	ldr	r2, [r7, #4]
 8000d54:	68b9      	ldr	r1, [r7, #8]
 8000d56:	6978      	ldr	r0, [r7, #20]
 8000d58:	f7ff ffb2 	bl	8000cc0 <NVIC_EncodePriority>
 8000d5c:	4602      	mov	r2, r0
 8000d5e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d62:	4611      	mov	r1, r2
 8000d64:	4618      	mov	r0, r3
 8000d66:	f7ff ff81 	bl	8000c6c <__NVIC_SetPriority>
}
 8000d6a:	bf00      	nop
 8000d6c:	3718      	adds	r7, #24
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	bd80      	pop	{r7, pc}

08000d72 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d72:	b580      	push	{r7, lr}
 8000d74:	b082      	sub	sp, #8
 8000d76:	af00      	add	r7, sp, #0
 8000d78:	4603      	mov	r3, r0
 8000d7a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d7c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d80:	4618      	mov	r0, r3
 8000d82:	f7ff ff57 	bl	8000c34 <__NVIC_EnableIRQ>
}
 8000d86:	bf00      	nop
 8000d88:	3708      	adds	r7, #8
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	bd80      	pop	{r7, pc}

08000d8e <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000d8e:	b480      	push	{r7}
 8000d90:	b085      	sub	sp, #20
 8000d92:	af00      	add	r7, sp, #0
 8000d94:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000d96:	2300      	movs	r3, #0
 8000d98:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000da0:	2b02      	cmp	r3, #2
 8000da2:	d008      	beq.n	8000db6 <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	2204      	movs	r2, #4
 8000da8:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	2200      	movs	r2, #0
 8000dae:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8000db2:	2301      	movs	r3, #1
 8000db4:	e020      	b.n	8000df8 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	681a      	ldr	r2, [r3, #0]
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	f022 020e 	bic.w	r2, r2, #14
 8000dc4:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	681a      	ldr	r2, [r3, #0]
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	f022 0201 	bic.w	r2, r2, #1
 8000dd4:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000dde:	2101      	movs	r1, #1
 8000de0:	fa01 f202 	lsl.w	r2, r1, r2
 8000de4:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	2201      	movs	r2, #1
 8000dea:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	2200      	movs	r2, #0
 8000df2:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8000df6:	7bfb      	ldrb	r3, [r7, #15]
}
 8000df8:	4618      	mov	r0, r3
 8000dfa:	3714      	adds	r7, #20
 8000dfc:	46bd      	mov	sp, r7
 8000dfe:	bc80      	pop	{r7}
 8000e00:	4770      	bx	lr
	...

08000e04 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000e04:	b580      	push	{r7, lr}
 8000e06:	b084      	sub	sp, #16
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000e16:	2b02      	cmp	r3, #2
 8000e18:	d005      	beq.n	8000e26 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	2204      	movs	r2, #4
 8000e1e:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8000e20:	2301      	movs	r3, #1
 8000e22:	73fb      	strb	r3, [r7, #15]
 8000e24:	e051      	b.n	8000eca <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	681a      	ldr	r2, [r3, #0]
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	f022 020e 	bic.w	r2, r2, #14
 8000e34:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	681a      	ldr	r2, [r3, #0]
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	f022 0201 	bic.w	r2, r2, #1
 8000e44:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	4a22      	ldr	r2, [pc, #136]	; (8000ed4 <HAL_DMA_Abort_IT+0xd0>)
 8000e4c:	4293      	cmp	r3, r2
 8000e4e:	d029      	beq.n	8000ea4 <HAL_DMA_Abort_IT+0xa0>
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	4a20      	ldr	r2, [pc, #128]	; (8000ed8 <HAL_DMA_Abort_IT+0xd4>)
 8000e56:	4293      	cmp	r3, r2
 8000e58:	d022      	beq.n	8000ea0 <HAL_DMA_Abort_IT+0x9c>
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	4a1f      	ldr	r2, [pc, #124]	; (8000edc <HAL_DMA_Abort_IT+0xd8>)
 8000e60:	4293      	cmp	r3, r2
 8000e62:	d01a      	beq.n	8000e9a <HAL_DMA_Abort_IT+0x96>
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	4a1d      	ldr	r2, [pc, #116]	; (8000ee0 <HAL_DMA_Abort_IT+0xdc>)
 8000e6a:	4293      	cmp	r3, r2
 8000e6c:	d012      	beq.n	8000e94 <HAL_DMA_Abort_IT+0x90>
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	4a1c      	ldr	r2, [pc, #112]	; (8000ee4 <HAL_DMA_Abort_IT+0xe0>)
 8000e74:	4293      	cmp	r3, r2
 8000e76:	d00a      	beq.n	8000e8e <HAL_DMA_Abort_IT+0x8a>
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	4a1a      	ldr	r2, [pc, #104]	; (8000ee8 <HAL_DMA_Abort_IT+0xe4>)
 8000e7e:	4293      	cmp	r3, r2
 8000e80:	d102      	bne.n	8000e88 <HAL_DMA_Abort_IT+0x84>
 8000e82:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000e86:	e00e      	b.n	8000ea6 <HAL_DMA_Abort_IT+0xa2>
 8000e88:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000e8c:	e00b      	b.n	8000ea6 <HAL_DMA_Abort_IT+0xa2>
 8000e8e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000e92:	e008      	b.n	8000ea6 <HAL_DMA_Abort_IT+0xa2>
 8000e94:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e98:	e005      	b.n	8000ea6 <HAL_DMA_Abort_IT+0xa2>
 8000e9a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000e9e:	e002      	b.n	8000ea6 <HAL_DMA_Abort_IT+0xa2>
 8000ea0:	2310      	movs	r3, #16
 8000ea2:	e000      	b.n	8000ea6 <HAL_DMA_Abort_IT+0xa2>
 8000ea4:	2301      	movs	r3, #1
 8000ea6:	4a11      	ldr	r2, [pc, #68]	; (8000eec <HAL_DMA_Abort_IT+0xe8>)
 8000ea8:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	2201      	movs	r2, #1
 8000eae:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d003      	beq.n	8000eca <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000ec6:	6878      	ldr	r0, [r7, #4]
 8000ec8:	4798      	blx	r3
    } 
  }
  return status;
 8000eca:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ecc:	4618      	mov	r0, r3
 8000ece:	3710      	adds	r7, #16
 8000ed0:	46bd      	mov	sp, r7
 8000ed2:	bd80      	pop	{r7, pc}
 8000ed4:	40020008 	.word	0x40020008
 8000ed8:	4002001c 	.word	0x4002001c
 8000edc:	40020030 	.word	0x40020030
 8000ee0:	40020044 	.word	0x40020044
 8000ee4:	40020058 	.word	0x40020058
 8000ee8:	4002006c 	.word	0x4002006c
 8000eec:	40020000 	.word	0x40020000

08000ef0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ef0:	b480      	push	{r7}
 8000ef2:	b08b      	sub	sp, #44	; 0x2c
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	6078      	str	r0, [r7, #4]
 8000ef8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000efa:	2300      	movs	r3, #0
 8000efc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000efe:	2300      	movs	r3, #0
 8000f00:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f02:	e169      	b.n	80011d8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000f04:	2201      	movs	r2, #1
 8000f06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f08:	fa02 f303 	lsl.w	r3, r2, r3
 8000f0c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000f0e:	683b      	ldr	r3, [r7, #0]
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	69fa      	ldr	r2, [r7, #28]
 8000f14:	4013      	ands	r3, r2
 8000f16:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000f18:	69ba      	ldr	r2, [r7, #24]
 8000f1a:	69fb      	ldr	r3, [r7, #28]
 8000f1c:	429a      	cmp	r2, r3
 8000f1e:	f040 8158 	bne.w	80011d2 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000f22:	683b      	ldr	r3, [r7, #0]
 8000f24:	685b      	ldr	r3, [r3, #4]
 8000f26:	4a9a      	ldr	r2, [pc, #616]	; (8001190 <HAL_GPIO_Init+0x2a0>)
 8000f28:	4293      	cmp	r3, r2
 8000f2a:	d05e      	beq.n	8000fea <HAL_GPIO_Init+0xfa>
 8000f2c:	4a98      	ldr	r2, [pc, #608]	; (8001190 <HAL_GPIO_Init+0x2a0>)
 8000f2e:	4293      	cmp	r3, r2
 8000f30:	d875      	bhi.n	800101e <HAL_GPIO_Init+0x12e>
 8000f32:	4a98      	ldr	r2, [pc, #608]	; (8001194 <HAL_GPIO_Init+0x2a4>)
 8000f34:	4293      	cmp	r3, r2
 8000f36:	d058      	beq.n	8000fea <HAL_GPIO_Init+0xfa>
 8000f38:	4a96      	ldr	r2, [pc, #600]	; (8001194 <HAL_GPIO_Init+0x2a4>)
 8000f3a:	4293      	cmp	r3, r2
 8000f3c:	d86f      	bhi.n	800101e <HAL_GPIO_Init+0x12e>
 8000f3e:	4a96      	ldr	r2, [pc, #600]	; (8001198 <HAL_GPIO_Init+0x2a8>)
 8000f40:	4293      	cmp	r3, r2
 8000f42:	d052      	beq.n	8000fea <HAL_GPIO_Init+0xfa>
 8000f44:	4a94      	ldr	r2, [pc, #592]	; (8001198 <HAL_GPIO_Init+0x2a8>)
 8000f46:	4293      	cmp	r3, r2
 8000f48:	d869      	bhi.n	800101e <HAL_GPIO_Init+0x12e>
 8000f4a:	4a94      	ldr	r2, [pc, #592]	; (800119c <HAL_GPIO_Init+0x2ac>)
 8000f4c:	4293      	cmp	r3, r2
 8000f4e:	d04c      	beq.n	8000fea <HAL_GPIO_Init+0xfa>
 8000f50:	4a92      	ldr	r2, [pc, #584]	; (800119c <HAL_GPIO_Init+0x2ac>)
 8000f52:	4293      	cmp	r3, r2
 8000f54:	d863      	bhi.n	800101e <HAL_GPIO_Init+0x12e>
 8000f56:	4a92      	ldr	r2, [pc, #584]	; (80011a0 <HAL_GPIO_Init+0x2b0>)
 8000f58:	4293      	cmp	r3, r2
 8000f5a:	d046      	beq.n	8000fea <HAL_GPIO_Init+0xfa>
 8000f5c:	4a90      	ldr	r2, [pc, #576]	; (80011a0 <HAL_GPIO_Init+0x2b0>)
 8000f5e:	4293      	cmp	r3, r2
 8000f60:	d85d      	bhi.n	800101e <HAL_GPIO_Init+0x12e>
 8000f62:	2b12      	cmp	r3, #18
 8000f64:	d82a      	bhi.n	8000fbc <HAL_GPIO_Init+0xcc>
 8000f66:	2b12      	cmp	r3, #18
 8000f68:	d859      	bhi.n	800101e <HAL_GPIO_Init+0x12e>
 8000f6a:	a201      	add	r2, pc, #4	; (adr r2, 8000f70 <HAL_GPIO_Init+0x80>)
 8000f6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f70:	08000feb 	.word	0x08000feb
 8000f74:	08000fc5 	.word	0x08000fc5
 8000f78:	08000fd7 	.word	0x08000fd7
 8000f7c:	08001019 	.word	0x08001019
 8000f80:	0800101f 	.word	0x0800101f
 8000f84:	0800101f 	.word	0x0800101f
 8000f88:	0800101f 	.word	0x0800101f
 8000f8c:	0800101f 	.word	0x0800101f
 8000f90:	0800101f 	.word	0x0800101f
 8000f94:	0800101f 	.word	0x0800101f
 8000f98:	0800101f 	.word	0x0800101f
 8000f9c:	0800101f 	.word	0x0800101f
 8000fa0:	0800101f 	.word	0x0800101f
 8000fa4:	0800101f 	.word	0x0800101f
 8000fa8:	0800101f 	.word	0x0800101f
 8000fac:	0800101f 	.word	0x0800101f
 8000fb0:	0800101f 	.word	0x0800101f
 8000fb4:	08000fcd 	.word	0x08000fcd
 8000fb8:	08000fe1 	.word	0x08000fe1
 8000fbc:	4a79      	ldr	r2, [pc, #484]	; (80011a4 <HAL_GPIO_Init+0x2b4>)
 8000fbe:	4293      	cmp	r3, r2
 8000fc0:	d013      	beq.n	8000fea <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000fc2:	e02c      	b.n	800101e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000fc4:	683b      	ldr	r3, [r7, #0]
 8000fc6:	68db      	ldr	r3, [r3, #12]
 8000fc8:	623b      	str	r3, [r7, #32]
          break;
 8000fca:	e029      	b.n	8001020 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000fcc:	683b      	ldr	r3, [r7, #0]
 8000fce:	68db      	ldr	r3, [r3, #12]
 8000fd0:	3304      	adds	r3, #4
 8000fd2:	623b      	str	r3, [r7, #32]
          break;
 8000fd4:	e024      	b.n	8001020 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000fd6:	683b      	ldr	r3, [r7, #0]
 8000fd8:	68db      	ldr	r3, [r3, #12]
 8000fda:	3308      	adds	r3, #8
 8000fdc:	623b      	str	r3, [r7, #32]
          break;
 8000fde:	e01f      	b.n	8001020 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000fe0:	683b      	ldr	r3, [r7, #0]
 8000fe2:	68db      	ldr	r3, [r3, #12]
 8000fe4:	330c      	adds	r3, #12
 8000fe6:	623b      	str	r3, [r7, #32]
          break;
 8000fe8:	e01a      	b.n	8001020 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000fea:	683b      	ldr	r3, [r7, #0]
 8000fec:	689b      	ldr	r3, [r3, #8]
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d102      	bne.n	8000ff8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000ff2:	2304      	movs	r3, #4
 8000ff4:	623b      	str	r3, [r7, #32]
          break;
 8000ff6:	e013      	b.n	8001020 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000ff8:	683b      	ldr	r3, [r7, #0]
 8000ffa:	689b      	ldr	r3, [r3, #8]
 8000ffc:	2b01      	cmp	r3, #1
 8000ffe:	d105      	bne.n	800100c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001000:	2308      	movs	r3, #8
 8001002:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	69fa      	ldr	r2, [r7, #28]
 8001008:	611a      	str	r2, [r3, #16]
          break;
 800100a:	e009      	b.n	8001020 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800100c:	2308      	movs	r3, #8
 800100e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	69fa      	ldr	r2, [r7, #28]
 8001014:	615a      	str	r2, [r3, #20]
          break;
 8001016:	e003      	b.n	8001020 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001018:	2300      	movs	r3, #0
 800101a:	623b      	str	r3, [r7, #32]
          break;
 800101c:	e000      	b.n	8001020 <HAL_GPIO_Init+0x130>
          break;
 800101e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001020:	69bb      	ldr	r3, [r7, #24]
 8001022:	2bff      	cmp	r3, #255	; 0xff
 8001024:	d801      	bhi.n	800102a <HAL_GPIO_Init+0x13a>
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	e001      	b.n	800102e <HAL_GPIO_Init+0x13e>
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	3304      	adds	r3, #4
 800102e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001030:	69bb      	ldr	r3, [r7, #24]
 8001032:	2bff      	cmp	r3, #255	; 0xff
 8001034:	d802      	bhi.n	800103c <HAL_GPIO_Init+0x14c>
 8001036:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001038:	009b      	lsls	r3, r3, #2
 800103a:	e002      	b.n	8001042 <HAL_GPIO_Init+0x152>
 800103c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800103e:	3b08      	subs	r3, #8
 8001040:	009b      	lsls	r3, r3, #2
 8001042:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001044:	697b      	ldr	r3, [r7, #20]
 8001046:	681a      	ldr	r2, [r3, #0]
 8001048:	210f      	movs	r1, #15
 800104a:	693b      	ldr	r3, [r7, #16]
 800104c:	fa01 f303 	lsl.w	r3, r1, r3
 8001050:	43db      	mvns	r3, r3
 8001052:	401a      	ands	r2, r3
 8001054:	6a39      	ldr	r1, [r7, #32]
 8001056:	693b      	ldr	r3, [r7, #16]
 8001058:	fa01 f303 	lsl.w	r3, r1, r3
 800105c:	431a      	orrs	r2, r3
 800105e:	697b      	ldr	r3, [r7, #20]
 8001060:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001062:	683b      	ldr	r3, [r7, #0]
 8001064:	685b      	ldr	r3, [r3, #4]
 8001066:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800106a:	2b00      	cmp	r3, #0
 800106c:	f000 80b1 	beq.w	80011d2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001070:	4b4d      	ldr	r3, [pc, #308]	; (80011a8 <HAL_GPIO_Init+0x2b8>)
 8001072:	699b      	ldr	r3, [r3, #24]
 8001074:	4a4c      	ldr	r2, [pc, #304]	; (80011a8 <HAL_GPIO_Init+0x2b8>)
 8001076:	f043 0301 	orr.w	r3, r3, #1
 800107a:	6193      	str	r3, [r2, #24]
 800107c:	4b4a      	ldr	r3, [pc, #296]	; (80011a8 <HAL_GPIO_Init+0x2b8>)
 800107e:	699b      	ldr	r3, [r3, #24]
 8001080:	f003 0301 	and.w	r3, r3, #1
 8001084:	60bb      	str	r3, [r7, #8]
 8001086:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001088:	4a48      	ldr	r2, [pc, #288]	; (80011ac <HAL_GPIO_Init+0x2bc>)
 800108a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800108c:	089b      	lsrs	r3, r3, #2
 800108e:	3302      	adds	r3, #2
 8001090:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001094:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001096:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001098:	f003 0303 	and.w	r3, r3, #3
 800109c:	009b      	lsls	r3, r3, #2
 800109e:	220f      	movs	r2, #15
 80010a0:	fa02 f303 	lsl.w	r3, r2, r3
 80010a4:	43db      	mvns	r3, r3
 80010a6:	68fa      	ldr	r2, [r7, #12]
 80010a8:	4013      	ands	r3, r2
 80010aa:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	4a40      	ldr	r2, [pc, #256]	; (80011b0 <HAL_GPIO_Init+0x2c0>)
 80010b0:	4293      	cmp	r3, r2
 80010b2:	d013      	beq.n	80010dc <HAL_GPIO_Init+0x1ec>
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	4a3f      	ldr	r2, [pc, #252]	; (80011b4 <HAL_GPIO_Init+0x2c4>)
 80010b8:	4293      	cmp	r3, r2
 80010ba:	d00d      	beq.n	80010d8 <HAL_GPIO_Init+0x1e8>
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	4a3e      	ldr	r2, [pc, #248]	; (80011b8 <HAL_GPIO_Init+0x2c8>)
 80010c0:	4293      	cmp	r3, r2
 80010c2:	d007      	beq.n	80010d4 <HAL_GPIO_Init+0x1e4>
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	4a3d      	ldr	r2, [pc, #244]	; (80011bc <HAL_GPIO_Init+0x2cc>)
 80010c8:	4293      	cmp	r3, r2
 80010ca:	d101      	bne.n	80010d0 <HAL_GPIO_Init+0x1e0>
 80010cc:	2303      	movs	r3, #3
 80010ce:	e006      	b.n	80010de <HAL_GPIO_Init+0x1ee>
 80010d0:	2304      	movs	r3, #4
 80010d2:	e004      	b.n	80010de <HAL_GPIO_Init+0x1ee>
 80010d4:	2302      	movs	r3, #2
 80010d6:	e002      	b.n	80010de <HAL_GPIO_Init+0x1ee>
 80010d8:	2301      	movs	r3, #1
 80010da:	e000      	b.n	80010de <HAL_GPIO_Init+0x1ee>
 80010dc:	2300      	movs	r3, #0
 80010de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80010e0:	f002 0203 	and.w	r2, r2, #3
 80010e4:	0092      	lsls	r2, r2, #2
 80010e6:	4093      	lsls	r3, r2
 80010e8:	68fa      	ldr	r2, [r7, #12]
 80010ea:	4313      	orrs	r3, r2
 80010ec:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80010ee:	492f      	ldr	r1, [pc, #188]	; (80011ac <HAL_GPIO_Init+0x2bc>)
 80010f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010f2:	089b      	lsrs	r3, r3, #2
 80010f4:	3302      	adds	r3, #2
 80010f6:	68fa      	ldr	r2, [r7, #12]
 80010f8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80010fc:	683b      	ldr	r3, [r7, #0]
 80010fe:	685b      	ldr	r3, [r3, #4]
 8001100:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001104:	2b00      	cmp	r3, #0
 8001106:	d006      	beq.n	8001116 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001108:	4b2d      	ldr	r3, [pc, #180]	; (80011c0 <HAL_GPIO_Init+0x2d0>)
 800110a:	681a      	ldr	r2, [r3, #0]
 800110c:	492c      	ldr	r1, [pc, #176]	; (80011c0 <HAL_GPIO_Init+0x2d0>)
 800110e:	69bb      	ldr	r3, [r7, #24]
 8001110:	4313      	orrs	r3, r2
 8001112:	600b      	str	r3, [r1, #0]
 8001114:	e006      	b.n	8001124 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001116:	4b2a      	ldr	r3, [pc, #168]	; (80011c0 <HAL_GPIO_Init+0x2d0>)
 8001118:	681a      	ldr	r2, [r3, #0]
 800111a:	69bb      	ldr	r3, [r7, #24]
 800111c:	43db      	mvns	r3, r3
 800111e:	4928      	ldr	r1, [pc, #160]	; (80011c0 <HAL_GPIO_Init+0x2d0>)
 8001120:	4013      	ands	r3, r2
 8001122:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001124:	683b      	ldr	r3, [r7, #0]
 8001126:	685b      	ldr	r3, [r3, #4]
 8001128:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800112c:	2b00      	cmp	r3, #0
 800112e:	d006      	beq.n	800113e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001130:	4b23      	ldr	r3, [pc, #140]	; (80011c0 <HAL_GPIO_Init+0x2d0>)
 8001132:	685a      	ldr	r2, [r3, #4]
 8001134:	4922      	ldr	r1, [pc, #136]	; (80011c0 <HAL_GPIO_Init+0x2d0>)
 8001136:	69bb      	ldr	r3, [r7, #24]
 8001138:	4313      	orrs	r3, r2
 800113a:	604b      	str	r3, [r1, #4]
 800113c:	e006      	b.n	800114c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800113e:	4b20      	ldr	r3, [pc, #128]	; (80011c0 <HAL_GPIO_Init+0x2d0>)
 8001140:	685a      	ldr	r2, [r3, #4]
 8001142:	69bb      	ldr	r3, [r7, #24]
 8001144:	43db      	mvns	r3, r3
 8001146:	491e      	ldr	r1, [pc, #120]	; (80011c0 <HAL_GPIO_Init+0x2d0>)
 8001148:	4013      	ands	r3, r2
 800114a:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800114c:	683b      	ldr	r3, [r7, #0]
 800114e:	685b      	ldr	r3, [r3, #4]
 8001150:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001154:	2b00      	cmp	r3, #0
 8001156:	d006      	beq.n	8001166 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001158:	4b19      	ldr	r3, [pc, #100]	; (80011c0 <HAL_GPIO_Init+0x2d0>)
 800115a:	689a      	ldr	r2, [r3, #8]
 800115c:	4918      	ldr	r1, [pc, #96]	; (80011c0 <HAL_GPIO_Init+0x2d0>)
 800115e:	69bb      	ldr	r3, [r7, #24]
 8001160:	4313      	orrs	r3, r2
 8001162:	608b      	str	r3, [r1, #8]
 8001164:	e006      	b.n	8001174 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001166:	4b16      	ldr	r3, [pc, #88]	; (80011c0 <HAL_GPIO_Init+0x2d0>)
 8001168:	689a      	ldr	r2, [r3, #8]
 800116a:	69bb      	ldr	r3, [r7, #24]
 800116c:	43db      	mvns	r3, r3
 800116e:	4914      	ldr	r1, [pc, #80]	; (80011c0 <HAL_GPIO_Init+0x2d0>)
 8001170:	4013      	ands	r3, r2
 8001172:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001174:	683b      	ldr	r3, [r7, #0]
 8001176:	685b      	ldr	r3, [r3, #4]
 8001178:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800117c:	2b00      	cmp	r3, #0
 800117e:	d021      	beq.n	80011c4 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001180:	4b0f      	ldr	r3, [pc, #60]	; (80011c0 <HAL_GPIO_Init+0x2d0>)
 8001182:	68da      	ldr	r2, [r3, #12]
 8001184:	490e      	ldr	r1, [pc, #56]	; (80011c0 <HAL_GPIO_Init+0x2d0>)
 8001186:	69bb      	ldr	r3, [r7, #24]
 8001188:	4313      	orrs	r3, r2
 800118a:	60cb      	str	r3, [r1, #12]
 800118c:	e021      	b.n	80011d2 <HAL_GPIO_Init+0x2e2>
 800118e:	bf00      	nop
 8001190:	10320000 	.word	0x10320000
 8001194:	10310000 	.word	0x10310000
 8001198:	10220000 	.word	0x10220000
 800119c:	10210000 	.word	0x10210000
 80011a0:	10120000 	.word	0x10120000
 80011a4:	10110000 	.word	0x10110000
 80011a8:	40021000 	.word	0x40021000
 80011ac:	40010000 	.word	0x40010000
 80011b0:	40010800 	.word	0x40010800
 80011b4:	40010c00 	.word	0x40010c00
 80011b8:	40011000 	.word	0x40011000
 80011bc:	40011400 	.word	0x40011400
 80011c0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80011c4:	4b0b      	ldr	r3, [pc, #44]	; (80011f4 <HAL_GPIO_Init+0x304>)
 80011c6:	68da      	ldr	r2, [r3, #12]
 80011c8:	69bb      	ldr	r3, [r7, #24]
 80011ca:	43db      	mvns	r3, r3
 80011cc:	4909      	ldr	r1, [pc, #36]	; (80011f4 <HAL_GPIO_Init+0x304>)
 80011ce:	4013      	ands	r3, r2
 80011d0:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80011d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011d4:	3301      	adds	r3, #1
 80011d6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80011d8:	683b      	ldr	r3, [r7, #0]
 80011da:	681a      	ldr	r2, [r3, #0]
 80011dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011de:	fa22 f303 	lsr.w	r3, r2, r3
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	f47f ae8e 	bne.w	8000f04 <HAL_GPIO_Init+0x14>
  }
}
 80011e8:	bf00      	nop
 80011ea:	bf00      	nop
 80011ec:	372c      	adds	r7, #44	; 0x2c
 80011ee:	46bd      	mov	sp, r7
 80011f0:	bc80      	pop	{r7}
 80011f2:	4770      	bx	lr
 80011f4:	40010400 	.word	0x40010400

080011f8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80011f8:	b480      	push	{r7}
 80011fa:	b083      	sub	sp, #12
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	6078      	str	r0, [r7, #4]
 8001200:	460b      	mov	r3, r1
 8001202:	807b      	strh	r3, [r7, #2]
 8001204:	4613      	mov	r3, r2
 8001206:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001208:	787b      	ldrb	r3, [r7, #1]
 800120a:	2b00      	cmp	r3, #0
 800120c:	d003      	beq.n	8001216 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800120e:	887a      	ldrh	r2, [r7, #2]
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001214:	e003      	b.n	800121e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001216:	887b      	ldrh	r3, [r7, #2]
 8001218:	041a      	lsls	r2, r3, #16
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	611a      	str	r2, [r3, #16]
}
 800121e:	bf00      	nop
 8001220:	370c      	adds	r7, #12
 8001222:	46bd      	mov	sp, r7
 8001224:	bc80      	pop	{r7}
 8001226:	4770      	bx	lr

08001228 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	b086      	sub	sp, #24
 800122c:	af00      	add	r7, sp, #0
 800122e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	2b00      	cmp	r3, #0
 8001234:	d101      	bne.n	800123a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001236:	2301      	movs	r3, #1
 8001238:	e272      	b.n	8001720 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	f003 0301 	and.w	r3, r3, #1
 8001242:	2b00      	cmp	r3, #0
 8001244:	f000 8087 	beq.w	8001356 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001248:	4b92      	ldr	r3, [pc, #584]	; (8001494 <HAL_RCC_OscConfig+0x26c>)
 800124a:	685b      	ldr	r3, [r3, #4]
 800124c:	f003 030c 	and.w	r3, r3, #12
 8001250:	2b04      	cmp	r3, #4
 8001252:	d00c      	beq.n	800126e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001254:	4b8f      	ldr	r3, [pc, #572]	; (8001494 <HAL_RCC_OscConfig+0x26c>)
 8001256:	685b      	ldr	r3, [r3, #4]
 8001258:	f003 030c 	and.w	r3, r3, #12
 800125c:	2b08      	cmp	r3, #8
 800125e:	d112      	bne.n	8001286 <HAL_RCC_OscConfig+0x5e>
 8001260:	4b8c      	ldr	r3, [pc, #560]	; (8001494 <HAL_RCC_OscConfig+0x26c>)
 8001262:	685b      	ldr	r3, [r3, #4]
 8001264:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001268:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800126c:	d10b      	bne.n	8001286 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800126e:	4b89      	ldr	r3, [pc, #548]	; (8001494 <HAL_RCC_OscConfig+0x26c>)
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001276:	2b00      	cmp	r3, #0
 8001278:	d06c      	beq.n	8001354 <HAL_RCC_OscConfig+0x12c>
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	685b      	ldr	r3, [r3, #4]
 800127e:	2b00      	cmp	r3, #0
 8001280:	d168      	bne.n	8001354 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001282:	2301      	movs	r3, #1
 8001284:	e24c      	b.n	8001720 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	685b      	ldr	r3, [r3, #4]
 800128a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800128e:	d106      	bne.n	800129e <HAL_RCC_OscConfig+0x76>
 8001290:	4b80      	ldr	r3, [pc, #512]	; (8001494 <HAL_RCC_OscConfig+0x26c>)
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	4a7f      	ldr	r2, [pc, #508]	; (8001494 <HAL_RCC_OscConfig+0x26c>)
 8001296:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800129a:	6013      	str	r3, [r2, #0]
 800129c:	e02e      	b.n	80012fc <HAL_RCC_OscConfig+0xd4>
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	685b      	ldr	r3, [r3, #4]
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d10c      	bne.n	80012c0 <HAL_RCC_OscConfig+0x98>
 80012a6:	4b7b      	ldr	r3, [pc, #492]	; (8001494 <HAL_RCC_OscConfig+0x26c>)
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	4a7a      	ldr	r2, [pc, #488]	; (8001494 <HAL_RCC_OscConfig+0x26c>)
 80012ac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80012b0:	6013      	str	r3, [r2, #0]
 80012b2:	4b78      	ldr	r3, [pc, #480]	; (8001494 <HAL_RCC_OscConfig+0x26c>)
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	4a77      	ldr	r2, [pc, #476]	; (8001494 <HAL_RCC_OscConfig+0x26c>)
 80012b8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80012bc:	6013      	str	r3, [r2, #0]
 80012be:	e01d      	b.n	80012fc <HAL_RCC_OscConfig+0xd4>
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	685b      	ldr	r3, [r3, #4]
 80012c4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80012c8:	d10c      	bne.n	80012e4 <HAL_RCC_OscConfig+0xbc>
 80012ca:	4b72      	ldr	r3, [pc, #456]	; (8001494 <HAL_RCC_OscConfig+0x26c>)
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	4a71      	ldr	r2, [pc, #452]	; (8001494 <HAL_RCC_OscConfig+0x26c>)
 80012d0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80012d4:	6013      	str	r3, [r2, #0]
 80012d6:	4b6f      	ldr	r3, [pc, #444]	; (8001494 <HAL_RCC_OscConfig+0x26c>)
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	4a6e      	ldr	r2, [pc, #440]	; (8001494 <HAL_RCC_OscConfig+0x26c>)
 80012dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80012e0:	6013      	str	r3, [r2, #0]
 80012e2:	e00b      	b.n	80012fc <HAL_RCC_OscConfig+0xd4>
 80012e4:	4b6b      	ldr	r3, [pc, #428]	; (8001494 <HAL_RCC_OscConfig+0x26c>)
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	4a6a      	ldr	r2, [pc, #424]	; (8001494 <HAL_RCC_OscConfig+0x26c>)
 80012ea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80012ee:	6013      	str	r3, [r2, #0]
 80012f0:	4b68      	ldr	r3, [pc, #416]	; (8001494 <HAL_RCC_OscConfig+0x26c>)
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	4a67      	ldr	r2, [pc, #412]	; (8001494 <HAL_RCC_OscConfig+0x26c>)
 80012f6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80012fa:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	685b      	ldr	r3, [r3, #4]
 8001300:	2b00      	cmp	r3, #0
 8001302:	d013      	beq.n	800132c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001304:	f7ff fc36 	bl	8000b74 <HAL_GetTick>
 8001308:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800130a:	e008      	b.n	800131e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800130c:	f7ff fc32 	bl	8000b74 <HAL_GetTick>
 8001310:	4602      	mov	r2, r0
 8001312:	693b      	ldr	r3, [r7, #16]
 8001314:	1ad3      	subs	r3, r2, r3
 8001316:	2b64      	cmp	r3, #100	; 0x64
 8001318:	d901      	bls.n	800131e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800131a:	2303      	movs	r3, #3
 800131c:	e200      	b.n	8001720 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800131e:	4b5d      	ldr	r3, [pc, #372]	; (8001494 <HAL_RCC_OscConfig+0x26c>)
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001326:	2b00      	cmp	r3, #0
 8001328:	d0f0      	beq.n	800130c <HAL_RCC_OscConfig+0xe4>
 800132a:	e014      	b.n	8001356 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800132c:	f7ff fc22 	bl	8000b74 <HAL_GetTick>
 8001330:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001332:	e008      	b.n	8001346 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001334:	f7ff fc1e 	bl	8000b74 <HAL_GetTick>
 8001338:	4602      	mov	r2, r0
 800133a:	693b      	ldr	r3, [r7, #16]
 800133c:	1ad3      	subs	r3, r2, r3
 800133e:	2b64      	cmp	r3, #100	; 0x64
 8001340:	d901      	bls.n	8001346 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001342:	2303      	movs	r3, #3
 8001344:	e1ec      	b.n	8001720 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001346:	4b53      	ldr	r3, [pc, #332]	; (8001494 <HAL_RCC_OscConfig+0x26c>)
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800134e:	2b00      	cmp	r3, #0
 8001350:	d1f0      	bne.n	8001334 <HAL_RCC_OscConfig+0x10c>
 8001352:	e000      	b.n	8001356 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001354:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	f003 0302 	and.w	r3, r3, #2
 800135e:	2b00      	cmp	r3, #0
 8001360:	d063      	beq.n	800142a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001362:	4b4c      	ldr	r3, [pc, #304]	; (8001494 <HAL_RCC_OscConfig+0x26c>)
 8001364:	685b      	ldr	r3, [r3, #4]
 8001366:	f003 030c 	and.w	r3, r3, #12
 800136a:	2b00      	cmp	r3, #0
 800136c:	d00b      	beq.n	8001386 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800136e:	4b49      	ldr	r3, [pc, #292]	; (8001494 <HAL_RCC_OscConfig+0x26c>)
 8001370:	685b      	ldr	r3, [r3, #4]
 8001372:	f003 030c 	and.w	r3, r3, #12
 8001376:	2b08      	cmp	r3, #8
 8001378:	d11c      	bne.n	80013b4 <HAL_RCC_OscConfig+0x18c>
 800137a:	4b46      	ldr	r3, [pc, #280]	; (8001494 <HAL_RCC_OscConfig+0x26c>)
 800137c:	685b      	ldr	r3, [r3, #4]
 800137e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001382:	2b00      	cmp	r3, #0
 8001384:	d116      	bne.n	80013b4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001386:	4b43      	ldr	r3, [pc, #268]	; (8001494 <HAL_RCC_OscConfig+0x26c>)
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	f003 0302 	and.w	r3, r3, #2
 800138e:	2b00      	cmp	r3, #0
 8001390:	d005      	beq.n	800139e <HAL_RCC_OscConfig+0x176>
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	691b      	ldr	r3, [r3, #16]
 8001396:	2b01      	cmp	r3, #1
 8001398:	d001      	beq.n	800139e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800139a:	2301      	movs	r3, #1
 800139c:	e1c0      	b.n	8001720 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800139e:	4b3d      	ldr	r3, [pc, #244]	; (8001494 <HAL_RCC_OscConfig+0x26c>)
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	695b      	ldr	r3, [r3, #20]
 80013aa:	00db      	lsls	r3, r3, #3
 80013ac:	4939      	ldr	r1, [pc, #228]	; (8001494 <HAL_RCC_OscConfig+0x26c>)
 80013ae:	4313      	orrs	r3, r2
 80013b0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80013b2:	e03a      	b.n	800142a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	691b      	ldr	r3, [r3, #16]
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d020      	beq.n	80013fe <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80013bc:	4b36      	ldr	r3, [pc, #216]	; (8001498 <HAL_RCC_OscConfig+0x270>)
 80013be:	2201      	movs	r2, #1
 80013c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013c2:	f7ff fbd7 	bl	8000b74 <HAL_GetTick>
 80013c6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013c8:	e008      	b.n	80013dc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80013ca:	f7ff fbd3 	bl	8000b74 <HAL_GetTick>
 80013ce:	4602      	mov	r2, r0
 80013d0:	693b      	ldr	r3, [r7, #16]
 80013d2:	1ad3      	subs	r3, r2, r3
 80013d4:	2b02      	cmp	r3, #2
 80013d6:	d901      	bls.n	80013dc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80013d8:	2303      	movs	r3, #3
 80013da:	e1a1      	b.n	8001720 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013dc:	4b2d      	ldr	r3, [pc, #180]	; (8001494 <HAL_RCC_OscConfig+0x26c>)
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	f003 0302 	and.w	r3, r3, #2
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d0f0      	beq.n	80013ca <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013e8:	4b2a      	ldr	r3, [pc, #168]	; (8001494 <HAL_RCC_OscConfig+0x26c>)
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	695b      	ldr	r3, [r3, #20]
 80013f4:	00db      	lsls	r3, r3, #3
 80013f6:	4927      	ldr	r1, [pc, #156]	; (8001494 <HAL_RCC_OscConfig+0x26c>)
 80013f8:	4313      	orrs	r3, r2
 80013fa:	600b      	str	r3, [r1, #0]
 80013fc:	e015      	b.n	800142a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80013fe:	4b26      	ldr	r3, [pc, #152]	; (8001498 <HAL_RCC_OscConfig+0x270>)
 8001400:	2200      	movs	r2, #0
 8001402:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001404:	f7ff fbb6 	bl	8000b74 <HAL_GetTick>
 8001408:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800140a:	e008      	b.n	800141e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800140c:	f7ff fbb2 	bl	8000b74 <HAL_GetTick>
 8001410:	4602      	mov	r2, r0
 8001412:	693b      	ldr	r3, [r7, #16]
 8001414:	1ad3      	subs	r3, r2, r3
 8001416:	2b02      	cmp	r3, #2
 8001418:	d901      	bls.n	800141e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800141a:	2303      	movs	r3, #3
 800141c:	e180      	b.n	8001720 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800141e:	4b1d      	ldr	r3, [pc, #116]	; (8001494 <HAL_RCC_OscConfig+0x26c>)
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	f003 0302 	and.w	r3, r3, #2
 8001426:	2b00      	cmp	r3, #0
 8001428:	d1f0      	bne.n	800140c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	f003 0308 	and.w	r3, r3, #8
 8001432:	2b00      	cmp	r3, #0
 8001434:	d03a      	beq.n	80014ac <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	699b      	ldr	r3, [r3, #24]
 800143a:	2b00      	cmp	r3, #0
 800143c:	d019      	beq.n	8001472 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800143e:	4b17      	ldr	r3, [pc, #92]	; (800149c <HAL_RCC_OscConfig+0x274>)
 8001440:	2201      	movs	r2, #1
 8001442:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001444:	f7ff fb96 	bl	8000b74 <HAL_GetTick>
 8001448:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800144a:	e008      	b.n	800145e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800144c:	f7ff fb92 	bl	8000b74 <HAL_GetTick>
 8001450:	4602      	mov	r2, r0
 8001452:	693b      	ldr	r3, [r7, #16]
 8001454:	1ad3      	subs	r3, r2, r3
 8001456:	2b02      	cmp	r3, #2
 8001458:	d901      	bls.n	800145e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800145a:	2303      	movs	r3, #3
 800145c:	e160      	b.n	8001720 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800145e:	4b0d      	ldr	r3, [pc, #52]	; (8001494 <HAL_RCC_OscConfig+0x26c>)
 8001460:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001462:	f003 0302 	and.w	r3, r3, #2
 8001466:	2b00      	cmp	r3, #0
 8001468:	d0f0      	beq.n	800144c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800146a:	2001      	movs	r0, #1
 800146c:	f000 fb40 	bl	8001af0 <RCC_Delay>
 8001470:	e01c      	b.n	80014ac <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001472:	4b0a      	ldr	r3, [pc, #40]	; (800149c <HAL_RCC_OscConfig+0x274>)
 8001474:	2200      	movs	r2, #0
 8001476:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001478:	f7ff fb7c 	bl	8000b74 <HAL_GetTick>
 800147c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800147e:	e00f      	b.n	80014a0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001480:	f7ff fb78 	bl	8000b74 <HAL_GetTick>
 8001484:	4602      	mov	r2, r0
 8001486:	693b      	ldr	r3, [r7, #16]
 8001488:	1ad3      	subs	r3, r2, r3
 800148a:	2b02      	cmp	r3, #2
 800148c:	d908      	bls.n	80014a0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800148e:	2303      	movs	r3, #3
 8001490:	e146      	b.n	8001720 <HAL_RCC_OscConfig+0x4f8>
 8001492:	bf00      	nop
 8001494:	40021000 	.word	0x40021000
 8001498:	42420000 	.word	0x42420000
 800149c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80014a0:	4b92      	ldr	r3, [pc, #584]	; (80016ec <HAL_RCC_OscConfig+0x4c4>)
 80014a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014a4:	f003 0302 	and.w	r3, r3, #2
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d1e9      	bne.n	8001480 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	f003 0304 	and.w	r3, r3, #4
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	f000 80a6 	beq.w	8001606 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80014ba:	2300      	movs	r3, #0
 80014bc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80014be:	4b8b      	ldr	r3, [pc, #556]	; (80016ec <HAL_RCC_OscConfig+0x4c4>)
 80014c0:	69db      	ldr	r3, [r3, #28]
 80014c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d10d      	bne.n	80014e6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80014ca:	4b88      	ldr	r3, [pc, #544]	; (80016ec <HAL_RCC_OscConfig+0x4c4>)
 80014cc:	69db      	ldr	r3, [r3, #28]
 80014ce:	4a87      	ldr	r2, [pc, #540]	; (80016ec <HAL_RCC_OscConfig+0x4c4>)
 80014d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014d4:	61d3      	str	r3, [r2, #28]
 80014d6:	4b85      	ldr	r3, [pc, #532]	; (80016ec <HAL_RCC_OscConfig+0x4c4>)
 80014d8:	69db      	ldr	r3, [r3, #28]
 80014da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014de:	60bb      	str	r3, [r7, #8]
 80014e0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80014e2:	2301      	movs	r3, #1
 80014e4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014e6:	4b82      	ldr	r3, [pc, #520]	; (80016f0 <HAL_RCC_OscConfig+0x4c8>)
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d118      	bne.n	8001524 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80014f2:	4b7f      	ldr	r3, [pc, #508]	; (80016f0 <HAL_RCC_OscConfig+0x4c8>)
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	4a7e      	ldr	r2, [pc, #504]	; (80016f0 <HAL_RCC_OscConfig+0x4c8>)
 80014f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80014fc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80014fe:	f7ff fb39 	bl	8000b74 <HAL_GetTick>
 8001502:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001504:	e008      	b.n	8001518 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001506:	f7ff fb35 	bl	8000b74 <HAL_GetTick>
 800150a:	4602      	mov	r2, r0
 800150c:	693b      	ldr	r3, [r7, #16]
 800150e:	1ad3      	subs	r3, r2, r3
 8001510:	2b64      	cmp	r3, #100	; 0x64
 8001512:	d901      	bls.n	8001518 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001514:	2303      	movs	r3, #3
 8001516:	e103      	b.n	8001720 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001518:	4b75      	ldr	r3, [pc, #468]	; (80016f0 <HAL_RCC_OscConfig+0x4c8>)
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001520:	2b00      	cmp	r3, #0
 8001522:	d0f0      	beq.n	8001506 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	68db      	ldr	r3, [r3, #12]
 8001528:	2b01      	cmp	r3, #1
 800152a:	d106      	bne.n	800153a <HAL_RCC_OscConfig+0x312>
 800152c:	4b6f      	ldr	r3, [pc, #444]	; (80016ec <HAL_RCC_OscConfig+0x4c4>)
 800152e:	6a1b      	ldr	r3, [r3, #32]
 8001530:	4a6e      	ldr	r2, [pc, #440]	; (80016ec <HAL_RCC_OscConfig+0x4c4>)
 8001532:	f043 0301 	orr.w	r3, r3, #1
 8001536:	6213      	str	r3, [r2, #32]
 8001538:	e02d      	b.n	8001596 <HAL_RCC_OscConfig+0x36e>
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	68db      	ldr	r3, [r3, #12]
 800153e:	2b00      	cmp	r3, #0
 8001540:	d10c      	bne.n	800155c <HAL_RCC_OscConfig+0x334>
 8001542:	4b6a      	ldr	r3, [pc, #424]	; (80016ec <HAL_RCC_OscConfig+0x4c4>)
 8001544:	6a1b      	ldr	r3, [r3, #32]
 8001546:	4a69      	ldr	r2, [pc, #420]	; (80016ec <HAL_RCC_OscConfig+0x4c4>)
 8001548:	f023 0301 	bic.w	r3, r3, #1
 800154c:	6213      	str	r3, [r2, #32]
 800154e:	4b67      	ldr	r3, [pc, #412]	; (80016ec <HAL_RCC_OscConfig+0x4c4>)
 8001550:	6a1b      	ldr	r3, [r3, #32]
 8001552:	4a66      	ldr	r2, [pc, #408]	; (80016ec <HAL_RCC_OscConfig+0x4c4>)
 8001554:	f023 0304 	bic.w	r3, r3, #4
 8001558:	6213      	str	r3, [r2, #32]
 800155a:	e01c      	b.n	8001596 <HAL_RCC_OscConfig+0x36e>
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	68db      	ldr	r3, [r3, #12]
 8001560:	2b05      	cmp	r3, #5
 8001562:	d10c      	bne.n	800157e <HAL_RCC_OscConfig+0x356>
 8001564:	4b61      	ldr	r3, [pc, #388]	; (80016ec <HAL_RCC_OscConfig+0x4c4>)
 8001566:	6a1b      	ldr	r3, [r3, #32]
 8001568:	4a60      	ldr	r2, [pc, #384]	; (80016ec <HAL_RCC_OscConfig+0x4c4>)
 800156a:	f043 0304 	orr.w	r3, r3, #4
 800156e:	6213      	str	r3, [r2, #32]
 8001570:	4b5e      	ldr	r3, [pc, #376]	; (80016ec <HAL_RCC_OscConfig+0x4c4>)
 8001572:	6a1b      	ldr	r3, [r3, #32]
 8001574:	4a5d      	ldr	r2, [pc, #372]	; (80016ec <HAL_RCC_OscConfig+0x4c4>)
 8001576:	f043 0301 	orr.w	r3, r3, #1
 800157a:	6213      	str	r3, [r2, #32]
 800157c:	e00b      	b.n	8001596 <HAL_RCC_OscConfig+0x36e>
 800157e:	4b5b      	ldr	r3, [pc, #364]	; (80016ec <HAL_RCC_OscConfig+0x4c4>)
 8001580:	6a1b      	ldr	r3, [r3, #32]
 8001582:	4a5a      	ldr	r2, [pc, #360]	; (80016ec <HAL_RCC_OscConfig+0x4c4>)
 8001584:	f023 0301 	bic.w	r3, r3, #1
 8001588:	6213      	str	r3, [r2, #32]
 800158a:	4b58      	ldr	r3, [pc, #352]	; (80016ec <HAL_RCC_OscConfig+0x4c4>)
 800158c:	6a1b      	ldr	r3, [r3, #32]
 800158e:	4a57      	ldr	r2, [pc, #348]	; (80016ec <HAL_RCC_OscConfig+0x4c4>)
 8001590:	f023 0304 	bic.w	r3, r3, #4
 8001594:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	68db      	ldr	r3, [r3, #12]
 800159a:	2b00      	cmp	r3, #0
 800159c:	d015      	beq.n	80015ca <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800159e:	f7ff fae9 	bl	8000b74 <HAL_GetTick>
 80015a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80015a4:	e00a      	b.n	80015bc <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80015a6:	f7ff fae5 	bl	8000b74 <HAL_GetTick>
 80015aa:	4602      	mov	r2, r0
 80015ac:	693b      	ldr	r3, [r7, #16]
 80015ae:	1ad3      	subs	r3, r2, r3
 80015b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80015b4:	4293      	cmp	r3, r2
 80015b6:	d901      	bls.n	80015bc <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80015b8:	2303      	movs	r3, #3
 80015ba:	e0b1      	b.n	8001720 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80015bc:	4b4b      	ldr	r3, [pc, #300]	; (80016ec <HAL_RCC_OscConfig+0x4c4>)
 80015be:	6a1b      	ldr	r3, [r3, #32]
 80015c0:	f003 0302 	and.w	r3, r3, #2
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d0ee      	beq.n	80015a6 <HAL_RCC_OscConfig+0x37e>
 80015c8:	e014      	b.n	80015f4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015ca:	f7ff fad3 	bl	8000b74 <HAL_GetTick>
 80015ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80015d0:	e00a      	b.n	80015e8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80015d2:	f7ff facf 	bl	8000b74 <HAL_GetTick>
 80015d6:	4602      	mov	r2, r0
 80015d8:	693b      	ldr	r3, [r7, #16]
 80015da:	1ad3      	subs	r3, r2, r3
 80015dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80015e0:	4293      	cmp	r3, r2
 80015e2:	d901      	bls.n	80015e8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80015e4:	2303      	movs	r3, #3
 80015e6:	e09b      	b.n	8001720 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80015e8:	4b40      	ldr	r3, [pc, #256]	; (80016ec <HAL_RCC_OscConfig+0x4c4>)
 80015ea:	6a1b      	ldr	r3, [r3, #32]
 80015ec:	f003 0302 	and.w	r3, r3, #2
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d1ee      	bne.n	80015d2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80015f4:	7dfb      	ldrb	r3, [r7, #23]
 80015f6:	2b01      	cmp	r3, #1
 80015f8:	d105      	bne.n	8001606 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80015fa:	4b3c      	ldr	r3, [pc, #240]	; (80016ec <HAL_RCC_OscConfig+0x4c4>)
 80015fc:	69db      	ldr	r3, [r3, #28]
 80015fe:	4a3b      	ldr	r2, [pc, #236]	; (80016ec <HAL_RCC_OscConfig+0x4c4>)
 8001600:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001604:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	69db      	ldr	r3, [r3, #28]
 800160a:	2b00      	cmp	r3, #0
 800160c:	f000 8087 	beq.w	800171e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001610:	4b36      	ldr	r3, [pc, #216]	; (80016ec <HAL_RCC_OscConfig+0x4c4>)
 8001612:	685b      	ldr	r3, [r3, #4]
 8001614:	f003 030c 	and.w	r3, r3, #12
 8001618:	2b08      	cmp	r3, #8
 800161a:	d061      	beq.n	80016e0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	69db      	ldr	r3, [r3, #28]
 8001620:	2b02      	cmp	r3, #2
 8001622:	d146      	bne.n	80016b2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001624:	4b33      	ldr	r3, [pc, #204]	; (80016f4 <HAL_RCC_OscConfig+0x4cc>)
 8001626:	2200      	movs	r2, #0
 8001628:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800162a:	f7ff faa3 	bl	8000b74 <HAL_GetTick>
 800162e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001630:	e008      	b.n	8001644 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001632:	f7ff fa9f 	bl	8000b74 <HAL_GetTick>
 8001636:	4602      	mov	r2, r0
 8001638:	693b      	ldr	r3, [r7, #16]
 800163a:	1ad3      	subs	r3, r2, r3
 800163c:	2b02      	cmp	r3, #2
 800163e:	d901      	bls.n	8001644 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001640:	2303      	movs	r3, #3
 8001642:	e06d      	b.n	8001720 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001644:	4b29      	ldr	r3, [pc, #164]	; (80016ec <HAL_RCC_OscConfig+0x4c4>)
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800164c:	2b00      	cmp	r3, #0
 800164e:	d1f0      	bne.n	8001632 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	6a1b      	ldr	r3, [r3, #32]
 8001654:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001658:	d108      	bne.n	800166c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800165a:	4b24      	ldr	r3, [pc, #144]	; (80016ec <HAL_RCC_OscConfig+0x4c4>)
 800165c:	685b      	ldr	r3, [r3, #4]
 800165e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	689b      	ldr	r3, [r3, #8]
 8001666:	4921      	ldr	r1, [pc, #132]	; (80016ec <HAL_RCC_OscConfig+0x4c4>)
 8001668:	4313      	orrs	r3, r2
 800166a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800166c:	4b1f      	ldr	r3, [pc, #124]	; (80016ec <HAL_RCC_OscConfig+0x4c4>)
 800166e:	685b      	ldr	r3, [r3, #4]
 8001670:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	6a19      	ldr	r1, [r3, #32]
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800167c:	430b      	orrs	r3, r1
 800167e:	491b      	ldr	r1, [pc, #108]	; (80016ec <HAL_RCC_OscConfig+0x4c4>)
 8001680:	4313      	orrs	r3, r2
 8001682:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001684:	4b1b      	ldr	r3, [pc, #108]	; (80016f4 <HAL_RCC_OscConfig+0x4cc>)
 8001686:	2201      	movs	r2, #1
 8001688:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800168a:	f7ff fa73 	bl	8000b74 <HAL_GetTick>
 800168e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001690:	e008      	b.n	80016a4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001692:	f7ff fa6f 	bl	8000b74 <HAL_GetTick>
 8001696:	4602      	mov	r2, r0
 8001698:	693b      	ldr	r3, [r7, #16]
 800169a:	1ad3      	subs	r3, r2, r3
 800169c:	2b02      	cmp	r3, #2
 800169e:	d901      	bls.n	80016a4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80016a0:	2303      	movs	r3, #3
 80016a2:	e03d      	b.n	8001720 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80016a4:	4b11      	ldr	r3, [pc, #68]	; (80016ec <HAL_RCC_OscConfig+0x4c4>)
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d0f0      	beq.n	8001692 <HAL_RCC_OscConfig+0x46a>
 80016b0:	e035      	b.n	800171e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80016b2:	4b10      	ldr	r3, [pc, #64]	; (80016f4 <HAL_RCC_OscConfig+0x4cc>)
 80016b4:	2200      	movs	r2, #0
 80016b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016b8:	f7ff fa5c 	bl	8000b74 <HAL_GetTick>
 80016bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80016be:	e008      	b.n	80016d2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80016c0:	f7ff fa58 	bl	8000b74 <HAL_GetTick>
 80016c4:	4602      	mov	r2, r0
 80016c6:	693b      	ldr	r3, [r7, #16]
 80016c8:	1ad3      	subs	r3, r2, r3
 80016ca:	2b02      	cmp	r3, #2
 80016cc:	d901      	bls.n	80016d2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80016ce:	2303      	movs	r3, #3
 80016d0:	e026      	b.n	8001720 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80016d2:	4b06      	ldr	r3, [pc, #24]	; (80016ec <HAL_RCC_OscConfig+0x4c4>)
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d1f0      	bne.n	80016c0 <HAL_RCC_OscConfig+0x498>
 80016de:	e01e      	b.n	800171e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	69db      	ldr	r3, [r3, #28]
 80016e4:	2b01      	cmp	r3, #1
 80016e6:	d107      	bne.n	80016f8 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80016e8:	2301      	movs	r3, #1
 80016ea:	e019      	b.n	8001720 <HAL_RCC_OscConfig+0x4f8>
 80016ec:	40021000 	.word	0x40021000
 80016f0:	40007000 	.word	0x40007000
 80016f4:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80016f8:	4b0b      	ldr	r3, [pc, #44]	; (8001728 <HAL_RCC_OscConfig+0x500>)
 80016fa:	685b      	ldr	r3, [r3, #4]
 80016fc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80016fe:	68fb      	ldr	r3, [r7, #12]
 8001700:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	6a1b      	ldr	r3, [r3, #32]
 8001708:	429a      	cmp	r2, r3
 800170a:	d106      	bne.n	800171a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001716:	429a      	cmp	r2, r3
 8001718:	d001      	beq.n	800171e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800171a:	2301      	movs	r3, #1
 800171c:	e000      	b.n	8001720 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800171e:	2300      	movs	r3, #0
}
 8001720:	4618      	mov	r0, r3
 8001722:	3718      	adds	r7, #24
 8001724:	46bd      	mov	sp, r7
 8001726:	bd80      	pop	{r7, pc}
 8001728:	40021000 	.word	0x40021000

0800172c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800172c:	b580      	push	{r7, lr}
 800172e:	b084      	sub	sp, #16
 8001730:	af00      	add	r7, sp, #0
 8001732:	6078      	str	r0, [r7, #4]
 8001734:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	2b00      	cmp	r3, #0
 800173a:	d101      	bne.n	8001740 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800173c:	2301      	movs	r3, #1
 800173e:	e0d0      	b.n	80018e2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001740:	4b6a      	ldr	r3, [pc, #424]	; (80018ec <HAL_RCC_ClockConfig+0x1c0>)
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	f003 0307 	and.w	r3, r3, #7
 8001748:	683a      	ldr	r2, [r7, #0]
 800174a:	429a      	cmp	r2, r3
 800174c:	d910      	bls.n	8001770 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800174e:	4b67      	ldr	r3, [pc, #412]	; (80018ec <HAL_RCC_ClockConfig+0x1c0>)
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	f023 0207 	bic.w	r2, r3, #7
 8001756:	4965      	ldr	r1, [pc, #404]	; (80018ec <HAL_RCC_ClockConfig+0x1c0>)
 8001758:	683b      	ldr	r3, [r7, #0]
 800175a:	4313      	orrs	r3, r2
 800175c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800175e:	4b63      	ldr	r3, [pc, #396]	; (80018ec <HAL_RCC_ClockConfig+0x1c0>)
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	f003 0307 	and.w	r3, r3, #7
 8001766:	683a      	ldr	r2, [r7, #0]
 8001768:	429a      	cmp	r2, r3
 800176a:	d001      	beq.n	8001770 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800176c:	2301      	movs	r3, #1
 800176e:	e0b8      	b.n	80018e2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	f003 0302 	and.w	r3, r3, #2
 8001778:	2b00      	cmp	r3, #0
 800177a:	d020      	beq.n	80017be <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	f003 0304 	and.w	r3, r3, #4
 8001784:	2b00      	cmp	r3, #0
 8001786:	d005      	beq.n	8001794 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001788:	4b59      	ldr	r3, [pc, #356]	; (80018f0 <HAL_RCC_ClockConfig+0x1c4>)
 800178a:	685b      	ldr	r3, [r3, #4]
 800178c:	4a58      	ldr	r2, [pc, #352]	; (80018f0 <HAL_RCC_ClockConfig+0x1c4>)
 800178e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001792:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	f003 0308 	and.w	r3, r3, #8
 800179c:	2b00      	cmp	r3, #0
 800179e:	d005      	beq.n	80017ac <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80017a0:	4b53      	ldr	r3, [pc, #332]	; (80018f0 <HAL_RCC_ClockConfig+0x1c4>)
 80017a2:	685b      	ldr	r3, [r3, #4]
 80017a4:	4a52      	ldr	r2, [pc, #328]	; (80018f0 <HAL_RCC_ClockConfig+0x1c4>)
 80017a6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80017aa:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80017ac:	4b50      	ldr	r3, [pc, #320]	; (80018f0 <HAL_RCC_ClockConfig+0x1c4>)
 80017ae:	685b      	ldr	r3, [r3, #4]
 80017b0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	689b      	ldr	r3, [r3, #8]
 80017b8:	494d      	ldr	r1, [pc, #308]	; (80018f0 <HAL_RCC_ClockConfig+0x1c4>)
 80017ba:	4313      	orrs	r3, r2
 80017bc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	f003 0301 	and.w	r3, r3, #1
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d040      	beq.n	800184c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	685b      	ldr	r3, [r3, #4]
 80017ce:	2b01      	cmp	r3, #1
 80017d0:	d107      	bne.n	80017e2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017d2:	4b47      	ldr	r3, [pc, #284]	; (80018f0 <HAL_RCC_ClockConfig+0x1c4>)
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d115      	bne.n	800180a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80017de:	2301      	movs	r3, #1
 80017e0:	e07f      	b.n	80018e2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	685b      	ldr	r3, [r3, #4]
 80017e6:	2b02      	cmp	r3, #2
 80017e8:	d107      	bne.n	80017fa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80017ea:	4b41      	ldr	r3, [pc, #260]	; (80018f0 <HAL_RCC_ClockConfig+0x1c4>)
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d109      	bne.n	800180a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80017f6:	2301      	movs	r3, #1
 80017f8:	e073      	b.n	80018e2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017fa:	4b3d      	ldr	r3, [pc, #244]	; (80018f0 <HAL_RCC_ClockConfig+0x1c4>)
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	f003 0302 	and.w	r3, r3, #2
 8001802:	2b00      	cmp	r3, #0
 8001804:	d101      	bne.n	800180a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001806:	2301      	movs	r3, #1
 8001808:	e06b      	b.n	80018e2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800180a:	4b39      	ldr	r3, [pc, #228]	; (80018f0 <HAL_RCC_ClockConfig+0x1c4>)
 800180c:	685b      	ldr	r3, [r3, #4]
 800180e:	f023 0203 	bic.w	r2, r3, #3
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	685b      	ldr	r3, [r3, #4]
 8001816:	4936      	ldr	r1, [pc, #216]	; (80018f0 <HAL_RCC_ClockConfig+0x1c4>)
 8001818:	4313      	orrs	r3, r2
 800181a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800181c:	f7ff f9aa 	bl	8000b74 <HAL_GetTick>
 8001820:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001822:	e00a      	b.n	800183a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001824:	f7ff f9a6 	bl	8000b74 <HAL_GetTick>
 8001828:	4602      	mov	r2, r0
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	1ad3      	subs	r3, r2, r3
 800182e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001832:	4293      	cmp	r3, r2
 8001834:	d901      	bls.n	800183a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001836:	2303      	movs	r3, #3
 8001838:	e053      	b.n	80018e2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800183a:	4b2d      	ldr	r3, [pc, #180]	; (80018f0 <HAL_RCC_ClockConfig+0x1c4>)
 800183c:	685b      	ldr	r3, [r3, #4]
 800183e:	f003 020c 	and.w	r2, r3, #12
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	685b      	ldr	r3, [r3, #4]
 8001846:	009b      	lsls	r3, r3, #2
 8001848:	429a      	cmp	r2, r3
 800184a:	d1eb      	bne.n	8001824 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800184c:	4b27      	ldr	r3, [pc, #156]	; (80018ec <HAL_RCC_ClockConfig+0x1c0>)
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	f003 0307 	and.w	r3, r3, #7
 8001854:	683a      	ldr	r2, [r7, #0]
 8001856:	429a      	cmp	r2, r3
 8001858:	d210      	bcs.n	800187c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800185a:	4b24      	ldr	r3, [pc, #144]	; (80018ec <HAL_RCC_ClockConfig+0x1c0>)
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	f023 0207 	bic.w	r2, r3, #7
 8001862:	4922      	ldr	r1, [pc, #136]	; (80018ec <HAL_RCC_ClockConfig+0x1c0>)
 8001864:	683b      	ldr	r3, [r7, #0]
 8001866:	4313      	orrs	r3, r2
 8001868:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800186a:	4b20      	ldr	r3, [pc, #128]	; (80018ec <HAL_RCC_ClockConfig+0x1c0>)
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	f003 0307 	and.w	r3, r3, #7
 8001872:	683a      	ldr	r2, [r7, #0]
 8001874:	429a      	cmp	r2, r3
 8001876:	d001      	beq.n	800187c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001878:	2301      	movs	r3, #1
 800187a:	e032      	b.n	80018e2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	f003 0304 	and.w	r3, r3, #4
 8001884:	2b00      	cmp	r3, #0
 8001886:	d008      	beq.n	800189a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001888:	4b19      	ldr	r3, [pc, #100]	; (80018f0 <HAL_RCC_ClockConfig+0x1c4>)
 800188a:	685b      	ldr	r3, [r3, #4]
 800188c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	68db      	ldr	r3, [r3, #12]
 8001894:	4916      	ldr	r1, [pc, #88]	; (80018f0 <HAL_RCC_ClockConfig+0x1c4>)
 8001896:	4313      	orrs	r3, r2
 8001898:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	f003 0308 	and.w	r3, r3, #8
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d009      	beq.n	80018ba <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80018a6:	4b12      	ldr	r3, [pc, #72]	; (80018f0 <HAL_RCC_ClockConfig+0x1c4>)
 80018a8:	685b      	ldr	r3, [r3, #4]
 80018aa:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	691b      	ldr	r3, [r3, #16]
 80018b2:	00db      	lsls	r3, r3, #3
 80018b4:	490e      	ldr	r1, [pc, #56]	; (80018f0 <HAL_RCC_ClockConfig+0x1c4>)
 80018b6:	4313      	orrs	r3, r2
 80018b8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80018ba:	f000 f859 	bl	8001970 <HAL_RCC_GetSysClockFreq>
 80018be:	4602      	mov	r2, r0
 80018c0:	4b0b      	ldr	r3, [pc, #44]	; (80018f0 <HAL_RCC_ClockConfig+0x1c4>)
 80018c2:	685b      	ldr	r3, [r3, #4]
 80018c4:	091b      	lsrs	r3, r3, #4
 80018c6:	f003 030f 	and.w	r3, r3, #15
 80018ca:	490a      	ldr	r1, [pc, #40]	; (80018f4 <HAL_RCC_ClockConfig+0x1c8>)
 80018cc:	5ccb      	ldrb	r3, [r1, r3]
 80018ce:	fa22 f303 	lsr.w	r3, r2, r3
 80018d2:	4a09      	ldr	r2, [pc, #36]	; (80018f8 <HAL_RCC_ClockConfig+0x1cc>)
 80018d4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80018d6:	4b09      	ldr	r3, [pc, #36]	; (80018fc <HAL_RCC_ClockConfig+0x1d0>)
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	4618      	mov	r0, r3
 80018dc:	f7fe ff68 	bl	80007b0 <HAL_InitTick>

  return HAL_OK;
 80018e0:	2300      	movs	r3, #0
}
 80018e2:	4618      	mov	r0, r3
 80018e4:	3710      	adds	r7, #16
 80018e6:	46bd      	mov	sp, r7
 80018e8:	bd80      	pop	{r7, pc}
 80018ea:	bf00      	nop
 80018ec:	40022000 	.word	0x40022000
 80018f0:	40021000 	.word	0x40021000
 80018f4:	08006ce0 	.word	0x08006ce0
 80018f8:	20000004 	.word	0x20000004
 80018fc:	20000008 	.word	0x20000008

08001900 <HAL_RCC_MCOConfig>:
  *          This parameter can be one of the following values:
  *            @arg @ref RCC_MCODIV_1 no division applied to MCO clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 8001900:	b580      	push	{r7, lr}
 8001902:	b08a      	sub	sp, #40	; 0x28
 8001904:	af00      	add	r7, sp, #0
 8001906:	60f8      	str	r0, [r7, #12]
 8001908:	60b9      	str	r1, [r7, #8]
 800190a:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef gpio = {0U};
 800190c:	f107 0318 	add.w	r3, r7, #24
 8001910:	2200      	movs	r2, #0
 8001912:	601a      	str	r2, [r3, #0]
 8001914:	605a      	str	r2, [r3, #4]
 8001916:	609a      	str	r2, [r3, #8]
 8001918:	60da      	str	r2, [r3, #12]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(RCC_MCOx);
  UNUSED(RCC_MCODiv);

  /* Configure the MCO1 pin in alternate function mode */
  gpio.Mode      = GPIO_MODE_AF_PP;
 800191a:	2302      	movs	r3, #2
 800191c:	61fb      	str	r3, [r7, #28]
  gpio.Speed     = GPIO_SPEED_FREQ_HIGH;
 800191e:	2303      	movs	r3, #3
 8001920:	627b      	str	r3, [r7, #36]	; 0x24
  gpio.Pull      = GPIO_NOPULL;
 8001922:	2300      	movs	r3, #0
 8001924:	623b      	str	r3, [r7, #32]
  gpio.Pin       = MCO1_PIN;
 8001926:	f44f 7380 	mov.w	r3, #256	; 0x100
 800192a:	61bb      	str	r3, [r7, #24]

  /* MCO1 Clock Enable */
  MCO1_CLK_ENABLE();
 800192c:	4b0e      	ldr	r3, [pc, #56]	; (8001968 <HAL_RCC_MCOConfig+0x68>)
 800192e:	699b      	ldr	r3, [r3, #24]
 8001930:	4a0d      	ldr	r2, [pc, #52]	; (8001968 <HAL_RCC_MCOConfig+0x68>)
 8001932:	f043 0304 	orr.w	r3, r3, #4
 8001936:	6193      	str	r3, [r2, #24]
 8001938:	4b0b      	ldr	r3, [pc, #44]	; (8001968 <HAL_RCC_MCOConfig+0x68>)
 800193a:	699b      	ldr	r3, [r3, #24]
 800193c:	f003 0304 	and.w	r3, r3, #4
 8001940:	617b      	str	r3, [r7, #20]
 8001942:	697b      	ldr	r3, [r7, #20]

  HAL_GPIO_Init(MCO1_GPIO_PORT, &gpio);
 8001944:	f107 0318 	add.w	r3, r7, #24
 8001948:	4619      	mov	r1, r3
 800194a:	4808      	ldr	r0, [pc, #32]	; (800196c <HAL_RCC_MCOConfig+0x6c>)
 800194c:	f7ff fad0 	bl	8000ef0 <HAL_GPIO_Init>

  /* Configure the MCO clock source */
  __HAL_RCC_MCO1_CONFIG(RCC_MCOSource, RCC_MCODiv);
 8001950:	4b05      	ldr	r3, [pc, #20]	; (8001968 <HAL_RCC_MCOConfig+0x68>)
 8001952:	685b      	ldr	r3, [r3, #4]
 8001954:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8001958:	4903      	ldr	r1, [pc, #12]	; (8001968 <HAL_RCC_MCOConfig+0x68>)
 800195a:	68bb      	ldr	r3, [r7, #8]
 800195c:	4313      	orrs	r3, r2
 800195e:	604b      	str	r3, [r1, #4]
}
 8001960:	bf00      	nop
 8001962:	3728      	adds	r7, #40	; 0x28
 8001964:	46bd      	mov	sp, r7
 8001966:	bd80      	pop	{r7, pc}
 8001968:	40021000 	.word	0x40021000
 800196c:	40010800 	.word	0x40010800

08001970 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001970:	b490      	push	{r4, r7}
 8001972:	b08a      	sub	sp, #40	; 0x28
 8001974:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001976:	4b29      	ldr	r3, [pc, #164]	; (8001a1c <HAL_RCC_GetSysClockFreq+0xac>)
 8001978:	1d3c      	adds	r4, r7, #4
 800197a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800197c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001980:	f240 2301 	movw	r3, #513	; 0x201
 8001984:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001986:	2300      	movs	r3, #0
 8001988:	61fb      	str	r3, [r7, #28]
 800198a:	2300      	movs	r3, #0
 800198c:	61bb      	str	r3, [r7, #24]
 800198e:	2300      	movs	r3, #0
 8001990:	627b      	str	r3, [r7, #36]	; 0x24
 8001992:	2300      	movs	r3, #0
 8001994:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001996:	2300      	movs	r3, #0
 8001998:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800199a:	4b21      	ldr	r3, [pc, #132]	; (8001a20 <HAL_RCC_GetSysClockFreq+0xb0>)
 800199c:	685b      	ldr	r3, [r3, #4]
 800199e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80019a0:	69fb      	ldr	r3, [r7, #28]
 80019a2:	f003 030c 	and.w	r3, r3, #12
 80019a6:	2b04      	cmp	r3, #4
 80019a8:	d002      	beq.n	80019b0 <HAL_RCC_GetSysClockFreq+0x40>
 80019aa:	2b08      	cmp	r3, #8
 80019ac:	d003      	beq.n	80019b6 <HAL_RCC_GetSysClockFreq+0x46>
 80019ae:	e02b      	b.n	8001a08 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80019b0:	4b1c      	ldr	r3, [pc, #112]	; (8001a24 <HAL_RCC_GetSysClockFreq+0xb4>)
 80019b2:	623b      	str	r3, [r7, #32]
      break;
 80019b4:	e02b      	b.n	8001a0e <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80019b6:	69fb      	ldr	r3, [r7, #28]
 80019b8:	0c9b      	lsrs	r3, r3, #18
 80019ba:	f003 030f 	and.w	r3, r3, #15
 80019be:	3328      	adds	r3, #40	; 0x28
 80019c0:	443b      	add	r3, r7
 80019c2:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80019c6:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80019c8:	69fb      	ldr	r3, [r7, #28]
 80019ca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d012      	beq.n	80019f8 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80019d2:	4b13      	ldr	r3, [pc, #76]	; (8001a20 <HAL_RCC_GetSysClockFreq+0xb0>)
 80019d4:	685b      	ldr	r3, [r3, #4]
 80019d6:	0c5b      	lsrs	r3, r3, #17
 80019d8:	f003 0301 	and.w	r3, r3, #1
 80019dc:	3328      	adds	r3, #40	; 0x28
 80019de:	443b      	add	r3, r7
 80019e0:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80019e4:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80019e6:	697b      	ldr	r3, [r7, #20]
 80019e8:	4a0e      	ldr	r2, [pc, #56]	; (8001a24 <HAL_RCC_GetSysClockFreq+0xb4>)
 80019ea:	fb03 f202 	mul.w	r2, r3, r2
 80019ee:	69bb      	ldr	r3, [r7, #24]
 80019f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80019f4:	627b      	str	r3, [r7, #36]	; 0x24
 80019f6:	e004      	b.n	8001a02 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80019f8:	697b      	ldr	r3, [r7, #20]
 80019fa:	4a0b      	ldr	r2, [pc, #44]	; (8001a28 <HAL_RCC_GetSysClockFreq+0xb8>)
 80019fc:	fb02 f303 	mul.w	r3, r2, r3
 8001a00:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001a02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a04:	623b      	str	r3, [r7, #32]
      break;
 8001a06:	e002      	b.n	8001a0e <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001a08:	4b06      	ldr	r3, [pc, #24]	; (8001a24 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001a0a:	623b      	str	r3, [r7, #32]
      break;
 8001a0c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001a0e:	6a3b      	ldr	r3, [r7, #32]
}
 8001a10:	4618      	mov	r0, r3
 8001a12:	3728      	adds	r7, #40	; 0x28
 8001a14:	46bd      	mov	sp, r7
 8001a16:	bc90      	pop	{r4, r7}
 8001a18:	4770      	bx	lr
 8001a1a:	bf00      	nop
 8001a1c:	08006c84 	.word	0x08006c84
 8001a20:	40021000 	.word	0x40021000
 8001a24:	007a1200 	.word	0x007a1200
 8001a28:	003d0900 	.word	0x003d0900

08001a2c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001a2c:	b480      	push	{r7}
 8001a2e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001a30:	4b02      	ldr	r3, [pc, #8]	; (8001a3c <HAL_RCC_GetHCLKFreq+0x10>)
 8001a32:	681b      	ldr	r3, [r3, #0]
}
 8001a34:	4618      	mov	r0, r3
 8001a36:	46bd      	mov	sp, r7
 8001a38:	bc80      	pop	{r7}
 8001a3a:	4770      	bx	lr
 8001a3c:	20000004 	.word	0x20000004

08001a40 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001a44:	f7ff fff2 	bl	8001a2c <HAL_RCC_GetHCLKFreq>
 8001a48:	4602      	mov	r2, r0
 8001a4a:	4b05      	ldr	r3, [pc, #20]	; (8001a60 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001a4c:	685b      	ldr	r3, [r3, #4]
 8001a4e:	0a1b      	lsrs	r3, r3, #8
 8001a50:	f003 0307 	and.w	r3, r3, #7
 8001a54:	4903      	ldr	r1, [pc, #12]	; (8001a64 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001a56:	5ccb      	ldrb	r3, [r1, r3]
 8001a58:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001a5c:	4618      	mov	r0, r3
 8001a5e:	bd80      	pop	{r7, pc}
 8001a60:	40021000 	.word	0x40021000
 8001a64:	08006cf0 	.word	0x08006cf0

08001a68 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001a6c:	f7ff ffde 	bl	8001a2c <HAL_RCC_GetHCLKFreq>
 8001a70:	4602      	mov	r2, r0
 8001a72:	4b05      	ldr	r3, [pc, #20]	; (8001a88 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001a74:	685b      	ldr	r3, [r3, #4]
 8001a76:	0adb      	lsrs	r3, r3, #11
 8001a78:	f003 0307 	and.w	r3, r3, #7
 8001a7c:	4903      	ldr	r1, [pc, #12]	; (8001a8c <HAL_RCC_GetPCLK2Freq+0x24>)
 8001a7e:	5ccb      	ldrb	r3, [r1, r3]
 8001a80:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001a84:	4618      	mov	r0, r3
 8001a86:	bd80      	pop	{r7, pc}
 8001a88:	40021000 	.word	0x40021000
 8001a8c:	08006cf0 	.word	0x08006cf0

08001a90 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001a90:	b480      	push	{r7}
 8001a92:	b083      	sub	sp, #12
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	6078      	str	r0, [r7, #4]
 8001a98:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	220f      	movs	r2, #15
 8001a9e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001aa0:	4b11      	ldr	r3, [pc, #68]	; (8001ae8 <HAL_RCC_GetClockConfig+0x58>)
 8001aa2:	685b      	ldr	r3, [r3, #4]
 8001aa4:	f003 0203 	and.w	r2, r3, #3
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001aac:	4b0e      	ldr	r3, [pc, #56]	; (8001ae8 <HAL_RCC_GetClockConfig+0x58>)
 8001aae:	685b      	ldr	r3, [r3, #4]
 8001ab0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001ab8:	4b0b      	ldr	r3, [pc, #44]	; (8001ae8 <HAL_RCC_GetClockConfig+0x58>)
 8001aba:	685b      	ldr	r3, [r3, #4]
 8001abc:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8001ac4:	4b08      	ldr	r3, [pc, #32]	; (8001ae8 <HAL_RCC_GetClockConfig+0x58>)
 8001ac6:	685b      	ldr	r3, [r3, #4]
 8001ac8:	08db      	lsrs	r3, r3, #3
 8001aca:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001ad2:	4b06      	ldr	r3, [pc, #24]	; (8001aec <HAL_RCC_GetClockConfig+0x5c>)
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	f003 0207 	and.w	r2, r3, #7
 8001ada:	683b      	ldr	r3, [r7, #0]
 8001adc:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8001ade:	bf00      	nop
 8001ae0:	370c      	adds	r7, #12
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	bc80      	pop	{r7}
 8001ae6:	4770      	bx	lr
 8001ae8:	40021000 	.word	0x40021000
 8001aec:	40022000 	.word	0x40022000

08001af0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001af0:	b480      	push	{r7}
 8001af2:	b085      	sub	sp, #20
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001af8:	4b0a      	ldr	r3, [pc, #40]	; (8001b24 <RCC_Delay+0x34>)
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	4a0a      	ldr	r2, [pc, #40]	; (8001b28 <RCC_Delay+0x38>)
 8001afe:	fba2 2303 	umull	r2, r3, r2, r3
 8001b02:	0a5b      	lsrs	r3, r3, #9
 8001b04:	687a      	ldr	r2, [r7, #4]
 8001b06:	fb02 f303 	mul.w	r3, r2, r3
 8001b0a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001b0c:	bf00      	nop
  }
  while (Delay --);
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	1e5a      	subs	r2, r3, #1
 8001b12:	60fa      	str	r2, [r7, #12]
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d1f9      	bne.n	8001b0c <RCC_Delay+0x1c>
}
 8001b18:	bf00      	nop
 8001b1a:	bf00      	nop
 8001b1c:	3714      	adds	r7, #20
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	bc80      	pop	{r7}
 8001b22:	4770      	bx	lr
 8001b24:	20000004 	.word	0x20000004
 8001b28:	10624dd3 	.word	0x10624dd3

08001b2c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	b082      	sub	sp, #8
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d101      	bne.n	8001b3e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001b3a:	2301      	movs	r3, #1
 8001b3c:	e041      	b.n	8001bc2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001b44:	b2db      	uxtb	r3, r3
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d106      	bne.n	8001b58 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001b52:	6878      	ldr	r0, [r7, #4]
 8001b54:	f000 f839 	bl	8001bca <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	2202      	movs	r2, #2
 8001b5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681a      	ldr	r2, [r3, #0]
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	3304      	adds	r3, #4
 8001b68:	4619      	mov	r1, r3
 8001b6a:	4610      	mov	r0, r2
 8001b6c:	f000 f9b4 	bl	8001ed8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	2201      	movs	r2, #1
 8001b74:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	2201      	movs	r2, #1
 8001b7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	2201      	movs	r2, #1
 8001b84:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	2201      	movs	r2, #1
 8001b8c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	2201      	movs	r2, #1
 8001b94:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	2201      	movs	r2, #1
 8001b9c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	2201      	movs	r2, #1
 8001ba4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	2201      	movs	r2, #1
 8001bac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	2201      	movs	r2, #1
 8001bb4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	2201      	movs	r2, #1
 8001bbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001bc0:	2300      	movs	r3, #0
}
 8001bc2:	4618      	mov	r0, r3
 8001bc4:	3708      	adds	r7, #8
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	bd80      	pop	{r7, pc}

08001bca <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001bca:	b480      	push	{r7}
 8001bcc:	b083      	sub	sp, #12
 8001bce:	af00      	add	r7, sp, #0
 8001bd0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001bd2:	bf00      	nop
 8001bd4:	370c      	adds	r7, #12
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	bc80      	pop	{r7}
 8001bda:	4770      	bx	lr

08001bdc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001bdc:	b480      	push	{r7}
 8001bde:	b085      	sub	sp, #20
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001bea:	b2db      	uxtb	r3, r3
 8001bec:	2b01      	cmp	r3, #1
 8001bee:	d001      	beq.n	8001bf4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001bf0:	2301      	movs	r3, #1
 8001bf2:	e03a      	b.n	8001c6a <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	2202      	movs	r2, #2
 8001bf8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	68da      	ldr	r2, [r3, #12]
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	f042 0201 	orr.w	r2, r2, #1
 8001c0a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	4a18      	ldr	r2, [pc, #96]	; (8001c74 <HAL_TIM_Base_Start_IT+0x98>)
 8001c12:	4293      	cmp	r3, r2
 8001c14:	d00e      	beq.n	8001c34 <HAL_TIM_Base_Start_IT+0x58>
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001c1e:	d009      	beq.n	8001c34 <HAL_TIM_Base_Start_IT+0x58>
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	4a14      	ldr	r2, [pc, #80]	; (8001c78 <HAL_TIM_Base_Start_IT+0x9c>)
 8001c26:	4293      	cmp	r3, r2
 8001c28:	d004      	beq.n	8001c34 <HAL_TIM_Base_Start_IT+0x58>
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	4a13      	ldr	r2, [pc, #76]	; (8001c7c <HAL_TIM_Base_Start_IT+0xa0>)
 8001c30:	4293      	cmp	r3, r2
 8001c32:	d111      	bne.n	8001c58 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	689b      	ldr	r3, [r3, #8]
 8001c3a:	f003 0307 	and.w	r3, r3, #7
 8001c3e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	2b06      	cmp	r3, #6
 8001c44:	d010      	beq.n	8001c68 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	681a      	ldr	r2, [r3, #0]
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	f042 0201 	orr.w	r2, r2, #1
 8001c54:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001c56:	e007      	b.n	8001c68 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	681a      	ldr	r2, [r3, #0]
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	f042 0201 	orr.w	r2, r2, #1
 8001c66:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001c68:	2300      	movs	r3, #0
}
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	3714      	adds	r7, #20
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	bc80      	pop	{r7}
 8001c72:	4770      	bx	lr
 8001c74:	40012c00 	.word	0x40012c00
 8001c78:	40000400 	.word	0x40000400
 8001c7c:	40000800 	.word	0x40000800

08001c80 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001c80:	b580      	push	{r7, lr}
 8001c82:	b082      	sub	sp, #8
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	691b      	ldr	r3, [r3, #16]
 8001c8e:	f003 0302 	and.w	r3, r3, #2
 8001c92:	2b02      	cmp	r3, #2
 8001c94:	d122      	bne.n	8001cdc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	68db      	ldr	r3, [r3, #12]
 8001c9c:	f003 0302 	and.w	r3, r3, #2
 8001ca0:	2b02      	cmp	r3, #2
 8001ca2:	d11b      	bne.n	8001cdc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	f06f 0202 	mvn.w	r2, #2
 8001cac:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	2201      	movs	r2, #1
 8001cb2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	699b      	ldr	r3, [r3, #24]
 8001cba:	f003 0303 	and.w	r3, r3, #3
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d003      	beq.n	8001cca <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001cc2:	6878      	ldr	r0, [r7, #4]
 8001cc4:	f000 f8ed 	bl	8001ea2 <HAL_TIM_IC_CaptureCallback>
 8001cc8:	e005      	b.n	8001cd6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001cca:	6878      	ldr	r0, [r7, #4]
 8001ccc:	f000 f8e0 	bl	8001e90 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001cd0:	6878      	ldr	r0, [r7, #4]
 8001cd2:	f000 f8ef 	bl	8001eb4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	2200      	movs	r2, #0
 8001cda:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	691b      	ldr	r3, [r3, #16]
 8001ce2:	f003 0304 	and.w	r3, r3, #4
 8001ce6:	2b04      	cmp	r3, #4
 8001ce8:	d122      	bne.n	8001d30 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	68db      	ldr	r3, [r3, #12]
 8001cf0:	f003 0304 	and.w	r3, r3, #4
 8001cf4:	2b04      	cmp	r3, #4
 8001cf6:	d11b      	bne.n	8001d30 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	f06f 0204 	mvn.w	r2, #4
 8001d00:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	2202      	movs	r2, #2
 8001d06:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	699b      	ldr	r3, [r3, #24]
 8001d0e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d003      	beq.n	8001d1e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001d16:	6878      	ldr	r0, [r7, #4]
 8001d18:	f000 f8c3 	bl	8001ea2 <HAL_TIM_IC_CaptureCallback>
 8001d1c:	e005      	b.n	8001d2a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d1e:	6878      	ldr	r0, [r7, #4]
 8001d20:	f000 f8b6 	bl	8001e90 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d24:	6878      	ldr	r0, [r7, #4]
 8001d26:	f000 f8c5 	bl	8001eb4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	691b      	ldr	r3, [r3, #16]
 8001d36:	f003 0308 	and.w	r3, r3, #8
 8001d3a:	2b08      	cmp	r3, #8
 8001d3c:	d122      	bne.n	8001d84 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	68db      	ldr	r3, [r3, #12]
 8001d44:	f003 0308 	and.w	r3, r3, #8
 8001d48:	2b08      	cmp	r3, #8
 8001d4a:	d11b      	bne.n	8001d84 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	f06f 0208 	mvn.w	r2, #8
 8001d54:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	2204      	movs	r2, #4
 8001d5a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	69db      	ldr	r3, [r3, #28]
 8001d62:	f003 0303 	and.w	r3, r3, #3
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d003      	beq.n	8001d72 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001d6a:	6878      	ldr	r0, [r7, #4]
 8001d6c:	f000 f899 	bl	8001ea2 <HAL_TIM_IC_CaptureCallback>
 8001d70:	e005      	b.n	8001d7e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d72:	6878      	ldr	r0, [r7, #4]
 8001d74:	f000 f88c 	bl	8001e90 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d78:	6878      	ldr	r0, [r7, #4]
 8001d7a:	f000 f89b 	bl	8001eb4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	2200      	movs	r2, #0
 8001d82:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	691b      	ldr	r3, [r3, #16]
 8001d8a:	f003 0310 	and.w	r3, r3, #16
 8001d8e:	2b10      	cmp	r3, #16
 8001d90:	d122      	bne.n	8001dd8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	68db      	ldr	r3, [r3, #12]
 8001d98:	f003 0310 	and.w	r3, r3, #16
 8001d9c:	2b10      	cmp	r3, #16
 8001d9e:	d11b      	bne.n	8001dd8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	f06f 0210 	mvn.w	r2, #16
 8001da8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	2208      	movs	r2, #8
 8001dae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	69db      	ldr	r3, [r3, #28]
 8001db6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d003      	beq.n	8001dc6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001dbe:	6878      	ldr	r0, [r7, #4]
 8001dc0:	f000 f86f 	bl	8001ea2 <HAL_TIM_IC_CaptureCallback>
 8001dc4:	e005      	b.n	8001dd2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001dc6:	6878      	ldr	r0, [r7, #4]
 8001dc8:	f000 f862 	bl	8001e90 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001dcc:	6878      	ldr	r0, [r7, #4]
 8001dce:	f000 f871 	bl	8001eb4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	691b      	ldr	r3, [r3, #16]
 8001dde:	f003 0301 	and.w	r3, r3, #1
 8001de2:	2b01      	cmp	r3, #1
 8001de4:	d10e      	bne.n	8001e04 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	68db      	ldr	r3, [r3, #12]
 8001dec:	f003 0301 	and.w	r3, r3, #1
 8001df0:	2b01      	cmp	r3, #1
 8001df2:	d107      	bne.n	8001e04 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	f06f 0201 	mvn.w	r2, #1
 8001dfc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001dfe:	6878      	ldr	r0, [r7, #4]
 8001e00:	f7fe fbc0 	bl	8000584 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	691b      	ldr	r3, [r3, #16]
 8001e0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e0e:	2b80      	cmp	r3, #128	; 0x80
 8001e10:	d10e      	bne.n	8001e30 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	68db      	ldr	r3, [r3, #12]
 8001e18:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e1c:	2b80      	cmp	r3, #128	; 0x80
 8001e1e:	d107      	bne.n	8001e30 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001e28:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001e2a:	6878      	ldr	r0, [r7, #4]
 8001e2c:	f000 f8bf 	bl	8001fae <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	691b      	ldr	r3, [r3, #16]
 8001e36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e3a:	2b40      	cmp	r3, #64	; 0x40
 8001e3c:	d10e      	bne.n	8001e5c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	68db      	ldr	r3, [r3, #12]
 8001e44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e48:	2b40      	cmp	r3, #64	; 0x40
 8001e4a:	d107      	bne.n	8001e5c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001e54:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001e56:	6878      	ldr	r0, [r7, #4]
 8001e58:	f000 f835 	bl	8001ec6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	691b      	ldr	r3, [r3, #16]
 8001e62:	f003 0320 	and.w	r3, r3, #32
 8001e66:	2b20      	cmp	r3, #32
 8001e68:	d10e      	bne.n	8001e88 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	68db      	ldr	r3, [r3, #12]
 8001e70:	f003 0320 	and.w	r3, r3, #32
 8001e74:	2b20      	cmp	r3, #32
 8001e76:	d107      	bne.n	8001e88 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	f06f 0220 	mvn.w	r2, #32
 8001e80:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001e82:	6878      	ldr	r0, [r7, #4]
 8001e84:	f000 f88a 	bl	8001f9c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001e88:	bf00      	nop
 8001e8a:	3708      	adds	r7, #8
 8001e8c:	46bd      	mov	sp, r7
 8001e8e:	bd80      	pop	{r7, pc}

08001e90 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001e90:	b480      	push	{r7}
 8001e92:	b083      	sub	sp, #12
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001e98:	bf00      	nop
 8001e9a:	370c      	adds	r7, #12
 8001e9c:	46bd      	mov	sp, r7
 8001e9e:	bc80      	pop	{r7}
 8001ea0:	4770      	bx	lr

08001ea2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001ea2:	b480      	push	{r7}
 8001ea4:	b083      	sub	sp, #12
 8001ea6:	af00      	add	r7, sp, #0
 8001ea8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001eaa:	bf00      	nop
 8001eac:	370c      	adds	r7, #12
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	bc80      	pop	{r7}
 8001eb2:	4770      	bx	lr

08001eb4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001eb4:	b480      	push	{r7}
 8001eb6:	b083      	sub	sp, #12
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001ebc:	bf00      	nop
 8001ebe:	370c      	adds	r7, #12
 8001ec0:	46bd      	mov	sp, r7
 8001ec2:	bc80      	pop	{r7}
 8001ec4:	4770      	bx	lr

08001ec6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001ec6:	b480      	push	{r7}
 8001ec8:	b083      	sub	sp, #12
 8001eca:	af00      	add	r7, sp, #0
 8001ecc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001ece:	bf00      	nop
 8001ed0:	370c      	adds	r7, #12
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	bc80      	pop	{r7}
 8001ed6:	4770      	bx	lr

08001ed8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001ed8:	b480      	push	{r7}
 8001eda:	b085      	sub	sp, #20
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	6078      	str	r0, [r7, #4]
 8001ee0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	4a29      	ldr	r2, [pc, #164]	; (8001f90 <TIM_Base_SetConfig+0xb8>)
 8001eec:	4293      	cmp	r3, r2
 8001eee:	d00b      	beq.n	8001f08 <TIM_Base_SetConfig+0x30>
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ef6:	d007      	beq.n	8001f08 <TIM_Base_SetConfig+0x30>
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	4a26      	ldr	r2, [pc, #152]	; (8001f94 <TIM_Base_SetConfig+0xbc>)
 8001efc:	4293      	cmp	r3, r2
 8001efe:	d003      	beq.n	8001f08 <TIM_Base_SetConfig+0x30>
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	4a25      	ldr	r2, [pc, #148]	; (8001f98 <TIM_Base_SetConfig+0xc0>)
 8001f04:	4293      	cmp	r3, r2
 8001f06:	d108      	bne.n	8001f1a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001f0e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001f10:	683b      	ldr	r3, [r7, #0]
 8001f12:	685b      	ldr	r3, [r3, #4]
 8001f14:	68fa      	ldr	r2, [r7, #12]
 8001f16:	4313      	orrs	r3, r2
 8001f18:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	4a1c      	ldr	r2, [pc, #112]	; (8001f90 <TIM_Base_SetConfig+0xb8>)
 8001f1e:	4293      	cmp	r3, r2
 8001f20:	d00b      	beq.n	8001f3a <TIM_Base_SetConfig+0x62>
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f28:	d007      	beq.n	8001f3a <TIM_Base_SetConfig+0x62>
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	4a19      	ldr	r2, [pc, #100]	; (8001f94 <TIM_Base_SetConfig+0xbc>)
 8001f2e:	4293      	cmp	r3, r2
 8001f30:	d003      	beq.n	8001f3a <TIM_Base_SetConfig+0x62>
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	4a18      	ldr	r2, [pc, #96]	; (8001f98 <TIM_Base_SetConfig+0xc0>)
 8001f36:	4293      	cmp	r3, r2
 8001f38:	d108      	bne.n	8001f4c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001f40:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001f42:	683b      	ldr	r3, [r7, #0]
 8001f44:	68db      	ldr	r3, [r3, #12]
 8001f46:	68fa      	ldr	r2, [r7, #12]
 8001f48:	4313      	orrs	r3, r2
 8001f4a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001f52:	683b      	ldr	r3, [r7, #0]
 8001f54:	695b      	ldr	r3, [r3, #20]
 8001f56:	4313      	orrs	r3, r2
 8001f58:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	68fa      	ldr	r2, [r7, #12]
 8001f5e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001f60:	683b      	ldr	r3, [r7, #0]
 8001f62:	689a      	ldr	r2, [r3, #8]
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001f68:	683b      	ldr	r3, [r7, #0]
 8001f6a:	681a      	ldr	r2, [r3, #0]
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	4a07      	ldr	r2, [pc, #28]	; (8001f90 <TIM_Base_SetConfig+0xb8>)
 8001f74:	4293      	cmp	r3, r2
 8001f76:	d103      	bne.n	8001f80 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001f78:	683b      	ldr	r3, [r7, #0]
 8001f7a:	691a      	ldr	r2, [r3, #16]
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	2201      	movs	r2, #1
 8001f84:	615a      	str	r2, [r3, #20]
}
 8001f86:	bf00      	nop
 8001f88:	3714      	adds	r7, #20
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	bc80      	pop	{r7}
 8001f8e:	4770      	bx	lr
 8001f90:	40012c00 	.word	0x40012c00
 8001f94:	40000400 	.word	0x40000400
 8001f98:	40000800 	.word	0x40000800

08001f9c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001f9c:	b480      	push	{r7}
 8001f9e:	b083      	sub	sp, #12
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001fa4:	bf00      	nop
 8001fa6:	370c      	adds	r7, #12
 8001fa8:	46bd      	mov	sp, r7
 8001faa:	bc80      	pop	{r7}
 8001fac:	4770      	bx	lr

08001fae <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001fae:	b480      	push	{r7}
 8001fb0:	b083      	sub	sp, #12
 8001fb2:	af00      	add	r7, sp, #0
 8001fb4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001fb6:	bf00      	nop
 8001fb8:	370c      	adds	r7, #12
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	bc80      	pop	{r7}
 8001fbe:	4770      	bx	lr

08001fc0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	b082      	sub	sp, #8
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d101      	bne.n	8001fd2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001fce:	2301      	movs	r3, #1
 8001fd0:	e03f      	b.n	8002052 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001fd8:	b2db      	uxtb	r3, r3
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d106      	bne.n	8001fec <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001fe6:	6878      	ldr	r0, [r7, #4]
 8001fe8:	f7fe fcdc 	bl	80009a4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	2224      	movs	r2, #36	; 0x24
 8001ff0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	68da      	ldr	r2, [r3, #12]
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002002:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002004:	6878      	ldr	r0, [r7, #4]
 8002006:	f000 fd6b 	bl	8002ae0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	691a      	ldr	r2, [r3, #16]
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002018:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	695a      	ldr	r2, [r3, #20]
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002028:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	68da      	ldr	r2, [r3, #12]
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002038:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	2200      	movs	r2, #0
 800203e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	2220      	movs	r2, #32
 8002044:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	2220      	movs	r2, #32
 800204c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002050:	2300      	movs	r3, #0
}
 8002052:	4618      	mov	r0, r3
 8002054:	3708      	adds	r7, #8
 8002056:	46bd      	mov	sp, r7
 8002058:	bd80      	pop	{r7, pc}

0800205a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800205a:	b580      	push	{r7, lr}
 800205c:	b08a      	sub	sp, #40	; 0x28
 800205e:	af02      	add	r7, sp, #8
 8002060:	60f8      	str	r0, [r7, #12]
 8002062:	60b9      	str	r1, [r7, #8]
 8002064:	603b      	str	r3, [r7, #0]
 8002066:	4613      	mov	r3, r2
 8002068:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800206a:	2300      	movs	r3, #0
 800206c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002074:	b2db      	uxtb	r3, r3
 8002076:	2b20      	cmp	r3, #32
 8002078:	d17c      	bne.n	8002174 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800207a:	68bb      	ldr	r3, [r7, #8]
 800207c:	2b00      	cmp	r3, #0
 800207e:	d002      	beq.n	8002086 <HAL_UART_Transmit+0x2c>
 8002080:	88fb      	ldrh	r3, [r7, #6]
 8002082:	2b00      	cmp	r3, #0
 8002084:	d101      	bne.n	800208a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002086:	2301      	movs	r3, #1
 8002088:	e075      	b.n	8002176 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002090:	2b01      	cmp	r3, #1
 8002092:	d101      	bne.n	8002098 <HAL_UART_Transmit+0x3e>
 8002094:	2302      	movs	r3, #2
 8002096:	e06e      	b.n	8002176 <HAL_UART_Transmit+0x11c>
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	2201      	movs	r2, #1
 800209c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	2200      	movs	r2, #0
 80020a4:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	2221      	movs	r2, #33	; 0x21
 80020aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80020ae:	f7fe fd61 	bl	8000b74 <HAL_GetTick>
 80020b2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	88fa      	ldrh	r2, [r7, #6]
 80020b8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	88fa      	ldrh	r2, [r7, #6]
 80020be:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	689b      	ldr	r3, [r3, #8]
 80020c4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80020c8:	d108      	bne.n	80020dc <HAL_UART_Transmit+0x82>
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	691b      	ldr	r3, [r3, #16]
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d104      	bne.n	80020dc <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80020d2:	2300      	movs	r3, #0
 80020d4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80020d6:	68bb      	ldr	r3, [r7, #8]
 80020d8:	61bb      	str	r3, [r7, #24]
 80020da:	e003      	b.n	80020e4 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80020dc:	68bb      	ldr	r3, [r7, #8]
 80020de:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80020e0:	2300      	movs	r3, #0
 80020e2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	2200      	movs	r2, #0
 80020e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80020ec:	e02a      	b.n	8002144 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80020ee:	683b      	ldr	r3, [r7, #0]
 80020f0:	9300      	str	r3, [sp, #0]
 80020f2:	697b      	ldr	r3, [r7, #20]
 80020f4:	2200      	movs	r2, #0
 80020f6:	2180      	movs	r1, #128	; 0x80
 80020f8:	68f8      	ldr	r0, [r7, #12]
 80020fa:	f000 fb1e 	bl	800273a <UART_WaitOnFlagUntilTimeout>
 80020fe:	4603      	mov	r3, r0
 8002100:	2b00      	cmp	r3, #0
 8002102:	d001      	beq.n	8002108 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002104:	2303      	movs	r3, #3
 8002106:	e036      	b.n	8002176 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002108:	69fb      	ldr	r3, [r7, #28]
 800210a:	2b00      	cmp	r3, #0
 800210c:	d10b      	bne.n	8002126 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800210e:	69bb      	ldr	r3, [r7, #24]
 8002110:	881b      	ldrh	r3, [r3, #0]
 8002112:	461a      	mov	r2, r3
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800211c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800211e:	69bb      	ldr	r3, [r7, #24]
 8002120:	3302      	adds	r3, #2
 8002122:	61bb      	str	r3, [r7, #24]
 8002124:	e007      	b.n	8002136 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002126:	69fb      	ldr	r3, [r7, #28]
 8002128:	781a      	ldrb	r2, [r3, #0]
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002130:	69fb      	ldr	r3, [r7, #28]
 8002132:	3301      	adds	r3, #1
 8002134:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800213a:	b29b      	uxth	r3, r3
 800213c:	3b01      	subs	r3, #1
 800213e:	b29a      	uxth	r2, r3
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002148:	b29b      	uxth	r3, r3
 800214a:	2b00      	cmp	r3, #0
 800214c:	d1cf      	bne.n	80020ee <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800214e:	683b      	ldr	r3, [r7, #0]
 8002150:	9300      	str	r3, [sp, #0]
 8002152:	697b      	ldr	r3, [r7, #20]
 8002154:	2200      	movs	r2, #0
 8002156:	2140      	movs	r1, #64	; 0x40
 8002158:	68f8      	ldr	r0, [r7, #12]
 800215a:	f000 faee 	bl	800273a <UART_WaitOnFlagUntilTimeout>
 800215e:	4603      	mov	r3, r0
 8002160:	2b00      	cmp	r3, #0
 8002162:	d001      	beq.n	8002168 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002164:	2303      	movs	r3, #3
 8002166:	e006      	b.n	8002176 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	2220      	movs	r2, #32
 800216c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002170:	2300      	movs	r3, #0
 8002172:	e000      	b.n	8002176 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002174:	2302      	movs	r3, #2
  }
}
 8002176:	4618      	mov	r0, r3
 8002178:	3720      	adds	r7, #32
 800217a:	46bd      	mov	sp, r7
 800217c:	bd80      	pop	{r7, pc}

0800217e <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800217e:	b580      	push	{r7, lr}
 8002180:	b08a      	sub	sp, #40	; 0x28
 8002182:	af02      	add	r7, sp, #8
 8002184:	60f8      	str	r0, [r7, #12]
 8002186:	60b9      	str	r1, [r7, #8]
 8002188:	603b      	str	r3, [r7, #0]
 800218a:	4613      	mov	r3, r2
 800218c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800218e:	2300      	movs	r3, #0
 8002190:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002198:	b2db      	uxtb	r3, r3
 800219a:	2b20      	cmp	r3, #32
 800219c:	f040 808c 	bne.w	80022b8 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 80021a0:	68bb      	ldr	r3, [r7, #8]
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d002      	beq.n	80021ac <HAL_UART_Receive+0x2e>
 80021a6:	88fb      	ldrh	r3, [r7, #6]
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d101      	bne.n	80021b0 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 80021ac:	2301      	movs	r3, #1
 80021ae:	e084      	b.n	80022ba <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80021b6:	2b01      	cmp	r3, #1
 80021b8:	d101      	bne.n	80021be <HAL_UART_Receive+0x40>
 80021ba:	2302      	movs	r3, #2
 80021bc:	e07d      	b.n	80022ba <HAL_UART_Receive+0x13c>
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	2201      	movs	r2, #1
 80021c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	2200      	movs	r2, #0
 80021ca:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	2222      	movs	r2, #34	; 0x22
 80021d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	2200      	movs	r2, #0
 80021d8:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80021da:	f7fe fccb 	bl	8000b74 <HAL_GetTick>
 80021de:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	88fa      	ldrh	r2, [r7, #6]
 80021e4:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	88fa      	ldrh	r2, [r7, #6]
 80021ea:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	689b      	ldr	r3, [r3, #8]
 80021f0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80021f4:	d108      	bne.n	8002208 <HAL_UART_Receive+0x8a>
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	691b      	ldr	r3, [r3, #16]
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d104      	bne.n	8002208 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 80021fe:	2300      	movs	r3, #0
 8002200:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002202:	68bb      	ldr	r3, [r7, #8]
 8002204:	61bb      	str	r3, [r7, #24]
 8002206:	e003      	b.n	8002210 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8002208:	68bb      	ldr	r3, [r7, #8]
 800220a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800220c:	2300      	movs	r3, #0
 800220e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	2200      	movs	r2, #0
 8002214:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8002218:	e043      	b.n	80022a2 <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800221a:	683b      	ldr	r3, [r7, #0]
 800221c:	9300      	str	r3, [sp, #0]
 800221e:	697b      	ldr	r3, [r7, #20]
 8002220:	2200      	movs	r2, #0
 8002222:	2120      	movs	r1, #32
 8002224:	68f8      	ldr	r0, [r7, #12]
 8002226:	f000 fa88 	bl	800273a <UART_WaitOnFlagUntilTimeout>
 800222a:	4603      	mov	r3, r0
 800222c:	2b00      	cmp	r3, #0
 800222e:	d001      	beq.n	8002234 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8002230:	2303      	movs	r3, #3
 8002232:	e042      	b.n	80022ba <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8002234:	69fb      	ldr	r3, [r7, #28]
 8002236:	2b00      	cmp	r3, #0
 8002238:	d10c      	bne.n	8002254 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	685b      	ldr	r3, [r3, #4]
 8002240:	b29b      	uxth	r3, r3
 8002242:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002246:	b29a      	uxth	r2, r3
 8002248:	69bb      	ldr	r3, [r7, #24]
 800224a:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800224c:	69bb      	ldr	r3, [r7, #24]
 800224e:	3302      	adds	r3, #2
 8002250:	61bb      	str	r3, [r7, #24]
 8002252:	e01f      	b.n	8002294 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	689b      	ldr	r3, [r3, #8]
 8002258:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800225c:	d007      	beq.n	800226e <HAL_UART_Receive+0xf0>
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	689b      	ldr	r3, [r3, #8]
 8002262:	2b00      	cmp	r3, #0
 8002264:	d10a      	bne.n	800227c <HAL_UART_Receive+0xfe>
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	691b      	ldr	r3, [r3, #16]
 800226a:	2b00      	cmp	r3, #0
 800226c:	d106      	bne.n	800227c <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	685b      	ldr	r3, [r3, #4]
 8002274:	b2da      	uxtb	r2, r3
 8002276:	69fb      	ldr	r3, [r7, #28]
 8002278:	701a      	strb	r2, [r3, #0]
 800227a:	e008      	b.n	800228e <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	685b      	ldr	r3, [r3, #4]
 8002282:	b2db      	uxtb	r3, r3
 8002284:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002288:	b2da      	uxtb	r2, r3
 800228a:	69fb      	ldr	r3, [r7, #28]
 800228c:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 800228e:	69fb      	ldr	r3, [r7, #28]
 8002290:	3301      	adds	r3, #1
 8002292:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002298:	b29b      	uxth	r3, r3
 800229a:	3b01      	subs	r3, #1
 800229c:	b29a      	uxth	r2, r3
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80022a6:	b29b      	uxth	r3, r3
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d1b6      	bne.n	800221a <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	2220      	movs	r2, #32
 80022b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 80022b4:	2300      	movs	r3, #0
 80022b6:	e000      	b.n	80022ba <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 80022b8:	2302      	movs	r3, #2
  }
}
 80022ba:	4618      	mov	r0, r3
 80022bc:	3720      	adds	r7, #32
 80022be:	46bd      	mov	sp, r7
 80022c0:	bd80      	pop	{r7, pc}

080022c2 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80022c2:	b480      	push	{r7}
 80022c4:	b085      	sub	sp, #20
 80022c6:	af00      	add	r7, sp, #0
 80022c8:	60f8      	str	r0, [r7, #12]
 80022ca:	60b9      	str	r1, [r7, #8]
 80022cc:	4613      	mov	r3, r2
 80022ce:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80022d6:	b2db      	uxtb	r3, r3
 80022d8:	2b20      	cmp	r3, #32
 80022da:	d130      	bne.n	800233e <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 80022dc:	68bb      	ldr	r3, [r7, #8]
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d002      	beq.n	80022e8 <HAL_UART_Transmit_IT+0x26>
 80022e2:	88fb      	ldrh	r3, [r7, #6]
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d101      	bne.n	80022ec <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 80022e8:	2301      	movs	r3, #1
 80022ea:	e029      	b.n	8002340 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80022f2:	2b01      	cmp	r3, #1
 80022f4:	d101      	bne.n	80022fa <HAL_UART_Transmit_IT+0x38>
 80022f6:	2302      	movs	r3, #2
 80022f8:	e022      	b.n	8002340 <HAL_UART_Transmit_IT+0x7e>
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	2201      	movs	r2, #1
 80022fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	68ba      	ldr	r2, [r7, #8]
 8002306:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	88fa      	ldrh	r2, [r7, #6]
 800230c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	88fa      	ldrh	r2, [r7, #6]
 8002312:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	2200      	movs	r2, #0
 8002318:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	2221      	movs	r2, #33	; 0x21
 800231e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	2200      	movs	r2, #0
 8002326:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	68da      	ldr	r2, [r3, #12]
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002338:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 800233a:	2300      	movs	r3, #0
 800233c:	e000      	b.n	8002340 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 800233e:	2302      	movs	r3, #2
  }
}
 8002340:	4618      	mov	r0, r3
 8002342:	3714      	adds	r7, #20
 8002344:	46bd      	mov	sp, r7
 8002346:	bc80      	pop	{r7}
 8002348:	4770      	bx	lr

0800234a <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800234a:	b580      	push	{r7, lr}
 800234c:	b084      	sub	sp, #16
 800234e:	af00      	add	r7, sp, #0
 8002350:	60f8      	str	r0, [r7, #12]
 8002352:	60b9      	str	r1, [r7, #8]
 8002354:	4613      	mov	r3, r2
 8002356:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800235e:	b2db      	uxtb	r3, r3
 8002360:	2b20      	cmp	r3, #32
 8002362:	d11d      	bne.n	80023a0 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8002364:	68bb      	ldr	r3, [r7, #8]
 8002366:	2b00      	cmp	r3, #0
 8002368:	d002      	beq.n	8002370 <HAL_UART_Receive_IT+0x26>
 800236a:	88fb      	ldrh	r3, [r7, #6]
 800236c:	2b00      	cmp	r3, #0
 800236e:	d101      	bne.n	8002374 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8002370:	2301      	movs	r3, #1
 8002372:	e016      	b.n	80023a2 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800237a:	2b01      	cmp	r3, #1
 800237c:	d101      	bne.n	8002382 <HAL_UART_Receive_IT+0x38>
 800237e:	2302      	movs	r3, #2
 8002380:	e00f      	b.n	80023a2 <HAL_UART_Receive_IT+0x58>
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	2201      	movs	r2, #1
 8002386:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	2200      	movs	r2, #0
 800238e:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 8002390:	88fb      	ldrh	r3, [r7, #6]
 8002392:	461a      	mov	r2, r3
 8002394:	68b9      	ldr	r1, [r7, #8]
 8002396:	68f8      	ldr	r0, [r7, #12]
 8002398:	f000 fa19 	bl	80027ce <UART_Start_Receive_IT>
 800239c:	4603      	mov	r3, r0
 800239e:	e000      	b.n	80023a2 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 80023a0:	2302      	movs	r3, #2
  }
}
 80023a2:	4618      	mov	r0, r3
 80023a4:	3710      	adds	r7, #16
 80023a6:	46bd      	mov	sp, r7
 80023a8:	bd80      	pop	{r7, pc}
	...

080023ac <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80023ac:	b580      	push	{r7, lr}
 80023ae:	b08a      	sub	sp, #40	; 0x28
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	68db      	ldr	r3, [r3, #12]
 80023c2:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	695b      	ldr	r3, [r3, #20]
 80023ca:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 80023cc:	2300      	movs	r3, #0
 80023ce:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 80023d0:	2300      	movs	r3, #0
 80023d2:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80023d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023d6:	f003 030f 	and.w	r3, r3, #15
 80023da:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 80023dc:	69bb      	ldr	r3, [r7, #24]
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d10d      	bne.n	80023fe <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80023e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023e4:	f003 0320 	and.w	r3, r3, #32
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d008      	beq.n	80023fe <HAL_UART_IRQHandler+0x52>
 80023ec:	6a3b      	ldr	r3, [r7, #32]
 80023ee:	f003 0320 	and.w	r3, r3, #32
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d003      	beq.n	80023fe <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80023f6:	6878      	ldr	r0, [r7, #4]
 80023f8:	f000 fac9 	bl	800298e <UART_Receive_IT>
      return;
 80023fc:	e17b      	b.n	80026f6 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80023fe:	69bb      	ldr	r3, [r7, #24]
 8002400:	2b00      	cmp	r3, #0
 8002402:	f000 80b1 	beq.w	8002568 <HAL_UART_IRQHandler+0x1bc>
 8002406:	69fb      	ldr	r3, [r7, #28]
 8002408:	f003 0301 	and.w	r3, r3, #1
 800240c:	2b00      	cmp	r3, #0
 800240e:	d105      	bne.n	800241c <HAL_UART_IRQHandler+0x70>
 8002410:	6a3b      	ldr	r3, [r7, #32]
 8002412:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002416:	2b00      	cmp	r3, #0
 8002418:	f000 80a6 	beq.w	8002568 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800241c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800241e:	f003 0301 	and.w	r3, r3, #1
 8002422:	2b00      	cmp	r3, #0
 8002424:	d00a      	beq.n	800243c <HAL_UART_IRQHandler+0x90>
 8002426:	6a3b      	ldr	r3, [r7, #32]
 8002428:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800242c:	2b00      	cmp	r3, #0
 800242e:	d005      	beq.n	800243c <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002434:	f043 0201 	orr.w	r2, r3, #1
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800243c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800243e:	f003 0304 	and.w	r3, r3, #4
 8002442:	2b00      	cmp	r3, #0
 8002444:	d00a      	beq.n	800245c <HAL_UART_IRQHandler+0xb0>
 8002446:	69fb      	ldr	r3, [r7, #28]
 8002448:	f003 0301 	and.w	r3, r3, #1
 800244c:	2b00      	cmp	r3, #0
 800244e:	d005      	beq.n	800245c <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002454:	f043 0202 	orr.w	r2, r3, #2
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800245c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800245e:	f003 0302 	and.w	r3, r3, #2
 8002462:	2b00      	cmp	r3, #0
 8002464:	d00a      	beq.n	800247c <HAL_UART_IRQHandler+0xd0>
 8002466:	69fb      	ldr	r3, [r7, #28]
 8002468:	f003 0301 	and.w	r3, r3, #1
 800246c:	2b00      	cmp	r3, #0
 800246e:	d005      	beq.n	800247c <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002474:	f043 0204 	orr.w	r2, r3, #4
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 800247c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800247e:	f003 0308 	and.w	r3, r3, #8
 8002482:	2b00      	cmp	r3, #0
 8002484:	d00f      	beq.n	80024a6 <HAL_UART_IRQHandler+0xfa>
 8002486:	6a3b      	ldr	r3, [r7, #32]
 8002488:	f003 0320 	and.w	r3, r3, #32
 800248c:	2b00      	cmp	r3, #0
 800248e:	d104      	bne.n	800249a <HAL_UART_IRQHandler+0xee>
 8002490:	69fb      	ldr	r3, [r7, #28]
 8002492:	f003 0301 	and.w	r3, r3, #1
 8002496:	2b00      	cmp	r3, #0
 8002498:	d005      	beq.n	80024a6 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800249e:	f043 0208 	orr.w	r2, r3, #8
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	f000 811e 	beq.w	80026ec <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80024b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024b2:	f003 0320 	and.w	r3, r3, #32
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d007      	beq.n	80024ca <HAL_UART_IRQHandler+0x11e>
 80024ba:	6a3b      	ldr	r3, [r7, #32]
 80024bc:	f003 0320 	and.w	r3, r3, #32
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d002      	beq.n	80024ca <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 80024c4:	6878      	ldr	r0, [r7, #4]
 80024c6:	f000 fa62 	bl	800298e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	695b      	ldr	r3, [r3, #20]
 80024d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	bf14      	ite	ne
 80024d8:	2301      	movne	r3, #1
 80024da:	2300      	moveq	r3, #0
 80024dc:	b2db      	uxtb	r3, r3
 80024de:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024e4:	f003 0308 	and.w	r3, r3, #8
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d102      	bne.n	80024f2 <HAL_UART_IRQHandler+0x146>
 80024ec:	697b      	ldr	r3, [r7, #20]
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d031      	beq.n	8002556 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80024f2:	6878      	ldr	r0, [r7, #4]
 80024f4:	f000 f9a4 	bl	8002840 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	695b      	ldr	r3, [r3, #20]
 80024fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002502:	2b00      	cmp	r3, #0
 8002504:	d023      	beq.n	800254e <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	695a      	ldr	r2, [r3, #20]
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002514:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800251a:	2b00      	cmp	r3, #0
 800251c:	d013      	beq.n	8002546 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002522:	4a76      	ldr	r2, [pc, #472]	; (80026fc <HAL_UART_IRQHandler+0x350>)
 8002524:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800252a:	4618      	mov	r0, r3
 800252c:	f7fe fc6a 	bl	8000e04 <HAL_DMA_Abort_IT>
 8002530:	4603      	mov	r3, r0
 8002532:	2b00      	cmp	r3, #0
 8002534:	d016      	beq.n	8002564 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800253a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800253c:	687a      	ldr	r2, [r7, #4]
 800253e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002540:	4610      	mov	r0, r2
 8002542:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002544:	e00e      	b.n	8002564 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002546:	6878      	ldr	r0, [r7, #4]
 8002548:	f000 f8e3 	bl	8002712 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800254c:	e00a      	b.n	8002564 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800254e:	6878      	ldr	r0, [r7, #4]
 8002550:	f000 f8df 	bl	8002712 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002554:	e006      	b.n	8002564 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002556:	6878      	ldr	r0, [r7, #4]
 8002558:	f000 f8db 	bl	8002712 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	2200      	movs	r2, #0
 8002560:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8002562:	e0c3      	b.n	80026ec <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002564:	bf00      	nop
    return;
 8002566:	e0c1      	b.n	80026ec <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800256c:	2b01      	cmp	r3, #1
 800256e:	f040 80a1 	bne.w	80026b4 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8002572:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002574:	f003 0310 	and.w	r3, r3, #16
 8002578:	2b00      	cmp	r3, #0
 800257a:	f000 809b 	beq.w	80026b4 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 800257e:	6a3b      	ldr	r3, [r7, #32]
 8002580:	f003 0310 	and.w	r3, r3, #16
 8002584:	2b00      	cmp	r3, #0
 8002586:	f000 8095 	beq.w	80026b4 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800258a:	2300      	movs	r3, #0
 800258c:	60fb      	str	r3, [r7, #12]
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	60fb      	str	r3, [r7, #12]
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	685b      	ldr	r3, [r3, #4]
 800259c:	60fb      	str	r3, [r7, #12]
 800259e:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	695b      	ldr	r3, [r3, #20]
 80025a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d04e      	beq.n	800264c <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	685b      	ldr	r3, [r3, #4]
 80025b6:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 80025b8:	8a3b      	ldrh	r3, [r7, #16]
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	f000 8098 	beq.w	80026f0 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80025c4:	8a3a      	ldrh	r2, [r7, #16]
 80025c6:	429a      	cmp	r2, r3
 80025c8:	f080 8092 	bcs.w	80026f0 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	8a3a      	ldrh	r2, [r7, #16]
 80025d0:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025d6:	699b      	ldr	r3, [r3, #24]
 80025d8:	2b20      	cmp	r3, #32
 80025da:	d02b      	beq.n	8002634 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	68da      	ldr	r2, [r3, #12]
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80025ea:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	695a      	ldr	r2, [r3, #20]
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f022 0201 	bic.w	r2, r2, #1
 80025fa:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	695a      	ldr	r2, [r3, #20]
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800260a:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	2220      	movs	r2, #32
 8002610:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	2200      	movs	r2, #0
 8002618:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	68da      	ldr	r2, [r3, #12]
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	f022 0210 	bic.w	r2, r2, #16
 8002628:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800262e:	4618      	mov	r0, r3
 8002630:	f7fe fbad 	bl	8000d8e <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800263c:	b29b      	uxth	r3, r3
 800263e:	1ad3      	subs	r3, r2, r3
 8002640:	b29b      	uxth	r3, r3
 8002642:	4619      	mov	r1, r3
 8002644:	6878      	ldr	r0, [r7, #4]
 8002646:	f000 f86d 	bl	8002724 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800264a:	e051      	b.n	80026f0 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002654:	b29b      	uxth	r3, r3
 8002656:	1ad3      	subs	r3, r2, r3
 8002658:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800265e:	b29b      	uxth	r3, r3
 8002660:	2b00      	cmp	r3, #0
 8002662:	d047      	beq.n	80026f4 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8002664:	8a7b      	ldrh	r3, [r7, #18]
 8002666:	2b00      	cmp	r3, #0
 8002668:	d044      	beq.n	80026f4 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	68da      	ldr	r2, [r3, #12]
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8002678:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	695a      	ldr	r2, [r3, #20]
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	f022 0201 	bic.w	r2, r2, #1
 8002688:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	2220      	movs	r2, #32
 800268e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	2200      	movs	r2, #0
 8002696:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	68da      	ldr	r2, [r3, #12]
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	f022 0210 	bic.w	r2, r2, #16
 80026a6:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80026a8:	8a7b      	ldrh	r3, [r7, #18]
 80026aa:	4619      	mov	r1, r3
 80026ac:	6878      	ldr	r0, [r7, #4]
 80026ae:	f000 f839 	bl	8002724 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80026b2:	e01f      	b.n	80026f4 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80026b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d008      	beq.n	80026d0 <HAL_UART_IRQHandler+0x324>
 80026be:	6a3b      	ldr	r3, [r7, #32]
 80026c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d003      	beq.n	80026d0 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 80026c8:	6878      	ldr	r0, [r7, #4]
 80026ca:	f000 f8f9 	bl	80028c0 <UART_Transmit_IT>
    return;
 80026ce:	e012      	b.n	80026f6 <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80026d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d00d      	beq.n	80026f6 <HAL_UART_IRQHandler+0x34a>
 80026da:	6a3b      	ldr	r3, [r7, #32]
 80026dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d008      	beq.n	80026f6 <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 80026e4:	6878      	ldr	r0, [r7, #4]
 80026e6:	f000 f93a 	bl	800295e <UART_EndTransmit_IT>
    return;
 80026ea:	e004      	b.n	80026f6 <HAL_UART_IRQHandler+0x34a>
    return;
 80026ec:	bf00      	nop
 80026ee:	e002      	b.n	80026f6 <HAL_UART_IRQHandler+0x34a>
      return;
 80026f0:	bf00      	nop
 80026f2:	e000      	b.n	80026f6 <HAL_UART_IRQHandler+0x34a>
      return;
 80026f4:	bf00      	nop
  }
}
 80026f6:	3728      	adds	r7, #40	; 0x28
 80026f8:	46bd      	mov	sp, r7
 80026fa:	bd80      	pop	{r7, pc}
 80026fc:	08002899 	.word	0x08002899

08002700 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002700:	b480      	push	{r7}
 8002702:	b083      	sub	sp, #12
 8002704:	af00      	add	r7, sp, #0
 8002706:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002708:	bf00      	nop
 800270a:	370c      	adds	r7, #12
 800270c:	46bd      	mov	sp, r7
 800270e:	bc80      	pop	{r7}
 8002710:	4770      	bx	lr

08002712 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002712:	b480      	push	{r7}
 8002714:	b083      	sub	sp, #12
 8002716:	af00      	add	r7, sp, #0
 8002718:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800271a:	bf00      	nop
 800271c:	370c      	adds	r7, #12
 800271e:	46bd      	mov	sp, r7
 8002720:	bc80      	pop	{r7}
 8002722:	4770      	bx	lr

08002724 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002724:	b480      	push	{r7}
 8002726:	b083      	sub	sp, #12
 8002728:	af00      	add	r7, sp, #0
 800272a:	6078      	str	r0, [r7, #4]
 800272c:	460b      	mov	r3, r1
 800272e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002730:	bf00      	nop
 8002732:	370c      	adds	r7, #12
 8002734:	46bd      	mov	sp, r7
 8002736:	bc80      	pop	{r7}
 8002738:	4770      	bx	lr

0800273a <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800273a:	b580      	push	{r7, lr}
 800273c:	b084      	sub	sp, #16
 800273e:	af00      	add	r7, sp, #0
 8002740:	60f8      	str	r0, [r7, #12]
 8002742:	60b9      	str	r1, [r7, #8]
 8002744:	603b      	str	r3, [r7, #0]
 8002746:	4613      	mov	r3, r2
 8002748:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800274a:	e02c      	b.n	80027a6 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800274c:	69bb      	ldr	r3, [r7, #24]
 800274e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002752:	d028      	beq.n	80027a6 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002754:	69bb      	ldr	r3, [r7, #24]
 8002756:	2b00      	cmp	r3, #0
 8002758:	d007      	beq.n	800276a <UART_WaitOnFlagUntilTimeout+0x30>
 800275a:	f7fe fa0b 	bl	8000b74 <HAL_GetTick>
 800275e:	4602      	mov	r2, r0
 8002760:	683b      	ldr	r3, [r7, #0]
 8002762:	1ad3      	subs	r3, r2, r3
 8002764:	69ba      	ldr	r2, [r7, #24]
 8002766:	429a      	cmp	r2, r3
 8002768:	d21d      	bcs.n	80027a6 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	68da      	ldr	r2, [r3, #12]
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002778:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	695a      	ldr	r2, [r3, #20]
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	f022 0201 	bic.w	r2, r2, #1
 8002788:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	2220      	movs	r2, #32
 800278e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	2220      	movs	r2, #32
 8002796:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	2200      	movs	r2, #0
 800279e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80027a2:	2303      	movs	r3, #3
 80027a4:	e00f      	b.n	80027c6 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	681a      	ldr	r2, [r3, #0]
 80027ac:	68bb      	ldr	r3, [r7, #8]
 80027ae:	4013      	ands	r3, r2
 80027b0:	68ba      	ldr	r2, [r7, #8]
 80027b2:	429a      	cmp	r2, r3
 80027b4:	bf0c      	ite	eq
 80027b6:	2301      	moveq	r3, #1
 80027b8:	2300      	movne	r3, #0
 80027ba:	b2db      	uxtb	r3, r3
 80027bc:	461a      	mov	r2, r3
 80027be:	79fb      	ldrb	r3, [r7, #7]
 80027c0:	429a      	cmp	r2, r3
 80027c2:	d0c3      	beq.n	800274c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80027c4:	2300      	movs	r3, #0
}
 80027c6:	4618      	mov	r0, r3
 80027c8:	3710      	adds	r7, #16
 80027ca:	46bd      	mov	sp, r7
 80027cc:	bd80      	pop	{r7, pc}

080027ce <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80027ce:	b480      	push	{r7}
 80027d0:	b085      	sub	sp, #20
 80027d2:	af00      	add	r7, sp, #0
 80027d4:	60f8      	str	r0, [r7, #12]
 80027d6:	60b9      	str	r1, [r7, #8]
 80027d8:	4613      	mov	r3, r2
 80027da:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	68ba      	ldr	r2, [r7, #8]
 80027e0:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	88fa      	ldrh	r2, [r7, #6]
 80027e6:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	88fa      	ldrh	r2, [r7, #6]
 80027ec:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	2200      	movs	r2, #0
 80027f2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	2222      	movs	r2, #34	; 0x22
 80027f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	2200      	movs	r2, #0
 8002800:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	68da      	ldr	r2, [r3, #12]
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002812:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	695a      	ldr	r2, [r3, #20]
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	f042 0201 	orr.w	r2, r2, #1
 8002822:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	68da      	ldr	r2, [r3, #12]
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	f042 0220 	orr.w	r2, r2, #32
 8002832:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8002834:	2300      	movs	r3, #0
}
 8002836:	4618      	mov	r0, r3
 8002838:	3714      	adds	r7, #20
 800283a:	46bd      	mov	sp, r7
 800283c:	bc80      	pop	{r7}
 800283e:	4770      	bx	lr

08002840 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002840:	b480      	push	{r7}
 8002842:	b083      	sub	sp, #12
 8002844:	af00      	add	r7, sp, #0
 8002846:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	68da      	ldr	r2, [r3, #12]
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8002856:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	695a      	ldr	r2, [r3, #20]
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	f022 0201 	bic.w	r2, r2, #1
 8002866:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800286c:	2b01      	cmp	r3, #1
 800286e:	d107      	bne.n	8002880 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	68da      	ldr	r2, [r3, #12]
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	f022 0210 	bic.w	r2, r2, #16
 800287e:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	2220      	movs	r2, #32
 8002884:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	2200      	movs	r2, #0
 800288c:	631a      	str	r2, [r3, #48]	; 0x30
}
 800288e:	bf00      	nop
 8002890:	370c      	adds	r7, #12
 8002892:	46bd      	mov	sp, r7
 8002894:	bc80      	pop	{r7}
 8002896:	4770      	bx	lr

08002898 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002898:	b580      	push	{r7, lr}
 800289a:	b084      	sub	sp, #16
 800289c:	af00      	add	r7, sp, #0
 800289e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028a4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	2200      	movs	r2, #0
 80028aa:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	2200      	movs	r2, #0
 80028b0:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80028b2:	68f8      	ldr	r0, [r7, #12]
 80028b4:	f7ff ff2d 	bl	8002712 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80028b8:	bf00      	nop
 80028ba:	3710      	adds	r7, #16
 80028bc:	46bd      	mov	sp, r7
 80028be:	bd80      	pop	{r7, pc}

080028c0 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80028c0:	b480      	push	{r7}
 80028c2:	b085      	sub	sp, #20
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80028ce:	b2db      	uxtb	r3, r3
 80028d0:	2b21      	cmp	r3, #33	; 0x21
 80028d2:	d13e      	bne.n	8002952 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	689b      	ldr	r3, [r3, #8]
 80028d8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80028dc:	d114      	bne.n	8002908 <UART_Transmit_IT+0x48>
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	691b      	ldr	r3, [r3, #16]
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d110      	bne.n	8002908 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	6a1b      	ldr	r3, [r3, #32]
 80028ea:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	881b      	ldrh	r3, [r3, #0]
 80028f0:	461a      	mov	r2, r3
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80028fa:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	6a1b      	ldr	r3, [r3, #32]
 8002900:	1c9a      	adds	r2, r3, #2
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	621a      	str	r2, [r3, #32]
 8002906:	e008      	b.n	800291a <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	6a1b      	ldr	r3, [r3, #32]
 800290c:	1c59      	adds	r1, r3, #1
 800290e:	687a      	ldr	r2, [r7, #4]
 8002910:	6211      	str	r1, [r2, #32]
 8002912:	781a      	ldrb	r2, [r3, #0]
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800291e:	b29b      	uxth	r3, r3
 8002920:	3b01      	subs	r3, #1
 8002922:	b29b      	uxth	r3, r3
 8002924:	687a      	ldr	r2, [r7, #4]
 8002926:	4619      	mov	r1, r3
 8002928:	84d1      	strh	r1, [r2, #38]	; 0x26
 800292a:	2b00      	cmp	r3, #0
 800292c:	d10f      	bne.n	800294e <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	68da      	ldr	r2, [r3, #12]
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800293c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	68da      	ldr	r2, [r3, #12]
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800294c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800294e:	2300      	movs	r3, #0
 8002950:	e000      	b.n	8002954 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8002952:	2302      	movs	r3, #2
  }
}
 8002954:	4618      	mov	r0, r3
 8002956:	3714      	adds	r7, #20
 8002958:	46bd      	mov	sp, r7
 800295a:	bc80      	pop	{r7}
 800295c:	4770      	bx	lr

0800295e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800295e:	b580      	push	{r7, lr}
 8002960:	b082      	sub	sp, #8
 8002962:	af00      	add	r7, sp, #0
 8002964:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	68da      	ldr	r2, [r3, #12]
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002974:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	2220      	movs	r2, #32
 800297a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800297e:	6878      	ldr	r0, [r7, #4]
 8002980:	f7ff febe 	bl	8002700 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002984:	2300      	movs	r3, #0
}
 8002986:	4618      	mov	r0, r3
 8002988:	3708      	adds	r7, #8
 800298a:	46bd      	mov	sp, r7
 800298c:	bd80      	pop	{r7, pc}

0800298e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800298e:	b580      	push	{r7, lr}
 8002990:	b086      	sub	sp, #24
 8002992:	af00      	add	r7, sp, #0
 8002994:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800299c:	b2db      	uxtb	r3, r3
 800299e:	2b22      	cmp	r3, #34	; 0x22
 80029a0:	f040 8099 	bne.w	8002ad6 <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	689b      	ldr	r3, [r3, #8]
 80029a8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80029ac:	d117      	bne.n	80029de <UART_Receive_IT+0x50>
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	691b      	ldr	r3, [r3, #16]
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d113      	bne.n	80029de <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80029b6:	2300      	movs	r3, #0
 80029b8:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029be:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	685b      	ldr	r3, [r3, #4]
 80029c6:	b29b      	uxth	r3, r3
 80029c8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80029cc:	b29a      	uxth	r2, r3
 80029ce:	693b      	ldr	r3, [r7, #16]
 80029d0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029d6:	1c9a      	adds	r2, r3, #2
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	629a      	str	r2, [r3, #40]	; 0x28
 80029dc:	e026      	b.n	8002a2c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029e2:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 80029e4:	2300      	movs	r3, #0
 80029e6:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	689b      	ldr	r3, [r3, #8]
 80029ec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80029f0:	d007      	beq.n	8002a02 <UART_Receive_IT+0x74>
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	689b      	ldr	r3, [r3, #8]
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d10a      	bne.n	8002a10 <UART_Receive_IT+0x82>
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	691b      	ldr	r3, [r3, #16]
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d106      	bne.n	8002a10 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	685b      	ldr	r3, [r3, #4]
 8002a08:	b2da      	uxtb	r2, r3
 8002a0a:	697b      	ldr	r3, [r7, #20]
 8002a0c:	701a      	strb	r2, [r3, #0]
 8002a0e:	e008      	b.n	8002a22 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	685b      	ldr	r3, [r3, #4]
 8002a16:	b2db      	uxtb	r3, r3
 8002a18:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002a1c:	b2da      	uxtb	r2, r3
 8002a1e:	697b      	ldr	r3, [r7, #20]
 8002a20:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a26:	1c5a      	adds	r2, r3, #1
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002a30:	b29b      	uxth	r3, r3
 8002a32:	3b01      	subs	r3, #1
 8002a34:	b29b      	uxth	r3, r3
 8002a36:	687a      	ldr	r2, [r7, #4]
 8002a38:	4619      	mov	r1, r3
 8002a3a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d148      	bne.n	8002ad2 <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	68da      	ldr	r2, [r3, #12]
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	f022 0220 	bic.w	r2, r2, #32
 8002a4e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	68da      	ldr	r2, [r3, #12]
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002a5e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	695a      	ldr	r2, [r3, #20]
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	f022 0201 	bic.w	r2, r2, #1
 8002a6e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	2220      	movs	r2, #32
 8002a74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a7c:	2b01      	cmp	r3, #1
 8002a7e:	d123      	bne.n	8002ac8 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	2200      	movs	r2, #0
 8002a84:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	68da      	ldr	r2, [r3, #12]
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	f022 0210 	bic.w	r2, r2, #16
 8002a94:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	f003 0310 	and.w	r3, r3, #16
 8002aa0:	2b10      	cmp	r3, #16
 8002aa2:	d10a      	bne.n	8002aba <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002aa4:	2300      	movs	r3, #0
 8002aa6:	60fb      	str	r3, [r7, #12]
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	60fb      	str	r3, [r7, #12]
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	685b      	ldr	r3, [r3, #4]
 8002ab6:	60fb      	str	r3, [r7, #12]
 8002ab8:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002abe:	4619      	mov	r1, r3
 8002ac0:	6878      	ldr	r0, [r7, #4]
 8002ac2:	f7ff fe2f 	bl	8002724 <HAL_UARTEx_RxEventCallback>
 8002ac6:	e002      	b.n	8002ace <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8002ac8:	6878      	ldr	r0, [r7, #4]
 8002aca:	f7fd fd1d 	bl	8000508 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8002ace:	2300      	movs	r3, #0
 8002ad0:	e002      	b.n	8002ad8 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 8002ad2:	2300      	movs	r3, #0
 8002ad4:	e000      	b.n	8002ad8 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8002ad6:	2302      	movs	r3, #2
  }
}
 8002ad8:	4618      	mov	r0, r3
 8002ada:	3718      	adds	r7, #24
 8002adc:	46bd      	mov	sp, r7
 8002ade:	bd80      	pop	{r7, pc}

08002ae0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002ae0:	b580      	push	{r7, lr}
 8002ae2:	b084      	sub	sp, #16
 8002ae4:	af00      	add	r7, sp, #0
 8002ae6:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	691b      	ldr	r3, [r3, #16]
 8002aee:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	68da      	ldr	r2, [r3, #12]
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	430a      	orrs	r2, r1
 8002afc:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	689a      	ldr	r2, [r3, #8]
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	691b      	ldr	r3, [r3, #16]
 8002b06:	431a      	orrs	r2, r3
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	695b      	ldr	r3, [r3, #20]
 8002b0c:	4313      	orrs	r3, r2
 8002b0e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	68db      	ldr	r3, [r3, #12]
 8002b16:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8002b1a:	f023 030c 	bic.w	r3, r3, #12
 8002b1e:	687a      	ldr	r2, [r7, #4]
 8002b20:	6812      	ldr	r2, [r2, #0]
 8002b22:	68b9      	ldr	r1, [r7, #8]
 8002b24:	430b      	orrs	r3, r1
 8002b26:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	695b      	ldr	r3, [r3, #20]
 8002b2e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	699a      	ldr	r2, [r3, #24]
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	430a      	orrs	r2, r1
 8002b3c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	4a2c      	ldr	r2, [pc, #176]	; (8002bf4 <UART_SetConfig+0x114>)
 8002b44:	4293      	cmp	r3, r2
 8002b46:	d103      	bne.n	8002b50 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002b48:	f7fe ff8e 	bl	8001a68 <HAL_RCC_GetPCLK2Freq>
 8002b4c:	60f8      	str	r0, [r7, #12]
 8002b4e:	e002      	b.n	8002b56 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002b50:	f7fe ff76 	bl	8001a40 <HAL_RCC_GetPCLK1Freq>
 8002b54:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002b56:	68fa      	ldr	r2, [r7, #12]
 8002b58:	4613      	mov	r3, r2
 8002b5a:	009b      	lsls	r3, r3, #2
 8002b5c:	4413      	add	r3, r2
 8002b5e:	009a      	lsls	r2, r3, #2
 8002b60:	441a      	add	r2, r3
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	685b      	ldr	r3, [r3, #4]
 8002b66:	009b      	lsls	r3, r3, #2
 8002b68:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b6c:	4a22      	ldr	r2, [pc, #136]	; (8002bf8 <UART_SetConfig+0x118>)
 8002b6e:	fba2 2303 	umull	r2, r3, r2, r3
 8002b72:	095b      	lsrs	r3, r3, #5
 8002b74:	0119      	lsls	r1, r3, #4
 8002b76:	68fa      	ldr	r2, [r7, #12]
 8002b78:	4613      	mov	r3, r2
 8002b7a:	009b      	lsls	r3, r3, #2
 8002b7c:	4413      	add	r3, r2
 8002b7e:	009a      	lsls	r2, r3, #2
 8002b80:	441a      	add	r2, r3
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	685b      	ldr	r3, [r3, #4]
 8002b86:	009b      	lsls	r3, r3, #2
 8002b88:	fbb2 f2f3 	udiv	r2, r2, r3
 8002b8c:	4b1a      	ldr	r3, [pc, #104]	; (8002bf8 <UART_SetConfig+0x118>)
 8002b8e:	fba3 0302 	umull	r0, r3, r3, r2
 8002b92:	095b      	lsrs	r3, r3, #5
 8002b94:	2064      	movs	r0, #100	; 0x64
 8002b96:	fb00 f303 	mul.w	r3, r0, r3
 8002b9a:	1ad3      	subs	r3, r2, r3
 8002b9c:	011b      	lsls	r3, r3, #4
 8002b9e:	3332      	adds	r3, #50	; 0x32
 8002ba0:	4a15      	ldr	r2, [pc, #84]	; (8002bf8 <UART_SetConfig+0x118>)
 8002ba2:	fba2 2303 	umull	r2, r3, r2, r3
 8002ba6:	095b      	lsrs	r3, r3, #5
 8002ba8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002bac:	4419      	add	r1, r3
 8002bae:	68fa      	ldr	r2, [r7, #12]
 8002bb0:	4613      	mov	r3, r2
 8002bb2:	009b      	lsls	r3, r3, #2
 8002bb4:	4413      	add	r3, r2
 8002bb6:	009a      	lsls	r2, r3, #2
 8002bb8:	441a      	add	r2, r3
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	685b      	ldr	r3, [r3, #4]
 8002bbe:	009b      	lsls	r3, r3, #2
 8002bc0:	fbb2 f2f3 	udiv	r2, r2, r3
 8002bc4:	4b0c      	ldr	r3, [pc, #48]	; (8002bf8 <UART_SetConfig+0x118>)
 8002bc6:	fba3 0302 	umull	r0, r3, r3, r2
 8002bca:	095b      	lsrs	r3, r3, #5
 8002bcc:	2064      	movs	r0, #100	; 0x64
 8002bce:	fb00 f303 	mul.w	r3, r0, r3
 8002bd2:	1ad3      	subs	r3, r2, r3
 8002bd4:	011b      	lsls	r3, r3, #4
 8002bd6:	3332      	adds	r3, #50	; 0x32
 8002bd8:	4a07      	ldr	r2, [pc, #28]	; (8002bf8 <UART_SetConfig+0x118>)
 8002bda:	fba2 2303 	umull	r2, r3, r2, r3
 8002bde:	095b      	lsrs	r3, r3, #5
 8002be0:	f003 020f 	and.w	r2, r3, #15
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	440a      	add	r2, r1
 8002bea:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002bec:	bf00      	nop
 8002bee:	3710      	adds	r7, #16
 8002bf0:	46bd      	mov	sp, r7
 8002bf2:	bd80      	pop	{r7, pc}
 8002bf4:	40013800 	.word	0x40013800
 8002bf8:	51eb851f 	.word	0x51eb851f

08002bfc <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8002bfc:	b480      	push	{r7}
 8002bfe:	b085      	sub	sp, #20
 8002c00:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002c02:	f3ef 8305 	mrs	r3, IPSR
 8002c06:	60bb      	str	r3, [r7, #8]
  return(result);
 8002c08:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d10f      	bne.n	8002c2e <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002c0e:	f3ef 8310 	mrs	r3, PRIMASK
 8002c12:	607b      	str	r3, [r7, #4]
  return(result);
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d109      	bne.n	8002c2e <osKernelInitialize+0x32>
 8002c1a:	4b10      	ldr	r3, [pc, #64]	; (8002c5c <osKernelInitialize+0x60>)
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	2b02      	cmp	r3, #2
 8002c20:	d109      	bne.n	8002c36 <osKernelInitialize+0x3a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8002c22:	f3ef 8311 	mrs	r3, BASEPRI
 8002c26:	603b      	str	r3, [r7, #0]
  return(result);
 8002c28:	683b      	ldr	r3, [r7, #0]
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d003      	beq.n	8002c36 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8002c2e:	f06f 0305 	mvn.w	r3, #5
 8002c32:	60fb      	str	r3, [r7, #12]
 8002c34:	e00c      	b.n	8002c50 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8002c36:	4b09      	ldr	r3, [pc, #36]	; (8002c5c <osKernelInitialize+0x60>)
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d105      	bne.n	8002c4a <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 8002c3e:	4b07      	ldr	r3, [pc, #28]	; (8002c5c <osKernelInitialize+0x60>)
 8002c40:	2201      	movs	r2, #1
 8002c42:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8002c44:	2300      	movs	r3, #0
 8002c46:	60fb      	str	r3, [r7, #12]
 8002c48:	e002      	b.n	8002c50 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8002c4a:	f04f 33ff 	mov.w	r3, #4294967295
 8002c4e:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8002c50:	68fb      	ldr	r3, [r7, #12]
}
 8002c52:	4618      	mov	r0, r3
 8002c54:	3714      	adds	r7, #20
 8002c56:	46bd      	mov	sp, r7
 8002c58:	bc80      	pop	{r7}
 8002c5a:	4770      	bx	lr
 8002c5c:	20000208 	.word	0x20000208

08002c60 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8002c60:	b580      	push	{r7, lr}
 8002c62:	b084      	sub	sp, #16
 8002c64:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002c66:	f3ef 8305 	mrs	r3, IPSR
 8002c6a:	60bb      	str	r3, [r7, #8]
  return(result);
 8002c6c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d10f      	bne.n	8002c92 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002c72:	f3ef 8310 	mrs	r3, PRIMASK
 8002c76:	607b      	str	r3, [r7, #4]
  return(result);
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d109      	bne.n	8002c92 <osKernelStart+0x32>
 8002c7e:	4b11      	ldr	r3, [pc, #68]	; (8002cc4 <osKernelStart+0x64>)
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	2b02      	cmp	r3, #2
 8002c84:	d109      	bne.n	8002c9a <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8002c86:	f3ef 8311 	mrs	r3, BASEPRI
 8002c8a:	603b      	str	r3, [r7, #0]
  return(result);
 8002c8c:	683b      	ldr	r3, [r7, #0]
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d003      	beq.n	8002c9a <osKernelStart+0x3a>
    stat = osErrorISR;
 8002c92:	f06f 0305 	mvn.w	r3, #5
 8002c96:	60fb      	str	r3, [r7, #12]
 8002c98:	e00e      	b.n	8002cb8 <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 8002c9a:	4b0a      	ldr	r3, [pc, #40]	; (8002cc4 <osKernelStart+0x64>)
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	2b01      	cmp	r3, #1
 8002ca0:	d107      	bne.n	8002cb2 <osKernelStart+0x52>
      KernelState = osKernelRunning;
 8002ca2:	4b08      	ldr	r3, [pc, #32]	; (8002cc4 <osKernelStart+0x64>)
 8002ca4:	2202      	movs	r2, #2
 8002ca6:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 8002ca8:	f001 f8c8 	bl	8003e3c <vTaskStartScheduler>
      stat = osOK;
 8002cac:	2300      	movs	r3, #0
 8002cae:	60fb      	str	r3, [r7, #12]
 8002cb0:	e002      	b.n	8002cb8 <osKernelStart+0x58>
    } else {
      stat = osError;
 8002cb2:	f04f 33ff 	mov.w	r3, #4294967295
 8002cb6:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8002cb8:	68fb      	ldr	r3, [r7, #12]
}
 8002cba:	4618      	mov	r0, r3
 8002cbc:	3710      	adds	r7, #16
 8002cbe:	46bd      	mov	sp, r7
 8002cc0:	bd80      	pop	{r7, pc}
 8002cc2:	bf00      	nop
 8002cc4:	20000208 	.word	0x20000208

08002cc8 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8002cc8:	b580      	push	{r7, lr}
 8002cca:	b092      	sub	sp, #72	; 0x48
 8002ccc:	af04      	add	r7, sp, #16
 8002cce:	60f8      	str	r0, [r7, #12]
 8002cd0:	60b9      	str	r1, [r7, #8]
 8002cd2:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8002cd4:	2300      	movs	r3, #0
 8002cd6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002cd8:	f3ef 8305 	mrs	r3, IPSR
 8002cdc:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8002cde:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	f040 8094 	bne.w	8002e0e <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002ce6:	f3ef 8310 	mrs	r3, PRIMASK
 8002cea:	623b      	str	r3, [r7, #32]
  return(result);
 8002cec:	6a3b      	ldr	r3, [r7, #32]
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	f040 808d 	bne.w	8002e0e <osThreadNew+0x146>
 8002cf4:	4b48      	ldr	r3, [pc, #288]	; (8002e18 <osThreadNew+0x150>)
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	2b02      	cmp	r3, #2
 8002cfa:	d106      	bne.n	8002d0a <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8002cfc:	f3ef 8311 	mrs	r3, BASEPRI
 8002d00:	61fb      	str	r3, [r7, #28]
  return(result);
 8002d02:	69fb      	ldr	r3, [r7, #28]
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	f040 8082 	bne.w	8002e0e <osThreadNew+0x146>
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d07e      	beq.n	8002e0e <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 8002d10:	2380      	movs	r3, #128	; 0x80
 8002d12:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 8002d14:	2318      	movs	r3, #24
 8002d16:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 8002d18:	2300      	movs	r3, #0
 8002d1a:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 8002d1c:	f107 031b 	add.w	r3, r7, #27
 8002d20:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 8002d22:	f04f 33ff 	mov.w	r3, #4294967295
 8002d26:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d045      	beq.n	8002dba <osThreadNew+0xf2>
      if (attr->name != NULL) {
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d002      	beq.n	8002d3c <osThreadNew+0x74>
        name = attr->name;
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	699b      	ldr	r3, [r3, #24]
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d002      	beq.n	8002d4a <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	699b      	ldr	r3, [r3, #24]
 8002d48:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8002d4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d008      	beq.n	8002d62 <osThreadNew+0x9a>
 8002d50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d52:	2b38      	cmp	r3, #56	; 0x38
 8002d54:	d805      	bhi.n	8002d62 <osThreadNew+0x9a>
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	685b      	ldr	r3, [r3, #4]
 8002d5a:	f003 0301 	and.w	r3, r3, #1
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d001      	beq.n	8002d66 <osThreadNew+0x9e>
        return (NULL);
 8002d62:	2300      	movs	r3, #0
 8002d64:	e054      	b.n	8002e10 <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	695b      	ldr	r3, [r3, #20]
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d003      	beq.n	8002d76 <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	695b      	ldr	r3, [r3, #20]
 8002d72:	089b      	lsrs	r3, r3, #2
 8002d74:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	689b      	ldr	r3, [r3, #8]
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d00e      	beq.n	8002d9c <osThreadNew+0xd4>
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	68db      	ldr	r3, [r3, #12]
 8002d82:	2bbb      	cmp	r3, #187	; 0xbb
 8002d84:	d90a      	bls.n	8002d9c <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d006      	beq.n	8002d9c <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	695b      	ldr	r3, [r3, #20]
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d002      	beq.n	8002d9c <osThreadNew+0xd4>
        mem = 1;
 8002d96:	2301      	movs	r3, #1
 8002d98:	62bb      	str	r3, [r7, #40]	; 0x28
 8002d9a:	e010      	b.n	8002dbe <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	689b      	ldr	r3, [r3, #8]
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d10c      	bne.n	8002dbe <osThreadNew+0xf6>
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	68db      	ldr	r3, [r3, #12]
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d108      	bne.n	8002dbe <osThreadNew+0xf6>
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	691b      	ldr	r3, [r3, #16]
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d104      	bne.n	8002dbe <osThreadNew+0xf6>
          mem = 0;
 8002db4:	2300      	movs	r3, #0
 8002db6:	62bb      	str	r3, [r7, #40]	; 0x28
 8002db8:	e001      	b.n	8002dbe <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 8002dba:	2300      	movs	r3, #0
 8002dbc:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 8002dbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002dc0:	2b01      	cmp	r3, #1
 8002dc2:	d110      	bne.n	8002de6 <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8002dc8:	687a      	ldr	r2, [r7, #4]
 8002dca:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8002dcc:	9202      	str	r2, [sp, #8]
 8002dce:	9301      	str	r3, [sp, #4]
 8002dd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002dd2:	9300      	str	r3, [sp, #0]
 8002dd4:	68bb      	ldr	r3, [r7, #8]
 8002dd6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002dd8:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8002dda:	68f8      	ldr	r0, [r7, #12]
 8002ddc:	f000 fe7e 	bl	8003adc <xTaskCreateStatic>
 8002de0:	4603      	mov	r3, r0
 8002de2:	617b      	str	r3, [r7, #20]
 8002de4:	e013      	b.n	8002e0e <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 8002de6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d110      	bne.n	8002e0e <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8002dec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002dee:	b29a      	uxth	r2, r3
 8002df0:	f107 0314 	add.w	r3, r7, #20
 8002df4:	9301      	str	r3, [sp, #4]
 8002df6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002df8:	9300      	str	r3, [sp, #0]
 8002dfa:	68bb      	ldr	r3, [r7, #8]
 8002dfc:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8002dfe:	68f8      	ldr	r0, [r7, #12]
 8002e00:	f000 fec8 	bl	8003b94 <xTaskCreate>
 8002e04:	4603      	mov	r3, r0
 8002e06:	2b01      	cmp	r3, #1
 8002e08:	d001      	beq.n	8002e0e <osThreadNew+0x146>
          hTask = NULL;
 8002e0a:	2300      	movs	r3, #0
 8002e0c:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8002e0e:	697b      	ldr	r3, [r7, #20]
}
 8002e10:	4618      	mov	r0, r3
 8002e12:	3738      	adds	r7, #56	; 0x38
 8002e14:	46bd      	mov	sp, r7
 8002e16:	bd80      	pop	{r7, pc}
 8002e18:	20000208 	.word	0x20000208

08002e1c <TimerCallback>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

static void TimerCallback (TimerHandle_t hTimer) {
 8002e1c:	b580      	push	{r7, lr}
 8002e1e:	b084      	sub	sp, #16
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	6078      	str	r0, [r7, #4]
  TimerCallback_t *callb;

  callb = (TimerCallback_t *)pvTimerGetTimerID (hTimer);
 8002e24:	6878      	ldr	r0, [r7, #4]
 8002e26:	f002 f8ed 	bl	8005004 <pvTimerGetTimerID>
 8002e2a:	60f8      	str	r0, [r7, #12]

  if (callb != NULL) {
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d005      	beq.n	8002e3e <TimerCallback+0x22>
    callb->func (callb->arg);
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	68fa      	ldr	r2, [r7, #12]
 8002e38:	6852      	ldr	r2, [r2, #4]
 8002e3a:	4610      	mov	r0, r2
 8002e3c:	4798      	blx	r3
  }
}
 8002e3e:	bf00      	nop
 8002e40:	3710      	adds	r7, #16
 8002e42:	46bd      	mov	sp, r7
 8002e44:	bd80      	pop	{r7, pc}
	...

08002e48 <osTimerNew>:

osTimerId_t osTimerNew (osTimerFunc_t func, osTimerType_t type, void *argument, const osTimerAttr_t *attr) {
 8002e48:	b580      	push	{r7, lr}
 8002e4a:	b08e      	sub	sp, #56	; 0x38
 8002e4c:	af02      	add	r7, sp, #8
 8002e4e:	60f8      	str	r0, [r7, #12]
 8002e50:	607a      	str	r2, [r7, #4]
 8002e52:	603b      	str	r3, [r7, #0]
 8002e54:	460b      	mov	r3, r1
 8002e56:	72fb      	strb	r3, [r7, #11]
  TimerHandle_t hTimer;
  TimerCallback_t *callb;
  UBaseType_t reload;
  int32_t mem;

  hTimer = NULL;
 8002e58:	2300      	movs	r3, #0
 8002e5a:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002e5c:	f3ef 8305 	mrs	r3, IPSR
 8002e60:	61bb      	str	r3, [r7, #24]
  return(result);
 8002e62:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (func != NULL)) {
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d16a      	bne.n	8002f3e <osTimerNew+0xf6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002e68:	f3ef 8310 	mrs	r3, PRIMASK
 8002e6c:	617b      	str	r3, [r7, #20]
  return(result);
 8002e6e:	697b      	ldr	r3, [r7, #20]
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d164      	bne.n	8002f3e <osTimerNew+0xf6>
 8002e74:	4b34      	ldr	r3, [pc, #208]	; (8002f48 <osTimerNew+0x100>)
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	2b02      	cmp	r3, #2
 8002e7a:	d105      	bne.n	8002e88 <osTimerNew+0x40>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8002e7c:	f3ef 8311 	mrs	r3, BASEPRI
 8002e80:	613b      	str	r3, [r7, #16]
  return(result);
 8002e82:	693b      	ldr	r3, [r7, #16]
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d15a      	bne.n	8002f3e <osTimerNew+0xf6>
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d057      	beq.n	8002f3e <osTimerNew+0xf6>
    /* Allocate memory to store callback function and argument */
    callb = pvPortMalloc (sizeof(TimerCallback_t));
 8002e8e:	2008      	movs	r0, #8
 8002e90:	f002 facc 	bl	800542c <pvPortMalloc>
 8002e94:	61f8      	str	r0, [r7, #28]

    if (callb != NULL) {
 8002e96:	69fb      	ldr	r3, [r7, #28]
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d050      	beq.n	8002f3e <osTimerNew+0xf6>
      callb->func = func;
 8002e9c:	69fb      	ldr	r3, [r7, #28]
 8002e9e:	68fa      	ldr	r2, [r7, #12]
 8002ea0:	601a      	str	r2, [r3, #0]
      callb->arg  = argument;
 8002ea2:	69fb      	ldr	r3, [r7, #28]
 8002ea4:	687a      	ldr	r2, [r7, #4]
 8002ea6:	605a      	str	r2, [r3, #4]

      if (type == osTimerOnce) {
 8002ea8:	7afb      	ldrb	r3, [r7, #11]
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d102      	bne.n	8002eb4 <osTimerNew+0x6c>
        reload = pdFALSE;
 8002eae:	2300      	movs	r3, #0
 8002eb0:	627b      	str	r3, [r7, #36]	; 0x24
 8002eb2:	e001      	b.n	8002eb8 <osTimerNew+0x70>
      } else {
        reload = pdTRUE;
 8002eb4:	2301      	movs	r3, #1
 8002eb6:	627b      	str	r3, [r7, #36]	; 0x24
      }

      mem  = -1;
 8002eb8:	f04f 33ff 	mov.w	r3, #4294967295
 8002ebc:	623b      	str	r3, [r7, #32]
      name = NULL;
 8002ebe:	2300      	movs	r3, #0
 8002ec0:	62fb      	str	r3, [r7, #44]	; 0x2c

      if (attr != NULL) {
 8002ec2:	683b      	ldr	r3, [r7, #0]
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d01c      	beq.n	8002f02 <osTimerNew+0xba>
        if (attr->name != NULL) {
 8002ec8:	683b      	ldr	r3, [r7, #0]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d002      	beq.n	8002ed6 <osTimerNew+0x8e>
          name = attr->name;
 8002ed0:	683b      	ldr	r3, [r7, #0]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	62fb      	str	r3, [r7, #44]	; 0x2c
        }

        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticTimer_t))) {
 8002ed6:	683b      	ldr	r3, [r7, #0]
 8002ed8:	689b      	ldr	r3, [r3, #8]
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d006      	beq.n	8002eec <osTimerNew+0xa4>
 8002ede:	683b      	ldr	r3, [r7, #0]
 8002ee0:	68db      	ldr	r3, [r3, #12]
 8002ee2:	2b2f      	cmp	r3, #47	; 0x2f
 8002ee4:	d902      	bls.n	8002eec <osTimerNew+0xa4>
          mem = 1;
 8002ee6:	2301      	movs	r3, #1
 8002ee8:	623b      	str	r3, [r7, #32]
 8002eea:	e00c      	b.n	8002f06 <osTimerNew+0xbe>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8002eec:	683b      	ldr	r3, [r7, #0]
 8002eee:	689b      	ldr	r3, [r3, #8]
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d108      	bne.n	8002f06 <osTimerNew+0xbe>
 8002ef4:	683b      	ldr	r3, [r7, #0]
 8002ef6:	68db      	ldr	r3, [r3, #12]
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d104      	bne.n	8002f06 <osTimerNew+0xbe>
            mem = 0;
 8002efc:	2300      	movs	r3, #0
 8002efe:	623b      	str	r3, [r7, #32]
 8002f00:	e001      	b.n	8002f06 <osTimerNew+0xbe>
          }
        }
      }
      else {
        mem = 0;
 8002f02:	2300      	movs	r3, #0
 8002f04:	623b      	str	r3, [r7, #32]
      }

      if (mem == 1) {
 8002f06:	6a3b      	ldr	r3, [r7, #32]
 8002f08:	2b01      	cmp	r3, #1
 8002f0a:	d10c      	bne.n	8002f26 <osTimerNew+0xde>
        hTimer = xTimerCreateStatic (name, 1, reload, callb, TimerCallback, (StaticTimer_t *)attr->cb_mem);
 8002f0c:	683b      	ldr	r3, [r7, #0]
 8002f0e:	689b      	ldr	r3, [r3, #8]
 8002f10:	9301      	str	r3, [sp, #4]
 8002f12:	4b0e      	ldr	r3, [pc, #56]	; (8002f4c <osTimerNew+0x104>)
 8002f14:	9300      	str	r3, [sp, #0]
 8002f16:	69fb      	ldr	r3, [r7, #28]
 8002f18:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f1a:	2101      	movs	r1, #1
 8002f1c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002f1e:	f001 fd38 	bl	8004992 <xTimerCreateStatic>
 8002f22:	62b8      	str	r0, [r7, #40]	; 0x28
 8002f24:	e00b      	b.n	8002f3e <osTimerNew+0xf6>
      }
      else {
        if (mem == 0) {
 8002f26:	6a3b      	ldr	r3, [r7, #32]
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d108      	bne.n	8002f3e <osTimerNew+0xf6>
          hTimer = xTimerCreate (name, 1, reload, callb, TimerCallback);
 8002f2c:	4b07      	ldr	r3, [pc, #28]	; (8002f4c <osTimerNew+0x104>)
 8002f2e:	9300      	str	r3, [sp, #0]
 8002f30:	69fb      	ldr	r3, [r7, #28]
 8002f32:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f34:	2101      	movs	r1, #1
 8002f36:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002f38:	f001 fd0a 	bl	8004950 <xTimerCreate>
 8002f3c:	62b8      	str	r0, [r7, #40]	; 0x28
        }
      }
    }
  }

  return ((osTimerId_t)hTimer);
 8002f3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8002f40:	4618      	mov	r0, r3
 8002f42:	3730      	adds	r7, #48	; 0x30
 8002f44:	46bd      	mov	sp, r7
 8002f46:	bd80      	pop	{r7, pc}
 8002f48:	20000208 	.word	0x20000208
 8002f4c:	08002e1d 	.word	0x08002e1d

08002f50 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8002f50:	b480      	push	{r7}
 8002f52:	b085      	sub	sp, #20
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	60f8      	str	r0, [r7, #12]
 8002f58:	60b9      	str	r1, [r7, #8]
 8002f5a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	4a06      	ldr	r2, [pc, #24]	; (8002f78 <vApplicationGetIdleTaskMemory+0x28>)
 8002f60:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8002f62:	68bb      	ldr	r3, [r7, #8]
 8002f64:	4a05      	ldr	r2, [pc, #20]	; (8002f7c <vApplicationGetIdleTaskMemory+0x2c>)
 8002f66:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	2280      	movs	r2, #128	; 0x80
 8002f6c:	601a      	str	r2, [r3, #0]
}
 8002f6e:	bf00      	nop
 8002f70:	3714      	adds	r7, #20
 8002f72:	46bd      	mov	sp, r7
 8002f74:	bc80      	pop	{r7}
 8002f76:	4770      	bx	lr
 8002f78:	2000020c 	.word	0x2000020c
 8002f7c:	200002c8 	.word	0x200002c8

08002f80 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8002f80:	b480      	push	{r7}
 8002f82:	b085      	sub	sp, #20
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	60f8      	str	r0, [r7, #12]
 8002f88:	60b9      	str	r1, [r7, #8]
 8002f8a:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	4a07      	ldr	r2, [pc, #28]	; (8002fac <vApplicationGetTimerTaskMemory+0x2c>)
 8002f90:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8002f92:	68bb      	ldr	r3, [r7, #8]
 8002f94:	4a06      	ldr	r2, [pc, #24]	; (8002fb0 <vApplicationGetTimerTaskMemory+0x30>)
 8002f96:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002f9e:	601a      	str	r2, [r3, #0]
}
 8002fa0:	bf00      	nop
 8002fa2:	3714      	adds	r7, #20
 8002fa4:	46bd      	mov	sp, r7
 8002fa6:	bc80      	pop	{r7}
 8002fa8:	4770      	bx	lr
 8002faa:	bf00      	nop
 8002fac:	200004c8 	.word	0x200004c8
 8002fb0:	20000584 	.word	0x20000584

08002fb4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002fb4:	b480      	push	{r7}
 8002fb6:	b083      	sub	sp, #12
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	f103 0208 	add.w	r2, r3, #8
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	f04f 32ff 	mov.w	r2, #4294967295
 8002fcc:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	f103 0208 	add.w	r2, r3, #8
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	f103 0208 	add.w	r2, r3, #8
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	2200      	movs	r2, #0
 8002fe6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002fe8:	bf00      	nop
 8002fea:	370c      	adds	r7, #12
 8002fec:	46bd      	mov	sp, r7
 8002fee:	bc80      	pop	{r7}
 8002ff0:	4770      	bx	lr

08002ff2 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002ff2:	b480      	push	{r7}
 8002ff4:	b083      	sub	sp, #12
 8002ff6:	af00      	add	r7, sp, #0
 8002ff8:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	2200      	movs	r2, #0
 8002ffe:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003000:	bf00      	nop
 8003002:	370c      	adds	r7, #12
 8003004:	46bd      	mov	sp, r7
 8003006:	bc80      	pop	{r7}
 8003008:	4770      	bx	lr

0800300a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800300a:	b480      	push	{r7}
 800300c:	b085      	sub	sp, #20
 800300e:	af00      	add	r7, sp, #0
 8003010:	6078      	str	r0, [r7, #4]
 8003012:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	685b      	ldr	r3, [r3, #4]
 8003018:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800301a:	683b      	ldr	r3, [r7, #0]
 800301c:	68fa      	ldr	r2, [r7, #12]
 800301e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	689a      	ldr	r2, [r3, #8]
 8003024:	683b      	ldr	r3, [r7, #0]
 8003026:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	689b      	ldr	r3, [r3, #8]
 800302c:	683a      	ldr	r2, [r7, #0]
 800302e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	683a      	ldr	r2, [r7, #0]
 8003034:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8003036:	683b      	ldr	r3, [r7, #0]
 8003038:	687a      	ldr	r2, [r7, #4]
 800303a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	1c5a      	adds	r2, r3, #1
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	601a      	str	r2, [r3, #0]
}
 8003046:	bf00      	nop
 8003048:	3714      	adds	r7, #20
 800304a:	46bd      	mov	sp, r7
 800304c:	bc80      	pop	{r7}
 800304e:	4770      	bx	lr

08003050 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003050:	b480      	push	{r7}
 8003052:	b085      	sub	sp, #20
 8003054:	af00      	add	r7, sp, #0
 8003056:	6078      	str	r0, [r7, #4]
 8003058:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800305a:	683b      	ldr	r3, [r7, #0]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003060:	68bb      	ldr	r3, [r7, #8]
 8003062:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003066:	d103      	bne.n	8003070 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	691b      	ldr	r3, [r3, #16]
 800306c:	60fb      	str	r3, [r7, #12]
 800306e:	e00c      	b.n	800308a <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	3308      	adds	r3, #8
 8003074:	60fb      	str	r3, [r7, #12]
 8003076:	e002      	b.n	800307e <vListInsert+0x2e>
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	685b      	ldr	r3, [r3, #4]
 800307c:	60fb      	str	r3, [r7, #12]
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	685b      	ldr	r3, [r3, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	68ba      	ldr	r2, [r7, #8]
 8003086:	429a      	cmp	r2, r3
 8003088:	d2f6      	bcs.n	8003078 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	685a      	ldr	r2, [r3, #4]
 800308e:	683b      	ldr	r3, [r7, #0]
 8003090:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003092:	683b      	ldr	r3, [r7, #0]
 8003094:	685b      	ldr	r3, [r3, #4]
 8003096:	683a      	ldr	r2, [r7, #0]
 8003098:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800309a:	683b      	ldr	r3, [r7, #0]
 800309c:	68fa      	ldr	r2, [r7, #12]
 800309e:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	683a      	ldr	r2, [r7, #0]
 80030a4:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80030a6:	683b      	ldr	r3, [r7, #0]
 80030a8:	687a      	ldr	r2, [r7, #4]
 80030aa:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	1c5a      	adds	r2, r3, #1
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	601a      	str	r2, [r3, #0]
}
 80030b6:	bf00      	nop
 80030b8:	3714      	adds	r7, #20
 80030ba:	46bd      	mov	sp, r7
 80030bc:	bc80      	pop	{r7}
 80030be:	4770      	bx	lr

080030c0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80030c0:	b480      	push	{r7}
 80030c2:	b085      	sub	sp, #20
 80030c4:	af00      	add	r7, sp, #0
 80030c6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	691b      	ldr	r3, [r3, #16]
 80030cc:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	685b      	ldr	r3, [r3, #4]
 80030d2:	687a      	ldr	r2, [r7, #4]
 80030d4:	6892      	ldr	r2, [r2, #8]
 80030d6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	689b      	ldr	r3, [r3, #8]
 80030dc:	687a      	ldr	r2, [r7, #4]
 80030de:	6852      	ldr	r2, [r2, #4]
 80030e0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	685b      	ldr	r3, [r3, #4]
 80030e6:	687a      	ldr	r2, [r7, #4]
 80030e8:	429a      	cmp	r2, r3
 80030ea:	d103      	bne.n	80030f4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	689a      	ldr	r2, [r3, #8]
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	2200      	movs	r2, #0
 80030f8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	1e5a      	subs	r2, r3, #1
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	681b      	ldr	r3, [r3, #0]
}
 8003108:	4618      	mov	r0, r3
 800310a:	3714      	adds	r7, #20
 800310c:	46bd      	mov	sp, r7
 800310e:	bc80      	pop	{r7}
 8003110:	4770      	bx	lr
	...

08003114 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8003114:	b580      	push	{r7, lr}
 8003116:	b084      	sub	sp, #16
 8003118:	af00      	add	r7, sp, #0
 800311a:	6078      	str	r0, [r7, #4]
 800311c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	2b00      	cmp	r3, #0
 8003126:	d10a      	bne.n	800313e <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003128:	f04f 0350 	mov.w	r3, #80	; 0x50
 800312c:	f383 8811 	msr	BASEPRI, r3
 8003130:	f3bf 8f6f 	isb	sy
 8003134:	f3bf 8f4f 	dsb	sy
 8003138:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800313a:	bf00      	nop
 800313c:	e7fe      	b.n	800313c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800313e:	f002 f875 	bl	800522c <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	681a      	ldr	r2, [r3, #0]
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800314a:	68f9      	ldr	r1, [r7, #12]
 800314c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800314e:	fb01 f303 	mul.w	r3, r1, r3
 8003152:	441a      	add	r2, r3
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	2200      	movs	r2, #0
 800315c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	681a      	ldr	r2, [r3, #0]
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	681a      	ldr	r2, [r3, #0]
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800316e:	3b01      	subs	r3, #1
 8003170:	68f9      	ldr	r1, [r7, #12]
 8003172:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003174:	fb01 f303 	mul.w	r3, r1, r3
 8003178:	441a      	add	r2, r3
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	22ff      	movs	r2, #255	; 0xff
 8003182:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	22ff      	movs	r2, #255	; 0xff
 800318a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800318e:	683b      	ldr	r3, [r7, #0]
 8003190:	2b00      	cmp	r3, #0
 8003192:	d114      	bne.n	80031be <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	691b      	ldr	r3, [r3, #16]
 8003198:	2b00      	cmp	r3, #0
 800319a:	d01a      	beq.n	80031d2 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	3310      	adds	r3, #16
 80031a0:	4618      	mov	r0, r3
 80031a2:	f001 f8e7 	bl	8004374 <xTaskRemoveFromEventList>
 80031a6:	4603      	mov	r3, r0
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d012      	beq.n	80031d2 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80031ac:	4b0c      	ldr	r3, [pc, #48]	; (80031e0 <xQueueGenericReset+0xcc>)
 80031ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80031b2:	601a      	str	r2, [r3, #0]
 80031b4:	f3bf 8f4f 	dsb	sy
 80031b8:	f3bf 8f6f 	isb	sy
 80031bc:	e009      	b.n	80031d2 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	3310      	adds	r3, #16
 80031c2:	4618      	mov	r0, r3
 80031c4:	f7ff fef6 	bl	8002fb4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	3324      	adds	r3, #36	; 0x24
 80031cc:	4618      	mov	r0, r3
 80031ce:	f7ff fef1 	bl	8002fb4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80031d2:	f002 f85b 	bl	800528c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80031d6:	2301      	movs	r3, #1
}
 80031d8:	4618      	mov	r0, r3
 80031da:	3710      	adds	r7, #16
 80031dc:	46bd      	mov	sp, r7
 80031de:	bd80      	pop	{r7, pc}
 80031e0:	e000ed04 	.word	0xe000ed04

080031e4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80031e4:	b580      	push	{r7, lr}
 80031e6:	b08e      	sub	sp, #56	; 0x38
 80031e8:	af02      	add	r7, sp, #8
 80031ea:	60f8      	str	r0, [r7, #12]
 80031ec:	60b9      	str	r1, [r7, #8]
 80031ee:	607a      	str	r2, [r7, #4]
 80031f0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d10a      	bne.n	800320e <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80031f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031fc:	f383 8811 	msr	BASEPRI, r3
 8003200:	f3bf 8f6f 	isb	sy
 8003204:	f3bf 8f4f 	dsb	sy
 8003208:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800320a:	bf00      	nop
 800320c:	e7fe      	b.n	800320c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800320e:	683b      	ldr	r3, [r7, #0]
 8003210:	2b00      	cmp	r3, #0
 8003212:	d10a      	bne.n	800322a <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8003214:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003218:	f383 8811 	msr	BASEPRI, r3
 800321c:	f3bf 8f6f 	isb	sy
 8003220:	f3bf 8f4f 	dsb	sy
 8003224:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003226:	bf00      	nop
 8003228:	e7fe      	b.n	8003228 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	2b00      	cmp	r3, #0
 800322e:	d002      	beq.n	8003236 <xQueueGenericCreateStatic+0x52>
 8003230:	68bb      	ldr	r3, [r7, #8]
 8003232:	2b00      	cmp	r3, #0
 8003234:	d001      	beq.n	800323a <xQueueGenericCreateStatic+0x56>
 8003236:	2301      	movs	r3, #1
 8003238:	e000      	b.n	800323c <xQueueGenericCreateStatic+0x58>
 800323a:	2300      	movs	r3, #0
 800323c:	2b00      	cmp	r3, #0
 800323e:	d10a      	bne.n	8003256 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8003240:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003244:	f383 8811 	msr	BASEPRI, r3
 8003248:	f3bf 8f6f 	isb	sy
 800324c:	f3bf 8f4f 	dsb	sy
 8003250:	623b      	str	r3, [r7, #32]
}
 8003252:	bf00      	nop
 8003254:	e7fe      	b.n	8003254 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	2b00      	cmp	r3, #0
 800325a:	d102      	bne.n	8003262 <xQueueGenericCreateStatic+0x7e>
 800325c:	68bb      	ldr	r3, [r7, #8]
 800325e:	2b00      	cmp	r3, #0
 8003260:	d101      	bne.n	8003266 <xQueueGenericCreateStatic+0x82>
 8003262:	2301      	movs	r3, #1
 8003264:	e000      	b.n	8003268 <xQueueGenericCreateStatic+0x84>
 8003266:	2300      	movs	r3, #0
 8003268:	2b00      	cmp	r3, #0
 800326a:	d10a      	bne.n	8003282 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800326c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003270:	f383 8811 	msr	BASEPRI, r3
 8003274:	f3bf 8f6f 	isb	sy
 8003278:	f3bf 8f4f 	dsb	sy
 800327c:	61fb      	str	r3, [r7, #28]
}
 800327e:	bf00      	nop
 8003280:	e7fe      	b.n	8003280 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8003282:	2350      	movs	r3, #80	; 0x50
 8003284:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8003286:	697b      	ldr	r3, [r7, #20]
 8003288:	2b50      	cmp	r3, #80	; 0x50
 800328a:	d00a      	beq.n	80032a2 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800328c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003290:	f383 8811 	msr	BASEPRI, r3
 8003294:	f3bf 8f6f 	isb	sy
 8003298:	f3bf 8f4f 	dsb	sy
 800329c:	61bb      	str	r3, [r7, #24]
}
 800329e:	bf00      	nop
 80032a0:	e7fe      	b.n	80032a0 <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80032a2:	683b      	ldr	r3, [r7, #0]
 80032a4:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80032a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d00d      	beq.n	80032c8 <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80032ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032ae:	2201      	movs	r2, #1
 80032b0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80032b4:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80032b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032ba:	9300      	str	r3, [sp, #0]
 80032bc:	4613      	mov	r3, r2
 80032be:	687a      	ldr	r2, [r7, #4]
 80032c0:	68b9      	ldr	r1, [r7, #8]
 80032c2:	68f8      	ldr	r0, [r7, #12]
 80032c4:	f000 f805 	bl	80032d2 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 80032c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80032ca:	4618      	mov	r0, r3
 80032cc:	3730      	adds	r7, #48	; 0x30
 80032ce:	46bd      	mov	sp, r7
 80032d0:	bd80      	pop	{r7, pc}

080032d2 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80032d2:	b580      	push	{r7, lr}
 80032d4:	b084      	sub	sp, #16
 80032d6:	af00      	add	r7, sp, #0
 80032d8:	60f8      	str	r0, [r7, #12]
 80032da:	60b9      	str	r1, [r7, #8]
 80032dc:	607a      	str	r2, [r7, #4]
 80032de:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80032e0:	68bb      	ldr	r3, [r7, #8]
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d103      	bne.n	80032ee <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80032e6:	69bb      	ldr	r3, [r7, #24]
 80032e8:	69ba      	ldr	r2, [r7, #24]
 80032ea:	601a      	str	r2, [r3, #0]
 80032ec:	e002      	b.n	80032f4 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80032ee:	69bb      	ldr	r3, [r7, #24]
 80032f0:	687a      	ldr	r2, [r7, #4]
 80032f2:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80032f4:	69bb      	ldr	r3, [r7, #24]
 80032f6:	68fa      	ldr	r2, [r7, #12]
 80032f8:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80032fa:	69bb      	ldr	r3, [r7, #24]
 80032fc:	68ba      	ldr	r2, [r7, #8]
 80032fe:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003300:	2101      	movs	r1, #1
 8003302:	69b8      	ldr	r0, [r7, #24]
 8003304:	f7ff ff06 	bl	8003114 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8003308:	69bb      	ldr	r3, [r7, #24]
 800330a:	78fa      	ldrb	r2, [r7, #3]
 800330c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8003310:	bf00      	nop
 8003312:	3710      	adds	r7, #16
 8003314:	46bd      	mov	sp, r7
 8003316:	bd80      	pop	{r7, pc}

08003318 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8003318:	b580      	push	{r7, lr}
 800331a:	b08e      	sub	sp, #56	; 0x38
 800331c:	af00      	add	r7, sp, #0
 800331e:	60f8      	str	r0, [r7, #12]
 8003320:	60b9      	str	r1, [r7, #8]
 8003322:	607a      	str	r2, [r7, #4]
 8003324:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8003326:	2300      	movs	r3, #0
 8003328:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800332e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003330:	2b00      	cmp	r3, #0
 8003332:	d10a      	bne.n	800334a <xQueueGenericSend+0x32>
	__asm volatile
 8003334:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003338:	f383 8811 	msr	BASEPRI, r3
 800333c:	f3bf 8f6f 	isb	sy
 8003340:	f3bf 8f4f 	dsb	sy
 8003344:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8003346:	bf00      	nop
 8003348:	e7fe      	b.n	8003348 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800334a:	68bb      	ldr	r3, [r7, #8]
 800334c:	2b00      	cmp	r3, #0
 800334e:	d103      	bne.n	8003358 <xQueueGenericSend+0x40>
 8003350:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003352:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003354:	2b00      	cmp	r3, #0
 8003356:	d101      	bne.n	800335c <xQueueGenericSend+0x44>
 8003358:	2301      	movs	r3, #1
 800335a:	e000      	b.n	800335e <xQueueGenericSend+0x46>
 800335c:	2300      	movs	r3, #0
 800335e:	2b00      	cmp	r3, #0
 8003360:	d10a      	bne.n	8003378 <xQueueGenericSend+0x60>
	__asm volatile
 8003362:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003366:	f383 8811 	msr	BASEPRI, r3
 800336a:	f3bf 8f6f 	isb	sy
 800336e:	f3bf 8f4f 	dsb	sy
 8003372:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003374:	bf00      	nop
 8003376:	e7fe      	b.n	8003376 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003378:	683b      	ldr	r3, [r7, #0]
 800337a:	2b02      	cmp	r3, #2
 800337c:	d103      	bne.n	8003386 <xQueueGenericSend+0x6e>
 800337e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003380:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003382:	2b01      	cmp	r3, #1
 8003384:	d101      	bne.n	800338a <xQueueGenericSend+0x72>
 8003386:	2301      	movs	r3, #1
 8003388:	e000      	b.n	800338c <xQueueGenericSend+0x74>
 800338a:	2300      	movs	r3, #0
 800338c:	2b00      	cmp	r3, #0
 800338e:	d10a      	bne.n	80033a6 <xQueueGenericSend+0x8e>
	__asm volatile
 8003390:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003394:	f383 8811 	msr	BASEPRI, r3
 8003398:	f3bf 8f6f 	isb	sy
 800339c:	f3bf 8f4f 	dsb	sy
 80033a0:	623b      	str	r3, [r7, #32]
}
 80033a2:	bf00      	nop
 80033a4:	e7fe      	b.n	80033a4 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80033a6:	f001 f9ab 	bl	8004700 <xTaskGetSchedulerState>
 80033aa:	4603      	mov	r3, r0
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d102      	bne.n	80033b6 <xQueueGenericSend+0x9e>
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d101      	bne.n	80033ba <xQueueGenericSend+0xa2>
 80033b6:	2301      	movs	r3, #1
 80033b8:	e000      	b.n	80033bc <xQueueGenericSend+0xa4>
 80033ba:	2300      	movs	r3, #0
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d10a      	bne.n	80033d6 <xQueueGenericSend+0xbe>
	__asm volatile
 80033c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033c4:	f383 8811 	msr	BASEPRI, r3
 80033c8:	f3bf 8f6f 	isb	sy
 80033cc:	f3bf 8f4f 	dsb	sy
 80033d0:	61fb      	str	r3, [r7, #28]
}
 80033d2:	bf00      	nop
 80033d4:	e7fe      	b.n	80033d4 <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80033d6:	f001 ff29 	bl	800522c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80033da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033dc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80033de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033e2:	429a      	cmp	r2, r3
 80033e4:	d302      	bcc.n	80033ec <xQueueGenericSend+0xd4>
 80033e6:	683b      	ldr	r3, [r7, #0]
 80033e8:	2b02      	cmp	r3, #2
 80033ea:	d129      	bne.n	8003440 <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80033ec:	683a      	ldr	r2, [r7, #0]
 80033ee:	68b9      	ldr	r1, [r7, #8]
 80033f0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80033f2:	f000 fa07 	bl	8003804 <prvCopyDataToQueue>
 80033f6:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80033f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d010      	beq.n	8003422 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003400:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003402:	3324      	adds	r3, #36	; 0x24
 8003404:	4618      	mov	r0, r3
 8003406:	f000 ffb5 	bl	8004374 <xTaskRemoveFromEventList>
 800340a:	4603      	mov	r3, r0
 800340c:	2b00      	cmp	r3, #0
 800340e:	d013      	beq.n	8003438 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8003410:	4b3f      	ldr	r3, [pc, #252]	; (8003510 <xQueueGenericSend+0x1f8>)
 8003412:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003416:	601a      	str	r2, [r3, #0]
 8003418:	f3bf 8f4f 	dsb	sy
 800341c:	f3bf 8f6f 	isb	sy
 8003420:	e00a      	b.n	8003438 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8003422:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003424:	2b00      	cmp	r3, #0
 8003426:	d007      	beq.n	8003438 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8003428:	4b39      	ldr	r3, [pc, #228]	; (8003510 <xQueueGenericSend+0x1f8>)
 800342a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800342e:	601a      	str	r2, [r3, #0]
 8003430:	f3bf 8f4f 	dsb	sy
 8003434:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8003438:	f001 ff28 	bl	800528c <vPortExitCritical>
				return pdPASS;
 800343c:	2301      	movs	r3, #1
 800343e:	e063      	b.n	8003508 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	2b00      	cmp	r3, #0
 8003444:	d103      	bne.n	800344e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003446:	f001 ff21 	bl	800528c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800344a:	2300      	movs	r3, #0
 800344c:	e05c      	b.n	8003508 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800344e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003450:	2b00      	cmp	r3, #0
 8003452:	d106      	bne.n	8003462 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003454:	f107 0314 	add.w	r3, r7, #20
 8003458:	4618      	mov	r0, r3
 800345a:	f000 ffef 	bl	800443c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800345e:	2301      	movs	r3, #1
 8003460:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003462:	f001 ff13 	bl	800528c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003466:	f000 fd59 	bl	8003f1c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800346a:	f001 fedf 	bl	800522c <vPortEnterCritical>
 800346e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003470:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003474:	b25b      	sxtb	r3, r3
 8003476:	f1b3 3fff 	cmp.w	r3, #4294967295
 800347a:	d103      	bne.n	8003484 <xQueueGenericSend+0x16c>
 800347c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800347e:	2200      	movs	r2, #0
 8003480:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003484:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003486:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800348a:	b25b      	sxtb	r3, r3
 800348c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003490:	d103      	bne.n	800349a <xQueueGenericSend+0x182>
 8003492:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003494:	2200      	movs	r2, #0
 8003496:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800349a:	f001 fef7 	bl	800528c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800349e:	1d3a      	adds	r2, r7, #4
 80034a0:	f107 0314 	add.w	r3, r7, #20
 80034a4:	4611      	mov	r1, r2
 80034a6:	4618      	mov	r0, r3
 80034a8:	f000 ffde 	bl	8004468 <xTaskCheckForTimeOut>
 80034ac:	4603      	mov	r3, r0
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d124      	bne.n	80034fc <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80034b2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80034b4:	f000 fa9e 	bl	80039f4 <prvIsQueueFull>
 80034b8:	4603      	mov	r3, r0
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d018      	beq.n	80034f0 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80034be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034c0:	3310      	adds	r3, #16
 80034c2:	687a      	ldr	r2, [r7, #4]
 80034c4:	4611      	mov	r1, r2
 80034c6:	4618      	mov	r0, r3
 80034c8:	f000 ff04 	bl	80042d4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80034cc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80034ce:	f000 fa29 	bl	8003924 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80034d2:	f000 fd31 	bl	8003f38 <xTaskResumeAll>
 80034d6:	4603      	mov	r3, r0
 80034d8:	2b00      	cmp	r3, #0
 80034da:	f47f af7c 	bne.w	80033d6 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80034de:	4b0c      	ldr	r3, [pc, #48]	; (8003510 <xQueueGenericSend+0x1f8>)
 80034e0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80034e4:	601a      	str	r2, [r3, #0]
 80034e6:	f3bf 8f4f 	dsb	sy
 80034ea:	f3bf 8f6f 	isb	sy
 80034ee:	e772      	b.n	80033d6 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80034f0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80034f2:	f000 fa17 	bl	8003924 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80034f6:	f000 fd1f 	bl	8003f38 <xTaskResumeAll>
 80034fa:	e76c      	b.n	80033d6 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80034fc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80034fe:	f000 fa11 	bl	8003924 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003502:	f000 fd19 	bl	8003f38 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8003506:	2300      	movs	r3, #0
		}
	}
}
 8003508:	4618      	mov	r0, r3
 800350a:	3738      	adds	r7, #56	; 0x38
 800350c:	46bd      	mov	sp, r7
 800350e:	bd80      	pop	{r7, pc}
 8003510:	e000ed04 	.word	0xe000ed04

08003514 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8003514:	b580      	push	{r7, lr}
 8003516:	b08e      	sub	sp, #56	; 0x38
 8003518:	af00      	add	r7, sp, #0
 800351a:	60f8      	str	r0, [r7, #12]
 800351c:	60b9      	str	r1, [r7, #8]
 800351e:	607a      	str	r2, [r7, #4]
 8003520:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8003526:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003528:	2b00      	cmp	r3, #0
 800352a:	d10a      	bne.n	8003542 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800352c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003530:	f383 8811 	msr	BASEPRI, r3
 8003534:	f3bf 8f6f 	isb	sy
 8003538:	f3bf 8f4f 	dsb	sy
 800353c:	627b      	str	r3, [r7, #36]	; 0x24
}
 800353e:	bf00      	nop
 8003540:	e7fe      	b.n	8003540 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003542:	68bb      	ldr	r3, [r7, #8]
 8003544:	2b00      	cmp	r3, #0
 8003546:	d103      	bne.n	8003550 <xQueueGenericSendFromISR+0x3c>
 8003548:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800354a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800354c:	2b00      	cmp	r3, #0
 800354e:	d101      	bne.n	8003554 <xQueueGenericSendFromISR+0x40>
 8003550:	2301      	movs	r3, #1
 8003552:	e000      	b.n	8003556 <xQueueGenericSendFromISR+0x42>
 8003554:	2300      	movs	r3, #0
 8003556:	2b00      	cmp	r3, #0
 8003558:	d10a      	bne.n	8003570 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800355a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800355e:	f383 8811 	msr	BASEPRI, r3
 8003562:	f3bf 8f6f 	isb	sy
 8003566:	f3bf 8f4f 	dsb	sy
 800356a:	623b      	str	r3, [r7, #32]
}
 800356c:	bf00      	nop
 800356e:	e7fe      	b.n	800356e <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003570:	683b      	ldr	r3, [r7, #0]
 8003572:	2b02      	cmp	r3, #2
 8003574:	d103      	bne.n	800357e <xQueueGenericSendFromISR+0x6a>
 8003576:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003578:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800357a:	2b01      	cmp	r3, #1
 800357c:	d101      	bne.n	8003582 <xQueueGenericSendFromISR+0x6e>
 800357e:	2301      	movs	r3, #1
 8003580:	e000      	b.n	8003584 <xQueueGenericSendFromISR+0x70>
 8003582:	2300      	movs	r3, #0
 8003584:	2b00      	cmp	r3, #0
 8003586:	d10a      	bne.n	800359e <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8003588:	f04f 0350 	mov.w	r3, #80	; 0x50
 800358c:	f383 8811 	msr	BASEPRI, r3
 8003590:	f3bf 8f6f 	isb	sy
 8003594:	f3bf 8f4f 	dsb	sy
 8003598:	61fb      	str	r3, [r7, #28]
}
 800359a:	bf00      	nop
 800359c:	e7fe      	b.n	800359c <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800359e:	f001 ff07 	bl	80053b0 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80035a2:	f3ef 8211 	mrs	r2, BASEPRI
 80035a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035aa:	f383 8811 	msr	BASEPRI, r3
 80035ae:	f3bf 8f6f 	isb	sy
 80035b2:	f3bf 8f4f 	dsb	sy
 80035b6:	61ba      	str	r2, [r7, #24]
 80035b8:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80035ba:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80035bc:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80035be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035c0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80035c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035c6:	429a      	cmp	r2, r3
 80035c8:	d302      	bcc.n	80035d0 <xQueueGenericSendFromISR+0xbc>
 80035ca:	683b      	ldr	r3, [r7, #0]
 80035cc:	2b02      	cmp	r3, #2
 80035ce:	d12c      	bne.n	800362a <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80035d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035d2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80035d6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80035da:	683a      	ldr	r2, [r7, #0]
 80035dc:	68b9      	ldr	r1, [r7, #8]
 80035de:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80035e0:	f000 f910 	bl	8003804 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80035e4:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 80035e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035ec:	d112      	bne.n	8003614 <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80035ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d016      	beq.n	8003624 <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80035f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035f8:	3324      	adds	r3, #36	; 0x24
 80035fa:	4618      	mov	r0, r3
 80035fc:	f000 feba 	bl	8004374 <xTaskRemoveFromEventList>
 8003600:	4603      	mov	r3, r0
 8003602:	2b00      	cmp	r3, #0
 8003604:	d00e      	beq.n	8003624 <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	2b00      	cmp	r3, #0
 800360a:	d00b      	beq.n	8003624 <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	2201      	movs	r2, #1
 8003610:	601a      	str	r2, [r3, #0]
 8003612:	e007      	b.n	8003624 <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003614:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003618:	3301      	adds	r3, #1
 800361a:	b2db      	uxtb	r3, r3
 800361c:	b25a      	sxtb	r2, r3
 800361e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003620:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8003624:	2301      	movs	r3, #1
 8003626:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8003628:	e001      	b.n	800362e <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800362a:	2300      	movs	r3, #0
 800362c:	637b      	str	r3, [r7, #52]	; 0x34
 800362e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003630:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003632:	693b      	ldr	r3, [r7, #16]
 8003634:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8003638:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800363a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800363c:	4618      	mov	r0, r3
 800363e:	3738      	adds	r7, #56	; 0x38
 8003640:	46bd      	mov	sp, r7
 8003642:	bd80      	pop	{r7, pc}

08003644 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8003644:	b580      	push	{r7, lr}
 8003646:	b08c      	sub	sp, #48	; 0x30
 8003648:	af00      	add	r7, sp, #0
 800364a:	60f8      	str	r0, [r7, #12]
 800364c:	60b9      	str	r1, [r7, #8]
 800364e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8003650:	2300      	movs	r3, #0
 8003652:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003658:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800365a:	2b00      	cmp	r3, #0
 800365c:	d10a      	bne.n	8003674 <xQueueReceive+0x30>
	__asm volatile
 800365e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003662:	f383 8811 	msr	BASEPRI, r3
 8003666:	f3bf 8f6f 	isb	sy
 800366a:	f3bf 8f4f 	dsb	sy
 800366e:	623b      	str	r3, [r7, #32]
}
 8003670:	bf00      	nop
 8003672:	e7fe      	b.n	8003672 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003674:	68bb      	ldr	r3, [r7, #8]
 8003676:	2b00      	cmp	r3, #0
 8003678:	d103      	bne.n	8003682 <xQueueReceive+0x3e>
 800367a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800367c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800367e:	2b00      	cmp	r3, #0
 8003680:	d101      	bne.n	8003686 <xQueueReceive+0x42>
 8003682:	2301      	movs	r3, #1
 8003684:	e000      	b.n	8003688 <xQueueReceive+0x44>
 8003686:	2300      	movs	r3, #0
 8003688:	2b00      	cmp	r3, #0
 800368a:	d10a      	bne.n	80036a2 <xQueueReceive+0x5e>
	__asm volatile
 800368c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003690:	f383 8811 	msr	BASEPRI, r3
 8003694:	f3bf 8f6f 	isb	sy
 8003698:	f3bf 8f4f 	dsb	sy
 800369c:	61fb      	str	r3, [r7, #28]
}
 800369e:	bf00      	nop
 80036a0:	e7fe      	b.n	80036a0 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80036a2:	f001 f82d 	bl	8004700 <xTaskGetSchedulerState>
 80036a6:	4603      	mov	r3, r0
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d102      	bne.n	80036b2 <xQueueReceive+0x6e>
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d101      	bne.n	80036b6 <xQueueReceive+0x72>
 80036b2:	2301      	movs	r3, #1
 80036b4:	e000      	b.n	80036b8 <xQueueReceive+0x74>
 80036b6:	2300      	movs	r3, #0
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d10a      	bne.n	80036d2 <xQueueReceive+0x8e>
	__asm volatile
 80036bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036c0:	f383 8811 	msr	BASEPRI, r3
 80036c4:	f3bf 8f6f 	isb	sy
 80036c8:	f3bf 8f4f 	dsb	sy
 80036cc:	61bb      	str	r3, [r7, #24]
}
 80036ce:	bf00      	nop
 80036d0:	e7fe      	b.n	80036d0 <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 80036d2:	f001 fdab 	bl	800522c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80036d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036da:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80036dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d01f      	beq.n	8003722 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80036e2:	68b9      	ldr	r1, [r7, #8]
 80036e4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80036e6:	f000 f8f7 	bl	80038d8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80036ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036ec:	1e5a      	subs	r2, r3, #1
 80036ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036f0:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80036f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036f4:	691b      	ldr	r3, [r3, #16]
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d00f      	beq.n	800371a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80036fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036fc:	3310      	adds	r3, #16
 80036fe:	4618      	mov	r0, r3
 8003700:	f000 fe38 	bl	8004374 <xTaskRemoveFromEventList>
 8003704:	4603      	mov	r3, r0
 8003706:	2b00      	cmp	r3, #0
 8003708:	d007      	beq.n	800371a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800370a:	4b3d      	ldr	r3, [pc, #244]	; (8003800 <xQueueReceive+0x1bc>)
 800370c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003710:	601a      	str	r2, [r3, #0]
 8003712:	f3bf 8f4f 	dsb	sy
 8003716:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800371a:	f001 fdb7 	bl	800528c <vPortExitCritical>
				return pdPASS;
 800371e:	2301      	movs	r3, #1
 8003720:	e069      	b.n	80037f6 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	2b00      	cmp	r3, #0
 8003726:	d103      	bne.n	8003730 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003728:	f001 fdb0 	bl	800528c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800372c:	2300      	movs	r3, #0
 800372e:	e062      	b.n	80037f6 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003730:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003732:	2b00      	cmp	r3, #0
 8003734:	d106      	bne.n	8003744 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003736:	f107 0310 	add.w	r3, r7, #16
 800373a:	4618      	mov	r0, r3
 800373c:	f000 fe7e 	bl	800443c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003740:	2301      	movs	r3, #1
 8003742:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003744:	f001 fda2 	bl	800528c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003748:	f000 fbe8 	bl	8003f1c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800374c:	f001 fd6e 	bl	800522c <vPortEnterCritical>
 8003750:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003752:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003756:	b25b      	sxtb	r3, r3
 8003758:	f1b3 3fff 	cmp.w	r3, #4294967295
 800375c:	d103      	bne.n	8003766 <xQueueReceive+0x122>
 800375e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003760:	2200      	movs	r2, #0
 8003762:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003766:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003768:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800376c:	b25b      	sxtb	r3, r3
 800376e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003772:	d103      	bne.n	800377c <xQueueReceive+0x138>
 8003774:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003776:	2200      	movs	r2, #0
 8003778:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800377c:	f001 fd86 	bl	800528c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003780:	1d3a      	adds	r2, r7, #4
 8003782:	f107 0310 	add.w	r3, r7, #16
 8003786:	4611      	mov	r1, r2
 8003788:	4618      	mov	r0, r3
 800378a:	f000 fe6d 	bl	8004468 <xTaskCheckForTimeOut>
 800378e:	4603      	mov	r3, r0
 8003790:	2b00      	cmp	r3, #0
 8003792:	d123      	bne.n	80037dc <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003794:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003796:	f000 f917 	bl	80039c8 <prvIsQueueEmpty>
 800379a:	4603      	mov	r3, r0
 800379c:	2b00      	cmp	r3, #0
 800379e:	d017      	beq.n	80037d0 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80037a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037a2:	3324      	adds	r3, #36	; 0x24
 80037a4:	687a      	ldr	r2, [r7, #4]
 80037a6:	4611      	mov	r1, r2
 80037a8:	4618      	mov	r0, r3
 80037aa:	f000 fd93 	bl	80042d4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80037ae:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80037b0:	f000 f8b8 	bl	8003924 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80037b4:	f000 fbc0 	bl	8003f38 <xTaskResumeAll>
 80037b8:	4603      	mov	r3, r0
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d189      	bne.n	80036d2 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80037be:	4b10      	ldr	r3, [pc, #64]	; (8003800 <xQueueReceive+0x1bc>)
 80037c0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80037c4:	601a      	str	r2, [r3, #0]
 80037c6:	f3bf 8f4f 	dsb	sy
 80037ca:	f3bf 8f6f 	isb	sy
 80037ce:	e780      	b.n	80036d2 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80037d0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80037d2:	f000 f8a7 	bl	8003924 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80037d6:	f000 fbaf 	bl	8003f38 <xTaskResumeAll>
 80037da:	e77a      	b.n	80036d2 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80037dc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80037de:	f000 f8a1 	bl	8003924 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80037e2:	f000 fba9 	bl	8003f38 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80037e6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80037e8:	f000 f8ee 	bl	80039c8 <prvIsQueueEmpty>
 80037ec:	4603      	mov	r3, r0
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	f43f af6f 	beq.w	80036d2 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80037f4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 80037f6:	4618      	mov	r0, r3
 80037f8:	3730      	adds	r7, #48	; 0x30
 80037fa:	46bd      	mov	sp, r7
 80037fc:	bd80      	pop	{r7, pc}
 80037fe:	bf00      	nop
 8003800:	e000ed04 	.word	0xe000ed04

08003804 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8003804:	b580      	push	{r7, lr}
 8003806:	b086      	sub	sp, #24
 8003808:	af00      	add	r7, sp, #0
 800380a:	60f8      	str	r0, [r7, #12]
 800380c:	60b9      	str	r1, [r7, #8]
 800380e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8003810:	2300      	movs	r3, #0
 8003812:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003818:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800381e:	2b00      	cmp	r3, #0
 8003820:	d10d      	bne.n	800383e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	2b00      	cmp	r3, #0
 8003828:	d14d      	bne.n	80038c6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	685b      	ldr	r3, [r3, #4]
 800382e:	4618      	mov	r0, r3
 8003830:	f000 ff84 	bl	800473c <xTaskPriorityDisinherit>
 8003834:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	2200      	movs	r2, #0
 800383a:	605a      	str	r2, [r3, #4]
 800383c:	e043      	b.n	80038c6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	2b00      	cmp	r3, #0
 8003842:	d119      	bne.n	8003878 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	6898      	ldr	r0, [r3, #8]
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800384c:	461a      	mov	r2, r3
 800384e:	68b9      	ldr	r1, [r7, #8]
 8003850:	f002 f8e7 	bl	8005a22 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	689a      	ldr	r2, [r3, #8]
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800385c:	441a      	add	r2, r3
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	689a      	ldr	r2, [r3, #8]
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	685b      	ldr	r3, [r3, #4]
 800386a:	429a      	cmp	r2, r3
 800386c:	d32b      	bcc.n	80038c6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	681a      	ldr	r2, [r3, #0]
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	609a      	str	r2, [r3, #8]
 8003876:	e026      	b.n	80038c6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	68d8      	ldr	r0, [r3, #12]
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003880:	461a      	mov	r2, r3
 8003882:	68b9      	ldr	r1, [r7, #8]
 8003884:	f002 f8cd 	bl	8005a22 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	68da      	ldr	r2, [r3, #12]
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003890:	425b      	negs	r3, r3
 8003892:	441a      	add	r2, r3
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	68da      	ldr	r2, [r3, #12]
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	429a      	cmp	r2, r3
 80038a2:	d207      	bcs.n	80038b4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	685a      	ldr	r2, [r3, #4]
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038ac:	425b      	negs	r3, r3
 80038ae:	441a      	add	r2, r3
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	2b02      	cmp	r3, #2
 80038b8:	d105      	bne.n	80038c6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80038ba:	693b      	ldr	r3, [r7, #16]
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d002      	beq.n	80038c6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80038c0:	693b      	ldr	r3, [r7, #16]
 80038c2:	3b01      	subs	r3, #1
 80038c4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80038c6:	693b      	ldr	r3, [r7, #16]
 80038c8:	1c5a      	adds	r2, r3, #1
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80038ce:	697b      	ldr	r3, [r7, #20]
}
 80038d0:	4618      	mov	r0, r3
 80038d2:	3718      	adds	r7, #24
 80038d4:	46bd      	mov	sp, r7
 80038d6:	bd80      	pop	{r7, pc}

080038d8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80038d8:	b580      	push	{r7, lr}
 80038da:	b082      	sub	sp, #8
 80038dc:	af00      	add	r7, sp, #0
 80038de:	6078      	str	r0, [r7, #4]
 80038e0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d018      	beq.n	800391c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	68da      	ldr	r2, [r3, #12]
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038f2:	441a      	add	r2, r3
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	68da      	ldr	r2, [r3, #12]
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	685b      	ldr	r3, [r3, #4]
 8003900:	429a      	cmp	r2, r3
 8003902:	d303      	bcc.n	800390c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681a      	ldr	r2, [r3, #0]
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	68d9      	ldr	r1, [r3, #12]
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003914:	461a      	mov	r2, r3
 8003916:	6838      	ldr	r0, [r7, #0]
 8003918:	f002 f883 	bl	8005a22 <memcpy>
	}
}
 800391c:	bf00      	nop
 800391e:	3708      	adds	r7, #8
 8003920:	46bd      	mov	sp, r7
 8003922:	bd80      	pop	{r7, pc}

08003924 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003924:	b580      	push	{r7, lr}
 8003926:	b084      	sub	sp, #16
 8003928:	af00      	add	r7, sp, #0
 800392a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800392c:	f001 fc7e 	bl	800522c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003936:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003938:	e011      	b.n	800395e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800393e:	2b00      	cmp	r3, #0
 8003940:	d012      	beq.n	8003968 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	3324      	adds	r3, #36	; 0x24
 8003946:	4618      	mov	r0, r3
 8003948:	f000 fd14 	bl	8004374 <xTaskRemoveFromEventList>
 800394c:	4603      	mov	r3, r0
 800394e:	2b00      	cmp	r3, #0
 8003950:	d001      	beq.n	8003956 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8003952:	f000 fdeb 	bl	800452c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8003956:	7bfb      	ldrb	r3, [r7, #15]
 8003958:	3b01      	subs	r3, #1
 800395a:	b2db      	uxtb	r3, r3
 800395c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800395e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003962:	2b00      	cmp	r3, #0
 8003964:	dce9      	bgt.n	800393a <prvUnlockQueue+0x16>
 8003966:	e000      	b.n	800396a <prvUnlockQueue+0x46>
					break;
 8003968:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	22ff      	movs	r2, #255	; 0xff
 800396e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8003972:	f001 fc8b 	bl	800528c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8003976:	f001 fc59 	bl	800522c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003980:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003982:	e011      	b.n	80039a8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	691b      	ldr	r3, [r3, #16]
 8003988:	2b00      	cmp	r3, #0
 800398a:	d012      	beq.n	80039b2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	3310      	adds	r3, #16
 8003990:	4618      	mov	r0, r3
 8003992:	f000 fcef 	bl	8004374 <xTaskRemoveFromEventList>
 8003996:	4603      	mov	r3, r0
 8003998:	2b00      	cmp	r3, #0
 800399a:	d001      	beq.n	80039a0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800399c:	f000 fdc6 	bl	800452c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80039a0:	7bbb      	ldrb	r3, [r7, #14]
 80039a2:	3b01      	subs	r3, #1
 80039a4:	b2db      	uxtb	r3, r3
 80039a6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80039a8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	dce9      	bgt.n	8003984 <prvUnlockQueue+0x60>
 80039b0:	e000      	b.n	80039b4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80039b2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	22ff      	movs	r2, #255	; 0xff
 80039b8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80039bc:	f001 fc66 	bl	800528c <vPortExitCritical>
}
 80039c0:	bf00      	nop
 80039c2:	3710      	adds	r7, #16
 80039c4:	46bd      	mov	sp, r7
 80039c6:	bd80      	pop	{r7, pc}

080039c8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80039c8:	b580      	push	{r7, lr}
 80039ca:	b084      	sub	sp, #16
 80039cc:	af00      	add	r7, sp, #0
 80039ce:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80039d0:	f001 fc2c 	bl	800522c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d102      	bne.n	80039e2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80039dc:	2301      	movs	r3, #1
 80039de:	60fb      	str	r3, [r7, #12]
 80039e0:	e001      	b.n	80039e6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80039e2:	2300      	movs	r3, #0
 80039e4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80039e6:	f001 fc51 	bl	800528c <vPortExitCritical>

	return xReturn;
 80039ea:	68fb      	ldr	r3, [r7, #12]
}
 80039ec:	4618      	mov	r0, r3
 80039ee:	3710      	adds	r7, #16
 80039f0:	46bd      	mov	sp, r7
 80039f2:	bd80      	pop	{r7, pc}

080039f4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80039f4:	b580      	push	{r7, lr}
 80039f6:	b084      	sub	sp, #16
 80039f8:	af00      	add	r7, sp, #0
 80039fa:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80039fc:	f001 fc16 	bl	800522c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a08:	429a      	cmp	r2, r3
 8003a0a:	d102      	bne.n	8003a12 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8003a0c:	2301      	movs	r3, #1
 8003a0e:	60fb      	str	r3, [r7, #12]
 8003a10:	e001      	b.n	8003a16 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8003a12:	2300      	movs	r3, #0
 8003a14:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003a16:	f001 fc39 	bl	800528c <vPortExitCritical>

	return xReturn;
 8003a1a:	68fb      	ldr	r3, [r7, #12]
}
 8003a1c:	4618      	mov	r0, r3
 8003a1e:	3710      	adds	r7, #16
 8003a20:	46bd      	mov	sp, r7
 8003a22:	bd80      	pop	{r7, pc}

08003a24 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8003a24:	b480      	push	{r7}
 8003a26:	b085      	sub	sp, #20
 8003a28:	af00      	add	r7, sp, #0
 8003a2a:	6078      	str	r0, [r7, #4]
 8003a2c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003a2e:	2300      	movs	r3, #0
 8003a30:	60fb      	str	r3, [r7, #12]
 8003a32:	e014      	b.n	8003a5e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8003a34:	4a0e      	ldr	r2, [pc, #56]	; (8003a70 <vQueueAddToRegistry+0x4c>)
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d10b      	bne.n	8003a58 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8003a40:	490b      	ldr	r1, [pc, #44]	; (8003a70 <vQueueAddToRegistry+0x4c>)
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	683a      	ldr	r2, [r7, #0]
 8003a46:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8003a4a:	4a09      	ldr	r2, [pc, #36]	; (8003a70 <vQueueAddToRegistry+0x4c>)
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	00db      	lsls	r3, r3, #3
 8003a50:	4413      	add	r3, r2
 8003a52:	687a      	ldr	r2, [r7, #4]
 8003a54:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8003a56:	e006      	b.n	8003a66 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	3301      	adds	r3, #1
 8003a5c:	60fb      	str	r3, [r7, #12]
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	2b07      	cmp	r3, #7
 8003a62:	d9e7      	bls.n	8003a34 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8003a64:	bf00      	nop
 8003a66:	bf00      	nop
 8003a68:	3714      	adds	r7, #20
 8003a6a:	46bd      	mov	sp, r7
 8003a6c:	bc80      	pop	{r7}
 8003a6e:	4770      	bx	lr
 8003a70:	20000984 	.word	0x20000984

08003a74 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003a74:	b580      	push	{r7, lr}
 8003a76:	b086      	sub	sp, #24
 8003a78:	af00      	add	r7, sp, #0
 8003a7a:	60f8      	str	r0, [r7, #12]
 8003a7c:	60b9      	str	r1, [r7, #8]
 8003a7e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8003a84:	f001 fbd2 	bl	800522c <vPortEnterCritical>
 8003a88:	697b      	ldr	r3, [r7, #20]
 8003a8a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003a8e:	b25b      	sxtb	r3, r3
 8003a90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a94:	d103      	bne.n	8003a9e <vQueueWaitForMessageRestricted+0x2a>
 8003a96:	697b      	ldr	r3, [r7, #20]
 8003a98:	2200      	movs	r2, #0
 8003a9a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003a9e:	697b      	ldr	r3, [r7, #20]
 8003aa0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003aa4:	b25b      	sxtb	r3, r3
 8003aa6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003aaa:	d103      	bne.n	8003ab4 <vQueueWaitForMessageRestricted+0x40>
 8003aac:	697b      	ldr	r3, [r7, #20]
 8003aae:	2200      	movs	r2, #0
 8003ab0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003ab4:	f001 fbea 	bl	800528c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8003ab8:	697b      	ldr	r3, [r7, #20]
 8003aba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d106      	bne.n	8003ace <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8003ac0:	697b      	ldr	r3, [r7, #20]
 8003ac2:	3324      	adds	r3, #36	; 0x24
 8003ac4:	687a      	ldr	r2, [r7, #4]
 8003ac6:	68b9      	ldr	r1, [r7, #8]
 8003ac8:	4618      	mov	r0, r3
 8003aca:	f000 fc27 	bl	800431c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8003ace:	6978      	ldr	r0, [r7, #20]
 8003ad0:	f7ff ff28 	bl	8003924 <prvUnlockQueue>
	}
 8003ad4:	bf00      	nop
 8003ad6:	3718      	adds	r7, #24
 8003ad8:	46bd      	mov	sp, r7
 8003ada:	bd80      	pop	{r7, pc}

08003adc <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003adc:	b580      	push	{r7, lr}
 8003ade:	b08e      	sub	sp, #56	; 0x38
 8003ae0:	af04      	add	r7, sp, #16
 8003ae2:	60f8      	str	r0, [r7, #12]
 8003ae4:	60b9      	str	r1, [r7, #8]
 8003ae6:	607a      	str	r2, [r7, #4]
 8003ae8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8003aea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d10a      	bne.n	8003b06 <xTaskCreateStatic+0x2a>
	__asm volatile
 8003af0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003af4:	f383 8811 	msr	BASEPRI, r3
 8003af8:	f3bf 8f6f 	isb	sy
 8003afc:	f3bf 8f4f 	dsb	sy
 8003b00:	623b      	str	r3, [r7, #32]
}
 8003b02:	bf00      	nop
 8003b04:	e7fe      	b.n	8003b04 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8003b06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d10a      	bne.n	8003b22 <xTaskCreateStatic+0x46>
	__asm volatile
 8003b0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b10:	f383 8811 	msr	BASEPRI, r3
 8003b14:	f3bf 8f6f 	isb	sy
 8003b18:	f3bf 8f4f 	dsb	sy
 8003b1c:	61fb      	str	r3, [r7, #28]
}
 8003b1e:	bf00      	nop
 8003b20:	e7fe      	b.n	8003b20 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8003b22:	23bc      	movs	r3, #188	; 0xbc
 8003b24:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003b26:	693b      	ldr	r3, [r7, #16]
 8003b28:	2bbc      	cmp	r3, #188	; 0xbc
 8003b2a:	d00a      	beq.n	8003b42 <xTaskCreateStatic+0x66>
	__asm volatile
 8003b2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b30:	f383 8811 	msr	BASEPRI, r3
 8003b34:	f3bf 8f6f 	isb	sy
 8003b38:	f3bf 8f4f 	dsb	sy
 8003b3c:	61bb      	str	r3, [r7, #24]
}
 8003b3e:	bf00      	nop
 8003b40:	e7fe      	b.n	8003b40 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003b42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d01e      	beq.n	8003b86 <xTaskCreateStatic+0xaa>
 8003b48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d01b      	beq.n	8003b86 <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003b4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b50:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003b52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b54:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003b56:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003b58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b5a:	2202      	movs	r2, #2
 8003b5c:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003b60:	2300      	movs	r3, #0
 8003b62:	9303      	str	r3, [sp, #12]
 8003b64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b66:	9302      	str	r3, [sp, #8]
 8003b68:	f107 0314 	add.w	r3, r7, #20
 8003b6c:	9301      	str	r3, [sp, #4]
 8003b6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b70:	9300      	str	r3, [sp, #0]
 8003b72:	683b      	ldr	r3, [r7, #0]
 8003b74:	687a      	ldr	r2, [r7, #4]
 8003b76:	68b9      	ldr	r1, [r7, #8]
 8003b78:	68f8      	ldr	r0, [r7, #12]
 8003b7a:	f000 f851 	bl	8003c20 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003b7e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003b80:	f000 f8ec 	bl	8003d5c <prvAddNewTaskToReadyList>
 8003b84:	e001      	b.n	8003b8a <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 8003b86:	2300      	movs	r3, #0
 8003b88:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8003b8a:	697b      	ldr	r3, [r7, #20]
	}
 8003b8c:	4618      	mov	r0, r3
 8003b8e:	3728      	adds	r7, #40	; 0x28
 8003b90:	46bd      	mov	sp, r7
 8003b92:	bd80      	pop	{r7, pc}

08003b94 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003b94:	b580      	push	{r7, lr}
 8003b96:	b08c      	sub	sp, #48	; 0x30
 8003b98:	af04      	add	r7, sp, #16
 8003b9a:	60f8      	str	r0, [r7, #12]
 8003b9c:	60b9      	str	r1, [r7, #8]
 8003b9e:	603b      	str	r3, [r7, #0]
 8003ba0:	4613      	mov	r3, r2
 8003ba2:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003ba4:	88fb      	ldrh	r3, [r7, #6]
 8003ba6:	009b      	lsls	r3, r3, #2
 8003ba8:	4618      	mov	r0, r3
 8003baa:	f001 fc3f 	bl	800542c <pvPortMalloc>
 8003bae:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003bb0:	697b      	ldr	r3, [r7, #20]
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d00e      	beq.n	8003bd4 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8003bb6:	20bc      	movs	r0, #188	; 0xbc
 8003bb8:	f001 fc38 	bl	800542c <pvPortMalloc>
 8003bbc:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003bbe:	69fb      	ldr	r3, [r7, #28]
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d003      	beq.n	8003bcc <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003bc4:	69fb      	ldr	r3, [r7, #28]
 8003bc6:	697a      	ldr	r2, [r7, #20]
 8003bc8:	631a      	str	r2, [r3, #48]	; 0x30
 8003bca:	e005      	b.n	8003bd8 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003bcc:	6978      	ldr	r0, [r7, #20]
 8003bce:	f001 fcf1 	bl	80055b4 <vPortFree>
 8003bd2:	e001      	b.n	8003bd8 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003bd4:	2300      	movs	r3, #0
 8003bd6:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003bd8:	69fb      	ldr	r3, [r7, #28]
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d017      	beq.n	8003c0e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003bde:	69fb      	ldr	r3, [r7, #28]
 8003be0:	2200      	movs	r2, #0
 8003be2:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003be6:	88fa      	ldrh	r2, [r7, #6]
 8003be8:	2300      	movs	r3, #0
 8003bea:	9303      	str	r3, [sp, #12]
 8003bec:	69fb      	ldr	r3, [r7, #28]
 8003bee:	9302      	str	r3, [sp, #8]
 8003bf0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003bf2:	9301      	str	r3, [sp, #4]
 8003bf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bf6:	9300      	str	r3, [sp, #0]
 8003bf8:	683b      	ldr	r3, [r7, #0]
 8003bfa:	68b9      	ldr	r1, [r7, #8]
 8003bfc:	68f8      	ldr	r0, [r7, #12]
 8003bfe:	f000 f80f 	bl	8003c20 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003c02:	69f8      	ldr	r0, [r7, #28]
 8003c04:	f000 f8aa 	bl	8003d5c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003c08:	2301      	movs	r3, #1
 8003c0a:	61bb      	str	r3, [r7, #24]
 8003c0c:	e002      	b.n	8003c14 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003c0e:	f04f 33ff 	mov.w	r3, #4294967295
 8003c12:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003c14:	69bb      	ldr	r3, [r7, #24]
	}
 8003c16:	4618      	mov	r0, r3
 8003c18:	3720      	adds	r7, #32
 8003c1a:	46bd      	mov	sp, r7
 8003c1c:	bd80      	pop	{r7, pc}
	...

08003c20 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003c20:	b580      	push	{r7, lr}
 8003c22:	b088      	sub	sp, #32
 8003c24:	af00      	add	r7, sp, #0
 8003c26:	60f8      	str	r0, [r7, #12]
 8003c28:	60b9      	str	r1, [r7, #8]
 8003c2a:	607a      	str	r2, [r7, #4]
 8003c2c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8003c2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c30:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	009b      	lsls	r3, r3, #2
 8003c36:	461a      	mov	r2, r3
 8003c38:	21a5      	movs	r1, #165	; 0xa5
 8003c3a:	f001 ff00 	bl	8005a3e <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8003c3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c40:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003c48:	3b01      	subs	r3, #1
 8003c4a:	009b      	lsls	r3, r3, #2
 8003c4c:	4413      	add	r3, r2
 8003c4e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8003c50:	69bb      	ldr	r3, [r7, #24]
 8003c52:	f023 0307 	bic.w	r3, r3, #7
 8003c56:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003c58:	69bb      	ldr	r3, [r7, #24]
 8003c5a:	f003 0307 	and.w	r3, r3, #7
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d00a      	beq.n	8003c78 <prvInitialiseNewTask+0x58>
	__asm volatile
 8003c62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c66:	f383 8811 	msr	BASEPRI, r3
 8003c6a:	f3bf 8f6f 	isb	sy
 8003c6e:	f3bf 8f4f 	dsb	sy
 8003c72:	617b      	str	r3, [r7, #20]
}
 8003c74:	bf00      	nop
 8003c76:	e7fe      	b.n	8003c76 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003c78:	2300      	movs	r3, #0
 8003c7a:	61fb      	str	r3, [r7, #28]
 8003c7c:	e012      	b.n	8003ca4 <prvInitialiseNewTask+0x84>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003c7e:	68ba      	ldr	r2, [r7, #8]
 8003c80:	69fb      	ldr	r3, [r7, #28]
 8003c82:	4413      	add	r3, r2
 8003c84:	7819      	ldrb	r1, [r3, #0]
 8003c86:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003c88:	69fb      	ldr	r3, [r7, #28]
 8003c8a:	4413      	add	r3, r2
 8003c8c:	3334      	adds	r3, #52	; 0x34
 8003c8e:	460a      	mov	r2, r1
 8003c90:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8003c92:	68ba      	ldr	r2, [r7, #8]
 8003c94:	69fb      	ldr	r3, [r7, #28]
 8003c96:	4413      	add	r3, r2
 8003c98:	781b      	ldrb	r3, [r3, #0]
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d006      	beq.n	8003cac <prvInitialiseNewTask+0x8c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003c9e:	69fb      	ldr	r3, [r7, #28]
 8003ca0:	3301      	adds	r3, #1
 8003ca2:	61fb      	str	r3, [r7, #28]
 8003ca4:	69fb      	ldr	r3, [r7, #28]
 8003ca6:	2b0f      	cmp	r3, #15
 8003ca8:	d9e9      	bls.n	8003c7e <prvInitialiseNewTask+0x5e>
 8003caa:	e000      	b.n	8003cae <prvInitialiseNewTask+0x8e>
		{
			break;
 8003cac:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003cae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cb0:	2200      	movs	r2, #0
 8003cb2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003cb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cb8:	2b37      	cmp	r3, #55	; 0x37
 8003cba:	d901      	bls.n	8003cc0 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003cbc:	2337      	movs	r3, #55	; 0x37
 8003cbe:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003cc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cc2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003cc4:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003cc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cc8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003cca:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8003ccc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cce:	2200      	movs	r2, #0
 8003cd0:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003cd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cd4:	3304      	adds	r3, #4
 8003cd6:	4618      	mov	r0, r3
 8003cd8:	f7ff f98b 	bl	8002ff2 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003cdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cde:	3318      	adds	r3, #24
 8003ce0:	4618      	mov	r0, r3
 8003ce2:	f7ff f986 	bl	8002ff2 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003ce6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ce8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003cea:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003cec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cee:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8003cf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cf4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003cf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cf8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003cfa:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003cfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cfe:	2200      	movs	r2, #0
 8003d00:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003d04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d06:	2200      	movs	r2, #0
 8003d08:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8003d0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d0e:	3354      	adds	r3, #84	; 0x54
 8003d10:	2260      	movs	r2, #96	; 0x60
 8003d12:	2100      	movs	r1, #0
 8003d14:	4618      	mov	r0, r3
 8003d16:	f001 fe92 	bl	8005a3e <memset>
 8003d1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d1c:	4a0c      	ldr	r2, [pc, #48]	; (8003d50 <prvInitialiseNewTask+0x130>)
 8003d1e:	659a      	str	r2, [r3, #88]	; 0x58
 8003d20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d22:	4a0c      	ldr	r2, [pc, #48]	; (8003d54 <prvInitialiseNewTask+0x134>)
 8003d24:	65da      	str	r2, [r3, #92]	; 0x5c
 8003d26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d28:	4a0b      	ldr	r2, [pc, #44]	; (8003d58 <prvInitialiseNewTask+0x138>)
 8003d2a:	661a      	str	r2, [r3, #96]	; 0x60
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003d2c:	683a      	ldr	r2, [r7, #0]
 8003d2e:	68f9      	ldr	r1, [r7, #12]
 8003d30:	69b8      	ldr	r0, [r7, #24]
 8003d32:	f001 f987 	bl	8005044 <pxPortInitialiseStack>
 8003d36:	4602      	mov	r2, r0
 8003d38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d3a:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8003d3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d002      	beq.n	8003d48 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003d42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d44:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003d46:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003d48:	bf00      	nop
 8003d4a:	3720      	adds	r7, #32
 8003d4c:	46bd      	mov	sp, r7
 8003d4e:	bd80      	pop	{r7, pc}
 8003d50:	08006d18 	.word	0x08006d18
 8003d54:	08006d38 	.word	0x08006d38
 8003d58:	08006cf8 	.word	0x08006cf8

08003d5c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003d5c:	b580      	push	{r7, lr}
 8003d5e:	b082      	sub	sp, #8
 8003d60:	af00      	add	r7, sp, #0
 8003d62:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003d64:	f001 fa62 	bl	800522c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003d68:	4b2d      	ldr	r3, [pc, #180]	; (8003e20 <prvAddNewTaskToReadyList+0xc4>)
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	3301      	adds	r3, #1
 8003d6e:	4a2c      	ldr	r2, [pc, #176]	; (8003e20 <prvAddNewTaskToReadyList+0xc4>)
 8003d70:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8003d72:	4b2c      	ldr	r3, [pc, #176]	; (8003e24 <prvAddNewTaskToReadyList+0xc8>)
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d109      	bne.n	8003d8e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003d7a:	4a2a      	ldr	r2, [pc, #168]	; (8003e24 <prvAddNewTaskToReadyList+0xc8>)
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003d80:	4b27      	ldr	r3, [pc, #156]	; (8003e20 <prvAddNewTaskToReadyList+0xc4>)
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	2b01      	cmp	r3, #1
 8003d86:	d110      	bne.n	8003daa <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003d88:	f000 fbf4 	bl	8004574 <prvInitialiseTaskLists>
 8003d8c:	e00d      	b.n	8003daa <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003d8e:	4b26      	ldr	r3, [pc, #152]	; (8003e28 <prvAddNewTaskToReadyList+0xcc>)
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d109      	bne.n	8003daa <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003d96:	4b23      	ldr	r3, [pc, #140]	; (8003e24 <prvAddNewTaskToReadyList+0xc8>)
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003da0:	429a      	cmp	r2, r3
 8003da2:	d802      	bhi.n	8003daa <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003da4:	4a1f      	ldr	r2, [pc, #124]	; (8003e24 <prvAddNewTaskToReadyList+0xc8>)
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003daa:	4b20      	ldr	r3, [pc, #128]	; (8003e2c <prvAddNewTaskToReadyList+0xd0>)
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	3301      	adds	r3, #1
 8003db0:	4a1e      	ldr	r2, [pc, #120]	; (8003e2c <prvAddNewTaskToReadyList+0xd0>)
 8003db2:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8003db4:	4b1d      	ldr	r3, [pc, #116]	; (8003e2c <prvAddNewTaskToReadyList+0xd0>)
 8003db6:	681a      	ldr	r2, [r3, #0]
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003dc0:	4b1b      	ldr	r3, [pc, #108]	; (8003e30 <prvAddNewTaskToReadyList+0xd4>)
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	429a      	cmp	r2, r3
 8003dc6:	d903      	bls.n	8003dd0 <prvAddNewTaskToReadyList+0x74>
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dcc:	4a18      	ldr	r2, [pc, #96]	; (8003e30 <prvAddNewTaskToReadyList+0xd4>)
 8003dce:	6013      	str	r3, [r2, #0]
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003dd4:	4613      	mov	r3, r2
 8003dd6:	009b      	lsls	r3, r3, #2
 8003dd8:	4413      	add	r3, r2
 8003dda:	009b      	lsls	r3, r3, #2
 8003ddc:	4a15      	ldr	r2, [pc, #84]	; (8003e34 <prvAddNewTaskToReadyList+0xd8>)
 8003dde:	441a      	add	r2, r3
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	3304      	adds	r3, #4
 8003de4:	4619      	mov	r1, r3
 8003de6:	4610      	mov	r0, r2
 8003de8:	f7ff f90f 	bl	800300a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003dec:	f001 fa4e 	bl	800528c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003df0:	4b0d      	ldr	r3, [pc, #52]	; (8003e28 <prvAddNewTaskToReadyList+0xcc>)
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d00e      	beq.n	8003e16 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003df8:	4b0a      	ldr	r3, [pc, #40]	; (8003e24 <prvAddNewTaskToReadyList+0xc8>)
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e02:	429a      	cmp	r2, r3
 8003e04:	d207      	bcs.n	8003e16 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003e06:	4b0c      	ldr	r3, [pc, #48]	; (8003e38 <prvAddNewTaskToReadyList+0xdc>)
 8003e08:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003e0c:	601a      	str	r2, [r3, #0]
 8003e0e:	f3bf 8f4f 	dsb	sy
 8003e12:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003e16:	bf00      	nop
 8003e18:	3708      	adds	r7, #8
 8003e1a:	46bd      	mov	sp, r7
 8003e1c:	bd80      	pop	{r7, pc}
 8003e1e:	bf00      	nop
 8003e20:	20000e98 	.word	0x20000e98
 8003e24:	200009c4 	.word	0x200009c4
 8003e28:	20000ea4 	.word	0x20000ea4
 8003e2c:	20000eb4 	.word	0x20000eb4
 8003e30:	20000ea0 	.word	0x20000ea0
 8003e34:	200009c8 	.word	0x200009c8
 8003e38:	e000ed04 	.word	0xe000ed04

08003e3c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003e3c:	b580      	push	{r7, lr}
 8003e3e:	b08a      	sub	sp, #40	; 0x28
 8003e40:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003e42:	2300      	movs	r3, #0
 8003e44:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8003e46:	2300      	movs	r3, #0
 8003e48:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003e4a:	463a      	mov	r2, r7
 8003e4c:	1d39      	adds	r1, r7, #4
 8003e4e:	f107 0308 	add.w	r3, r7, #8
 8003e52:	4618      	mov	r0, r3
 8003e54:	f7ff f87c 	bl	8002f50 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003e58:	6839      	ldr	r1, [r7, #0]
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	68ba      	ldr	r2, [r7, #8]
 8003e5e:	9202      	str	r2, [sp, #8]
 8003e60:	9301      	str	r3, [sp, #4]
 8003e62:	2300      	movs	r3, #0
 8003e64:	9300      	str	r3, [sp, #0]
 8003e66:	2300      	movs	r3, #0
 8003e68:	460a      	mov	r2, r1
 8003e6a:	4924      	ldr	r1, [pc, #144]	; (8003efc <vTaskStartScheduler+0xc0>)
 8003e6c:	4824      	ldr	r0, [pc, #144]	; (8003f00 <vTaskStartScheduler+0xc4>)
 8003e6e:	f7ff fe35 	bl	8003adc <xTaskCreateStatic>
 8003e72:	4603      	mov	r3, r0
 8003e74:	4a23      	ldr	r2, [pc, #140]	; (8003f04 <vTaskStartScheduler+0xc8>)
 8003e76:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003e78:	4b22      	ldr	r3, [pc, #136]	; (8003f04 <vTaskStartScheduler+0xc8>)
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d002      	beq.n	8003e86 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003e80:	2301      	movs	r3, #1
 8003e82:	617b      	str	r3, [r7, #20]
 8003e84:	e001      	b.n	8003e8a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8003e86:	2300      	movs	r3, #0
 8003e88:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8003e8a:	697b      	ldr	r3, [r7, #20]
 8003e8c:	2b01      	cmp	r3, #1
 8003e8e:	d102      	bne.n	8003e96 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8003e90:	f000 fd16 	bl	80048c0 <xTimerCreateTimerTask>
 8003e94:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003e96:	697b      	ldr	r3, [r7, #20]
 8003e98:	2b01      	cmp	r3, #1
 8003e9a:	d11b      	bne.n	8003ed4 <vTaskStartScheduler+0x98>
	__asm volatile
 8003e9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ea0:	f383 8811 	msr	BASEPRI, r3
 8003ea4:	f3bf 8f6f 	isb	sy
 8003ea8:	f3bf 8f4f 	dsb	sy
 8003eac:	613b      	str	r3, [r7, #16]
}
 8003eae:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8003eb0:	4b15      	ldr	r3, [pc, #84]	; (8003f08 <vTaskStartScheduler+0xcc>)
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	3354      	adds	r3, #84	; 0x54
 8003eb6:	4a15      	ldr	r2, [pc, #84]	; (8003f0c <vTaskStartScheduler+0xd0>)
 8003eb8:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003eba:	4b15      	ldr	r3, [pc, #84]	; (8003f10 <vTaskStartScheduler+0xd4>)
 8003ebc:	f04f 32ff 	mov.w	r2, #4294967295
 8003ec0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003ec2:	4b14      	ldr	r3, [pc, #80]	; (8003f14 <vTaskStartScheduler+0xd8>)
 8003ec4:	2201      	movs	r2, #1
 8003ec6:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8003ec8:	4b13      	ldr	r3, [pc, #76]	; (8003f18 <vTaskStartScheduler+0xdc>)
 8003eca:	2200      	movs	r2, #0
 8003ecc:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003ece:	f001 f93b 	bl	8005148 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003ed2:	e00e      	b.n	8003ef2 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003ed4:	697b      	ldr	r3, [r7, #20]
 8003ed6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003eda:	d10a      	bne.n	8003ef2 <vTaskStartScheduler+0xb6>
	__asm volatile
 8003edc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ee0:	f383 8811 	msr	BASEPRI, r3
 8003ee4:	f3bf 8f6f 	isb	sy
 8003ee8:	f3bf 8f4f 	dsb	sy
 8003eec:	60fb      	str	r3, [r7, #12]
}
 8003eee:	bf00      	nop
 8003ef0:	e7fe      	b.n	8003ef0 <vTaskStartScheduler+0xb4>
}
 8003ef2:	bf00      	nop
 8003ef4:	3718      	adds	r7, #24
 8003ef6:	46bd      	mov	sp, r7
 8003ef8:	bd80      	pop	{r7, pc}
 8003efa:	bf00      	nop
 8003efc:	08006c94 	.word	0x08006c94
 8003f00:	08004545 	.word	0x08004545
 8003f04:	20000ebc 	.word	0x20000ebc
 8003f08:	200009c4 	.word	0x200009c4
 8003f0c:	20000014 	.word	0x20000014
 8003f10:	20000eb8 	.word	0x20000eb8
 8003f14:	20000ea4 	.word	0x20000ea4
 8003f18:	20000e9c 	.word	0x20000e9c

08003f1c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003f1c:	b480      	push	{r7}
 8003f1e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8003f20:	4b04      	ldr	r3, [pc, #16]	; (8003f34 <vTaskSuspendAll+0x18>)
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	3301      	adds	r3, #1
 8003f26:	4a03      	ldr	r2, [pc, #12]	; (8003f34 <vTaskSuspendAll+0x18>)
 8003f28:	6013      	str	r3, [r2, #0]
}
 8003f2a:	bf00      	nop
 8003f2c:	46bd      	mov	sp, r7
 8003f2e:	bc80      	pop	{r7}
 8003f30:	4770      	bx	lr
 8003f32:	bf00      	nop
 8003f34:	20000ec0 	.word	0x20000ec0

08003f38 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003f38:	b580      	push	{r7, lr}
 8003f3a:	b084      	sub	sp, #16
 8003f3c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003f3e:	2300      	movs	r3, #0
 8003f40:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003f42:	2300      	movs	r3, #0
 8003f44:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003f46:	4b42      	ldr	r3, [pc, #264]	; (8004050 <xTaskResumeAll+0x118>)
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d10a      	bne.n	8003f64 <xTaskResumeAll+0x2c>
	__asm volatile
 8003f4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f52:	f383 8811 	msr	BASEPRI, r3
 8003f56:	f3bf 8f6f 	isb	sy
 8003f5a:	f3bf 8f4f 	dsb	sy
 8003f5e:	603b      	str	r3, [r7, #0]
}
 8003f60:	bf00      	nop
 8003f62:	e7fe      	b.n	8003f62 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003f64:	f001 f962 	bl	800522c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003f68:	4b39      	ldr	r3, [pc, #228]	; (8004050 <xTaskResumeAll+0x118>)
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	3b01      	subs	r3, #1
 8003f6e:	4a38      	ldr	r2, [pc, #224]	; (8004050 <xTaskResumeAll+0x118>)
 8003f70:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003f72:	4b37      	ldr	r3, [pc, #220]	; (8004050 <xTaskResumeAll+0x118>)
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d162      	bne.n	8004040 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003f7a:	4b36      	ldr	r3, [pc, #216]	; (8004054 <xTaskResumeAll+0x11c>)
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d05e      	beq.n	8004040 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003f82:	e02f      	b.n	8003fe4 <xTaskResumeAll+0xac>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8003f84:	4b34      	ldr	r3, [pc, #208]	; (8004058 <xTaskResumeAll+0x120>)
 8003f86:	68db      	ldr	r3, [r3, #12]
 8003f88:	68db      	ldr	r3, [r3, #12]
 8003f8a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	3318      	adds	r3, #24
 8003f90:	4618      	mov	r0, r3
 8003f92:	f7ff f895 	bl	80030c0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	3304      	adds	r3, #4
 8003f9a:	4618      	mov	r0, r3
 8003f9c:	f7ff f890 	bl	80030c0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003fa4:	4b2d      	ldr	r3, [pc, #180]	; (800405c <xTaskResumeAll+0x124>)
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	429a      	cmp	r2, r3
 8003faa:	d903      	bls.n	8003fb4 <xTaskResumeAll+0x7c>
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fb0:	4a2a      	ldr	r2, [pc, #168]	; (800405c <xTaskResumeAll+0x124>)
 8003fb2:	6013      	str	r3, [r2, #0]
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003fb8:	4613      	mov	r3, r2
 8003fba:	009b      	lsls	r3, r3, #2
 8003fbc:	4413      	add	r3, r2
 8003fbe:	009b      	lsls	r3, r3, #2
 8003fc0:	4a27      	ldr	r2, [pc, #156]	; (8004060 <xTaskResumeAll+0x128>)
 8003fc2:	441a      	add	r2, r3
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	3304      	adds	r3, #4
 8003fc8:	4619      	mov	r1, r3
 8003fca:	4610      	mov	r0, r2
 8003fcc:	f7ff f81d 	bl	800300a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003fd4:	4b23      	ldr	r3, [pc, #140]	; (8004064 <xTaskResumeAll+0x12c>)
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fda:	429a      	cmp	r2, r3
 8003fdc:	d302      	bcc.n	8003fe4 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8003fde:	4b22      	ldr	r3, [pc, #136]	; (8004068 <xTaskResumeAll+0x130>)
 8003fe0:	2201      	movs	r2, #1
 8003fe2:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003fe4:	4b1c      	ldr	r3, [pc, #112]	; (8004058 <xTaskResumeAll+0x120>)
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d1cb      	bne.n	8003f84 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d001      	beq.n	8003ff6 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003ff2:	f000 fb61 	bl	80046b8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8003ff6:	4b1d      	ldr	r3, [pc, #116]	; (800406c <xTaskResumeAll+0x134>)
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d010      	beq.n	8004024 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004002:	f000 f845 	bl	8004090 <xTaskIncrementTick>
 8004006:	4603      	mov	r3, r0
 8004008:	2b00      	cmp	r3, #0
 800400a:	d002      	beq.n	8004012 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800400c:	4b16      	ldr	r3, [pc, #88]	; (8004068 <xTaskResumeAll+0x130>)
 800400e:	2201      	movs	r2, #1
 8004010:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	3b01      	subs	r3, #1
 8004016:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	2b00      	cmp	r3, #0
 800401c:	d1f1      	bne.n	8004002 <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 800401e:	4b13      	ldr	r3, [pc, #76]	; (800406c <xTaskResumeAll+0x134>)
 8004020:	2200      	movs	r2, #0
 8004022:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004024:	4b10      	ldr	r3, [pc, #64]	; (8004068 <xTaskResumeAll+0x130>)
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	2b00      	cmp	r3, #0
 800402a:	d009      	beq.n	8004040 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800402c:	2301      	movs	r3, #1
 800402e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004030:	4b0f      	ldr	r3, [pc, #60]	; (8004070 <xTaskResumeAll+0x138>)
 8004032:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004036:	601a      	str	r2, [r3, #0]
 8004038:	f3bf 8f4f 	dsb	sy
 800403c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004040:	f001 f924 	bl	800528c <vPortExitCritical>

	return xAlreadyYielded;
 8004044:	68bb      	ldr	r3, [r7, #8]
}
 8004046:	4618      	mov	r0, r3
 8004048:	3710      	adds	r7, #16
 800404a:	46bd      	mov	sp, r7
 800404c:	bd80      	pop	{r7, pc}
 800404e:	bf00      	nop
 8004050:	20000ec0 	.word	0x20000ec0
 8004054:	20000e98 	.word	0x20000e98
 8004058:	20000e58 	.word	0x20000e58
 800405c:	20000ea0 	.word	0x20000ea0
 8004060:	200009c8 	.word	0x200009c8
 8004064:	200009c4 	.word	0x200009c4
 8004068:	20000eac 	.word	0x20000eac
 800406c:	20000ea8 	.word	0x20000ea8
 8004070:	e000ed04 	.word	0xe000ed04

08004074 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8004074:	b480      	push	{r7}
 8004076:	b083      	sub	sp, #12
 8004078:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800407a:	4b04      	ldr	r3, [pc, #16]	; (800408c <xTaskGetTickCount+0x18>)
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8004080:	687b      	ldr	r3, [r7, #4]
}
 8004082:	4618      	mov	r0, r3
 8004084:	370c      	adds	r7, #12
 8004086:	46bd      	mov	sp, r7
 8004088:	bc80      	pop	{r7}
 800408a:	4770      	bx	lr
 800408c:	20000e9c 	.word	0x20000e9c

08004090 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004090:	b580      	push	{r7, lr}
 8004092:	b086      	sub	sp, #24
 8004094:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004096:	2300      	movs	r3, #0
 8004098:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800409a:	4b51      	ldr	r3, [pc, #324]	; (80041e0 <xTaskIncrementTick+0x150>)
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	2b00      	cmp	r3, #0
 80040a0:	f040 808e 	bne.w	80041c0 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80040a4:	4b4f      	ldr	r3, [pc, #316]	; (80041e4 <xTaskIncrementTick+0x154>)
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	3301      	adds	r3, #1
 80040aa:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80040ac:	4a4d      	ldr	r2, [pc, #308]	; (80041e4 <xTaskIncrementTick+0x154>)
 80040ae:	693b      	ldr	r3, [r7, #16]
 80040b0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80040b2:	693b      	ldr	r3, [r7, #16]
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d120      	bne.n	80040fa <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80040b8:	4b4b      	ldr	r3, [pc, #300]	; (80041e8 <xTaskIncrementTick+0x158>)
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d00a      	beq.n	80040d8 <xTaskIncrementTick+0x48>
	__asm volatile
 80040c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040c6:	f383 8811 	msr	BASEPRI, r3
 80040ca:	f3bf 8f6f 	isb	sy
 80040ce:	f3bf 8f4f 	dsb	sy
 80040d2:	603b      	str	r3, [r7, #0]
}
 80040d4:	bf00      	nop
 80040d6:	e7fe      	b.n	80040d6 <xTaskIncrementTick+0x46>
 80040d8:	4b43      	ldr	r3, [pc, #268]	; (80041e8 <xTaskIncrementTick+0x158>)
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	60fb      	str	r3, [r7, #12]
 80040de:	4b43      	ldr	r3, [pc, #268]	; (80041ec <xTaskIncrementTick+0x15c>)
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	4a41      	ldr	r2, [pc, #260]	; (80041e8 <xTaskIncrementTick+0x158>)
 80040e4:	6013      	str	r3, [r2, #0]
 80040e6:	4a41      	ldr	r2, [pc, #260]	; (80041ec <xTaskIncrementTick+0x15c>)
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	6013      	str	r3, [r2, #0]
 80040ec:	4b40      	ldr	r3, [pc, #256]	; (80041f0 <xTaskIncrementTick+0x160>)
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	3301      	adds	r3, #1
 80040f2:	4a3f      	ldr	r2, [pc, #252]	; (80041f0 <xTaskIncrementTick+0x160>)
 80040f4:	6013      	str	r3, [r2, #0]
 80040f6:	f000 fadf 	bl	80046b8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80040fa:	4b3e      	ldr	r3, [pc, #248]	; (80041f4 <xTaskIncrementTick+0x164>)
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	693a      	ldr	r2, [r7, #16]
 8004100:	429a      	cmp	r2, r3
 8004102:	d34e      	bcc.n	80041a2 <xTaskIncrementTick+0x112>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004104:	4b38      	ldr	r3, [pc, #224]	; (80041e8 <xTaskIncrementTick+0x158>)
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	2b00      	cmp	r3, #0
 800410c:	d101      	bne.n	8004112 <xTaskIncrementTick+0x82>
 800410e:	2301      	movs	r3, #1
 8004110:	e000      	b.n	8004114 <xTaskIncrementTick+0x84>
 8004112:	2300      	movs	r3, #0
 8004114:	2b00      	cmp	r3, #0
 8004116:	d004      	beq.n	8004122 <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004118:	4b36      	ldr	r3, [pc, #216]	; (80041f4 <xTaskIncrementTick+0x164>)
 800411a:	f04f 32ff 	mov.w	r2, #4294967295
 800411e:	601a      	str	r2, [r3, #0]
					break;
 8004120:	e03f      	b.n	80041a2 <xTaskIncrementTick+0x112>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8004122:	4b31      	ldr	r3, [pc, #196]	; (80041e8 <xTaskIncrementTick+0x158>)
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	68db      	ldr	r3, [r3, #12]
 8004128:	68db      	ldr	r3, [r3, #12]
 800412a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800412c:	68bb      	ldr	r3, [r7, #8]
 800412e:	685b      	ldr	r3, [r3, #4]
 8004130:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004132:	693a      	ldr	r2, [r7, #16]
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	429a      	cmp	r2, r3
 8004138:	d203      	bcs.n	8004142 <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800413a:	4a2e      	ldr	r2, [pc, #184]	; (80041f4 <xTaskIncrementTick+0x164>)
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	6013      	str	r3, [r2, #0]
						break;
 8004140:	e02f      	b.n	80041a2 <xTaskIncrementTick+0x112>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004142:	68bb      	ldr	r3, [r7, #8]
 8004144:	3304      	adds	r3, #4
 8004146:	4618      	mov	r0, r3
 8004148:	f7fe ffba 	bl	80030c0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800414c:	68bb      	ldr	r3, [r7, #8]
 800414e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004150:	2b00      	cmp	r3, #0
 8004152:	d004      	beq.n	800415e <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004154:	68bb      	ldr	r3, [r7, #8]
 8004156:	3318      	adds	r3, #24
 8004158:	4618      	mov	r0, r3
 800415a:	f7fe ffb1 	bl	80030c0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800415e:	68bb      	ldr	r3, [r7, #8]
 8004160:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004162:	4b25      	ldr	r3, [pc, #148]	; (80041f8 <xTaskIncrementTick+0x168>)
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	429a      	cmp	r2, r3
 8004168:	d903      	bls.n	8004172 <xTaskIncrementTick+0xe2>
 800416a:	68bb      	ldr	r3, [r7, #8]
 800416c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800416e:	4a22      	ldr	r2, [pc, #136]	; (80041f8 <xTaskIncrementTick+0x168>)
 8004170:	6013      	str	r3, [r2, #0]
 8004172:	68bb      	ldr	r3, [r7, #8]
 8004174:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004176:	4613      	mov	r3, r2
 8004178:	009b      	lsls	r3, r3, #2
 800417a:	4413      	add	r3, r2
 800417c:	009b      	lsls	r3, r3, #2
 800417e:	4a1f      	ldr	r2, [pc, #124]	; (80041fc <xTaskIncrementTick+0x16c>)
 8004180:	441a      	add	r2, r3
 8004182:	68bb      	ldr	r3, [r7, #8]
 8004184:	3304      	adds	r3, #4
 8004186:	4619      	mov	r1, r3
 8004188:	4610      	mov	r0, r2
 800418a:	f7fe ff3e 	bl	800300a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800418e:	68bb      	ldr	r3, [r7, #8]
 8004190:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004192:	4b1b      	ldr	r3, [pc, #108]	; (8004200 <xTaskIncrementTick+0x170>)
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004198:	429a      	cmp	r2, r3
 800419a:	d3b3      	bcc.n	8004104 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800419c:	2301      	movs	r3, #1
 800419e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80041a0:	e7b0      	b.n	8004104 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80041a2:	4b17      	ldr	r3, [pc, #92]	; (8004200 <xTaskIncrementTick+0x170>)
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80041a8:	4914      	ldr	r1, [pc, #80]	; (80041fc <xTaskIncrementTick+0x16c>)
 80041aa:	4613      	mov	r3, r2
 80041ac:	009b      	lsls	r3, r3, #2
 80041ae:	4413      	add	r3, r2
 80041b0:	009b      	lsls	r3, r3, #2
 80041b2:	440b      	add	r3, r1
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	2b01      	cmp	r3, #1
 80041b8:	d907      	bls.n	80041ca <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 80041ba:	2301      	movs	r3, #1
 80041bc:	617b      	str	r3, [r7, #20]
 80041be:	e004      	b.n	80041ca <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80041c0:	4b10      	ldr	r3, [pc, #64]	; (8004204 <xTaskIncrementTick+0x174>)
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	3301      	adds	r3, #1
 80041c6:	4a0f      	ldr	r2, [pc, #60]	; (8004204 <xTaskIncrementTick+0x174>)
 80041c8:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80041ca:	4b0f      	ldr	r3, [pc, #60]	; (8004208 <xTaskIncrementTick+0x178>)
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d001      	beq.n	80041d6 <xTaskIncrementTick+0x146>
		{
			xSwitchRequired = pdTRUE;
 80041d2:	2301      	movs	r3, #1
 80041d4:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80041d6:	697b      	ldr	r3, [r7, #20]
}
 80041d8:	4618      	mov	r0, r3
 80041da:	3718      	adds	r7, #24
 80041dc:	46bd      	mov	sp, r7
 80041de:	bd80      	pop	{r7, pc}
 80041e0:	20000ec0 	.word	0x20000ec0
 80041e4:	20000e9c 	.word	0x20000e9c
 80041e8:	20000e50 	.word	0x20000e50
 80041ec:	20000e54 	.word	0x20000e54
 80041f0:	20000eb0 	.word	0x20000eb0
 80041f4:	20000eb8 	.word	0x20000eb8
 80041f8:	20000ea0 	.word	0x20000ea0
 80041fc:	200009c8 	.word	0x200009c8
 8004200:	200009c4 	.word	0x200009c4
 8004204:	20000ea8 	.word	0x20000ea8
 8004208:	20000eac 	.word	0x20000eac

0800420c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800420c:	b480      	push	{r7}
 800420e:	b085      	sub	sp, #20
 8004210:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004212:	4b2a      	ldr	r3, [pc, #168]	; (80042bc <vTaskSwitchContext+0xb0>)
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	2b00      	cmp	r3, #0
 8004218:	d003      	beq.n	8004222 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800421a:	4b29      	ldr	r3, [pc, #164]	; (80042c0 <vTaskSwitchContext+0xb4>)
 800421c:	2201      	movs	r2, #1
 800421e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004220:	e046      	b.n	80042b0 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 8004222:	4b27      	ldr	r3, [pc, #156]	; (80042c0 <vTaskSwitchContext+0xb4>)
 8004224:	2200      	movs	r2, #0
 8004226:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8004228:	4b26      	ldr	r3, [pc, #152]	; (80042c4 <vTaskSwitchContext+0xb8>)
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	60fb      	str	r3, [r7, #12]
 800422e:	e010      	b.n	8004252 <vTaskSwitchContext+0x46>
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	2b00      	cmp	r3, #0
 8004234:	d10a      	bne.n	800424c <vTaskSwitchContext+0x40>
	__asm volatile
 8004236:	f04f 0350 	mov.w	r3, #80	; 0x50
 800423a:	f383 8811 	msr	BASEPRI, r3
 800423e:	f3bf 8f6f 	isb	sy
 8004242:	f3bf 8f4f 	dsb	sy
 8004246:	607b      	str	r3, [r7, #4]
}
 8004248:	bf00      	nop
 800424a:	e7fe      	b.n	800424a <vTaskSwitchContext+0x3e>
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	3b01      	subs	r3, #1
 8004250:	60fb      	str	r3, [r7, #12]
 8004252:	491d      	ldr	r1, [pc, #116]	; (80042c8 <vTaskSwitchContext+0xbc>)
 8004254:	68fa      	ldr	r2, [r7, #12]
 8004256:	4613      	mov	r3, r2
 8004258:	009b      	lsls	r3, r3, #2
 800425a:	4413      	add	r3, r2
 800425c:	009b      	lsls	r3, r3, #2
 800425e:	440b      	add	r3, r1
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	2b00      	cmp	r3, #0
 8004264:	d0e4      	beq.n	8004230 <vTaskSwitchContext+0x24>
 8004266:	68fa      	ldr	r2, [r7, #12]
 8004268:	4613      	mov	r3, r2
 800426a:	009b      	lsls	r3, r3, #2
 800426c:	4413      	add	r3, r2
 800426e:	009b      	lsls	r3, r3, #2
 8004270:	4a15      	ldr	r2, [pc, #84]	; (80042c8 <vTaskSwitchContext+0xbc>)
 8004272:	4413      	add	r3, r2
 8004274:	60bb      	str	r3, [r7, #8]
 8004276:	68bb      	ldr	r3, [r7, #8]
 8004278:	685b      	ldr	r3, [r3, #4]
 800427a:	685a      	ldr	r2, [r3, #4]
 800427c:	68bb      	ldr	r3, [r7, #8]
 800427e:	605a      	str	r2, [r3, #4]
 8004280:	68bb      	ldr	r3, [r7, #8]
 8004282:	685a      	ldr	r2, [r3, #4]
 8004284:	68bb      	ldr	r3, [r7, #8]
 8004286:	3308      	adds	r3, #8
 8004288:	429a      	cmp	r2, r3
 800428a:	d104      	bne.n	8004296 <vTaskSwitchContext+0x8a>
 800428c:	68bb      	ldr	r3, [r7, #8]
 800428e:	685b      	ldr	r3, [r3, #4]
 8004290:	685a      	ldr	r2, [r3, #4]
 8004292:	68bb      	ldr	r3, [r7, #8]
 8004294:	605a      	str	r2, [r3, #4]
 8004296:	68bb      	ldr	r3, [r7, #8]
 8004298:	685b      	ldr	r3, [r3, #4]
 800429a:	68db      	ldr	r3, [r3, #12]
 800429c:	4a0b      	ldr	r2, [pc, #44]	; (80042cc <vTaskSwitchContext+0xc0>)
 800429e:	6013      	str	r3, [r2, #0]
 80042a0:	4a08      	ldr	r2, [pc, #32]	; (80042c4 <vTaskSwitchContext+0xb8>)
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80042a6:	4b09      	ldr	r3, [pc, #36]	; (80042cc <vTaskSwitchContext+0xc0>)
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	3354      	adds	r3, #84	; 0x54
 80042ac:	4a08      	ldr	r2, [pc, #32]	; (80042d0 <vTaskSwitchContext+0xc4>)
 80042ae:	6013      	str	r3, [r2, #0]
}
 80042b0:	bf00      	nop
 80042b2:	3714      	adds	r7, #20
 80042b4:	46bd      	mov	sp, r7
 80042b6:	bc80      	pop	{r7}
 80042b8:	4770      	bx	lr
 80042ba:	bf00      	nop
 80042bc:	20000ec0 	.word	0x20000ec0
 80042c0:	20000eac 	.word	0x20000eac
 80042c4:	20000ea0 	.word	0x20000ea0
 80042c8:	200009c8 	.word	0x200009c8
 80042cc:	200009c4 	.word	0x200009c4
 80042d0:	20000014 	.word	0x20000014

080042d4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80042d4:	b580      	push	{r7, lr}
 80042d6:	b084      	sub	sp, #16
 80042d8:	af00      	add	r7, sp, #0
 80042da:	6078      	str	r0, [r7, #4]
 80042dc:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d10a      	bne.n	80042fa <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80042e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042e8:	f383 8811 	msr	BASEPRI, r3
 80042ec:	f3bf 8f6f 	isb	sy
 80042f0:	f3bf 8f4f 	dsb	sy
 80042f4:	60fb      	str	r3, [r7, #12]
}
 80042f6:	bf00      	nop
 80042f8:	e7fe      	b.n	80042f8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80042fa:	4b07      	ldr	r3, [pc, #28]	; (8004318 <vTaskPlaceOnEventList+0x44>)
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	3318      	adds	r3, #24
 8004300:	4619      	mov	r1, r3
 8004302:	6878      	ldr	r0, [r7, #4]
 8004304:	f7fe fea4 	bl	8003050 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004308:	2101      	movs	r1, #1
 800430a:	6838      	ldr	r0, [r7, #0]
 800430c:	f000 fa84 	bl	8004818 <prvAddCurrentTaskToDelayedList>
}
 8004310:	bf00      	nop
 8004312:	3710      	adds	r7, #16
 8004314:	46bd      	mov	sp, r7
 8004316:	bd80      	pop	{r7, pc}
 8004318:	200009c4 	.word	0x200009c4

0800431c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800431c:	b580      	push	{r7, lr}
 800431e:	b086      	sub	sp, #24
 8004320:	af00      	add	r7, sp, #0
 8004322:	60f8      	str	r0, [r7, #12]
 8004324:	60b9      	str	r1, [r7, #8]
 8004326:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	2b00      	cmp	r3, #0
 800432c:	d10a      	bne.n	8004344 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800432e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004332:	f383 8811 	msr	BASEPRI, r3
 8004336:	f3bf 8f6f 	isb	sy
 800433a:	f3bf 8f4f 	dsb	sy
 800433e:	617b      	str	r3, [r7, #20]
}
 8004340:	bf00      	nop
 8004342:	e7fe      	b.n	8004342 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004344:	4b0a      	ldr	r3, [pc, #40]	; (8004370 <vTaskPlaceOnEventListRestricted+0x54>)
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	3318      	adds	r3, #24
 800434a:	4619      	mov	r1, r3
 800434c:	68f8      	ldr	r0, [r7, #12]
 800434e:	f7fe fe5c 	bl	800300a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	2b00      	cmp	r3, #0
 8004356:	d002      	beq.n	800435e <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8004358:	f04f 33ff 	mov.w	r3, #4294967295
 800435c:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800435e:	6879      	ldr	r1, [r7, #4]
 8004360:	68b8      	ldr	r0, [r7, #8]
 8004362:	f000 fa59 	bl	8004818 <prvAddCurrentTaskToDelayedList>
	}
 8004366:	bf00      	nop
 8004368:	3718      	adds	r7, #24
 800436a:	46bd      	mov	sp, r7
 800436c:	bd80      	pop	{r7, pc}
 800436e:	bf00      	nop
 8004370:	200009c4 	.word	0x200009c4

08004374 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004374:	b580      	push	{r7, lr}
 8004376:	b086      	sub	sp, #24
 8004378:	af00      	add	r7, sp, #0
 800437a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	68db      	ldr	r3, [r3, #12]
 8004380:	68db      	ldr	r3, [r3, #12]
 8004382:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8004384:	693b      	ldr	r3, [r7, #16]
 8004386:	2b00      	cmp	r3, #0
 8004388:	d10a      	bne.n	80043a0 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800438a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800438e:	f383 8811 	msr	BASEPRI, r3
 8004392:	f3bf 8f6f 	isb	sy
 8004396:	f3bf 8f4f 	dsb	sy
 800439a:	60fb      	str	r3, [r7, #12]
}
 800439c:	bf00      	nop
 800439e:	e7fe      	b.n	800439e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80043a0:	693b      	ldr	r3, [r7, #16]
 80043a2:	3318      	adds	r3, #24
 80043a4:	4618      	mov	r0, r3
 80043a6:	f7fe fe8b 	bl	80030c0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80043aa:	4b1e      	ldr	r3, [pc, #120]	; (8004424 <xTaskRemoveFromEventList+0xb0>)
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d11d      	bne.n	80043ee <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80043b2:	693b      	ldr	r3, [r7, #16]
 80043b4:	3304      	adds	r3, #4
 80043b6:	4618      	mov	r0, r3
 80043b8:	f7fe fe82 	bl	80030c0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80043bc:	693b      	ldr	r3, [r7, #16]
 80043be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80043c0:	4b19      	ldr	r3, [pc, #100]	; (8004428 <xTaskRemoveFromEventList+0xb4>)
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	429a      	cmp	r2, r3
 80043c6:	d903      	bls.n	80043d0 <xTaskRemoveFromEventList+0x5c>
 80043c8:	693b      	ldr	r3, [r7, #16]
 80043ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043cc:	4a16      	ldr	r2, [pc, #88]	; (8004428 <xTaskRemoveFromEventList+0xb4>)
 80043ce:	6013      	str	r3, [r2, #0]
 80043d0:	693b      	ldr	r3, [r7, #16]
 80043d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80043d4:	4613      	mov	r3, r2
 80043d6:	009b      	lsls	r3, r3, #2
 80043d8:	4413      	add	r3, r2
 80043da:	009b      	lsls	r3, r3, #2
 80043dc:	4a13      	ldr	r2, [pc, #76]	; (800442c <xTaskRemoveFromEventList+0xb8>)
 80043de:	441a      	add	r2, r3
 80043e0:	693b      	ldr	r3, [r7, #16]
 80043e2:	3304      	adds	r3, #4
 80043e4:	4619      	mov	r1, r3
 80043e6:	4610      	mov	r0, r2
 80043e8:	f7fe fe0f 	bl	800300a <vListInsertEnd>
 80043ec:	e005      	b.n	80043fa <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80043ee:	693b      	ldr	r3, [r7, #16]
 80043f0:	3318      	adds	r3, #24
 80043f2:	4619      	mov	r1, r3
 80043f4:	480e      	ldr	r0, [pc, #56]	; (8004430 <xTaskRemoveFromEventList+0xbc>)
 80043f6:	f7fe fe08 	bl	800300a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80043fa:	693b      	ldr	r3, [r7, #16]
 80043fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80043fe:	4b0d      	ldr	r3, [pc, #52]	; (8004434 <xTaskRemoveFromEventList+0xc0>)
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004404:	429a      	cmp	r2, r3
 8004406:	d905      	bls.n	8004414 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8004408:	2301      	movs	r3, #1
 800440a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800440c:	4b0a      	ldr	r3, [pc, #40]	; (8004438 <xTaskRemoveFromEventList+0xc4>)
 800440e:	2201      	movs	r2, #1
 8004410:	601a      	str	r2, [r3, #0]
 8004412:	e001      	b.n	8004418 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8004414:	2300      	movs	r3, #0
 8004416:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8004418:	697b      	ldr	r3, [r7, #20]
}
 800441a:	4618      	mov	r0, r3
 800441c:	3718      	adds	r7, #24
 800441e:	46bd      	mov	sp, r7
 8004420:	bd80      	pop	{r7, pc}
 8004422:	bf00      	nop
 8004424:	20000ec0 	.word	0x20000ec0
 8004428:	20000ea0 	.word	0x20000ea0
 800442c:	200009c8 	.word	0x200009c8
 8004430:	20000e58 	.word	0x20000e58
 8004434:	200009c4 	.word	0x200009c4
 8004438:	20000eac 	.word	0x20000eac

0800443c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800443c:	b480      	push	{r7}
 800443e:	b083      	sub	sp, #12
 8004440:	af00      	add	r7, sp, #0
 8004442:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004444:	4b06      	ldr	r3, [pc, #24]	; (8004460 <vTaskInternalSetTimeOutState+0x24>)
 8004446:	681a      	ldr	r2, [r3, #0]
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800444c:	4b05      	ldr	r3, [pc, #20]	; (8004464 <vTaskInternalSetTimeOutState+0x28>)
 800444e:	681a      	ldr	r2, [r3, #0]
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	605a      	str	r2, [r3, #4]
}
 8004454:	bf00      	nop
 8004456:	370c      	adds	r7, #12
 8004458:	46bd      	mov	sp, r7
 800445a:	bc80      	pop	{r7}
 800445c:	4770      	bx	lr
 800445e:	bf00      	nop
 8004460:	20000eb0 	.word	0x20000eb0
 8004464:	20000e9c 	.word	0x20000e9c

08004468 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8004468:	b580      	push	{r7, lr}
 800446a:	b088      	sub	sp, #32
 800446c:	af00      	add	r7, sp, #0
 800446e:	6078      	str	r0, [r7, #4]
 8004470:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	2b00      	cmp	r3, #0
 8004476:	d10a      	bne.n	800448e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8004478:	f04f 0350 	mov.w	r3, #80	; 0x50
 800447c:	f383 8811 	msr	BASEPRI, r3
 8004480:	f3bf 8f6f 	isb	sy
 8004484:	f3bf 8f4f 	dsb	sy
 8004488:	613b      	str	r3, [r7, #16]
}
 800448a:	bf00      	nop
 800448c:	e7fe      	b.n	800448c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800448e:	683b      	ldr	r3, [r7, #0]
 8004490:	2b00      	cmp	r3, #0
 8004492:	d10a      	bne.n	80044aa <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8004494:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004498:	f383 8811 	msr	BASEPRI, r3
 800449c:	f3bf 8f6f 	isb	sy
 80044a0:	f3bf 8f4f 	dsb	sy
 80044a4:	60fb      	str	r3, [r7, #12]
}
 80044a6:	bf00      	nop
 80044a8:	e7fe      	b.n	80044a8 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80044aa:	f000 febf 	bl	800522c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80044ae:	4b1d      	ldr	r3, [pc, #116]	; (8004524 <xTaskCheckForTimeOut+0xbc>)
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	685b      	ldr	r3, [r3, #4]
 80044b8:	69ba      	ldr	r2, [r7, #24]
 80044ba:	1ad3      	subs	r3, r2, r3
 80044bc:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80044be:	683b      	ldr	r3, [r7, #0]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044c6:	d102      	bne.n	80044ce <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80044c8:	2300      	movs	r3, #0
 80044ca:	61fb      	str	r3, [r7, #28]
 80044cc:	e023      	b.n	8004516 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681a      	ldr	r2, [r3, #0]
 80044d2:	4b15      	ldr	r3, [pc, #84]	; (8004528 <xTaskCheckForTimeOut+0xc0>)
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	429a      	cmp	r2, r3
 80044d8:	d007      	beq.n	80044ea <xTaskCheckForTimeOut+0x82>
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	685b      	ldr	r3, [r3, #4]
 80044de:	69ba      	ldr	r2, [r7, #24]
 80044e0:	429a      	cmp	r2, r3
 80044e2:	d302      	bcc.n	80044ea <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80044e4:	2301      	movs	r3, #1
 80044e6:	61fb      	str	r3, [r7, #28]
 80044e8:	e015      	b.n	8004516 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80044ea:	683b      	ldr	r3, [r7, #0]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	697a      	ldr	r2, [r7, #20]
 80044f0:	429a      	cmp	r2, r3
 80044f2:	d20b      	bcs.n	800450c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80044f4:	683b      	ldr	r3, [r7, #0]
 80044f6:	681a      	ldr	r2, [r3, #0]
 80044f8:	697b      	ldr	r3, [r7, #20]
 80044fa:	1ad2      	subs	r2, r2, r3
 80044fc:	683b      	ldr	r3, [r7, #0]
 80044fe:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8004500:	6878      	ldr	r0, [r7, #4]
 8004502:	f7ff ff9b 	bl	800443c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8004506:	2300      	movs	r3, #0
 8004508:	61fb      	str	r3, [r7, #28]
 800450a:	e004      	b.n	8004516 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800450c:	683b      	ldr	r3, [r7, #0]
 800450e:	2200      	movs	r2, #0
 8004510:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8004512:	2301      	movs	r3, #1
 8004514:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8004516:	f000 feb9 	bl	800528c <vPortExitCritical>

	return xReturn;
 800451a:	69fb      	ldr	r3, [r7, #28]
}
 800451c:	4618      	mov	r0, r3
 800451e:	3720      	adds	r7, #32
 8004520:	46bd      	mov	sp, r7
 8004522:	bd80      	pop	{r7, pc}
 8004524:	20000e9c 	.word	0x20000e9c
 8004528:	20000eb0 	.word	0x20000eb0

0800452c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800452c:	b480      	push	{r7}
 800452e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8004530:	4b03      	ldr	r3, [pc, #12]	; (8004540 <vTaskMissedYield+0x14>)
 8004532:	2201      	movs	r2, #1
 8004534:	601a      	str	r2, [r3, #0]
}
 8004536:	bf00      	nop
 8004538:	46bd      	mov	sp, r7
 800453a:	bc80      	pop	{r7}
 800453c:	4770      	bx	lr
 800453e:	bf00      	nop
 8004540:	20000eac 	.word	0x20000eac

08004544 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004544:	b580      	push	{r7, lr}
 8004546:	b082      	sub	sp, #8
 8004548:	af00      	add	r7, sp, #0
 800454a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800454c:	f000 f852 	bl	80045f4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004550:	4b06      	ldr	r3, [pc, #24]	; (800456c <prvIdleTask+0x28>)
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	2b01      	cmp	r3, #1
 8004556:	d9f9      	bls.n	800454c <prvIdleTask+0x8>
			{
				taskYIELD();
 8004558:	4b05      	ldr	r3, [pc, #20]	; (8004570 <prvIdleTask+0x2c>)
 800455a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800455e:	601a      	str	r2, [r3, #0]
 8004560:	f3bf 8f4f 	dsb	sy
 8004564:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004568:	e7f0      	b.n	800454c <prvIdleTask+0x8>
 800456a:	bf00      	nop
 800456c:	200009c8 	.word	0x200009c8
 8004570:	e000ed04 	.word	0xe000ed04

08004574 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004574:	b580      	push	{r7, lr}
 8004576:	b082      	sub	sp, #8
 8004578:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800457a:	2300      	movs	r3, #0
 800457c:	607b      	str	r3, [r7, #4]
 800457e:	e00c      	b.n	800459a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004580:	687a      	ldr	r2, [r7, #4]
 8004582:	4613      	mov	r3, r2
 8004584:	009b      	lsls	r3, r3, #2
 8004586:	4413      	add	r3, r2
 8004588:	009b      	lsls	r3, r3, #2
 800458a:	4a12      	ldr	r2, [pc, #72]	; (80045d4 <prvInitialiseTaskLists+0x60>)
 800458c:	4413      	add	r3, r2
 800458e:	4618      	mov	r0, r3
 8004590:	f7fe fd10 	bl	8002fb4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	3301      	adds	r3, #1
 8004598:	607b      	str	r3, [r7, #4]
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	2b37      	cmp	r3, #55	; 0x37
 800459e:	d9ef      	bls.n	8004580 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80045a0:	480d      	ldr	r0, [pc, #52]	; (80045d8 <prvInitialiseTaskLists+0x64>)
 80045a2:	f7fe fd07 	bl	8002fb4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80045a6:	480d      	ldr	r0, [pc, #52]	; (80045dc <prvInitialiseTaskLists+0x68>)
 80045a8:	f7fe fd04 	bl	8002fb4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80045ac:	480c      	ldr	r0, [pc, #48]	; (80045e0 <prvInitialiseTaskLists+0x6c>)
 80045ae:	f7fe fd01 	bl	8002fb4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80045b2:	480c      	ldr	r0, [pc, #48]	; (80045e4 <prvInitialiseTaskLists+0x70>)
 80045b4:	f7fe fcfe 	bl	8002fb4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80045b8:	480b      	ldr	r0, [pc, #44]	; (80045e8 <prvInitialiseTaskLists+0x74>)
 80045ba:	f7fe fcfb 	bl	8002fb4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80045be:	4b0b      	ldr	r3, [pc, #44]	; (80045ec <prvInitialiseTaskLists+0x78>)
 80045c0:	4a05      	ldr	r2, [pc, #20]	; (80045d8 <prvInitialiseTaskLists+0x64>)
 80045c2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80045c4:	4b0a      	ldr	r3, [pc, #40]	; (80045f0 <prvInitialiseTaskLists+0x7c>)
 80045c6:	4a05      	ldr	r2, [pc, #20]	; (80045dc <prvInitialiseTaskLists+0x68>)
 80045c8:	601a      	str	r2, [r3, #0]
}
 80045ca:	bf00      	nop
 80045cc:	3708      	adds	r7, #8
 80045ce:	46bd      	mov	sp, r7
 80045d0:	bd80      	pop	{r7, pc}
 80045d2:	bf00      	nop
 80045d4:	200009c8 	.word	0x200009c8
 80045d8:	20000e28 	.word	0x20000e28
 80045dc:	20000e3c 	.word	0x20000e3c
 80045e0:	20000e58 	.word	0x20000e58
 80045e4:	20000e6c 	.word	0x20000e6c
 80045e8:	20000e84 	.word	0x20000e84
 80045ec:	20000e50 	.word	0x20000e50
 80045f0:	20000e54 	.word	0x20000e54

080045f4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80045f4:	b580      	push	{r7, lr}
 80045f6:	b082      	sub	sp, #8
 80045f8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80045fa:	e019      	b.n	8004630 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80045fc:	f000 fe16 	bl	800522c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8004600:	4b10      	ldr	r3, [pc, #64]	; (8004644 <prvCheckTasksWaitingTermination+0x50>)
 8004602:	68db      	ldr	r3, [r3, #12]
 8004604:	68db      	ldr	r3, [r3, #12]
 8004606:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	3304      	adds	r3, #4
 800460c:	4618      	mov	r0, r3
 800460e:	f7fe fd57 	bl	80030c0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004612:	4b0d      	ldr	r3, [pc, #52]	; (8004648 <prvCheckTasksWaitingTermination+0x54>)
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	3b01      	subs	r3, #1
 8004618:	4a0b      	ldr	r2, [pc, #44]	; (8004648 <prvCheckTasksWaitingTermination+0x54>)
 800461a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800461c:	4b0b      	ldr	r3, [pc, #44]	; (800464c <prvCheckTasksWaitingTermination+0x58>)
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	3b01      	subs	r3, #1
 8004622:	4a0a      	ldr	r2, [pc, #40]	; (800464c <prvCheckTasksWaitingTermination+0x58>)
 8004624:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004626:	f000 fe31 	bl	800528c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800462a:	6878      	ldr	r0, [r7, #4]
 800462c:	f000 f810 	bl	8004650 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004630:	4b06      	ldr	r3, [pc, #24]	; (800464c <prvCheckTasksWaitingTermination+0x58>)
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	2b00      	cmp	r3, #0
 8004636:	d1e1      	bne.n	80045fc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004638:	bf00      	nop
 800463a:	bf00      	nop
 800463c:	3708      	adds	r7, #8
 800463e:	46bd      	mov	sp, r7
 8004640:	bd80      	pop	{r7, pc}
 8004642:	bf00      	nop
 8004644:	20000e6c 	.word	0x20000e6c
 8004648:	20000e98 	.word	0x20000e98
 800464c:	20000e80 	.word	0x20000e80

08004650 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004650:	b580      	push	{r7, lr}
 8004652:	b084      	sub	sp, #16
 8004654:	af00      	add	r7, sp, #0
 8004656:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	3354      	adds	r3, #84	; 0x54
 800465c:	4618      	mov	r0, r3
 800465e:	f001 fb27 	bl	8005cb0 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8004668:	2b00      	cmp	r3, #0
 800466a:	d108      	bne.n	800467e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004670:	4618      	mov	r0, r3
 8004672:	f000 ff9f 	bl	80055b4 <vPortFree>
				vPortFree( pxTCB );
 8004676:	6878      	ldr	r0, [r7, #4]
 8004678:	f000 ff9c 	bl	80055b4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800467c:	e018      	b.n	80046b0 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8004684:	2b01      	cmp	r3, #1
 8004686:	d103      	bne.n	8004690 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8004688:	6878      	ldr	r0, [r7, #4]
 800468a:	f000 ff93 	bl	80055b4 <vPortFree>
	}
 800468e:	e00f      	b.n	80046b0 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8004696:	2b02      	cmp	r3, #2
 8004698:	d00a      	beq.n	80046b0 <prvDeleteTCB+0x60>
	__asm volatile
 800469a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800469e:	f383 8811 	msr	BASEPRI, r3
 80046a2:	f3bf 8f6f 	isb	sy
 80046a6:	f3bf 8f4f 	dsb	sy
 80046aa:	60fb      	str	r3, [r7, #12]
}
 80046ac:	bf00      	nop
 80046ae:	e7fe      	b.n	80046ae <prvDeleteTCB+0x5e>
	}
 80046b0:	bf00      	nop
 80046b2:	3710      	adds	r7, #16
 80046b4:	46bd      	mov	sp, r7
 80046b6:	bd80      	pop	{r7, pc}

080046b8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80046b8:	b480      	push	{r7}
 80046ba:	b083      	sub	sp, #12
 80046bc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80046be:	4b0e      	ldr	r3, [pc, #56]	; (80046f8 <prvResetNextTaskUnblockTime+0x40>)
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d101      	bne.n	80046cc <prvResetNextTaskUnblockTime+0x14>
 80046c8:	2301      	movs	r3, #1
 80046ca:	e000      	b.n	80046ce <prvResetNextTaskUnblockTime+0x16>
 80046cc:	2300      	movs	r3, #0
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d004      	beq.n	80046dc <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80046d2:	4b0a      	ldr	r3, [pc, #40]	; (80046fc <prvResetNextTaskUnblockTime+0x44>)
 80046d4:	f04f 32ff 	mov.w	r2, #4294967295
 80046d8:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80046da:	e008      	b.n	80046ee <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80046dc:	4b06      	ldr	r3, [pc, #24]	; (80046f8 <prvResetNextTaskUnblockTime+0x40>)
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	68db      	ldr	r3, [r3, #12]
 80046e2:	68db      	ldr	r3, [r3, #12]
 80046e4:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	685b      	ldr	r3, [r3, #4]
 80046ea:	4a04      	ldr	r2, [pc, #16]	; (80046fc <prvResetNextTaskUnblockTime+0x44>)
 80046ec:	6013      	str	r3, [r2, #0]
}
 80046ee:	bf00      	nop
 80046f0:	370c      	adds	r7, #12
 80046f2:	46bd      	mov	sp, r7
 80046f4:	bc80      	pop	{r7}
 80046f6:	4770      	bx	lr
 80046f8:	20000e50 	.word	0x20000e50
 80046fc:	20000eb8 	.word	0x20000eb8

08004700 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004700:	b480      	push	{r7}
 8004702:	b083      	sub	sp, #12
 8004704:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8004706:	4b0b      	ldr	r3, [pc, #44]	; (8004734 <xTaskGetSchedulerState+0x34>)
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	2b00      	cmp	r3, #0
 800470c:	d102      	bne.n	8004714 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800470e:	2301      	movs	r3, #1
 8004710:	607b      	str	r3, [r7, #4]
 8004712:	e008      	b.n	8004726 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004714:	4b08      	ldr	r3, [pc, #32]	; (8004738 <xTaskGetSchedulerState+0x38>)
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	2b00      	cmp	r3, #0
 800471a:	d102      	bne.n	8004722 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800471c:	2302      	movs	r3, #2
 800471e:	607b      	str	r3, [r7, #4]
 8004720:	e001      	b.n	8004726 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8004722:	2300      	movs	r3, #0
 8004724:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8004726:	687b      	ldr	r3, [r7, #4]
	}
 8004728:	4618      	mov	r0, r3
 800472a:	370c      	adds	r7, #12
 800472c:	46bd      	mov	sp, r7
 800472e:	bc80      	pop	{r7}
 8004730:	4770      	bx	lr
 8004732:	bf00      	nop
 8004734:	20000ea4 	.word	0x20000ea4
 8004738:	20000ec0 	.word	0x20000ec0

0800473c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800473c:	b580      	push	{r7, lr}
 800473e:	b086      	sub	sp, #24
 8004740:	af00      	add	r7, sp, #0
 8004742:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8004748:	2300      	movs	r3, #0
 800474a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	2b00      	cmp	r3, #0
 8004750:	d056      	beq.n	8004800 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8004752:	4b2e      	ldr	r3, [pc, #184]	; (800480c <xTaskPriorityDisinherit+0xd0>)
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	693a      	ldr	r2, [r7, #16]
 8004758:	429a      	cmp	r2, r3
 800475a:	d00a      	beq.n	8004772 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800475c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004760:	f383 8811 	msr	BASEPRI, r3
 8004764:	f3bf 8f6f 	isb	sy
 8004768:	f3bf 8f4f 	dsb	sy
 800476c:	60fb      	str	r3, [r7, #12]
}
 800476e:	bf00      	nop
 8004770:	e7fe      	b.n	8004770 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8004772:	693b      	ldr	r3, [r7, #16]
 8004774:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004776:	2b00      	cmp	r3, #0
 8004778:	d10a      	bne.n	8004790 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800477a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800477e:	f383 8811 	msr	BASEPRI, r3
 8004782:	f3bf 8f6f 	isb	sy
 8004786:	f3bf 8f4f 	dsb	sy
 800478a:	60bb      	str	r3, [r7, #8]
}
 800478c:	bf00      	nop
 800478e:	e7fe      	b.n	800478e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8004790:	693b      	ldr	r3, [r7, #16]
 8004792:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004794:	1e5a      	subs	r2, r3, #1
 8004796:	693b      	ldr	r3, [r7, #16]
 8004798:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800479a:	693b      	ldr	r3, [r7, #16]
 800479c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800479e:	693b      	ldr	r3, [r7, #16]
 80047a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80047a2:	429a      	cmp	r2, r3
 80047a4:	d02c      	beq.n	8004800 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80047a6:	693b      	ldr	r3, [r7, #16]
 80047a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d128      	bne.n	8004800 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80047ae:	693b      	ldr	r3, [r7, #16]
 80047b0:	3304      	adds	r3, #4
 80047b2:	4618      	mov	r0, r3
 80047b4:	f7fe fc84 	bl	80030c0 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80047b8:	693b      	ldr	r3, [r7, #16]
 80047ba:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80047bc:	693b      	ldr	r3, [r7, #16]
 80047be:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80047c0:	693b      	ldr	r3, [r7, #16]
 80047c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047c4:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80047c8:	693b      	ldr	r3, [r7, #16]
 80047ca:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80047cc:	693b      	ldr	r3, [r7, #16]
 80047ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80047d0:	4b0f      	ldr	r3, [pc, #60]	; (8004810 <xTaskPriorityDisinherit+0xd4>)
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	429a      	cmp	r2, r3
 80047d6:	d903      	bls.n	80047e0 <xTaskPriorityDisinherit+0xa4>
 80047d8:	693b      	ldr	r3, [r7, #16]
 80047da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047dc:	4a0c      	ldr	r2, [pc, #48]	; (8004810 <xTaskPriorityDisinherit+0xd4>)
 80047de:	6013      	str	r3, [r2, #0]
 80047e0:	693b      	ldr	r3, [r7, #16]
 80047e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80047e4:	4613      	mov	r3, r2
 80047e6:	009b      	lsls	r3, r3, #2
 80047e8:	4413      	add	r3, r2
 80047ea:	009b      	lsls	r3, r3, #2
 80047ec:	4a09      	ldr	r2, [pc, #36]	; (8004814 <xTaskPriorityDisinherit+0xd8>)
 80047ee:	441a      	add	r2, r3
 80047f0:	693b      	ldr	r3, [r7, #16]
 80047f2:	3304      	adds	r3, #4
 80047f4:	4619      	mov	r1, r3
 80047f6:	4610      	mov	r0, r2
 80047f8:	f7fe fc07 	bl	800300a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80047fc:	2301      	movs	r3, #1
 80047fe:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004800:	697b      	ldr	r3, [r7, #20]
	}
 8004802:	4618      	mov	r0, r3
 8004804:	3718      	adds	r7, #24
 8004806:	46bd      	mov	sp, r7
 8004808:	bd80      	pop	{r7, pc}
 800480a:	bf00      	nop
 800480c:	200009c4 	.word	0x200009c4
 8004810:	20000ea0 	.word	0x20000ea0
 8004814:	200009c8 	.word	0x200009c8

08004818 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004818:	b580      	push	{r7, lr}
 800481a:	b084      	sub	sp, #16
 800481c:	af00      	add	r7, sp, #0
 800481e:	6078      	str	r0, [r7, #4]
 8004820:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004822:	4b21      	ldr	r3, [pc, #132]	; (80048a8 <prvAddCurrentTaskToDelayedList+0x90>)
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004828:	4b20      	ldr	r3, [pc, #128]	; (80048ac <prvAddCurrentTaskToDelayedList+0x94>)
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	3304      	adds	r3, #4
 800482e:	4618      	mov	r0, r3
 8004830:	f7fe fc46 	bl	80030c0 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	f1b3 3fff 	cmp.w	r3, #4294967295
 800483a:	d10a      	bne.n	8004852 <prvAddCurrentTaskToDelayedList+0x3a>
 800483c:	683b      	ldr	r3, [r7, #0]
 800483e:	2b00      	cmp	r3, #0
 8004840:	d007      	beq.n	8004852 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004842:	4b1a      	ldr	r3, [pc, #104]	; (80048ac <prvAddCurrentTaskToDelayedList+0x94>)
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	3304      	adds	r3, #4
 8004848:	4619      	mov	r1, r3
 800484a:	4819      	ldr	r0, [pc, #100]	; (80048b0 <prvAddCurrentTaskToDelayedList+0x98>)
 800484c:	f7fe fbdd 	bl	800300a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004850:	e026      	b.n	80048a0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004852:	68fa      	ldr	r2, [r7, #12]
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	4413      	add	r3, r2
 8004858:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800485a:	4b14      	ldr	r3, [pc, #80]	; (80048ac <prvAddCurrentTaskToDelayedList+0x94>)
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	68ba      	ldr	r2, [r7, #8]
 8004860:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004862:	68ba      	ldr	r2, [r7, #8]
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	429a      	cmp	r2, r3
 8004868:	d209      	bcs.n	800487e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800486a:	4b12      	ldr	r3, [pc, #72]	; (80048b4 <prvAddCurrentTaskToDelayedList+0x9c>)
 800486c:	681a      	ldr	r2, [r3, #0]
 800486e:	4b0f      	ldr	r3, [pc, #60]	; (80048ac <prvAddCurrentTaskToDelayedList+0x94>)
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	3304      	adds	r3, #4
 8004874:	4619      	mov	r1, r3
 8004876:	4610      	mov	r0, r2
 8004878:	f7fe fbea 	bl	8003050 <vListInsert>
}
 800487c:	e010      	b.n	80048a0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800487e:	4b0e      	ldr	r3, [pc, #56]	; (80048b8 <prvAddCurrentTaskToDelayedList+0xa0>)
 8004880:	681a      	ldr	r2, [r3, #0]
 8004882:	4b0a      	ldr	r3, [pc, #40]	; (80048ac <prvAddCurrentTaskToDelayedList+0x94>)
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	3304      	adds	r3, #4
 8004888:	4619      	mov	r1, r3
 800488a:	4610      	mov	r0, r2
 800488c:	f7fe fbe0 	bl	8003050 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004890:	4b0a      	ldr	r3, [pc, #40]	; (80048bc <prvAddCurrentTaskToDelayedList+0xa4>)
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	68ba      	ldr	r2, [r7, #8]
 8004896:	429a      	cmp	r2, r3
 8004898:	d202      	bcs.n	80048a0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800489a:	4a08      	ldr	r2, [pc, #32]	; (80048bc <prvAddCurrentTaskToDelayedList+0xa4>)
 800489c:	68bb      	ldr	r3, [r7, #8]
 800489e:	6013      	str	r3, [r2, #0]
}
 80048a0:	bf00      	nop
 80048a2:	3710      	adds	r7, #16
 80048a4:	46bd      	mov	sp, r7
 80048a6:	bd80      	pop	{r7, pc}
 80048a8:	20000e9c 	.word	0x20000e9c
 80048ac:	200009c4 	.word	0x200009c4
 80048b0:	20000e84 	.word	0x20000e84
 80048b4:	20000e54 	.word	0x20000e54
 80048b8:	20000e50 	.word	0x20000e50
 80048bc:	20000eb8 	.word	0x20000eb8

080048c0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80048c0:	b580      	push	{r7, lr}
 80048c2:	b08a      	sub	sp, #40	; 0x28
 80048c4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80048c6:	2300      	movs	r3, #0
 80048c8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80048ca:	f000 fb5b 	bl	8004f84 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80048ce:	4b1c      	ldr	r3, [pc, #112]	; (8004940 <xTimerCreateTimerTask+0x80>)
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d021      	beq.n	800491a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80048d6:	2300      	movs	r3, #0
 80048d8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80048da:	2300      	movs	r3, #0
 80048dc:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80048de:	1d3a      	adds	r2, r7, #4
 80048e0:	f107 0108 	add.w	r1, r7, #8
 80048e4:	f107 030c 	add.w	r3, r7, #12
 80048e8:	4618      	mov	r0, r3
 80048ea:	f7fe fb49 	bl	8002f80 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80048ee:	6879      	ldr	r1, [r7, #4]
 80048f0:	68bb      	ldr	r3, [r7, #8]
 80048f2:	68fa      	ldr	r2, [r7, #12]
 80048f4:	9202      	str	r2, [sp, #8]
 80048f6:	9301      	str	r3, [sp, #4]
 80048f8:	2318      	movs	r3, #24
 80048fa:	9300      	str	r3, [sp, #0]
 80048fc:	2300      	movs	r3, #0
 80048fe:	460a      	mov	r2, r1
 8004900:	4910      	ldr	r1, [pc, #64]	; (8004944 <xTimerCreateTimerTask+0x84>)
 8004902:	4811      	ldr	r0, [pc, #68]	; (8004948 <xTimerCreateTimerTask+0x88>)
 8004904:	f7ff f8ea 	bl	8003adc <xTaskCreateStatic>
 8004908:	4603      	mov	r3, r0
 800490a:	4a10      	ldr	r2, [pc, #64]	; (800494c <xTimerCreateTimerTask+0x8c>)
 800490c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800490e:	4b0f      	ldr	r3, [pc, #60]	; (800494c <xTimerCreateTimerTask+0x8c>)
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	2b00      	cmp	r3, #0
 8004914:	d001      	beq.n	800491a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8004916:	2301      	movs	r3, #1
 8004918:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800491a:	697b      	ldr	r3, [r7, #20]
 800491c:	2b00      	cmp	r3, #0
 800491e:	d10a      	bne.n	8004936 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8004920:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004924:	f383 8811 	msr	BASEPRI, r3
 8004928:	f3bf 8f6f 	isb	sy
 800492c:	f3bf 8f4f 	dsb	sy
 8004930:	613b      	str	r3, [r7, #16]
}
 8004932:	bf00      	nop
 8004934:	e7fe      	b.n	8004934 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8004936:	697b      	ldr	r3, [r7, #20]
}
 8004938:	4618      	mov	r0, r3
 800493a:	3718      	adds	r7, #24
 800493c:	46bd      	mov	sp, r7
 800493e:	bd80      	pop	{r7, pc}
 8004940:	20000ef4 	.word	0x20000ef4
 8004944:	08006c9c 	.word	0x08006c9c
 8004948:	08004b8d 	.word	0x08004b8d
 800494c:	20000ef8 	.word	0x20000ef8

08004950 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 8004950:	b580      	push	{r7, lr}
 8004952:	b088      	sub	sp, #32
 8004954:	af02      	add	r7, sp, #8
 8004956:	60f8      	str	r0, [r7, #12]
 8004958:	60b9      	str	r1, [r7, #8]
 800495a:	607a      	str	r2, [r7, #4]
 800495c:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) );
 800495e:	2030      	movs	r0, #48	; 0x30
 8004960:	f000 fd64 	bl	800542c <pvPortMalloc>
 8004964:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 8004966:	697b      	ldr	r3, [r7, #20]
 8004968:	2b00      	cmp	r3, #0
 800496a:	d00d      	beq.n	8004988 <xTimerCreate+0x38>
		{
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 800496c:	697b      	ldr	r3, [r7, #20]
 800496e:	9301      	str	r3, [sp, #4]
 8004970:	6a3b      	ldr	r3, [r7, #32]
 8004972:	9300      	str	r3, [sp, #0]
 8004974:	683b      	ldr	r3, [r7, #0]
 8004976:	687a      	ldr	r2, [r7, #4]
 8004978:	68b9      	ldr	r1, [r7, #8]
 800497a:	68f8      	ldr	r0, [r7, #12]
 800497c:	f000 f846 	bl	8004a0c <prvInitialiseNewTimer>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Timers can be created statically or dynamically, so note this
				timer was created dynamically in case the timer is later
				deleted. */
				pxNewTimer->ucStaticallyAllocated = pdFALSE;
 8004980:	697b      	ldr	r3, [r7, #20]
 8004982:	2200      	movs	r2, #0
 8004984:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */
		}

		return pxNewTimer;
 8004988:	697b      	ldr	r3, [r7, #20]
	}
 800498a:	4618      	mov	r0, r3
 800498c:	3718      	adds	r7, #24
 800498e:	46bd      	mov	sp, r7
 8004990:	bd80      	pop	{r7, pc}

08004992 <xTimerCreateStatic>:
										const TickType_t xTimerPeriodInTicks,
										const UBaseType_t uxAutoReload,
										void * const pvTimerID,
										TimerCallbackFunction_t pxCallbackFunction,
										StaticTimer_t *pxTimerBuffer )
	{
 8004992:	b580      	push	{r7, lr}
 8004994:	b08a      	sub	sp, #40	; 0x28
 8004996:	af02      	add	r7, sp, #8
 8004998:	60f8      	str	r0, [r7, #12]
 800499a:	60b9      	str	r1, [r7, #8]
 800499c:	607a      	str	r2, [r7, #4]
 800499e:	603b      	str	r3, [r7, #0]
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTimer_t equals the size of the real timer
			structure. */
			volatile size_t xSize = sizeof( StaticTimer_t );
 80049a0:	2330      	movs	r3, #48	; 0x30
 80049a2:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Timer_t ) );
 80049a4:	693b      	ldr	r3, [r7, #16]
 80049a6:	2b30      	cmp	r3, #48	; 0x30
 80049a8:	d00a      	beq.n	80049c0 <xTimerCreateStatic+0x2e>
	__asm volatile
 80049aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049ae:	f383 8811 	msr	BASEPRI, r3
 80049b2:	f3bf 8f6f 	isb	sy
 80049b6:	f3bf 8f4f 	dsb	sy
 80049ba:	61bb      	str	r3, [r7, #24]
}
 80049bc:	bf00      	nop
 80049be:	e7fe      	b.n	80049be <xTimerCreateStatic+0x2c>
		}
		#endif /* configASSERT_DEFINED */

		/* A pointer to a StaticTimer_t structure MUST be provided, use it. */
		configASSERT( pxTimerBuffer );
 80049c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d10a      	bne.n	80049dc <xTimerCreateStatic+0x4a>
	__asm volatile
 80049c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049ca:	f383 8811 	msr	BASEPRI, r3
 80049ce:	f3bf 8f6f 	isb	sy
 80049d2:	f3bf 8f4f 	dsb	sy
 80049d6:	617b      	str	r3, [r7, #20]
}
 80049d8:	bf00      	nop
 80049da:	e7fe      	b.n	80049da <xTimerCreateStatic+0x48>
		pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80049dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049de:	61fb      	str	r3, [r7, #28]

		if( pxNewTimer != NULL )
 80049e0:	69fb      	ldr	r3, [r7, #28]
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d00d      	beq.n	8004a02 <xTimerCreateStatic+0x70>
		{
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 80049e6:	69fb      	ldr	r3, [r7, #28]
 80049e8:	9301      	str	r3, [sp, #4]
 80049ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049ec:	9300      	str	r3, [sp, #0]
 80049ee:	683b      	ldr	r3, [r7, #0]
 80049f0:	687a      	ldr	r2, [r7, #4]
 80049f2:	68b9      	ldr	r1, [r7, #8]
 80049f4:	68f8      	ldr	r0, [r7, #12]
 80049f6:	f000 f809 	bl	8004a0c <prvInitialiseNewTimer>

			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Timers can be created statically or dynamically so note this
				timer was created statically in case it is later deleted. */
				pxNewTimer->ucStaticallyAllocated = pdTRUE;
 80049fa:	69fb      	ldr	r3, [r7, #28]
 80049fc:	2201      	movs	r2, #1
 80049fe:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
		}

		return pxNewTimer;
 8004a02:	69fb      	ldr	r3, [r7, #28]
	}
 8004a04:	4618      	mov	r0, r3
 8004a06:	3720      	adds	r7, #32
 8004a08:	46bd      	mov	sp, r7
 8004a0a:	bd80      	pop	{r7, pc}

08004a0c <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 8004a0c:	b580      	push	{r7, lr}
 8004a0e:	b086      	sub	sp, #24
 8004a10:	af00      	add	r7, sp, #0
 8004a12:	60f8      	str	r0, [r7, #12]
 8004a14:	60b9      	str	r1, [r7, #8]
 8004a16:	607a      	str	r2, [r7, #4]
 8004a18:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 8004a1a:	68bb      	ldr	r3, [r7, #8]
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d10a      	bne.n	8004a36 <prvInitialiseNewTimer+0x2a>
	__asm volatile
 8004a20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a24:	f383 8811 	msr	BASEPRI, r3
 8004a28:	f3bf 8f6f 	isb	sy
 8004a2c:	f3bf 8f4f 	dsb	sy
 8004a30:	617b      	str	r3, [r7, #20]
}
 8004a32:	bf00      	nop
 8004a34:	e7fe      	b.n	8004a34 <prvInitialiseNewTimer+0x28>

	if( pxNewTimer != NULL )
 8004a36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d015      	beq.n	8004a68 <prvInitialiseNewTimer+0x5c>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 8004a3c:	f000 faa2 	bl	8004f84 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 8004a40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a42:	68fa      	ldr	r2, [r7, #12]
 8004a44:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 8004a46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a48:	68ba      	ldr	r2, [r7, #8]
 8004a4a:	619a      	str	r2, [r3, #24]
		pxNewTimer->uxAutoReload = uxAutoReload;
 8004a4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a4e:	687a      	ldr	r2, [r7, #4]
 8004a50:	61da      	str	r2, [r3, #28]
		pxNewTimer->pvTimerID = pvTimerID;
 8004a52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a54:	683a      	ldr	r2, [r7, #0]
 8004a56:	621a      	str	r2, [r3, #32]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 8004a58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a5a:	6a3a      	ldr	r2, [r7, #32]
 8004a5c:	625a      	str	r2, [r3, #36]	; 0x24
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 8004a5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a60:	3304      	adds	r3, #4
 8004a62:	4618      	mov	r0, r3
 8004a64:	f7fe fac5 	bl	8002ff2 <vListInitialiseItem>
		traceTIMER_CREATE( pxNewTimer );
	}
}
 8004a68:	bf00      	nop
 8004a6a:	3718      	adds	r7, #24
 8004a6c:	46bd      	mov	sp, r7
 8004a6e:	bd80      	pop	{r7, pc}

08004a70 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8004a70:	b580      	push	{r7, lr}
 8004a72:	b08a      	sub	sp, #40	; 0x28
 8004a74:	af00      	add	r7, sp, #0
 8004a76:	60f8      	str	r0, [r7, #12]
 8004a78:	60b9      	str	r1, [r7, #8]
 8004a7a:	607a      	str	r2, [r7, #4]
 8004a7c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8004a7e:	2300      	movs	r3, #0
 8004a80:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d10a      	bne.n	8004a9e <xTimerGenericCommand+0x2e>
	__asm volatile
 8004a88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a8c:	f383 8811 	msr	BASEPRI, r3
 8004a90:	f3bf 8f6f 	isb	sy
 8004a94:	f3bf 8f4f 	dsb	sy
 8004a98:	623b      	str	r3, [r7, #32]
}
 8004a9a:	bf00      	nop
 8004a9c:	e7fe      	b.n	8004a9c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8004a9e:	4b1a      	ldr	r3, [pc, #104]	; (8004b08 <xTimerGenericCommand+0x98>)
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d02a      	beq.n	8004afc <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8004aa6:	68bb      	ldr	r3, [r7, #8]
 8004aa8:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8004ab2:	68bb      	ldr	r3, [r7, #8]
 8004ab4:	2b05      	cmp	r3, #5
 8004ab6:	dc18      	bgt.n	8004aea <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8004ab8:	f7ff fe22 	bl	8004700 <xTaskGetSchedulerState>
 8004abc:	4603      	mov	r3, r0
 8004abe:	2b02      	cmp	r3, #2
 8004ac0:	d109      	bne.n	8004ad6 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8004ac2:	4b11      	ldr	r3, [pc, #68]	; (8004b08 <xTimerGenericCommand+0x98>)
 8004ac4:	6818      	ldr	r0, [r3, #0]
 8004ac6:	f107 0110 	add.w	r1, r7, #16
 8004aca:	2300      	movs	r3, #0
 8004acc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004ace:	f7fe fc23 	bl	8003318 <xQueueGenericSend>
 8004ad2:	6278      	str	r0, [r7, #36]	; 0x24
 8004ad4:	e012      	b.n	8004afc <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8004ad6:	4b0c      	ldr	r3, [pc, #48]	; (8004b08 <xTimerGenericCommand+0x98>)
 8004ad8:	6818      	ldr	r0, [r3, #0]
 8004ada:	f107 0110 	add.w	r1, r7, #16
 8004ade:	2300      	movs	r3, #0
 8004ae0:	2200      	movs	r2, #0
 8004ae2:	f7fe fc19 	bl	8003318 <xQueueGenericSend>
 8004ae6:	6278      	str	r0, [r7, #36]	; 0x24
 8004ae8:	e008      	b.n	8004afc <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8004aea:	4b07      	ldr	r3, [pc, #28]	; (8004b08 <xTimerGenericCommand+0x98>)
 8004aec:	6818      	ldr	r0, [r3, #0]
 8004aee:	f107 0110 	add.w	r1, r7, #16
 8004af2:	2300      	movs	r3, #0
 8004af4:	683a      	ldr	r2, [r7, #0]
 8004af6:	f7fe fd0d 	bl	8003514 <xQueueGenericSendFromISR>
 8004afa:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8004afc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004afe:	4618      	mov	r0, r3
 8004b00:	3728      	adds	r7, #40	; 0x28
 8004b02:	46bd      	mov	sp, r7
 8004b04:	bd80      	pop	{r7, pc}
 8004b06:	bf00      	nop
 8004b08:	20000ef4 	.word	0x20000ef4

08004b0c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8004b0c:	b580      	push	{r7, lr}
 8004b0e:	b088      	sub	sp, #32
 8004b10:	af02      	add	r7, sp, #8
 8004b12:	6078      	str	r0, [r7, #4]
 8004b14:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004b16:	4b1c      	ldr	r3, [pc, #112]	; (8004b88 <prvProcessExpiredTimer+0x7c>)
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	68db      	ldr	r3, [r3, #12]
 8004b1c:	68db      	ldr	r3, [r3, #12]
 8004b1e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004b20:	697b      	ldr	r3, [r7, #20]
 8004b22:	3304      	adds	r3, #4
 8004b24:	4618      	mov	r0, r3
 8004b26:	f7fe facb 	bl	80030c0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8004b2a:	697b      	ldr	r3, [r7, #20]
 8004b2c:	69db      	ldr	r3, [r3, #28]
 8004b2e:	2b01      	cmp	r3, #1
 8004b30:	d122      	bne.n	8004b78 <prvProcessExpiredTimer+0x6c>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8004b32:	697b      	ldr	r3, [r7, #20]
 8004b34:	699a      	ldr	r2, [r3, #24]
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	18d1      	adds	r1, r2, r3
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	683a      	ldr	r2, [r7, #0]
 8004b3e:	6978      	ldr	r0, [r7, #20]
 8004b40:	f000 f8c8 	bl	8004cd4 <prvInsertTimerInActiveList>
 8004b44:	4603      	mov	r3, r0
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d016      	beq.n	8004b78 <prvProcessExpiredTimer+0x6c>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004b4a:	2300      	movs	r3, #0
 8004b4c:	9300      	str	r3, [sp, #0]
 8004b4e:	2300      	movs	r3, #0
 8004b50:	687a      	ldr	r2, [r7, #4]
 8004b52:	2100      	movs	r1, #0
 8004b54:	6978      	ldr	r0, [r7, #20]
 8004b56:	f7ff ff8b 	bl	8004a70 <xTimerGenericCommand>
 8004b5a:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8004b5c:	693b      	ldr	r3, [r7, #16]
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d10a      	bne.n	8004b78 <prvProcessExpiredTimer+0x6c>
	__asm volatile
 8004b62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b66:	f383 8811 	msr	BASEPRI, r3
 8004b6a:	f3bf 8f6f 	isb	sy
 8004b6e:	f3bf 8f4f 	dsb	sy
 8004b72:	60fb      	str	r3, [r7, #12]
}
 8004b74:	bf00      	nop
 8004b76:	e7fe      	b.n	8004b76 <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004b78:	697b      	ldr	r3, [r7, #20]
 8004b7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b7c:	6978      	ldr	r0, [r7, #20]
 8004b7e:	4798      	blx	r3
}
 8004b80:	bf00      	nop
 8004b82:	3718      	adds	r7, #24
 8004b84:	46bd      	mov	sp, r7
 8004b86:	bd80      	pop	{r7, pc}
 8004b88:	20000eec 	.word	0x20000eec

08004b8c <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8004b8c:	b580      	push	{r7, lr}
 8004b8e:	b084      	sub	sp, #16
 8004b90:	af00      	add	r7, sp, #0
 8004b92:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004b94:	f107 0308 	add.w	r3, r7, #8
 8004b98:	4618      	mov	r0, r3
 8004b9a:	f000 f857 	bl	8004c4c <prvGetNextExpireTime>
 8004b9e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8004ba0:	68bb      	ldr	r3, [r7, #8]
 8004ba2:	4619      	mov	r1, r3
 8004ba4:	68f8      	ldr	r0, [r7, #12]
 8004ba6:	f000 f803 	bl	8004bb0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8004baa:	f000 f8d5 	bl	8004d58 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004bae:	e7f1      	b.n	8004b94 <prvTimerTask+0x8>

08004bb0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8004bb0:	b580      	push	{r7, lr}
 8004bb2:	b084      	sub	sp, #16
 8004bb4:	af00      	add	r7, sp, #0
 8004bb6:	6078      	str	r0, [r7, #4]
 8004bb8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8004bba:	f7ff f9af 	bl	8003f1c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004bbe:	f107 0308 	add.w	r3, r7, #8
 8004bc2:	4618      	mov	r0, r3
 8004bc4:	f000 f866 	bl	8004c94 <prvSampleTimeNow>
 8004bc8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8004bca:	68bb      	ldr	r3, [r7, #8]
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d130      	bne.n	8004c32 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8004bd0:	683b      	ldr	r3, [r7, #0]
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d10a      	bne.n	8004bec <prvProcessTimerOrBlockTask+0x3c>
 8004bd6:	687a      	ldr	r2, [r7, #4]
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	429a      	cmp	r2, r3
 8004bdc:	d806      	bhi.n	8004bec <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8004bde:	f7ff f9ab 	bl	8003f38 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8004be2:	68f9      	ldr	r1, [r7, #12]
 8004be4:	6878      	ldr	r0, [r7, #4]
 8004be6:	f7ff ff91 	bl	8004b0c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8004bea:	e024      	b.n	8004c36 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8004bec:	683b      	ldr	r3, [r7, #0]
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d008      	beq.n	8004c04 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8004bf2:	4b13      	ldr	r3, [pc, #76]	; (8004c40 <prvProcessTimerOrBlockTask+0x90>)
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	bf0c      	ite	eq
 8004bfc:	2301      	moveq	r3, #1
 8004bfe:	2300      	movne	r3, #0
 8004c00:	b2db      	uxtb	r3, r3
 8004c02:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8004c04:	4b0f      	ldr	r3, [pc, #60]	; (8004c44 <prvProcessTimerOrBlockTask+0x94>)
 8004c06:	6818      	ldr	r0, [r3, #0]
 8004c08:	687a      	ldr	r2, [r7, #4]
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	1ad3      	subs	r3, r2, r3
 8004c0e:	683a      	ldr	r2, [r7, #0]
 8004c10:	4619      	mov	r1, r3
 8004c12:	f7fe ff2f 	bl	8003a74 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8004c16:	f7ff f98f 	bl	8003f38 <xTaskResumeAll>
 8004c1a:	4603      	mov	r3, r0
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d10a      	bne.n	8004c36 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8004c20:	4b09      	ldr	r3, [pc, #36]	; (8004c48 <prvProcessTimerOrBlockTask+0x98>)
 8004c22:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004c26:	601a      	str	r2, [r3, #0]
 8004c28:	f3bf 8f4f 	dsb	sy
 8004c2c:	f3bf 8f6f 	isb	sy
}
 8004c30:	e001      	b.n	8004c36 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8004c32:	f7ff f981 	bl	8003f38 <xTaskResumeAll>
}
 8004c36:	bf00      	nop
 8004c38:	3710      	adds	r7, #16
 8004c3a:	46bd      	mov	sp, r7
 8004c3c:	bd80      	pop	{r7, pc}
 8004c3e:	bf00      	nop
 8004c40:	20000ef0 	.word	0x20000ef0
 8004c44:	20000ef4 	.word	0x20000ef4
 8004c48:	e000ed04 	.word	0xe000ed04

08004c4c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8004c4c:	b480      	push	{r7}
 8004c4e:	b085      	sub	sp, #20
 8004c50:	af00      	add	r7, sp, #0
 8004c52:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8004c54:	4b0e      	ldr	r3, [pc, #56]	; (8004c90 <prvGetNextExpireTime+0x44>)
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	bf0c      	ite	eq
 8004c5e:	2301      	moveq	r3, #1
 8004c60:	2300      	movne	r3, #0
 8004c62:	b2db      	uxtb	r3, r3
 8004c64:	461a      	mov	r2, r3
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d105      	bne.n	8004c7e <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004c72:	4b07      	ldr	r3, [pc, #28]	; (8004c90 <prvGetNextExpireTime+0x44>)
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	68db      	ldr	r3, [r3, #12]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	60fb      	str	r3, [r7, #12]
 8004c7c:	e001      	b.n	8004c82 <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8004c7e:	2300      	movs	r3, #0
 8004c80:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8004c82:	68fb      	ldr	r3, [r7, #12]
}
 8004c84:	4618      	mov	r0, r3
 8004c86:	3714      	adds	r7, #20
 8004c88:	46bd      	mov	sp, r7
 8004c8a:	bc80      	pop	{r7}
 8004c8c:	4770      	bx	lr
 8004c8e:	bf00      	nop
 8004c90:	20000eec 	.word	0x20000eec

08004c94 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8004c94:	b580      	push	{r7, lr}
 8004c96:	b084      	sub	sp, #16
 8004c98:	af00      	add	r7, sp, #0
 8004c9a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8004c9c:	f7ff f9ea 	bl	8004074 <xTaskGetTickCount>
 8004ca0:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8004ca2:	4b0b      	ldr	r3, [pc, #44]	; (8004cd0 <prvSampleTimeNow+0x3c>)
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	68fa      	ldr	r2, [r7, #12]
 8004ca8:	429a      	cmp	r2, r3
 8004caa:	d205      	bcs.n	8004cb8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8004cac:	f000 f908 	bl	8004ec0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	2201      	movs	r2, #1
 8004cb4:	601a      	str	r2, [r3, #0]
 8004cb6:	e002      	b.n	8004cbe <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	2200      	movs	r2, #0
 8004cbc:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8004cbe:	4a04      	ldr	r2, [pc, #16]	; (8004cd0 <prvSampleTimeNow+0x3c>)
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8004cc4:	68fb      	ldr	r3, [r7, #12]
}
 8004cc6:	4618      	mov	r0, r3
 8004cc8:	3710      	adds	r7, #16
 8004cca:	46bd      	mov	sp, r7
 8004ccc:	bd80      	pop	{r7, pc}
 8004cce:	bf00      	nop
 8004cd0:	20000efc 	.word	0x20000efc

08004cd4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8004cd4:	b580      	push	{r7, lr}
 8004cd6:	b086      	sub	sp, #24
 8004cd8:	af00      	add	r7, sp, #0
 8004cda:	60f8      	str	r0, [r7, #12]
 8004cdc:	60b9      	str	r1, [r7, #8]
 8004cde:	607a      	str	r2, [r7, #4]
 8004ce0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8004ce2:	2300      	movs	r3, #0
 8004ce4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	68ba      	ldr	r2, [r7, #8]
 8004cea:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	68fa      	ldr	r2, [r7, #12]
 8004cf0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8004cf2:	68ba      	ldr	r2, [r7, #8]
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	429a      	cmp	r2, r3
 8004cf8:	d812      	bhi.n	8004d20 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004cfa:	687a      	ldr	r2, [r7, #4]
 8004cfc:	683b      	ldr	r3, [r7, #0]
 8004cfe:	1ad2      	subs	r2, r2, r3
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	699b      	ldr	r3, [r3, #24]
 8004d04:	429a      	cmp	r2, r3
 8004d06:	d302      	bcc.n	8004d0e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8004d08:	2301      	movs	r3, #1
 8004d0a:	617b      	str	r3, [r7, #20]
 8004d0c:	e01b      	b.n	8004d46 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8004d0e:	4b10      	ldr	r3, [pc, #64]	; (8004d50 <prvInsertTimerInActiveList+0x7c>)
 8004d10:	681a      	ldr	r2, [r3, #0]
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	3304      	adds	r3, #4
 8004d16:	4619      	mov	r1, r3
 8004d18:	4610      	mov	r0, r2
 8004d1a:	f7fe f999 	bl	8003050 <vListInsert>
 8004d1e:	e012      	b.n	8004d46 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8004d20:	687a      	ldr	r2, [r7, #4]
 8004d22:	683b      	ldr	r3, [r7, #0]
 8004d24:	429a      	cmp	r2, r3
 8004d26:	d206      	bcs.n	8004d36 <prvInsertTimerInActiveList+0x62>
 8004d28:	68ba      	ldr	r2, [r7, #8]
 8004d2a:	683b      	ldr	r3, [r7, #0]
 8004d2c:	429a      	cmp	r2, r3
 8004d2e:	d302      	bcc.n	8004d36 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8004d30:	2301      	movs	r3, #1
 8004d32:	617b      	str	r3, [r7, #20]
 8004d34:	e007      	b.n	8004d46 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004d36:	4b07      	ldr	r3, [pc, #28]	; (8004d54 <prvInsertTimerInActiveList+0x80>)
 8004d38:	681a      	ldr	r2, [r3, #0]
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	3304      	adds	r3, #4
 8004d3e:	4619      	mov	r1, r3
 8004d40:	4610      	mov	r0, r2
 8004d42:	f7fe f985 	bl	8003050 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8004d46:	697b      	ldr	r3, [r7, #20]
}
 8004d48:	4618      	mov	r0, r3
 8004d4a:	3718      	adds	r7, #24
 8004d4c:	46bd      	mov	sp, r7
 8004d4e:	bd80      	pop	{r7, pc}
 8004d50:	20000ef0 	.word	0x20000ef0
 8004d54:	20000eec 	.word	0x20000eec

08004d58 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8004d58:	b580      	push	{r7, lr}
 8004d5a:	b08e      	sub	sp, #56	; 0x38
 8004d5c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004d5e:	e09d      	b.n	8004e9c <prvProcessReceivedCommands+0x144>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	da18      	bge.n	8004d98 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8004d66:	1d3b      	adds	r3, r7, #4
 8004d68:	3304      	adds	r3, #4
 8004d6a:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8004d6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d10a      	bne.n	8004d88 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8004d72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d76:	f383 8811 	msr	BASEPRI, r3
 8004d7a:	f3bf 8f6f 	isb	sy
 8004d7e:	f3bf 8f4f 	dsb	sy
 8004d82:	61fb      	str	r3, [r7, #28]
}
 8004d84:	bf00      	nop
 8004d86:	e7fe      	b.n	8004d86 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8004d88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004d8e:	6850      	ldr	r0, [r2, #4]
 8004d90:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004d92:	6892      	ldr	r2, [r2, #8]
 8004d94:	4611      	mov	r1, r2
 8004d96:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	db7d      	blt.n	8004e9a <prvProcessReceivedCommands+0x142>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8004da2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004da4:	695b      	ldr	r3, [r3, #20]
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d004      	beq.n	8004db4 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004daa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dac:	3304      	adds	r3, #4
 8004dae:	4618      	mov	r0, r3
 8004db0:	f7fe f986 	bl	80030c0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004db4:	463b      	mov	r3, r7
 8004db6:	4618      	mov	r0, r3
 8004db8:	f7ff ff6c 	bl	8004c94 <prvSampleTimeNow>
 8004dbc:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	2b09      	cmp	r3, #9
 8004dc2:	d86b      	bhi.n	8004e9c <prvProcessReceivedCommands+0x144>
 8004dc4:	a201      	add	r2, pc, #4	; (adr r2, 8004dcc <prvProcessReceivedCommands+0x74>)
 8004dc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004dca:	bf00      	nop
 8004dcc:	08004df5 	.word	0x08004df5
 8004dd0:	08004df5 	.word	0x08004df5
 8004dd4:	08004df5 	.word	0x08004df5
 8004dd8:	08004e9d 	.word	0x08004e9d
 8004ddc:	08004e51 	.word	0x08004e51
 8004de0:	08004e89 	.word	0x08004e89
 8004de4:	08004df5 	.word	0x08004df5
 8004de8:	08004df5 	.word	0x08004df5
 8004dec:	08004e9d 	.word	0x08004e9d
 8004df0:	08004e51 	.word	0x08004e51
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8004df4:	68ba      	ldr	r2, [r7, #8]
 8004df6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004df8:	699b      	ldr	r3, [r3, #24]
 8004dfa:	18d1      	adds	r1, r2, r3
 8004dfc:	68bb      	ldr	r3, [r7, #8]
 8004dfe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e00:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004e02:	f7ff ff67 	bl	8004cd4 <prvInsertTimerInActiveList>
 8004e06:	4603      	mov	r3, r0
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d047      	beq.n	8004e9c <prvProcessReceivedCommands+0x144>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004e0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e10:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004e12:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8004e14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e16:	69db      	ldr	r3, [r3, #28]
 8004e18:	2b01      	cmp	r3, #1
 8004e1a:	d13f      	bne.n	8004e9c <prvProcessReceivedCommands+0x144>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8004e1c:	68ba      	ldr	r2, [r7, #8]
 8004e1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e20:	699b      	ldr	r3, [r3, #24]
 8004e22:	441a      	add	r2, r3
 8004e24:	2300      	movs	r3, #0
 8004e26:	9300      	str	r3, [sp, #0]
 8004e28:	2300      	movs	r3, #0
 8004e2a:	2100      	movs	r1, #0
 8004e2c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004e2e:	f7ff fe1f 	bl	8004a70 <xTimerGenericCommand>
 8004e32:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8004e34:	6a3b      	ldr	r3, [r7, #32]
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d130      	bne.n	8004e9c <prvProcessReceivedCommands+0x144>
	__asm volatile
 8004e3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e3e:	f383 8811 	msr	BASEPRI, r3
 8004e42:	f3bf 8f6f 	isb	sy
 8004e46:	f3bf 8f4f 	dsb	sy
 8004e4a:	61bb      	str	r3, [r7, #24]
}
 8004e4c:	bf00      	nop
 8004e4e:	e7fe      	b.n	8004e4e <prvProcessReceivedCommands+0xf6>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8004e50:	68ba      	ldr	r2, [r7, #8]
 8004e52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e54:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8004e56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e58:	699b      	ldr	r3, [r3, #24]
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d10a      	bne.n	8004e74 <prvProcessReceivedCommands+0x11c>
	__asm volatile
 8004e5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e62:	f383 8811 	msr	BASEPRI, r3
 8004e66:	f3bf 8f6f 	isb	sy
 8004e6a:	f3bf 8f4f 	dsb	sy
 8004e6e:	617b      	str	r3, [r7, #20]
}
 8004e70:	bf00      	nop
 8004e72:	e7fe      	b.n	8004e72 <prvProcessReceivedCommands+0x11a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8004e74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e76:	699a      	ldr	r2, [r3, #24]
 8004e78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e7a:	18d1      	adds	r1, r2, r3
 8004e7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e7e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e80:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004e82:	f7ff ff27 	bl	8004cd4 <prvInsertTimerInActiveList>
					break;
 8004e86:	e009      	b.n	8004e9c <prvProcessReceivedCommands+0x144>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8004e88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e8a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d104      	bne.n	8004e9c <prvProcessReceivedCommands+0x144>
						{
							vPortFree( pxTimer );
 8004e92:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004e94:	f000 fb8e 	bl	80055b4 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8004e98:	e000      	b.n	8004e9c <prvProcessReceivedCommands+0x144>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8004e9a:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004e9c:	4b07      	ldr	r3, [pc, #28]	; (8004ebc <prvProcessReceivedCommands+0x164>)
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	1d39      	adds	r1, r7, #4
 8004ea2:	2200      	movs	r2, #0
 8004ea4:	4618      	mov	r0, r3
 8004ea6:	f7fe fbcd 	bl	8003644 <xQueueReceive>
 8004eaa:	4603      	mov	r3, r0
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	f47f af57 	bne.w	8004d60 <prvProcessReceivedCommands+0x8>
	}
}
 8004eb2:	bf00      	nop
 8004eb4:	bf00      	nop
 8004eb6:	3730      	adds	r7, #48	; 0x30
 8004eb8:	46bd      	mov	sp, r7
 8004eba:	bd80      	pop	{r7, pc}
 8004ebc:	20000ef4 	.word	0x20000ef4

08004ec0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8004ec0:	b580      	push	{r7, lr}
 8004ec2:	b088      	sub	sp, #32
 8004ec4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004ec6:	e045      	b.n	8004f54 <prvSwitchTimerLists+0x94>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004ec8:	4b2c      	ldr	r3, [pc, #176]	; (8004f7c <prvSwitchTimerLists+0xbc>)
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	68db      	ldr	r3, [r3, #12]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004ed2:	4b2a      	ldr	r3, [pc, #168]	; (8004f7c <prvSwitchTimerLists+0xbc>)
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	68db      	ldr	r3, [r3, #12]
 8004ed8:	68db      	ldr	r3, [r3, #12]
 8004eda:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	3304      	adds	r3, #4
 8004ee0:	4618      	mov	r0, r3
 8004ee2:	f7fe f8ed 	bl	80030c0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eea:	68f8      	ldr	r0, [r7, #12]
 8004eec:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	69db      	ldr	r3, [r3, #28]
 8004ef2:	2b01      	cmp	r3, #1
 8004ef4:	d12e      	bne.n	8004f54 <prvSwitchTimerLists+0x94>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	699b      	ldr	r3, [r3, #24]
 8004efa:	693a      	ldr	r2, [r7, #16]
 8004efc:	4413      	add	r3, r2
 8004efe:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8004f00:	68ba      	ldr	r2, [r7, #8]
 8004f02:	693b      	ldr	r3, [r7, #16]
 8004f04:	429a      	cmp	r2, r3
 8004f06:	d90e      	bls.n	8004f26 <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	68ba      	ldr	r2, [r7, #8]
 8004f0c:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	68fa      	ldr	r2, [r7, #12]
 8004f12:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004f14:	4b19      	ldr	r3, [pc, #100]	; (8004f7c <prvSwitchTimerLists+0xbc>)
 8004f16:	681a      	ldr	r2, [r3, #0]
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	3304      	adds	r3, #4
 8004f1c:	4619      	mov	r1, r3
 8004f1e:	4610      	mov	r0, r2
 8004f20:	f7fe f896 	bl	8003050 <vListInsert>
 8004f24:	e016      	b.n	8004f54 <prvSwitchTimerLists+0x94>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004f26:	2300      	movs	r3, #0
 8004f28:	9300      	str	r3, [sp, #0]
 8004f2a:	2300      	movs	r3, #0
 8004f2c:	693a      	ldr	r2, [r7, #16]
 8004f2e:	2100      	movs	r1, #0
 8004f30:	68f8      	ldr	r0, [r7, #12]
 8004f32:	f7ff fd9d 	bl	8004a70 <xTimerGenericCommand>
 8004f36:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d10a      	bne.n	8004f54 <prvSwitchTimerLists+0x94>
	__asm volatile
 8004f3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f42:	f383 8811 	msr	BASEPRI, r3
 8004f46:	f3bf 8f6f 	isb	sy
 8004f4a:	f3bf 8f4f 	dsb	sy
 8004f4e:	603b      	str	r3, [r7, #0]
}
 8004f50:	bf00      	nop
 8004f52:	e7fe      	b.n	8004f52 <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004f54:	4b09      	ldr	r3, [pc, #36]	; (8004f7c <prvSwitchTimerLists+0xbc>)
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d1b4      	bne.n	8004ec8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8004f5e:	4b07      	ldr	r3, [pc, #28]	; (8004f7c <prvSwitchTimerLists+0xbc>)
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8004f64:	4b06      	ldr	r3, [pc, #24]	; (8004f80 <prvSwitchTimerLists+0xc0>)
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	4a04      	ldr	r2, [pc, #16]	; (8004f7c <prvSwitchTimerLists+0xbc>)
 8004f6a:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8004f6c:	4a04      	ldr	r2, [pc, #16]	; (8004f80 <prvSwitchTimerLists+0xc0>)
 8004f6e:	697b      	ldr	r3, [r7, #20]
 8004f70:	6013      	str	r3, [r2, #0]
}
 8004f72:	bf00      	nop
 8004f74:	3718      	adds	r7, #24
 8004f76:	46bd      	mov	sp, r7
 8004f78:	bd80      	pop	{r7, pc}
 8004f7a:	bf00      	nop
 8004f7c:	20000eec 	.word	0x20000eec
 8004f80:	20000ef0 	.word	0x20000ef0

08004f84 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8004f84:	b580      	push	{r7, lr}
 8004f86:	b082      	sub	sp, #8
 8004f88:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8004f8a:	f000 f94f 	bl	800522c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8004f8e:	4b15      	ldr	r3, [pc, #84]	; (8004fe4 <prvCheckForValidListAndQueue+0x60>)
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d120      	bne.n	8004fd8 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8004f96:	4814      	ldr	r0, [pc, #80]	; (8004fe8 <prvCheckForValidListAndQueue+0x64>)
 8004f98:	f7fe f80c 	bl	8002fb4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8004f9c:	4813      	ldr	r0, [pc, #76]	; (8004fec <prvCheckForValidListAndQueue+0x68>)
 8004f9e:	f7fe f809 	bl	8002fb4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8004fa2:	4b13      	ldr	r3, [pc, #76]	; (8004ff0 <prvCheckForValidListAndQueue+0x6c>)
 8004fa4:	4a10      	ldr	r2, [pc, #64]	; (8004fe8 <prvCheckForValidListAndQueue+0x64>)
 8004fa6:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8004fa8:	4b12      	ldr	r3, [pc, #72]	; (8004ff4 <prvCheckForValidListAndQueue+0x70>)
 8004faa:	4a10      	ldr	r2, [pc, #64]	; (8004fec <prvCheckForValidListAndQueue+0x68>)
 8004fac:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8004fae:	2300      	movs	r3, #0
 8004fb0:	9300      	str	r3, [sp, #0]
 8004fb2:	4b11      	ldr	r3, [pc, #68]	; (8004ff8 <prvCheckForValidListAndQueue+0x74>)
 8004fb4:	4a11      	ldr	r2, [pc, #68]	; (8004ffc <prvCheckForValidListAndQueue+0x78>)
 8004fb6:	2110      	movs	r1, #16
 8004fb8:	200a      	movs	r0, #10
 8004fba:	f7fe f913 	bl	80031e4 <xQueueGenericCreateStatic>
 8004fbe:	4603      	mov	r3, r0
 8004fc0:	4a08      	ldr	r2, [pc, #32]	; (8004fe4 <prvCheckForValidListAndQueue+0x60>)
 8004fc2:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8004fc4:	4b07      	ldr	r3, [pc, #28]	; (8004fe4 <prvCheckForValidListAndQueue+0x60>)
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d005      	beq.n	8004fd8 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8004fcc:	4b05      	ldr	r3, [pc, #20]	; (8004fe4 <prvCheckForValidListAndQueue+0x60>)
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	490b      	ldr	r1, [pc, #44]	; (8005000 <prvCheckForValidListAndQueue+0x7c>)
 8004fd2:	4618      	mov	r0, r3
 8004fd4:	f7fe fd26 	bl	8003a24 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004fd8:	f000 f958 	bl	800528c <vPortExitCritical>
}
 8004fdc:	bf00      	nop
 8004fde:	46bd      	mov	sp, r7
 8004fe0:	bd80      	pop	{r7, pc}
 8004fe2:	bf00      	nop
 8004fe4:	20000ef4 	.word	0x20000ef4
 8004fe8:	20000ec4 	.word	0x20000ec4
 8004fec:	20000ed8 	.word	0x20000ed8
 8004ff0:	20000eec 	.word	0x20000eec
 8004ff4:	20000ef0 	.word	0x20000ef0
 8004ff8:	20000fa0 	.word	0x20000fa0
 8004ffc:	20000f00 	.word	0x20000f00
 8005000:	08006ca4 	.word	0x08006ca4

08005004 <pvTimerGetTimerID>:
	return xTimerIsInActiveList;
} /*lint !e818 Can't be pointer to const due to the typedef. */
/*-----------------------------------------------------------*/

void *pvTimerGetTimerID( const TimerHandle_t xTimer )
{
 8005004:	b580      	push	{r7, lr}
 8005006:	b086      	sub	sp, #24
 8005008:	af00      	add	r7, sp, #0
 800500a:	6078      	str	r0, [r7, #4]
Timer_t * const pxTimer = ( Timer_t * ) xTimer;
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	617b      	str	r3, [r7, #20]
void *pvReturn;

	configASSERT( xTimer );
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	2b00      	cmp	r3, #0
 8005014:	d10a      	bne.n	800502c <pvTimerGetTimerID+0x28>
	__asm volatile
 8005016:	f04f 0350 	mov.w	r3, #80	; 0x50
 800501a:	f383 8811 	msr	BASEPRI, r3
 800501e:	f3bf 8f6f 	isb	sy
 8005022:	f3bf 8f4f 	dsb	sy
 8005026:	60fb      	str	r3, [r7, #12]
}
 8005028:	bf00      	nop
 800502a:	e7fe      	b.n	800502a <pvTimerGetTimerID+0x26>

	taskENTER_CRITICAL();
 800502c:	f000 f8fe 	bl	800522c <vPortEnterCritical>
	{
		pvReturn = pxTimer->pvTimerID;
 8005030:	697b      	ldr	r3, [r7, #20]
 8005032:	6a1b      	ldr	r3, [r3, #32]
 8005034:	613b      	str	r3, [r7, #16]
	}
	taskEXIT_CRITICAL();
 8005036:	f000 f929 	bl	800528c <vPortExitCritical>

	return pvReturn;
 800503a:	693b      	ldr	r3, [r7, #16]
}
 800503c:	4618      	mov	r0, r3
 800503e:	3718      	adds	r7, #24
 8005040:	46bd      	mov	sp, r7
 8005042:	bd80      	pop	{r7, pc}

08005044 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005044:	b480      	push	{r7}
 8005046:	b085      	sub	sp, #20
 8005048:	af00      	add	r7, sp, #0
 800504a:	60f8      	str	r0, [r7, #12]
 800504c:	60b9      	str	r1, [r7, #8]
 800504e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	3b04      	subs	r3, #4
 8005054:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800505c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	3b04      	subs	r3, #4
 8005062:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005064:	68bb      	ldr	r3, [r7, #8]
 8005066:	f023 0201 	bic.w	r2, r3, #1
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	3b04      	subs	r3, #4
 8005072:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005074:	4a08      	ldr	r2, [pc, #32]	; (8005098 <pxPortInitialiseStack+0x54>)
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	3b14      	subs	r3, #20
 800507e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005080:	687a      	ldr	r2, [r7, #4]
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	3b20      	subs	r3, #32
 800508a:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800508c:	68fb      	ldr	r3, [r7, #12]
}
 800508e:	4618      	mov	r0, r3
 8005090:	3714      	adds	r7, #20
 8005092:	46bd      	mov	sp, r7
 8005094:	bc80      	pop	{r7}
 8005096:	4770      	bx	lr
 8005098:	0800509d 	.word	0x0800509d

0800509c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800509c:	b480      	push	{r7}
 800509e:	b085      	sub	sp, #20
 80050a0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 80050a2:	2300      	movs	r3, #0
 80050a4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80050a6:	4b12      	ldr	r3, [pc, #72]	; (80050f0 <prvTaskExitError+0x54>)
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050ae:	d00a      	beq.n	80050c6 <prvTaskExitError+0x2a>
	__asm volatile
 80050b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050b4:	f383 8811 	msr	BASEPRI, r3
 80050b8:	f3bf 8f6f 	isb	sy
 80050bc:	f3bf 8f4f 	dsb	sy
 80050c0:	60fb      	str	r3, [r7, #12]
}
 80050c2:	bf00      	nop
 80050c4:	e7fe      	b.n	80050c4 <prvTaskExitError+0x28>
	__asm volatile
 80050c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050ca:	f383 8811 	msr	BASEPRI, r3
 80050ce:	f3bf 8f6f 	isb	sy
 80050d2:	f3bf 8f4f 	dsb	sy
 80050d6:	60bb      	str	r3, [r7, #8]
}
 80050d8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80050da:	bf00      	nop
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d0fc      	beq.n	80050dc <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80050e2:	bf00      	nop
 80050e4:	bf00      	nop
 80050e6:	3714      	adds	r7, #20
 80050e8:	46bd      	mov	sp, r7
 80050ea:	bc80      	pop	{r7}
 80050ec:	4770      	bx	lr
 80050ee:	bf00      	nop
 80050f0:	20000010 	.word	0x20000010
	...

08005100 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005100:	4b07      	ldr	r3, [pc, #28]	; (8005120 <pxCurrentTCBConst2>)
 8005102:	6819      	ldr	r1, [r3, #0]
 8005104:	6808      	ldr	r0, [r1, #0]
 8005106:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800510a:	f380 8809 	msr	PSP, r0
 800510e:	f3bf 8f6f 	isb	sy
 8005112:	f04f 0000 	mov.w	r0, #0
 8005116:	f380 8811 	msr	BASEPRI, r0
 800511a:	f04e 0e0d 	orr.w	lr, lr, #13
 800511e:	4770      	bx	lr

08005120 <pxCurrentTCBConst2>:
 8005120:	200009c4 	.word	0x200009c4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005124:	bf00      	nop
 8005126:	bf00      	nop

08005128 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8005128:	4806      	ldr	r0, [pc, #24]	; (8005144 <prvPortStartFirstTask+0x1c>)
 800512a:	6800      	ldr	r0, [r0, #0]
 800512c:	6800      	ldr	r0, [r0, #0]
 800512e:	f380 8808 	msr	MSP, r0
 8005132:	b662      	cpsie	i
 8005134:	b661      	cpsie	f
 8005136:	f3bf 8f4f 	dsb	sy
 800513a:	f3bf 8f6f 	isb	sy
 800513e:	df00      	svc	0
 8005140:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8005142:	bf00      	nop
 8005144:	e000ed08 	.word	0xe000ed08

08005148 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005148:	b580      	push	{r7, lr}
 800514a:	b084      	sub	sp, #16
 800514c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800514e:	4b32      	ldr	r3, [pc, #200]	; (8005218 <xPortStartScheduler+0xd0>)
 8005150:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	781b      	ldrb	r3, [r3, #0]
 8005156:	b2db      	uxtb	r3, r3
 8005158:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	22ff      	movs	r2, #255	; 0xff
 800515e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	781b      	ldrb	r3, [r3, #0]
 8005164:	b2db      	uxtb	r3, r3
 8005166:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005168:	78fb      	ldrb	r3, [r7, #3]
 800516a:	b2db      	uxtb	r3, r3
 800516c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005170:	b2da      	uxtb	r2, r3
 8005172:	4b2a      	ldr	r3, [pc, #168]	; (800521c <xPortStartScheduler+0xd4>)
 8005174:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005176:	4b2a      	ldr	r3, [pc, #168]	; (8005220 <xPortStartScheduler+0xd8>)
 8005178:	2207      	movs	r2, #7
 800517a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800517c:	e009      	b.n	8005192 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800517e:	4b28      	ldr	r3, [pc, #160]	; (8005220 <xPortStartScheduler+0xd8>)
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	3b01      	subs	r3, #1
 8005184:	4a26      	ldr	r2, [pc, #152]	; (8005220 <xPortStartScheduler+0xd8>)
 8005186:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005188:	78fb      	ldrb	r3, [r7, #3]
 800518a:	b2db      	uxtb	r3, r3
 800518c:	005b      	lsls	r3, r3, #1
 800518e:	b2db      	uxtb	r3, r3
 8005190:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005192:	78fb      	ldrb	r3, [r7, #3]
 8005194:	b2db      	uxtb	r3, r3
 8005196:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800519a:	2b80      	cmp	r3, #128	; 0x80
 800519c:	d0ef      	beq.n	800517e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800519e:	4b20      	ldr	r3, [pc, #128]	; (8005220 <xPortStartScheduler+0xd8>)
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	f1c3 0307 	rsb	r3, r3, #7
 80051a6:	2b04      	cmp	r3, #4
 80051a8:	d00a      	beq.n	80051c0 <xPortStartScheduler+0x78>
	__asm volatile
 80051aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051ae:	f383 8811 	msr	BASEPRI, r3
 80051b2:	f3bf 8f6f 	isb	sy
 80051b6:	f3bf 8f4f 	dsb	sy
 80051ba:	60bb      	str	r3, [r7, #8]
}
 80051bc:	bf00      	nop
 80051be:	e7fe      	b.n	80051be <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80051c0:	4b17      	ldr	r3, [pc, #92]	; (8005220 <xPortStartScheduler+0xd8>)
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	021b      	lsls	r3, r3, #8
 80051c6:	4a16      	ldr	r2, [pc, #88]	; (8005220 <xPortStartScheduler+0xd8>)
 80051c8:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80051ca:	4b15      	ldr	r3, [pc, #84]	; (8005220 <xPortStartScheduler+0xd8>)
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80051d2:	4a13      	ldr	r2, [pc, #76]	; (8005220 <xPortStartScheduler+0xd8>)
 80051d4:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	b2da      	uxtb	r2, r3
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80051de:	4b11      	ldr	r3, [pc, #68]	; (8005224 <xPortStartScheduler+0xdc>)
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	4a10      	ldr	r2, [pc, #64]	; (8005224 <xPortStartScheduler+0xdc>)
 80051e4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80051e8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80051ea:	4b0e      	ldr	r3, [pc, #56]	; (8005224 <xPortStartScheduler+0xdc>)
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	4a0d      	ldr	r2, [pc, #52]	; (8005224 <xPortStartScheduler+0xdc>)
 80051f0:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80051f4:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80051f6:	f000 f8b9 	bl	800536c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80051fa:	4b0b      	ldr	r3, [pc, #44]	; (8005228 <xPortStartScheduler+0xe0>)
 80051fc:	2200      	movs	r2, #0
 80051fe:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005200:	f7ff ff92 	bl	8005128 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005204:	f7ff f802 	bl	800420c <vTaskSwitchContext>
	prvTaskExitError();
 8005208:	f7ff ff48 	bl	800509c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800520c:	2300      	movs	r3, #0
}
 800520e:	4618      	mov	r0, r3
 8005210:	3710      	adds	r7, #16
 8005212:	46bd      	mov	sp, r7
 8005214:	bd80      	pop	{r7, pc}
 8005216:	bf00      	nop
 8005218:	e000e400 	.word	0xe000e400
 800521c:	20000ff0 	.word	0x20000ff0
 8005220:	20000ff4 	.word	0x20000ff4
 8005224:	e000ed20 	.word	0xe000ed20
 8005228:	20000010 	.word	0x20000010

0800522c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800522c:	b480      	push	{r7}
 800522e:	b083      	sub	sp, #12
 8005230:	af00      	add	r7, sp, #0
	__asm volatile
 8005232:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005236:	f383 8811 	msr	BASEPRI, r3
 800523a:	f3bf 8f6f 	isb	sy
 800523e:	f3bf 8f4f 	dsb	sy
 8005242:	607b      	str	r3, [r7, #4]
}
 8005244:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005246:	4b0f      	ldr	r3, [pc, #60]	; (8005284 <vPortEnterCritical+0x58>)
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	3301      	adds	r3, #1
 800524c:	4a0d      	ldr	r2, [pc, #52]	; (8005284 <vPortEnterCritical+0x58>)
 800524e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8005250:	4b0c      	ldr	r3, [pc, #48]	; (8005284 <vPortEnterCritical+0x58>)
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	2b01      	cmp	r3, #1
 8005256:	d10f      	bne.n	8005278 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005258:	4b0b      	ldr	r3, [pc, #44]	; (8005288 <vPortEnterCritical+0x5c>)
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	b2db      	uxtb	r3, r3
 800525e:	2b00      	cmp	r3, #0
 8005260:	d00a      	beq.n	8005278 <vPortEnterCritical+0x4c>
	__asm volatile
 8005262:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005266:	f383 8811 	msr	BASEPRI, r3
 800526a:	f3bf 8f6f 	isb	sy
 800526e:	f3bf 8f4f 	dsb	sy
 8005272:	603b      	str	r3, [r7, #0]
}
 8005274:	bf00      	nop
 8005276:	e7fe      	b.n	8005276 <vPortEnterCritical+0x4a>
	}
}
 8005278:	bf00      	nop
 800527a:	370c      	adds	r7, #12
 800527c:	46bd      	mov	sp, r7
 800527e:	bc80      	pop	{r7}
 8005280:	4770      	bx	lr
 8005282:	bf00      	nop
 8005284:	20000010 	.word	0x20000010
 8005288:	e000ed04 	.word	0xe000ed04

0800528c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800528c:	b480      	push	{r7}
 800528e:	b083      	sub	sp, #12
 8005290:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8005292:	4b11      	ldr	r3, [pc, #68]	; (80052d8 <vPortExitCritical+0x4c>)
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	2b00      	cmp	r3, #0
 8005298:	d10a      	bne.n	80052b0 <vPortExitCritical+0x24>
	__asm volatile
 800529a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800529e:	f383 8811 	msr	BASEPRI, r3
 80052a2:	f3bf 8f6f 	isb	sy
 80052a6:	f3bf 8f4f 	dsb	sy
 80052aa:	607b      	str	r3, [r7, #4]
}
 80052ac:	bf00      	nop
 80052ae:	e7fe      	b.n	80052ae <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80052b0:	4b09      	ldr	r3, [pc, #36]	; (80052d8 <vPortExitCritical+0x4c>)
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	3b01      	subs	r3, #1
 80052b6:	4a08      	ldr	r2, [pc, #32]	; (80052d8 <vPortExitCritical+0x4c>)
 80052b8:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80052ba:	4b07      	ldr	r3, [pc, #28]	; (80052d8 <vPortExitCritical+0x4c>)
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d105      	bne.n	80052ce <vPortExitCritical+0x42>
 80052c2:	2300      	movs	r3, #0
 80052c4:	603b      	str	r3, [r7, #0]
	__asm volatile
 80052c6:	683b      	ldr	r3, [r7, #0]
 80052c8:	f383 8811 	msr	BASEPRI, r3
}
 80052cc:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80052ce:	bf00      	nop
 80052d0:	370c      	adds	r7, #12
 80052d2:	46bd      	mov	sp, r7
 80052d4:	bc80      	pop	{r7}
 80052d6:	4770      	bx	lr
 80052d8:	20000010 	.word	0x20000010
 80052dc:	00000000 	.word	0x00000000

080052e0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80052e0:	f3ef 8009 	mrs	r0, PSP
 80052e4:	f3bf 8f6f 	isb	sy
 80052e8:	4b0d      	ldr	r3, [pc, #52]	; (8005320 <pxCurrentTCBConst>)
 80052ea:	681a      	ldr	r2, [r3, #0]
 80052ec:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80052f0:	6010      	str	r0, [r2, #0]
 80052f2:	e92d 4008 	stmdb	sp!, {r3, lr}
 80052f6:	f04f 0050 	mov.w	r0, #80	; 0x50
 80052fa:	f380 8811 	msr	BASEPRI, r0
 80052fe:	f7fe ff85 	bl	800420c <vTaskSwitchContext>
 8005302:	f04f 0000 	mov.w	r0, #0
 8005306:	f380 8811 	msr	BASEPRI, r0
 800530a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800530e:	6819      	ldr	r1, [r3, #0]
 8005310:	6808      	ldr	r0, [r1, #0]
 8005312:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8005316:	f380 8809 	msr	PSP, r0
 800531a:	f3bf 8f6f 	isb	sy
 800531e:	4770      	bx	lr

08005320 <pxCurrentTCBConst>:
 8005320:	200009c4 	.word	0x200009c4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005324:	bf00      	nop
 8005326:	bf00      	nop

08005328 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005328:	b580      	push	{r7, lr}
 800532a:	b082      	sub	sp, #8
 800532c:	af00      	add	r7, sp, #0
	__asm volatile
 800532e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005332:	f383 8811 	msr	BASEPRI, r3
 8005336:	f3bf 8f6f 	isb	sy
 800533a:	f3bf 8f4f 	dsb	sy
 800533e:	607b      	str	r3, [r7, #4]
}
 8005340:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005342:	f7fe fea5 	bl	8004090 <xTaskIncrementTick>
 8005346:	4603      	mov	r3, r0
 8005348:	2b00      	cmp	r3, #0
 800534a:	d003      	beq.n	8005354 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800534c:	4b06      	ldr	r3, [pc, #24]	; (8005368 <SysTick_Handler+0x40>)
 800534e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005352:	601a      	str	r2, [r3, #0]
 8005354:	2300      	movs	r3, #0
 8005356:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005358:	683b      	ldr	r3, [r7, #0]
 800535a:	f383 8811 	msr	BASEPRI, r3
}
 800535e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005360:	bf00      	nop
 8005362:	3708      	adds	r7, #8
 8005364:	46bd      	mov	sp, r7
 8005366:	bd80      	pop	{r7, pc}
 8005368:	e000ed04 	.word	0xe000ed04

0800536c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800536c:	b480      	push	{r7}
 800536e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005370:	4b0a      	ldr	r3, [pc, #40]	; (800539c <vPortSetupTimerInterrupt+0x30>)
 8005372:	2200      	movs	r2, #0
 8005374:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005376:	4b0a      	ldr	r3, [pc, #40]	; (80053a0 <vPortSetupTimerInterrupt+0x34>)
 8005378:	2200      	movs	r2, #0
 800537a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800537c:	4b09      	ldr	r3, [pc, #36]	; (80053a4 <vPortSetupTimerInterrupt+0x38>)
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	4a09      	ldr	r2, [pc, #36]	; (80053a8 <vPortSetupTimerInterrupt+0x3c>)
 8005382:	fba2 2303 	umull	r2, r3, r2, r3
 8005386:	099b      	lsrs	r3, r3, #6
 8005388:	4a08      	ldr	r2, [pc, #32]	; (80053ac <vPortSetupTimerInterrupt+0x40>)
 800538a:	3b01      	subs	r3, #1
 800538c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800538e:	4b03      	ldr	r3, [pc, #12]	; (800539c <vPortSetupTimerInterrupt+0x30>)
 8005390:	2207      	movs	r2, #7
 8005392:	601a      	str	r2, [r3, #0]
}
 8005394:	bf00      	nop
 8005396:	46bd      	mov	sp, r7
 8005398:	bc80      	pop	{r7}
 800539a:	4770      	bx	lr
 800539c:	e000e010 	.word	0xe000e010
 80053a0:	e000e018 	.word	0xe000e018
 80053a4:	20000004 	.word	0x20000004
 80053a8:	10624dd3 	.word	0x10624dd3
 80053ac:	e000e014 	.word	0xe000e014

080053b0 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80053b0:	b480      	push	{r7}
 80053b2:	b085      	sub	sp, #20
 80053b4:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80053b6:	f3ef 8305 	mrs	r3, IPSR
 80053ba:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	2b0f      	cmp	r3, #15
 80053c0:	d914      	bls.n	80053ec <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80053c2:	4a16      	ldr	r2, [pc, #88]	; (800541c <vPortValidateInterruptPriority+0x6c>)
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	4413      	add	r3, r2
 80053c8:	781b      	ldrb	r3, [r3, #0]
 80053ca:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80053cc:	4b14      	ldr	r3, [pc, #80]	; (8005420 <vPortValidateInterruptPriority+0x70>)
 80053ce:	781b      	ldrb	r3, [r3, #0]
 80053d0:	7afa      	ldrb	r2, [r7, #11]
 80053d2:	429a      	cmp	r2, r3
 80053d4:	d20a      	bcs.n	80053ec <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80053d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053da:	f383 8811 	msr	BASEPRI, r3
 80053de:	f3bf 8f6f 	isb	sy
 80053e2:	f3bf 8f4f 	dsb	sy
 80053e6:	607b      	str	r3, [r7, #4]
}
 80053e8:	bf00      	nop
 80053ea:	e7fe      	b.n	80053ea <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80053ec:	4b0d      	ldr	r3, [pc, #52]	; (8005424 <vPortValidateInterruptPriority+0x74>)
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80053f4:	4b0c      	ldr	r3, [pc, #48]	; (8005428 <vPortValidateInterruptPriority+0x78>)
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	429a      	cmp	r2, r3
 80053fa:	d90a      	bls.n	8005412 <vPortValidateInterruptPriority+0x62>
	__asm volatile
 80053fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005400:	f383 8811 	msr	BASEPRI, r3
 8005404:	f3bf 8f6f 	isb	sy
 8005408:	f3bf 8f4f 	dsb	sy
 800540c:	603b      	str	r3, [r7, #0]
}
 800540e:	bf00      	nop
 8005410:	e7fe      	b.n	8005410 <vPortValidateInterruptPriority+0x60>
	}
 8005412:	bf00      	nop
 8005414:	3714      	adds	r7, #20
 8005416:	46bd      	mov	sp, r7
 8005418:	bc80      	pop	{r7}
 800541a:	4770      	bx	lr
 800541c:	e000e3f0 	.word	0xe000e3f0
 8005420:	20000ff0 	.word	0x20000ff0
 8005424:	e000ed0c 	.word	0xe000ed0c
 8005428:	20000ff4 	.word	0x20000ff4

0800542c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800542c:	b580      	push	{r7, lr}
 800542e:	b08a      	sub	sp, #40	; 0x28
 8005430:	af00      	add	r7, sp, #0
 8005432:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005434:	2300      	movs	r3, #0
 8005436:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005438:	f7fe fd70 	bl	8003f1c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800543c:	4b58      	ldr	r3, [pc, #352]	; (80055a0 <pvPortMalloc+0x174>)
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	2b00      	cmp	r3, #0
 8005442:	d101      	bne.n	8005448 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005444:	f000 f910 	bl	8005668 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005448:	4b56      	ldr	r3, [pc, #344]	; (80055a4 <pvPortMalloc+0x178>)
 800544a:	681a      	ldr	r2, [r3, #0]
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	4013      	ands	r3, r2
 8005450:	2b00      	cmp	r3, #0
 8005452:	f040 808e 	bne.w	8005572 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	2b00      	cmp	r3, #0
 800545a:	d01d      	beq.n	8005498 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800545c:	2208      	movs	r2, #8
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	4413      	add	r3, r2
 8005462:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	f003 0307 	and.w	r3, r3, #7
 800546a:	2b00      	cmp	r3, #0
 800546c:	d014      	beq.n	8005498 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	f023 0307 	bic.w	r3, r3, #7
 8005474:	3308      	adds	r3, #8
 8005476:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	f003 0307 	and.w	r3, r3, #7
 800547e:	2b00      	cmp	r3, #0
 8005480:	d00a      	beq.n	8005498 <pvPortMalloc+0x6c>
	__asm volatile
 8005482:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005486:	f383 8811 	msr	BASEPRI, r3
 800548a:	f3bf 8f6f 	isb	sy
 800548e:	f3bf 8f4f 	dsb	sy
 8005492:	617b      	str	r3, [r7, #20]
}
 8005494:	bf00      	nop
 8005496:	e7fe      	b.n	8005496 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	2b00      	cmp	r3, #0
 800549c:	d069      	beq.n	8005572 <pvPortMalloc+0x146>
 800549e:	4b42      	ldr	r3, [pc, #264]	; (80055a8 <pvPortMalloc+0x17c>)
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	687a      	ldr	r2, [r7, #4]
 80054a4:	429a      	cmp	r2, r3
 80054a6:	d864      	bhi.n	8005572 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80054a8:	4b40      	ldr	r3, [pc, #256]	; (80055ac <pvPortMalloc+0x180>)
 80054aa:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80054ac:	4b3f      	ldr	r3, [pc, #252]	; (80055ac <pvPortMalloc+0x180>)
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80054b2:	e004      	b.n	80054be <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80054b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054b6:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80054b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80054be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054c0:	685b      	ldr	r3, [r3, #4]
 80054c2:	687a      	ldr	r2, [r7, #4]
 80054c4:	429a      	cmp	r2, r3
 80054c6:	d903      	bls.n	80054d0 <pvPortMalloc+0xa4>
 80054c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d1f1      	bne.n	80054b4 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80054d0:	4b33      	ldr	r3, [pc, #204]	; (80055a0 <pvPortMalloc+0x174>)
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80054d6:	429a      	cmp	r2, r3
 80054d8:	d04b      	beq.n	8005572 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80054da:	6a3b      	ldr	r3, [r7, #32]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	2208      	movs	r2, #8
 80054e0:	4413      	add	r3, r2
 80054e2:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80054e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054e6:	681a      	ldr	r2, [r3, #0]
 80054e8:	6a3b      	ldr	r3, [r7, #32]
 80054ea:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80054ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054ee:	685a      	ldr	r2, [r3, #4]
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	1ad2      	subs	r2, r2, r3
 80054f4:	2308      	movs	r3, #8
 80054f6:	005b      	lsls	r3, r3, #1
 80054f8:	429a      	cmp	r2, r3
 80054fa:	d91f      	bls.n	800553c <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80054fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	4413      	add	r3, r2
 8005502:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005504:	69bb      	ldr	r3, [r7, #24]
 8005506:	f003 0307 	and.w	r3, r3, #7
 800550a:	2b00      	cmp	r3, #0
 800550c:	d00a      	beq.n	8005524 <pvPortMalloc+0xf8>
	__asm volatile
 800550e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005512:	f383 8811 	msr	BASEPRI, r3
 8005516:	f3bf 8f6f 	isb	sy
 800551a:	f3bf 8f4f 	dsb	sy
 800551e:	613b      	str	r3, [r7, #16]
}
 8005520:	bf00      	nop
 8005522:	e7fe      	b.n	8005522 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005524:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005526:	685a      	ldr	r2, [r3, #4]
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	1ad2      	subs	r2, r2, r3
 800552c:	69bb      	ldr	r3, [r7, #24]
 800552e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005530:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005532:	687a      	ldr	r2, [r7, #4]
 8005534:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005536:	69b8      	ldr	r0, [r7, #24]
 8005538:	f000 f8f8 	bl	800572c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800553c:	4b1a      	ldr	r3, [pc, #104]	; (80055a8 <pvPortMalloc+0x17c>)
 800553e:	681a      	ldr	r2, [r3, #0]
 8005540:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005542:	685b      	ldr	r3, [r3, #4]
 8005544:	1ad3      	subs	r3, r2, r3
 8005546:	4a18      	ldr	r2, [pc, #96]	; (80055a8 <pvPortMalloc+0x17c>)
 8005548:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800554a:	4b17      	ldr	r3, [pc, #92]	; (80055a8 <pvPortMalloc+0x17c>)
 800554c:	681a      	ldr	r2, [r3, #0]
 800554e:	4b18      	ldr	r3, [pc, #96]	; (80055b0 <pvPortMalloc+0x184>)
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	429a      	cmp	r2, r3
 8005554:	d203      	bcs.n	800555e <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005556:	4b14      	ldr	r3, [pc, #80]	; (80055a8 <pvPortMalloc+0x17c>)
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	4a15      	ldr	r2, [pc, #84]	; (80055b0 <pvPortMalloc+0x184>)
 800555c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800555e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005560:	685a      	ldr	r2, [r3, #4]
 8005562:	4b10      	ldr	r3, [pc, #64]	; (80055a4 <pvPortMalloc+0x178>)
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	431a      	orrs	r2, r3
 8005568:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800556a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800556c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800556e:	2200      	movs	r2, #0
 8005570:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005572:	f7fe fce1 	bl	8003f38 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005576:	69fb      	ldr	r3, [r7, #28]
 8005578:	f003 0307 	and.w	r3, r3, #7
 800557c:	2b00      	cmp	r3, #0
 800557e:	d00a      	beq.n	8005596 <pvPortMalloc+0x16a>
	__asm volatile
 8005580:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005584:	f383 8811 	msr	BASEPRI, r3
 8005588:	f3bf 8f6f 	isb	sy
 800558c:	f3bf 8f4f 	dsb	sy
 8005590:	60fb      	str	r3, [r7, #12]
}
 8005592:	bf00      	nop
 8005594:	e7fe      	b.n	8005594 <pvPortMalloc+0x168>
	return pvReturn;
 8005596:	69fb      	ldr	r3, [r7, #28]
}
 8005598:	4618      	mov	r0, r3
 800559a:	3728      	adds	r7, #40	; 0x28
 800559c:	46bd      	mov	sp, r7
 800559e:	bd80      	pop	{r7, pc}
 80055a0:	20001c00 	.word	0x20001c00
 80055a4:	20001c0c 	.word	0x20001c0c
 80055a8:	20001c04 	.word	0x20001c04
 80055ac:	20001bf8 	.word	0x20001bf8
 80055b0:	20001c08 	.word	0x20001c08

080055b4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80055b4:	b580      	push	{r7, lr}
 80055b6:	b086      	sub	sp, #24
 80055b8:	af00      	add	r7, sp, #0
 80055ba:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d048      	beq.n	8005658 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80055c6:	2308      	movs	r3, #8
 80055c8:	425b      	negs	r3, r3
 80055ca:	697a      	ldr	r2, [r7, #20]
 80055cc:	4413      	add	r3, r2
 80055ce:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80055d0:	697b      	ldr	r3, [r7, #20]
 80055d2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80055d4:	693b      	ldr	r3, [r7, #16]
 80055d6:	685a      	ldr	r2, [r3, #4]
 80055d8:	4b21      	ldr	r3, [pc, #132]	; (8005660 <vPortFree+0xac>)
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	4013      	ands	r3, r2
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d10a      	bne.n	80055f8 <vPortFree+0x44>
	__asm volatile
 80055e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055e6:	f383 8811 	msr	BASEPRI, r3
 80055ea:	f3bf 8f6f 	isb	sy
 80055ee:	f3bf 8f4f 	dsb	sy
 80055f2:	60fb      	str	r3, [r7, #12]
}
 80055f4:	bf00      	nop
 80055f6:	e7fe      	b.n	80055f6 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80055f8:	693b      	ldr	r3, [r7, #16]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d00a      	beq.n	8005616 <vPortFree+0x62>
	__asm volatile
 8005600:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005604:	f383 8811 	msr	BASEPRI, r3
 8005608:	f3bf 8f6f 	isb	sy
 800560c:	f3bf 8f4f 	dsb	sy
 8005610:	60bb      	str	r3, [r7, #8]
}
 8005612:	bf00      	nop
 8005614:	e7fe      	b.n	8005614 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005616:	693b      	ldr	r3, [r7, #16]
 8005618:	685a      	ldr	r2, [r3, #4]
 800561a:	4b11      	ldr	r3, [pc, #68]	; (8005660 <vPortFree+0xac>)
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	4013      	ands	r3, r2
 8005620:	2b00      	cmp	r3, #0
 8005622:	d019      	beq.n	8005658 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005624:	693b      	ldr	r3, [r7, #16]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	2b00      	cmp	r3, #0
 800562a:	d115      	bne.n	8005658 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800562c:	693b      	ldr	r3, [r7, #16]
 800562e:	685a      	ldr	r2, [r3, #4]
 8005630:	4b0b      	ldr	r3, [pc, #44]	; (8005660 <vPortFree+0xac>)
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	43db      	mvns	r3, r3
 8005636:	401a      	ands	r2, r3
 8005638:	693b      	ldr	r3, [r7, #16]
 800563a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800563c:	f7fe fc6e 	bl	8003f1c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005640:	693b      	ldr	r3, [r7, #16]
 8005642:	685a      	ldr	r2, [r3, #4]
 8005644:	4b07      	ldr	r3, [pc, #28]	; (8005664 <vPortFree+0xb0>)
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	4413      	add	r3, r2
 800564a:	4a06      	ldr	r2, [pc, #24]	; (8005664 <vPortFree+0xb0>)
 800564c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800564e:	6938      	ldr	r0, [r7, #16]
 8005650:	f000 f86c 	bl	800572c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8005654:	f7fe fc70 	bl	8003f38 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8005658:	bf00      	nop
 800565a:	3718      	adds	r7, #24
 800565c:	46bd      	mov	sp, r7
 800565e:	bd80      	pop	{r7, pc}
 8005660:	20001c0c 	.word	0x20001c0c
 8005664:	20001c04 	.word	0x20001c04

08005668 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005668:	b480      	push	{r7}
 800566a:	b085      	sub	sp, #20
 800566c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800566e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8005672:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005674:	4b27      	ldr	r3, [pc, #156]	; (8005714 <prvHeapInit+0xac>)
 8005676:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	f003 0307 	and.w	r3, r3, #7
 800567e:	2b00      	cmp	r3, #0
 8005680:	d00c      	beq.n	800569c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	3307      	adds	r3, #7
 8005686:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	f023 0307 	bic.w	r3, r3, #7
 800568e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005690:	68ba      	ldr	r2, [r7, #8]
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	1ad3      	subs	r3, r2, r3
 8005696:	4a1f      	ldr	r2, [pc, #124]	; (8005714 <prvHeapInit+0xac>)
 8005698:	4413      	add	r3, r2
 800569a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80056a0:	4a1d      	ldr	r2, [pc, #116]	; (8005718 <prvHeapInit+0xb0>)
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80056a6:	4b1c      	ldr	r3, [pc, #112]	; (8005718 <prvHeapInit+0xb0>)
 80056a8:	2200      	movs	r2, #0
 80056aa:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	68ba      	ldr	r2, [r7, #8]
 80056b0:	4413      	add	r3, r2
 80056b2:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80056b4:	2208      	movs	r2, #8
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	1a9b      	subs	r3, r3, r2
 80056ba:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	f023 0307 	bic.w	r3, r3, #7
 80056c2:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	4a15      	ldr	r2, [pc, #84]	; (800571c <prvHeapInit+0xb4>)
 80056c8:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80056ca:	4b14      	ldr	r3, [pc, #80]	; (800571c <prvHeapInit+0xb4>)
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	2200      	movs	r2, #0
 80056d0:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80056d2:	4b12      	ldr	r3, [pc, #72]	; (800571c <prvHeapInit+0xb4>)
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	2200      	movs	r2, #0
 80056d8:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80056de:	683b      	ldr	r3, [r7, #0]
 80056e0:	68fa      	ldr	r2, [r7, #12]
 80056e2:	1ad2      	subs	r2, r2, r3
 80056e4:	683b      	ldr	r3, [r7, #0]
 80056e6:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80056e8:	4b0c      	ldr	r3, [pc, #48]	; (800571c <prvHeapInit+0xb4>)
 80056ea:	681a      	ldr	r2, [r3, #0]
 80056ec:	683b      	ldr	r3, [r7, #0]
 80056ee:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80056f0:	683b      	ldr	r3, [r7, #0]
 80056f2:	685b      	ldr	r3, [r3, #4]
 80056f4:	4a0a      	ldr	r2, [pc, #40]	; (8005720 <prvHeapInit+0xb8>)
 80056f6:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80056f8:	683b      	ldr	r3, [r7, #0]
 80056fa:	685b      	ldr	r3, [r3, #4]
 80056fc:	4a09      	ldr	r2, [pc, #36]	; (8005724 <prvHeapInit+0xbc>)
 80056fe:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005700:	4b09      	ldr	r3, [pc, #36]	; (8005728 <prvHeapInit+0xc0>)
 8005702:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005706:	601a      	str	r2, [r3, #0]
}
 8005708:	bf00      	nop
 800570a:	3714      	adds	r7, #20
 800570c:	46bd      	mov	sp, r7
 800570e:	bc80      	pop	{r7}
 8005710:	4770      	bx	lr
 8005712:	bf00      	nop
 8005714:	20000ff8 	.word	0x20000ff8
 8005718:	20001bf8 	.word	0x20001bf8
 800571c:	20001c00 	.word	0x20001c00
 8005720:	20001c08 	.word	0x20001c08
 8005724:	20001c04 	.word	0x20001c04
 8005728:	20001c0c 	.word	0x20001c0c

0800572c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800572c:	b480      	push	{r7}
 800572e:	b085      	sub	sp, #20
 8005730:	af00      	add	r7, sp, #0
 8005732:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005734:	4b27      	ldr	r3, [pc, #156]	; (80057d4 <prvInsertBlockIntoFreeList+0xa8>)
 8005736:	60fb      	str	r3, [r7, #12]
 8005738:	e002      	b.n	8005740 <prvInsertBlockIntoFreeList+0x14>
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	60fb      	str	r3, [r7, #12]
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	687a      	ldr	r2, [r7, #4]
 8005746:	429a      	cmp	r2, r3
 8005748:	d8f7      	bhi.n	800573a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	685b      	ldr	r3, [r3, #4]
 8005752:	68ba      	ldr	r2, [r7, #8]
 8005754:	4413      	add	r3, r2
 8005756:	687a      	ldr	r2, [r7, #4]
 8005758:	429a      	cmp	r2, r3
 800575a:	d108      	bne.n	800576e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	685a      	ldr	r2, [r3, #4]
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	685b      	ldr	r3, [r3, #4]
 8005764:	441a      	add	r2, r3
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	685b      	ldr	r3, [r3, #4]
 8005776:	68ba      	ldr	r2, [r7, #8]
 8005778:	441a      	add	r2, r3
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	429a      	cmp	r2, r3
 8005780:	d118      	bne.n	80057b4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	681a      	ldr	r2, [r3, #0]
 8005786:	4b14      	ldr	r3, [pc, #80]	; (80057d8 <prvInsertBlockIntoFreeList+0xac>)
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	429a      	cmp	r2, r3
 800578c:	d00d      	beq.n	80057aa <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	685a      	ldr	r2, [r3, #4]
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	685b      	ldr	r3, [r3, #4]
 8005798:	441a      	add	r2, r3
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	681a      	ldr	r2, [r3, #0]
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	601a      	str	r2, [r3, #0]
 80057a8:	e008      	b.n	80057bc <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80057aa:	4b0b      	ldr	r3, [pc, #44]	; (80057d8 <prvInsertBlockIntoFreeList+0xac>)
 80057ac:	681a      	ldr	r2, [r3, #0]
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	601a      	str	r2, [r3, #0]
 80057b2:	e003      	b.n	80057bc <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	681a      	ldr	r2, [r3, #0]
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80057bc:	68fa      	ldr	r2, [r7, #12]
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	429a      	cmp	r2, r3
 80057c2:	d002      	beq.n	80057ca <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	687a      	ldr	r2, [r7, #4]
 80057c8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80057ca:	bf00      	nop
 80057cc:	3714      	adds	r7, #20
 80057ce:	46bd      	mov	sp, r7
 80057d0:	bc80      	pop	{r7}
 80057d2:	4770      	bx	lr
 80057d4:	20001bf8 	.word	0x20001bf8
 80057d8:	20001c00 	.word	0x20001c00

080057dc <__errno>:
 80057dc:	4b01      	ldr	r3, [pc, #4]	; (80057e4 <__errno+0x8>)
 80057de:	6818      	ldr	r0, [r3, #0]
 80057e0:	4770      	bx	lr
 80057e2:	bf00      	nop
 80057e4:	20000014 	.word	0x20000014

080057e8 <std>:
 80057e8:	2300      	movs	r3, #0
 80057ea:	b510      	push	{r4, lr}
 80057ec:	4604      	mov	r4, r0
 80057ee:	e9c0 3300 	strd	r3, r3, [r0]
 80057f2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80057f6:	6083      	str	r3, [r0, #8]
 80057f8:	8181      	strh	r1, [r0, #12]
 80057fa:	6643      	str	r3, [r0, #100]	; 0x64
 80057fc:	81c2      	strh	r2, [r0, #14]
 80057fe:	6183      	str	r3, [r0, #24]
 8005800:	4619      	mov	r1, r3
 8005802:	2208      	movs	r2, #8
 8005804:	305c      	adds	r0, #92	; 0x5c
 8005806:	f000 f91a 	bl	8005a3e <memset>
 800580a:	4b05      	ldr	r3, [pc, #20]	; (8005820 <std+0x38>)
 800580c:	6224      	str	r4, [r4, #32]
 800580e:	6263      	str	r3, [r4, #36]	; 0x24
 8005810:	4b04      	ldr	r3, [pc, #16]	; (8005824 <std+0x3c>)
 8005812:	62a3      	str	r3, [r4, #40]	; 0x28
 8005814:	4b04      	ldr	r3, [pc, #16]	; (8005828 <std+0x40>)
 8005816:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005818:	4b04      	ldr	r3, [pc, #16]	; (800582c <std+0x44>)
 800581a:	6323      	str	r3, [r4, #48]	; 0x30
 800581c:	bd10      	pop	{r4, pc}
 800581e:	bf00      	nop
 8005820:	08005f15 	.word	0x08005f15
 8005824:	08005f37 	.word	0x08005f37
 8005828:	08005f6f 	.word	0x08005f6f
 800582c:	08005f93 	.word	0x08005f93

08005830 <_cleanup_r>:
 8005830:	4901      	ldr	r1, [pc, #4]	; (8005838 <_cleanup_r+0x8>)
 8005832:	f000 b8af 	b.w	8005994 <_fwalk_reent>
 8005836:	bf00      	nop
 8005838:	08006265 	.word	0x08006265

0800583c <__sfmoreglue>:
 800583c:	2268      	movs	r2, #104	; 0x68
 800583e:	b570      	push	{r4, r5, r6, lr}
 8005840:	1e4d      	subs	r5, r1, #1
 8005842:	4355      	muls	r5, r2
 8005844:	460e      	mov	r6, r1
 8005846:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800584a:	f000 f921 	bl	8005a90 <_malloc_r>
 800584e:	4604      	mov	r4, r0
 8005850:	b140      	cbz	r0, 8005864 <__sfmoreglue+0x28>
 8005852:	2100      	movs	r1, #0
 8005854:	e9c0 1600 	strd	r1, r6, [r0]
 8005858:	300c      	adds	r0, #12
 800585a:	60a0      	str	r0, [r4, #8]
 800585c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8005860:	f000 f8ed 	bl	8005a3e <memset>
 8005864:	4620      	mov	r0, r4
 8005866:	bd70      	pop	{r4, r5, r6, pc}

08005868 <__sfp_lock_acquire>:
 8005868:	4801      	ldr	r0, [pc, #4]	; (8005870 <__sfp_lock_acquire+0x8>)
 800586a:	f000 b8d8 	b.w	8005a1e <__retarget_lock_acquire_recursive>
 800586e:	bf00      	nop
 8005870:	20001c11 	.word	0x20001c11

08005874 <__sfp_lock_release>:
 8005874:	4801      	ldr	r0, [pc, #4]	; (800587c <__sfp_lock_release+0x8>)
 8005876:	f000 b8d3 	b.w	8005a20 <__retarget_lock_release_recursive>
 800587a:	bf00      	nop
 800587c:	20001c11 	.word	0x20001c11

08005880 <__sinit_lock_acquire>:
 8005880:	4801      	ldr	r0, [pc, #4]	; (8005888 <__sinit_lock_acquire+0x8>)
 8005882:	f000 b8cc 	b.w	8005a1e <__retarget_lock_acquire_recursive>
 8005886:	bf00      	nop
 8005888:	20001c12 	.word	0x20001c12

0800588c <__sinit_lock_release>:
 800588c:	4801      	ldr	r0, [pc, #4]	; (8005894 <__sinit_lock_release+0x8>)
 800588e:	f000 b8c7 	b.w	8005a20 <__retarget_lock_release_recursive>
 8005892:	bf00      	nop
 8005894:	20001c12 	.word	0x20001c12

08005898 <__sinit>:
 8005898:	b510      	push	{r4, lr}
 800589a:	4604      	mov	r4, r0
 800589c:	f7ff fff0 	bl	8005880 <__sinit_lock_acquire>
 80058a0:	69a3      	ldr	r3, [r4, #24]
 80058a2:	b11b      	cbz	r3, 80058ac <__sinit+0x14>
 80058a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80058a8:	f7ff bff0 	b.w	800588c <__sinit_lock_release>
 80058ac:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80058b0:	6523      	str	r3, [r4, #80]	; 0x50
 80058b2:	4b13      	ldr	r3, [pc, #76]	; (8005900 <__sinit+0x68>)
 80058b4:	4a13      	ldr	r2, [pc, #76]	; (8005904 <__sinit+0x6c>)
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	62a2      	str	r2, [r4, #40]	; 0x28
 80058ba:	42a3      	cmp	r3, r4
 80058bc:	bf08      	it	eq
 80058be:	2301      	moveq	r3, #1
 80058c0:	4620      	mov	r0, r4
 80058c2:	bf08      	it	eq
 80058c4:	61a3      	streq	r3, [r4, #24]
 80058c6:	f000 f81f 	bl	8005908 <__sfp>
 80058ca:	6060      	str	r0, [r4, #4]
 80058cc:	4620      	mov	r0, r4
 80058ce:	f000 f81b 	bl	8005908 <__sfp>
 80058d2:	60a0      	str	r0, [r4, #8]
 80058d4:	4620      	mov	r0, r4
 80058d6:	f000 f817 	bl	8005908 <__sfp>
 80058da:	2200      	movs	r2, #0
 80058dc:	2104      	movs	r1, #4
 80058de:	60e0      	str	r0, [r4, #12]
 80058e0:	6860      	ldr	r0, [r4, #4]
 80058e2:	f7ff ff81 	bl	80057e8 <std>
 80058e6:	2201      	movs	r2, #1
 80058e8:	2109      	movs	r1, #9
 80058ea:	68a0      	ldr	r0, [r4, #8]
 80058ec:	f7ff ff7c 	bl	80057e8 <std>
 80058f0:	2202      	movs	r2, #2
 80058f2:	2112      	movs	r1, #18
 80058f4:	68e0      	ldr	r0, [r4, #12]
 80058f6:	f7ff ff77 	bl	80057e8 <std>
 80058fa:	2301      	movs	r3, #1
 80058fc:	61a3      	str	r3, [r4, #24]
 80058fe:	e7d1      	b.n	80058a4 <__sinit+0xc>
 8005900:	08006d58 	.word	0x08006d58
 8005904:	08005831 	.word	0x08005831

08005908 <__sfp>:
 8005908:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800590a:	4607      	mov	r7, r0
 800590c:	f7ff ffac 	bl	8005868 <__sfp_lock_acquire>
 8005910:	4b1e      	ldr	r3, [pc, #120]	; (800598c <__sfp+0x84>)
 8005912:	681e      	ldr	r6, [r3, #0]
 8005914:	69b3      	ldr	r3, [r6, #24]
 8005916:	b913      	cbnz	r3, 800591e <__sfp+0x16>
 8005918:	4630      	mov	r0, r6
 800591a:	f7ff ffbd 	bl	8005898 <__sinit>
 800591e:	3648      	adds	r6, #72	; 0x48
 8005920:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8005924:	3b01      	subs	r3, #1
 8005926:	d503      	bpl.n	8005930 <__sfp+0x28>
 8005928:	6833      	ldr	r3, [r6, #0]
 800592a:	b30b      	cbz	r3, 8005970 <__sfp+0x68>
 800592c:	6836      	ldr	r6, [r6, #0]
 800592e:	e7f7      	b.n	8005920 <__sfp+0x18>
 8005930:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8005934:	b9d5      	cbnz	r5, 800596c <__sfp+0x64>
 8005936:	4b16      	ldr	r3, [pc, #88]	; (8005990 <__sfp+0x88>)
 8005938:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800593c:	60e3      	str	r3, [r4, #12]
 800593e:	6665      	str	r5, [r4, #100]	; 0x64
 8005940:	f000 f86c 	bl	8005a1c <__retarget_lock_init_recursive>
 8005944:	f7ff ff96 	bl	8005874 <__sfp_lock_release>
 8005948:	2208      	movs	r2, #8
 800594a:	4629      	mov	r1, r5
 800594c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8005950:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8005954:	6025      	str	r5, [r4, #0]
 8005956:	61a5      	str	r5, [r4, #24]
 8005958:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800595c:	f000 f86f 	bl	8005a3e <memset>
 8005960:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8005964:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8005968:	4620      	mov	r0, r4
 800596a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800596c:	3468      	adds	r4, #104	; 0x68
 800596e:	e7d9      	b.n	8005924 <__sfp+0x1c>
 8005970:	2104      	movs	r1, #4
 8005972:	4638      	mov	r0, r7
 8005974:	f7ff ff62 	bl	800583c <__sfmoreglue>
 8005978:	4604      	mov	r4, r0
 800597a:	6030      	str	r0, [r6, #0]
 800597c:	2800      	cmp	r0, #0
 800597e:	d1d5      	bne.n	800592c <__sfp+0x24>
 8005980:	f7ff ff78 	bl	8005874 <__sfp_lock_release>
 8005984:	230c      	movs	r3, #12
 8005986:	603b      	str	r3, [r7, #0]
 8005988:	e7ee      	b.n	8005968 <__sfp+0x60>
 800598a:	bf00      	nop
 800598c:	08006d58 	.word	0x08006d58
 8005990:	ffff0001 	.word	0xffff0001

08005994 <_fwalk_reent>:
 8005994:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005998:	4606      	mov	r6, r0
 800599a:	4688      	mov	r8, r1
 800599c:	2700      	movs	r7, #0
 800599e:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80059a2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80059a6:	f1b9 0901 	subs.w	r9, r9, #1
 80059aa:	d505      	bpl.n	80059b8 <_fwalk_reent+0x24>
 80059ac:	6824      	ldr	r4, [r4, #0]
 80059ae:	2c00      	cmp	r4, #0
 80059b0:	d1f7      	bne.n	80059a2 <_fwalk_reent+0xe>
 80059b2:	4638      	mov	r0, r7
 80059b4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80059b8:	89ab      	ldrh	r3, [r5, #12]
 80059ba:	2b01      	cmp	r3, #1
 80059bc:	d907      	bls.n	80059ce <_fwalk_reent+0x3a>
 80059be:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80059c2:	3301      	adds	r3, #1
 80059c4:	d003      	beq.n	80059ce <_fwalk_reent+0x3a>
 80059c6:	4629      	mov	r1, r5
 80059c8:	4630      	mov	r0, r6
 80059ca:	47c0      	blx	r8
 80059cc:	4307      	orrs	r7, r0
 80059ce:	3568      	adds	r5, #104	; 0x68
 80059d0:	e7e9      	b.n	80059a6 <_fwalk_reent+0x12>
	...

080059d4 <__libc_init_array>:
 80059d4:	b570      	push	{r4, r5, r6, lr}
 80059d6:	2600      	movs	r6, #0
 80059d8:	4d0c      	ldr	r5, [pc, #48]	; (8005a0c <__libc_init_array+0x38>)
 80059da:	4c0d      	ldr	r4, [pc, #52]	; (8005a10 <__libc_init_array+0x3c>)
 80059dc:	1b64      	subs	r4, r4, r5
 80059de:	10a4      	asrs	r4, r4, #2
 80059e0:	42a6      	cmp	r6, r4
 80059e2:	d109      	bne.n	80059f8 <__libc_init_array+0x24>
 80059e4:	f001 f88c 	bl	8006b00 <_init>
 80059e8:	2600      	movs	r6, #0
 80059ea:	4d0a      	ldr	r5, [pc, #40]	; (8005a14 <__libc_init_array+0x40>)
 80059ec:	4c0a      	ldr	r4, [pc, #40]	; (8005a18 <__libc_init_array+0x44>)
 80059ee:	1b64      	subs	r4, r4, r5
 80059f0:	10a4      	asrs	r4, r4, #2
 80059f2:	42a6      	cmp	r6, r4
 80059f4:	d105      	bne.n	8005a02 <__libc_init_array+0x2e>
 80059f6:	bd70      	pop	{r4, r5, r6, pc}
 80059f8:	f855 3b04 	ldr.w	r3, [r5], #4
 80059fc:	4798      	blx	r3
 80059fe:	3601      	adds	r6, #1
 8005a00:	e7ee      	b.n	80059e0 <__libc_init_array+0xc>
 8005a02:	f855 3b04 	ldr.w	r3, [r5], #4
 8005a06:	4798      	blx	r3
 8005a08:	3601      	adds	r6, #1
 8005a0a:	e7f2      	b.n	80059f2 <__libc_init_array+0x1e>
 8005a0c:	08006d90 	.word	0x08006d90
 8005a10:	08006d90 	.word	0x08006d90
 8005a14:	08006d90 	.word	0x08006d90
 8005a18:	08006d94 	.word	0x08006d94

08005a1c <__retarget_lock_init_recursive>:
 8005a1c:	4770      	bx	lr

08005a1e <__retarget_lock_acquire_recursive>:
 8005a1e:	4770      	bx	lr

08005a20 <__retarget_lock_release_recursive>:
 8005a20:	4770      	bx	lr

08005a22 <memcpy>:
 8005a22:	440a      	add	r2, r1
 8005a24:	4291      	cmp	r1, r2
 8005a26:	f100 33ff 	add.w	r3, r0, #4294967295
 8005a2a:	d100      	bne.n	8005a2e <memcpy+0xc>
 8005a2c:	4770      	bx	lr
 8005a2e:	b510      	push	{r4, lr}
 8005a30:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005a34:	4291      	cmp	r1, r2
 8005a36:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005a3a:	d1f9      	bne.n	8005a30 <memcpy+0xe>
 8005a3c:	bd10      	pop	{r4, pc}

08005a3e <memset>:
 8005a3e:	4603      	mov	r3, r0
 8005a40:	4402      	add	r2, r0
 8005a42:	4293      	cmp	r3, r2
 8005a44:	d100      	bne.n	8005a48 <memset+0xa>
 8005a46:	4770      	bx	lr
 8005a48:	f803 1b01 	strb.w	r1, [r3], #1
 8005a4c:	e7f9      	b.n	8005a42 <memset+0x4>
	...

08005a50 <sbrk_aligned>:
 8005a50:	b570      	push	{r4, r5, r6, lr}
 8005a52:	4e0e      	ldr	r6, [pc, #56]	; (8005a8c <sbrk_aligned+0x3c>)
 8005a54:	460c      	mov	r4, r1
 8005a56:	6831      	ldr	r1, [r6, #0]
 8005a58:	4605      	mov	r5, r0
 8005a5a:	b911      	cbnz	r1, 8005a62 <sbrk_aligned+0x12>
 8005a5c:	f000 f984 	bl	8005d68 <_sbrk_r>
 8005a60:	6030      	str	r0, [r6, #0]
 8005a62:	4621      	mov	r1, r4
 8005a64:	4628      	mov	r0, r5
 8005a66:	f000 f97f 	bl	8005d68 <_sbrk_r>
 8005a6a:	1c43      	adds	r3, r0, #1
 8005a6c:	d00a      	beq.n	8005a84 <sbrk_aligned+0x34>
 8005a6e:	1cc4      	adds	r4, r0, #3
 8005a70:	f024 0403 	bic.w	r4, r4, #3
 8005a74:	42a0      	cmp	r0, r4
 8005a76:	d007      	beq.n	8005a88 <sbrk_aligned+0x38>
 8005a78:	1a21      	subs	r1, r4, r0
 8005a7a:	4628      	mov	r0, r5
 8005a7c:	f000 f974 	bl	8005d68 <_sbrk_r>
 8005a80:	3001      	adds	r0, #1
 8005a82:	d101      	bne.n	8005a88 <sbrk_aligned+0x38>
 8005a84:	f04f 34ff 	mov.w	r4, #4294967295
 8005a88:	4620      	mov	r0, r4
 8005a8a:	bd70      	pop	{r4, r5, r6, pc}
 8005a8c:	20001c18 	.word	0x20001c18

08005a90 <_malloc_r>:
 8005a90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005a94:	1ccd      	adds	r5, r1, #3
 8005a96:	f025 0503 	bic.w	r5, r5, #3
 8005a9a:	3508      	adds	r5, #8
 8005a9c:	2d0c      	cmp	r5, #12
 8005a9e:	bf38      	it	cc
 8005aa0:	250c      	movcc	r5, #12
 8005aa2:	2d00      	cmp	r5, #0
 8005aa4:	4607      	mov	r7, r0
 8005aa6:	db01      	blt.n	8005aac <_malloc_r+0x1c>
 8005aa8:	42a9      	cmp	r1, r5
 8005aaa:	d905      	bls.n	8005ab8 <_malloc_r+0x28>
 8005aac:	230c      	movs	r3, #12
 8005aae:	2600      	movs	r6, #0
 8005ab0:	603b      	str	r3, [r7, #0]
 8005ab2:	4630      	mov	r0, r6
 8005ab4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005ab8:	4e2e      	ldr	r6, [pc, #184]	; (8005b74 <_malloc_r+0xe4>)
 8005aba:	f000 fc8f 	bl	80063dc <__malloc_lock>
 8005abe:	6833      	ldr	r3, [r6, #0]
 8005ac0:	461c      	mov	r4, r3
 8005ac2:	bb34      	cbnz	r4, 8005b12 <_malloc_r+0x82>
 8005ac4:	4629      	mov	r1, r5
 8005ac6:	4638      	mov	r0, r7
 8005ac8:	f7ff ffc2 	bl	8005a50 <sbrk_aligned>
 8005acc:	1c43      	adds	r3, r0, #1
 8005ace:	4604      	mov	r4, r0
 8005ad0:	d14d      	bne.n	8005b6e <_malloc_r+0xde>
 8005ad2:	6834      	ldr	r4, [r6, #0]
 8005ad4:	4626      	mov	r6, r4
 8005ad6:	2e00      	cmp	r6, #0
 8005ad8:	d140      	bne.n	8005b5c <_malloc_r+0xcc>
 8005ada:	6823      	ldr	r3, [r4, #0]
 8005adc:	4631      	mov	r1, r6
 8005ade:	4638      	mov	r0, r7
 8005ae0:	eb04 0803 	add.w	r8, r4, r3
 8005ae4:	f000 f940 	bl	8005d68 <_sbrk_r>
 8005ae8:	4580      	cmp	r8, r0
 8005aea:	d13a      	bne.n	8005b62 <_malloc_r+0xd2>
 8005aec:	6821      	ldr	r1, [r4, #0]
 8005aee:	3503      	adds	r5, #3
 8005af0:	1a6d      	subs	r5, r5, r1
 8005af2:	f025 0503 	bic.w	r5, r5, #3
 8005af6:	3508      	adds	r5, #8
 8005af8:	2d0c      	cmp	r5, #12
 8005afa:	bf38      	it	cc
 8005afc:	250c      	movcc	r5, #12
 8005afe:	4638      	mov	r0, r7
 8005b00:	4629      	mov	r1, r5
 8005b02:	f7ff ffa5 	bl	8005a50 <sbrk_aligned>
 8005b06:	3001      	adds	r0, #1
 8005b08:	d02b      	beq.n	8005b62 <_malloc_r+0xd2>
 8005b0a:	6823      	ldr	r3, [r4, #0]
 8005b0c:	442b      	add	r3, r5
 8005b0e:	6023      	str	r3, [r4, #0]
 8005b10:	e00e      	b.n	8005b30 <_malloc_r+0xa0>
 8005b12:	6822      	ldr	r2, [r4, #0]
 8005b14:	1b52      	subs	r2, r2, r5
 8005b16:	d41e      	bmi.n	8005b56 <_malloc_r+0xc6>
 8005b18:	2a0b      	cmp	r2, #11
 8005b1a:	d916      	bls.n	8005b4a <_malloc_r+0xba>
 8005b1c:	1961      	adds	r1, r4, r5
 8005b1e:	42a3      	cmp	r3, r4
 8005b20:	6025      	str	r5, [r4, #0]
 8005b22:	bf18      	it	ne
 8005b24:	6059      	strne	r1, [r3, #4]
 8005b26:	6863      	ldr	r3, [r4, #4]
 8005b28:	bf08      	it	eq
 8005b2a:	6031      	streq	r1, [r6, #0]
 8005b2c:	5162      	str	r2, [r4, r5]
 8005b2e:	604b      	str	r3, [r1, #4]
 8005b30:	4638      	mov	r0, r7
 8005b32:	f104 060b 	add.w	r6, r4, #11
 8005b36:	f000 fc57 	bl	80063e8 <__malloc_unlock>
 8005b3a:	f026 0607 	bic.w	r6, r6, #7
 8005b3e:	1d23      	adds	r3, r4, #4
 8005b40:	1af2      	subs	r2, r6, r3
 8005b42:	d0b6      	beq.n	8005ab2 <_malloc_r+0x22>
 8005b44:	1b9b      	subs	r3, r3, r6
 8005b46:	50a3      	str	r3, [r4, r2]
 8005b48:	e7b3      	b.n	8005ab2 <_malloc_r+0x22>
 8005b4a:	6862      	ldr	r2, [r4, #4]
 8005b4c:	42a3      	cmp	r3, r4
 8005b4e:	bf0c      	ite	eq
 8005b50:	6032      	streq	r2, [r6, #0]
 8005b52:	605a      	strne	r2, [r3, #4]
 8005b54:	e7ec      	b.n	8005b30 <_malloc_r+0xa0>
 8005b56:	4623      	mov	r3, r4
 8005b58:	6864      	ldr	r4, [r4, #4]
 8005b5a:	e7b2      	b.n	8005ac2 <_malloc_r+0x32>
 8005b5c:	4634      	mov	r4, r6
 8005b5e:	6876      	ldr	r6, [r6, #4]
 8005b60:	e7b9      	b.n	8005ad6 <_malloc_r+0x46>
 8005b62:	230c      	movs	r3, #12
 8005b64:	4638      	mov	r0, r7
 8005b66:	603b      	str	r3, [r7, #0]
 8005b68:	f000 fc3e 	bl	80063e8 <__malloc_unlock>
 8005b6c:	e7a1      	b.n	8005ab2 <_malloc_r+0x22>
 8005b6e:	6025      	str	r5, [r4, #0]
 8005b70:	e7de      	b.n	8005b30 <_malloc_r+0xa0>
 8005b72:	bf00      	nop
 8005b74:	20001c14 	.word	0x20001c14

08005b78 <iprintf>:
 8005b78:	b40f      	push	{r0, r1, r2, r3}
 8005b7a:	4b0a      	ldr	r3, [pc, #40]	; (8005ba4 <iprintf+0x2c>)
 8005b7c:	b513      	push	{r0, r1, r4, lr}
 8005b7e:	681c      	ldr	r4, [r3, #0]
 8005b80:	b124      	cbz	r4, 8005b8c <iprintf+0x14>
 8005b82:	69a3      	ldr	r3, [r4, #24]
 8005b84:	b913      	cbnz	r3, 8005b8c <iprintf+0x14>
 8005b86:	4620      	mov	r0, r4
 8005b88:	f7ff fe86 	bl	8005898 <__sinit>
 8005b8c:	ab05      	add	r3, sp, #20
 8005b8e:	4620      	mov	r0, r4
 8005b90:	9a04      	ldr	r2, [sp, #16]
 8005b92:	68a1      	ldr	r1, [r4, #8]
 8005b94:	9301      	str	r3, [sp, #4]
 8005b96:	f000 fc9d 	bl	80064d4 <_vfiprintf_r>
 8005b9a:	b002      	add	sp, #8
 8005b9c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005ba0:	b004      	add	sp, #16
 8005ba2:	4770      	bx	lr
 8005ba4:	20000014 	.word	0x20000014

08005ba8 <_puts_r>:
 8005ba8:	b570      	push	{r4, r5, r6, lr}
 8005baa:	460e      	mov	r6, r1
 8005bac:	4605      	mov	r5, r0
 8005bae:	b118      	cbz	r0, 8005bb8 <_puts_r+0x10>
 8005bb0:	6983      	ldr	r3, [r0, #24]
 8005bb2:	b90b      	cbnz	r3, 8005bb8 <_puts_r+0x10>
 8005bb4:	f7ff fe70 	bl	8005898 <__sinit>
 8005bb8:	69ab      	ldr	r3, [r5, #24]
 8005bba:	68ac      	ldr	r4, [r5, #8]
 8005bbc:	b913      	cbnz	r3, 8005bc4 <_puts_r+0x1c>
 8005bbe:	4628      	mov	r0, r5
 8005bc0:	f7ff fe6a 	bl	8005898 <__sinit>
 8005bc4:	4b2c      	ldr	r3, [pc, #176]	; (8005c78 <_puts_r+0xd0>)
 8005bc6:	429c      	cmp	r4, r3
 8005bc8:	d120      	bne.n	8005c0c <_puts_r+0x64>
 8005bca:	686c      	ldr	r4, [r5, #4]
 8005bcc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005bce:	07db      	lsls	r3, r3, #31
 8005bd0:	d405      	bmi.n	8005bde <_puts_r+0x36>
 8005bd2:	89a3      	ldrh	r3, [r4, #12]
 8005bd4:	0598      	lsls	r0, r3, #22
 8005bd6:	d402      	bmi.n	8005bde <_puts_r+0x36>
 8005bd8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005bda:	f7ff ff20 	bl	8005a1e <__retarget_lock_acquire_recursive>
 8005bde:	89a3      	ldrh	r3, [r4, #12]
 8005be0:	0719      	lsls	r1, r3, #28
 8005be2:	d51d      	bpl.n	8005c20 <_puts_r+0x78>
 8005be4:	6923      	ldr	r3, [r4, #16]
 8005be6:	b1db      	cbz	r3, 8005c20 <_puts_r+0x78>
 8005be8:	3e01      	subs	r6, #1
 8005bea:	68a3      	ldr	r3, [r4, #8]
 8005bec:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8005bf0:	3b01      	subs	r3, #1
 8005bf2:	60a3      	str	r3, [r4, #8]
 8005bf4:	bb39      	cbnz	r1, 8005c46 <_puts_r+0x9e>
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	da38      	bge.n	8005c6c <_puts_r+0xc4>
 8005bfa:	4622      	mov	r2, r4
 8005bfc:	210a      	movs	r1, #10
 8005bfe:	4628      	mov	r0, r5
 8005c00:	f000 f9cc 	bl	8005f9c <__swbuf_r>
 8005c04:	3001      	adds	r0, #1
 8005c06:	d011      	beq.n	8005c2c <_puts_r+0x84>
 8005c08:	250a      	movs	r5, #10
 8005c0a:	e011      	b.n	8005c30 <_puts_r+0x88>
 8005c0c:	4b1b      	ldr	r3, [pc, #108]	; (8005c7c <_puts_r+0xd4>)
 8005c0e:	429c      	cmp	r4, r3
 8005c10:	d101      	bne.n	8005c16 <_puts_r+0x6e>
 8005c12:	68ac      	ldr	r4, [r5, #8]
 8005c14:	e7da      	b.n	8005bcc <_puts_r+0x24>
 8005c16:	4b1a      	ldr	r3, [pc, #104]	; (8005c80 <_puts_r+0xd8>)
 8005c18:	429c      	cmp	r4, r3
 8005c1a:	bf08      	it	eq
 8005c1c:	68ec      	ldreq	r4, [r5, #12]
 8005c1e:	e7d5      	b.n	8005bcc <_puts_r+0x24>
 8005c20:	4621      	mov	r1, r4
 8005c22:	4628      	mov	r0, r5
 8005c24:	f000 fa1e 	bl	8006064 <__swsetup_r>
 8005c28:	2800      	cmp	r0, #0
 8005c2a:	d0dd      	beq.n	8005be8 <_puts_r+0x40>
 8005c2c:	f04f 35ff 	mov.w	r5, #4294967295
 8005c30:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005c32:	07da      	lsls	r2, r3, #31
 8005c34:	d405      	bmi.n	8005c42 <_puts_r+0x9a>
 8005c36:	89a3      	ldrh	r3, [r4, #12]
 8005c38:	059b      	lsls	r3, r3, #22
 8005c3a:	d402      	bmi.n	8005c42 <_puts_r+0x9a>
 8005c3c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005c3e:	f7ff feef 	bl	8005a20 <__retarget_lock_release_recursive>
 8005c42:	4628      	mov	r0, r5
 8005c44:	bd70      	pop	{r4, r5, r6, pc}
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	da04      	bge.n	8005c54 <_puts_r+0xac>
 8005c4a:	69a2      	ldr	r2, [r4, #24]
 8005c4c:	429a      	cmp	r2, r3
 8005c4e:	dc06      	bgt.n	8005c5e <_puts_r+0xb6>
 8005c50:	290a      	cmp	r1, #10
 8005c52:	d004      	beq.n	8005c5e <_puts_r+0xb6>
 8005c54:	6823      	ldr	r3, [r4, #0]
 8005c56:	1c5a      	adds	r2, r3, #1
 8005c58:	6022      	str	r2, [r4, #0]
 8005c5a:	7019      	strb	r1, [r3, #0]
 8005c5c:	e7c5      	b.n	8005bea <_puts_r+0x42>
 8005c5e:	4622      	mov	r2, r4
 8005c60:	4628      	mov	r0, r5
 8005c62:	f000 f99b 	bl	8005f9c <__swbuf_r>
 8005c66:	3001      	adds	r0, #1
 8005c68:	d1bf      	bne.n	8005bea <_puts_r+0x42>
 8005c6a:	e7df      	b.n	8005c2c <_puts_r+0x84>
 8005c6c:	250a      	movs	r5, #10
 8005c6e:	6823      	ldr	r3, [r4, #0]
 8005c70:	1c5a      	adds	r2, r3, #1
 8005c72:	6022      	str	r2, [r4, #0]
 8005c74:	701d      	strb	r5, [r3, #0]
 8005c76:	e7db      	b.n	8005c30 <_puts_r+0x88>
 8005c78:	08006d18 	.word	0x08006d18
 8005c7c:	08006d38 	.word	0x08006d38
 8005c80:	08006cf8 	.word	0x08006cf8

08005c84 <puts>:
 8005c84:	4b02      	ldr	r3, [pc, #8]	; (8005c90 <puts+0xc>)
 8005c86:	4601      	mov	r1, r0
 8005c88:	6818      	ldr	r0, [r3, #0]
 8005c8a:	f7ff bf8d 	b.w	8005ba8 <_puts_r>
 8005c8e:	bf00      	nop
 8005c90:	20000014 	.word	0x20000014

08005c94 <cleanup_glue>:
 8005c94:	b538      	push	{r3, r4, r5, lr}
 8005c96:	460c      	mov	r4, r1
 8005c98:	6809      	ldr	r1, [r1, #0]
 8005c9a:	4605      	mov	r5, r0
 8005c9c:	b109      	cbz	r1, 8005ca2 <cleanup_glue+0xe>
 8005c9e:	f7ff fff9 	bl	8005c94 <cleanup_glue>
 8005ca2:	4621      	mov	r1, r4
 8005ca4:	4628      	mov	r0, r5
 8005ca6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005caa:	f000 bba3 	b.w	80063f4 <_free_r>
	...

08005cb0 <_reclaim_reent>:
 8005cb0:	4b2c      	ldr	r3, [pc, #176]	; (8005d64 <_reclaim_reent+0xb4>)
 8005cb2:	b570      	push	{r4, r5, r6, lr}
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	4604      	mov	r4, r0
 8005cb8:	4283      	cmp	r3, r0
 8005cba:	d051      	beq.n	8005d60 <_reclaim_reent+0xb0>
 8005cbc:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8005cbe:	b143      	cbz	r3, 8005cd2 <_reclaim_reent+0x22>
 8005cc0:	68db      	ldr	r3, [r3, #12]
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d14a      	bne.n	8005d5c <_reclaim_reent+0xac>
 8005cc6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005cc8:	6819      	ldr	r1, [r3, #0]
 8005cca:	b111      	cbz	r1, 8005cd2 <_reclaim_reent+0x22>
 8005ccc:	4620      	mov	r0, r4
 8005cce:	f000 fb91 	bl	80063f4 <_free_r>
 8005cd2:	6961      	ldr	r1, [r4, #20]
 8005cd4:	b111      	cbz	r1, 8005cdc <_reclaim_reent+0x2c>
 8005cd6:	4620      	mov	r0, r4
 8005cd8:	f000 fb8c 	bl	80063f4 <_free_r>
 8005cdc:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8005cde:	b111      	cbz	r1, 8005ce6 <_reclaim_reent+0x36>
 8005ce0:	4620      	mov	r0, r4
 8005ce2:	f000 fb87 	bl	80063f4 <_free_r>
 8005ce6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8005ce8:	b111      	cbz	r1, 8005cf0 <_reclaim_reent+0x40>
 8005cea:	4620      	mov	r0, r4
 8005cec:	f000 fb82 	bl	80063f4 <_free_r>
 8005cf0:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8005cf2:	b111      	cbz	r1, 8005cfa <_reclaim_reent+0x4a>
 8005cf4:	4620      	mov	r0, r4
 8005cf6:	f000 fb7d 	bl	80063f4 <_free_r>
 8005cfa:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8005cfc:	b111      	cbz	r1, 8005d04 <_reclaim_reent+0x54>
 8005cfe:	4620      	mov	r0, r4
 8005d00:	f000 fb78 	bl	80063f4 <_free_r>
 8005d04:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8005d06:	b111      	cbz	r1, 8005d0e <_reclaim_reent+0x5e>
 8005d08:	4620      	mov	r0, r4
 8005d0a:	f000 fb73 	bl	80063f4 <_free_r>
 8005d0e:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8005d10:	b111      	cbz	r1, 8005d18 <_reclaim_reent+0x68>
 8005d12:	4620      	mov	r0, r4
 8005d14:	f000 fb6e 	bl	80063f4 <_free_r>
 8005d18:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005d1a:	b111      	cbz	r1, 8005d22 <_reclaim_reent+0x72>
 8005d1c:	4620      	mov	r0, r4
 8005d1e:	f000 fb69 	bl	80063f4 <_free_r>
 8005d22:	69a3      	ldr	r3, [r4, #24]
 8005d24:	b1e3      	cbz	r3, 8005d60 <_reclaim_reent+0xb0>
 8005d26:	4620      	mov	r0, r4
 8005d28:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8005d2a:	4798      	blx	r3
 8005d2c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8005d2e:	b1b9      	cbz	r1, 8005d60 <_reclaim_reent+0xb0>
 8005d30:	4620      	mov	r0, r4
 8005d32:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8005d36:	f7ff bfad 	b.w	8005c94 <cleanup_glue>
 8005d3a:	5949      	ldr	r1, [r1, r5]
 8005d3c:	b941      	cbnz	r1, 8005d50 <_reclaim_reent+0xa0>
 8005d3e:	3504      	adds	r5, #4
 8005d40:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005d42:	2d80      	cmp	r5, #128	; 0x80
 8005d44:	68d9      	ldr	r1, [r3, #12]
 8005d46:	d1f8      	bne.n	8005d3a <_reclaim_reent+0x8a>
 8005d48:	4620      	mov	r0, r4
 8005d4a:	f000 fb53 	bl	80063f4 <_free_r>
 8005d4e:	e7ba      	b.n	8005cc6 <_reclaim_reent+0x16>
 8005d50:	680e      	ldr	r6, [r1, #0]
 8005d52:	4620      	mov	r0, r4
 8005d54:	f000 fb4e 	bl	80063f4 <_free_r>
 8005d58:	4631      	mov	r1, r6
 8005d5a:	e7ef      	b.n	8005d3c <_reclaim_reent+0x8c>
 8005d5c:	2500      	movs	r5, #0
 8005d5e:	e7ef      	b.n	8005d40 <_reclaim_reent+0x90>
 8005d60:	bd70      	pop	{r4, r5, r6, pc}
 8005d62:	bf00      	nop
 8005d64:	20000014 	.word	0x20000014

08005d68 <_sbrk_r>:
 8005d68:	b538      	push	{r3, r4, r5, lr}
 8005d6a:	2300      	movs	r3, #0
 8005d6c:	4d05      	ldr	r5, [pc, #20]	; (8005d84 <_sbrk_r+0x1c>)
 8005d6e:	4604      	mov	r4, r0
 8005d70:	4608      	mov	r0, r1
 8005d72:	602b      	str	r3, [r5, #0]
 8005d74:	f000 feb6 	bl	8006ae4 <_sbrk>
 8005d78:	1c43      	adds	r3, r0, #1
 8005d7a:	d102      	bne.n	8005d82 <_sbrk_r+0x1a>
 8005d7c:	682b      	ldr	r3, [r5, #0]
 8005d7e:	b103      	cbz	r3, 8005d82 <_sbrk_r+0x1a>
 8005d80:	6023      	str	r3, [r4, #0]
 8005d82:	bd38      	pop	{r3, r4, r5, pc}
 8005d84:	20001c1c 	.word	0x20001c1c

08005d88 <setvbuf>:
 8005d88:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8005d8c:	461d      	mov	r5, r3
 8005d8e:	4b5d      	ldr	r3, [pc, #372]	; (8005f04 <setvbuf+0x17c>)
 8005d90:	4604      	mov	r4, r0
 8005d92:	681f      	ldr	r7, [r3, #0]
 8005d94:	460e      	mov	r6, r1
 8005d96:	4690      	mov	r8, r2
 8005d98:	b127      	cbz	r7, 8005da4 <setvbuf+0x1c>
 8005d9a:	69bb      	ldr	r3, [r7, #24]
 8005d9c:	b913      	cbnz	r3, 8005da4 <setvbuf+0x1c>
 8005d9e:	4638      	mov	r0, r7
 8005da0:	f7ff fd7a 	bl	8005898 <__sinit>
 8005da4:	4b58      	ldr	r3, [pc, #352]	; (8005f08 <setvbuf+0x180>)
 8005da6:	429c      	cmp	r4, r3
 8005da8:	d167      	bne.n	8005e7a <setvbuf+0xf2>
 8005daa:	687c      	ldr	r4, [r7, #4]
 8005dac:	f1b8 0f02 	cmp.w	r8, #2
 8005db0:	d006      	beq.n	8005dc0 <setvbuf+0x38>
 8005db2:	f1b8 0f01 	cmp.w	r8, #1
 8005db6:	f200 809f 	bhi.w	8005ef8 <setvbuf+0x170>
 8005dba:	2d00      	cmp	r5, #0
 8005dbc:	f2c0 809c 	blt.w	8005ef8 <setvbuf+0x170>
 8005dc0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005dc2:	07db      	lsls	r3, r3, #31
 8005dc4:	d405      	bmi.n	8005dd2 <setvbuf+0x4a>
 8005dc6:	89a3      	ldrh	r3, [r4, #12]
 8005dc8:	0598      	lsls	r0, r3, #22
 8005dca:	d402      	bmi.n	8005dd2 <setvbuf+0x4a>
 8005dcc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005dce:	f7ff fe26 	bl	8005a1e <__retarget_lock_acquire_recursive>
 8005dd2:	4621      	mov	r1, r4
 8005dd4:	4638      	mov	r0, r7
 8005dd6:	f000 fa45 	bl	8006264 <_fflush_r>
 8005dda:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005ddc:	b141      	cbz	r1, 8005df0 <setvbuf+0x68>
 8005dde:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005de2:	4299      	cmp	r1, r3
 8005de4:	d002      	beq.n	8005dec <setvbuf+0x64>
 8005de6:	4638      	mov	r0, r7
 8005de8:	f000 fb04 	bl	80063f4 <_free_r>
 8005dec:	2300      	movs	r3, #0
 8005dee:	6363      	str	r3, [r4, #52]	; 0x34
 8005df0:	2300      	movs	r3, #0
 8005df2:	61a3      	str	r3, [r4, #24]
 8005df4:	6063      	str	r3, [r4, #4]
 8005df6:	89a3      	ldrh	r3, [r4, #12]
 8005df8:	0619      	lsls	r1, r3, #24
 8005dfa:	d503      	bpl.n	8005e04 <setvbuf+0x7c>
 8005dfc:	4638      	mov	r0, r7
 8005dfe:	6921      	ldr	r1, [r4, #16]
 8005e00:	f000 faf8 	bl	80063f4 <_free_r>
 8005e04:	89a3      	ldrh	r3, [r4, #12]
 8005e06:	f1b8 0f02 	cmp.w	r8, #2
 8005e0a:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 8005e0e:	f023 0303 	bic.w	r3, r3, #3
 8005e12:	81a3      	strh	r3, [r4, #12]
 8005e14:	d06c      	beq.n	8005ef0 <setvbuf+0x168>
 8005e16:	ab01      	add	r3, sp, #4
 8005e18:	466a      	mov	r2, sp
 8005e1a:	4621      	mov	r1, r4
 8005e1c:	4638      	mov	r0, r7
 8005e1e:	f000 fa6f 	bl	8006300 <__swhatbuf_r>
 8005e22:	89a3      	ldrh	r3, [r4, #12]
 8005e24:	4318      	orrs	r0, r3
 8005e26:	81a0      	strh	r0, [r4, #12]
 8005e28:	2d00      	cmp	r5, #0
 8005e2a:	d130      	bne.n	8005e8e <setvbuf+0x106>
 8005e2c:	9d00      	ldr	r5, [sp, #0]
 8005e2e:	4628      	mov	r0, r5
 8005e30:	f000 facc 	bl	80063cc <malloc>
 8005e34:	4606      	mov	r6, r0
 8005e36:	2800      	cmp	r0, #0
 8005e38:	d155      	bne.n	8005ee6 <setvbuf+0x15e>
 8005e3a:	f8dd 9000 	ldr.w	r9, [sp]
 8005e3e:	45a9      	cmp	r9, r5
 8005e40:	d14a      	bne.n	8005ed8 <setvbuf+0x150>
 8005e42:	f04f 35ff 	mov.w	r5, #4294967295
 8005e46:	2200      	movs	r2, #0
 8005e48:	60a2      	str	r2, [r4, #8]
 8005e4a:	f104 0247 	add.w	r2, r4, #71	; 0x47
 8005e4e:	6022      	str	r2, [r4, #0]
 8005e50:	6122      	str	r2, [r4, #16]
 8005e52:	2201      	movs	r2, #1
 8005e54:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005e58:	6162      	str	r2, [r4, #20]
 8005e5a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005e5c:	f043 0302 	orr.w	r3, r3, #2
 8005e60:	07d2      	lsls	r2, r2, #31
 8005e62:	81a3      	strh	r3, [r4, #12]
 8005e64:	d405      	bmi.n	8005e72 <setvbuf+0xea>
 8005e66:	f413 7f00 	tst.w	r3, #512	; 0x200
 8005e6a:	d102      	bne.n	8005e72 <setvbuf+0xea>
 8005e6c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005e6e:	f7ff fdd7 	bl	8005a20 <__retarget_lock_release_recursive>
 8005e72:	4628      	mov	r0, r5
 8005e74:	b003      	add	sp, #12
 8005e76:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005e7a:	4b24      	ldr	r3, [pc, #144]	; (8005f0c <setvbuf+0x184>)
 8005e7c:	429c      	cmp	r4, r3
 8005e7e:	d101      	bne.n	8005e84 <setvbuf+0xfc>
 8005e80:	68bc      	ldr	r4, [r7, #8]
 8005e82:	e793      	b.n	8005dac <setvbuf+0x24>
 8005e84:	4b22      	ldr	r3, [pc, #136]	; (8005f10 <setvbuf+0x188>)
 8005e86:	429c      	cmp	r4, r3
 8005e88:	bf08      	it	eq
 8005e8a:	68fc      	ldreq	r4, [r7, #12]
 8005e8c:	e78e      	b.n	8005dac <setvbuf+0x24>
 8005e8e:	2e00      	cmp	r6, #0
 8005e90:	d0cd      	beq.n	8005e2e <setvbuf+0xa6>
 8005e92:	69bb      	ldr	r3, [r7, #24]
 8005e94:	b913      	cbnz	r3, 8005e9c <setvbuf+0x114>
 8005e96:	4638      	mov	r0, r7
 8005e98:	f7ff fcfe 	bl	8005898 <__sinit>
 8005e9c:	f1b8 0f01 	cmp.w	r8, #1
 8005ea0:	bf08      	it	eq
 8005ea2:	89a3      	ldrheq	r3, [r4, #12]
 8005ea4:	e9c4 6504 	strd	r6, r5, [r4, #16]
 8005ea8:	bf04      	itt	eq
 8005eaa:	f043 0301 	orreq.w	r3, r3, #1
 8005eae:	81a3      	strheq	r3, [r4, #12]
 8005eb0:	89a2      	ldrh	r2, [r4, #12]
 8005eb2:	6026      	str	r6, [r4, #0]
 8005eb4:	f012 0308 	ands.w	r3, r2, #8
 8005eb8:	d01c      	beq.n	8005ef4 <setvbuf+0x16c>
 8005eba:	07d3      	lsls	r3, r2, #31
 8005ebc:	bf41      	itttt	mi
 8005ebe:	2300      	movmi	r3, #0
 8005ec0:	426d      	negmi	r5, r5
 8005ec2:	60a3      	strmi	r3, [r4, #8]
 8005ec4:	61a5      	strmi	r5, [r4, #24]
 8005ec6:	bf58      	it	pl
 8005ec8:	60a5      	strpl	r5, [r4, #8]
 8005eca:	6e65      	ldr	r5, [r4, #100]	; 0x64
 8005ecc:	f015 0501 	ands.w	r5, r5, #1
 8005ed0:	d115      	bne.n	8005efe <setvbuf+0x176>
 8005ed2:	f412 7f00 	tst.w	r2, #512	; 0x200
 8005ed6:	e7c8      	b.n	8005e6a <setvbuf+0xe2>
 8005ed8:	4648      	mov	r0, r9
 8005eda:	f000 fa77 	bl	80063cc <malloc>
 8005ede:	4606      	mov	r6, r0
 8005ee0:	2800      	cmp	r0, #0
 8005ee2:	d0ae      	beq.n	8005e42 <setvbuf+0xba>
 8005ee4:	464d      	mov	r5, r9
 8005ee6:	89a3      	ldrh	r3, [r4, #12]
 8005ee8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005eec:	81a3      	strh	r3, [r4, #12]
 8005eee:	e7d0      	b.n	8005e92 <setvbuf+0x10a>
 8005ef0:	2500      	movs	r5, #0
 8005ef2:	e7a8      	b.n	8005e46 <setvbuf+0xbe>
 8005ef4:	60a3      	str	r3, [r4, #8]
 8005ef6:	e7e8      	b.n	8005eca <setvbuf+0x142>
 8005ef8:	f04f 35ff 	mov.w	r5, #4294967295
 8005efc:	e7b9      	b.n	8005e72 <setvbuf+0xea>
 8005efe:	2500      	movs	r5, #0
 8005f00:	e7b7      	b.n	8005e72 <setvbuf+0xea>
 8005f02:	bf00      	nop
 8005f04:	20000014 	.word	0x20000014
 8005f08:	08006d18 	.word	0x08006d18
 8005f0c:	08006d38 	.word	0x08006d38
 8005f10:	08006cf8 	.word	0x08006cf8

08005f14 <__sread>:
 8005f14:	b510      	push	{r4, lr}
 8005f16:	460c      	mov	r4, r1
 8005f18:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005f1c:	f000 fda0 	bl	8006a60 <_read_r>
 8005f20:	2800      	cmp	r0, #0
 8005f22:	bfab      	itete	ge
 8005f24:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005f26:	89a3      	ldrhlt	r3, [r4, #12]
 8005f28:	181b      	addge	r3, r3, r0
 8005f2a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005f2e:	bfac      	ite	ge
 8005f30:	6563      	strge	r3, [r4, #84]	; 0x54
 8005f32:	81a3      	strhlt	r3, [r4, #12]
 8005f34:	bd10      	pop	{r4, pc}

08005f36 <__swrite>:
 8005f36:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005f3a:	461f      	mov	r7, r3
 8005f3c:	898b      	ldrh	r3, [r1, #12]
 8005f3e:	4605      	mov	r5, r0
 8005f40:	05db      	lsls	r3, r3, #23
 8005f42:	460c      	mov	r4, r1
 8005f44:	4616      	mov	r6, r2
 8005f46:	d505      	bpl.n	8005f54 <__swrite+0x1e>
 8005f48:	2302      	movs	r3, #2
 8005f4a:	2200      	movs	r2, #0
 8005f4c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005f50:	f000 f9c4 	bl	80062dc <_lseek_r>
 8005f54:	89a3      	ldrh	r3, [r4, #12]
 8005f56:	4632      	mov	r2, r6
 8005f58:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005f5c:	81a3      	strh	r3, [r4, #12]
 8005f5e:	4628      	mov	r0, r5
 8005f60:	463b      	mov	r3, r7
 8005f62:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005f66:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005f6a:	f000 b869 	b.w	8006040 <_write_r>

08005f6e <__sseek>:
 8005f6e:	b510      	push	{r4, lr}
 8005f70:	460c      	mov	r4, r1
 8005f72:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005f76:	f000 f9b1 	bl	80062dc <_lseek_r>
 8005f7a:	1c43      	adds	r3, r0, #1
 8005f7c:	89a3      	ldrh	r3, [r4, #12]
 8005f7e:	bf15      	itete	ne
 8005f80:	6560      	strne	r0, [r4, #84]	; 0x54
 8005f82:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005f86:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005f8a:	81a3      	strheq	r3, [r4, #12]
 8005f8c:	bf18      	it	ne
 8005f8e:	81a3      	strhne	r3, [r4, #12]
 8005f90:	bd10      	pop	{r4, pc}

08005f92 <__sclose>:
 8005f92:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005f96:	f000 b8d3 	b.w	8006140 <_close_r>
	...

08005f9c <__swbuf_r>:
 8005f9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f9e:	460e      	mov	r6, r1
 8005fa0:	4614      	mov	r4, r2
 8005fa2:	4605      	mov	r5, r0
 8005fa4:	b118      	cbz	r0, 8005fae <__swbuf_r+0x12>
 8005fa6:	6983      	ldr	r3, [r0, #24]
 8005fa8:	b90b      	cbnz	r3, 8005fae <__swbuf_r+0x12>
 8005faa:	f7ff fc75 	bl	8005898 <__sinit>
 8005fae:	4b21      	ldr	r3, [pc, #132]	; (8006034 <__swbuf_r+0x98>)
 8005fb0:	429c      	cmp	r4, r3
 8005fb2:	d12b      	bne.n	800600c <__swbuf_r+0x70>
 8005fb4:	686c      	ldr	r4, [r5, #4]
 8005fb6:	69a3      	ldr	r3, [r4, #24]
 8005fb8:	60a3      	str	r3, [r4, #8]
 8005fba:	89a3      	ldrh	r3, [r4, #12]
 8005fbc:	071a      	lsls	r2, r3, #28
 8005fbe:	d52f      	bpl.n	8006020 <__swbuf_r+0x84>
 8005fc0:	6923      	ldr	r3, [r4, #16]
 8005fc2:	b36b      	cbz	r3, 8006020 <__swbuf_r+0x84>
 8005fc4:	6923      	ldr	r3, [r4, #16]
 8005fc6:	6820      	ldr	r0, [r4, #0]
 8005fc8:	b2f6      	uxtb	r6, r6
 8005fca:	1ac0      	subs	r0, r0, r3
 8005fcc:	6963      	ldr	r3, [r4, #20]
 8005fce:	4637      	mov	r7, r6
 8005fd0:	4283      	cmp	r3, r0
 8005fd2:	dc04      	bgt.n	8005fde <__swbuf_r+0x42>
 8005fd4:	4621      	mov	r1, r4
 8005fd6:	4628      	mov	r0, r5
 8005fd8:	f000 f944 	bl	8006264 <_fflush_r>
 8005fdc:	bb30      	cbnz	r0, 800602c <__swbuf_r+0x90>
 8005fde:	68a3      	ldr	r3, [r4, #8]
 8005fe0:	3001      	adds	r0, #1
 8005fe2:	3b01      	subs	r3, #1
 8005fe4:	60a3      	str	r3, [r4, #8]
 8005fe6:	6823      	ldr	r3, [r4, #0]
 8005fe8:	1c5a      	adds	r2, r3, #1
 8005fea:	6022      	str	r2, [r4, #0]
 8005fec:	701e      	strb	r6, [r3, #0]
 8005fee:	6963      	ldr	r3, [r4, #20]
 8005ff0:	4283      	cmp	r3, r0
 8005ff2:	d004      	beq.n	8005ffe <__swbuf_r+0x62>
 8005ff4:	89a3      	ldrh	r3, [r4, #12]
 8005ff6:	07db      	lsls	r3, r3, #31
 8005ff8:	d506      	bpl.n	8006008 <__swbuf_r+0x6c>
 8005ffa:	2e0a      	cmp	r6, #10
 8005ffc:	d104      	bne.n	8006008 <__swbuf_r+0x6c>
 8005ffe:	4621      	mov	r1, r4
 8006000:	4628      	mov	r0, r5
 8006002:	f000 f92f 	bl	8006264 <_fflush_r>
 8006006:	b988      	cbnz	r0, 800602c <__swbuf_r+0x90>
 8006008:	4638      	mov	r0, r7
 800600a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800600c:	4b0a      	ldr	r3, [pc, #40]	; (8006038 <__swbuf_r+0x9c>)
 800600e:	429c      	cmp	r4, r3
 8006010:	d101      	bne.n	8006016 <__swbuf_r+0x7a>
 8006012:	68ac      	ldr	r4, [r5, #8]
 8006014:	e7cf      	b.n	8005fb6 <__swbuf_r+0x1a>
 8006016:	4b09      	ldr	r3, [pc, #36]	; (800603c <__swbuf_r+0xa0>)
 8006018:	429c      	cmp	r4, r3
 800601a:	bf08      	it	eq
 800601c:	68ec      	ldreq	r4, [r5, #12]
 800601e:	e7ca      	b.n	8005fb6 <__swbuf_r+0x1a>
 8006020:	4621      	mov	r1, r4
 8006022:	4628      	mov	r0, r5
 8006024:	f000 f81e 	bl	8006064 <__swsetup_r>
 8006028:	2800      	cmp	r0, #0
 800602a:	d0cb      	beq.n	8005fc4 <__swbuf_r+0x28>
 800602c:	f04f 37ff 	mov.w	r7, #4294967295
 8006030:	e7ea      	b.n	8006008 <__swbuf_r+0x6c>
 8006032:	bf00      	nop
 8006034:	08006d18 	.word	0x08006d18
 8006038:	08006d38 	.word	0x08006d38
 800603c:	08006cf8 	.word	0x08006cf8

08006040 <_write_r>:
 8006040:	b538      	push	{r3, r4, r5, lr}
 8006042:	4604      	mov	r4, r0
 8006044:	4608      	mov	r0, r1
 8006046:	4611      	mov	r1, r2
 8006048:	2200      	movs	r2, #0
 800604a:	4d05      	ldr	r5, [pc, #20]	; (8006060 <_write_r+0x20>)
 800604c:	602a      	str	r2, [r5, #0]
 800604e:	461a      	mov	r2, r3
 8006050:	f7fa fade 	bl	8000610 <_write>
 8006054:	1c43      	adds	r3, r0, #1
 8006056:	d102      	bne.n	800605e <_write_r+0x1e>
 8006058:	682b      	ldr	r3, [r5, #0]
 800605a:	b103      	cbz	r3, 800605e <_write_r+0x1e>
 800605c:	6023      	str	r3, [r4, #0]
 800605e:	bd38      	pop	{r3, r4, r5, pc}
 8006060:	20001c1c 	.word	0x20001c1c

08006064 <__swsetup_r>:
 8006064:	4b32      	ldr	r3, [pc, #200]	; (8006130 <__swsetup_r+0xcc>)
 8006066:	b570      	push	{r4, r5, r6, lr}
 8006068:	681d      	ldr	r5, [r3, #0]
 800606a:	4606      	mov	r6, r0
 800606c:	460c      	mov	r4, r1
 800606e:	b125      	cbz	r5, 800607a <__swsetup_r+0x16>
 8006070:	69ab      	ldr	r3, [r5, #24]
 8006072:	b913      	cbnz	r3, 800607a <__swsetup_r+0x16>
 8006074:	4628      	mov	r0, r5
 8006076:	f7ff fc0f 	bl	8005898 <__sinit>
 800607a:	4b2e      	ldr	r3, [pc, #184]	; (8006134 <__swsetup_r+0xd0>)
 800607c:	429c      	cmp	r4, r3
 800607e:	d10f      	bne.n	80060a0 <__swsetup_r+0x3c>
 8006080:	686c      	ldr	r4, [r5, #4]
 8006082:	89a3      	ldrh	r3, [r4, #12]
 8006084:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006088:	0719      	lsls	r1, r3, #28
 800608a:	d42c      	bmi.n	80060e6 <__swsetup_r+0x82>
 800608c:	06dd      	lsls	r5, r3, #27
 800608e:	d411      	bmi.n	80060b4 <__swsetup_r+0x50>
 8006090:	2309      	movs	r3, #9
 8006092:	6033      	str	r3, [r6, #0]
 8006094:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006098:	f04f 30ff 	mov.w	r0, #4294967295
 800609c:	81a3      	strh	r3, [r4, #12]
 800609e:	e03e      	b.n	800611e <__swsetup_r+0xba>
 80060a0:	4b25      	ldr	r3, [pc, #148]	; (8006138 <__swsetup_r+0xd4>)
 80060a2:	429c      	cmp	r4, r3
 80060a4:	d101      	bne.n	80060aa <__swsetup_r+0x46>
 80060a6:	68ac      	ldr	r4, [r5, #8]
 80060a8:	e7eb      	b.n	8006082 <__swsetup_r+0x1e>
 80060aa:	4b24      	ldr	r3, [pc, #144]	; (800613c <__swsetup_r+0xd8>)
 80060ac:	429c      	cmp	r4, r3
 80060ae:	bf08      	it	eq
 80060b0:	68ec      	ldreq	r4, [r5, #12]
 80060b2:	e7e6      	b.n	8006082 <__swsetup_r+0x1e>
 80060b4:	0758      	lsls	r0, r3, #29
 80060b6:	d512      	bpl.n	80060de <__swsetup_r+0x7a>
 80060b8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80060ba:	b141      	cbz	r1, 80060ce <__swsetup_r+0x6a>
 80060bc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80060c0:	4299      	cmp	r1, r3
 80060c2:	d002      	beq.n	80060ca <__swsetup_r+0x66>
 80060c4:	4630      	mov	r0, r6
 80060c6:	f000 f995 	bl	80063f4 <_free_r>
 80060ca:	2300      	movs	r3, #0
 80060cc:	6363      	str	r3, [r4, #52]	; 0x34
 80060ce:	89a3      	ldrh	r3, [r4, #12]
 80060d0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80060d4:	81a3      	strh	r3, [r4, #12]
 80060d6:	2300      	movs	r3, #0
 80060d8:	6063      	str	r3, [r4, #4]
 80060da:	6923      	ldr	r3, [r4, #16]
 80060dc:	6023      	str	r3, [r4, #0]
 80060de:	89a3      	ldrh	r3, [r4, #12]
 80060e0:	f043 0308 	orr.w	r3, r3, #8
 80060e4:	81a3      	strh	r3, [r4, #12]
 80060e6:	6923      	ldr	r3, [r4, #16]
 80060e8:	b94b      	cbnz	r3, 80060fe <__swsetup_r+0x9a>
 80060ea:	89a3      	ldrh	r3, [r4, #12]
 80060ec:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80060f0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80060f4:	d003      	beq.n	80060fe <__swsetup_r+0x9a>
 80060f6:	4621      	mov	r1, r4
 80060f8:	4630      	mov	r0, r6
 80060fa:	f000 f927 	bl	800634c <__smakebuf_r>
 80060fe:	89a0      	ldrh	r0, [r4, #12]
 8006100:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006104:	f010 0301 	ands.w	r3, r0, #1
 8006108:	d00a      	beq.n	8006120 <__swsetup_r+0xbc>
 800610a:	2300      	movs	r3, #0
 800610c:	60a3      	str	r3, [r4, #8]
 800610e:	6963      	ldr	r3, [r4, #20]
 8006110:	425b      	negs	r3, r3
 8006112:	61a3      	str	r3, [r4, #24]
 8006114:	6923      	ldr	r3, [r4, #16]
 8006116:	b943      	cbnz	r3, 800612a <__swsetup_r+0xc6>
 8006118:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800611c:	d1ba      	bne.n	8006094 <__swsetup_r+0x30>
 800611e:	bd70      	pop	{r4, r5, r6, pc}
 8006120:	0781      	lsls	r1, r0, #30
 8006122:	bf58      	it	pl
 8006124:	6963      	ldrpl	r3, [r4, #20]
 8006126:	60a3      	str	r3, [r4, #8]
 8006128:	e7f4      	b.n	8006114 <__swsetup_r+0xb0>
 800612a:	2000      	movs	r0, #0
 800612c:	e7f7      	b.n	800611e <__swsetup_r+0xba>
 800612e:	bf00      	nop
 8006130:	20000014 	.word	0x20000014
 8006134:	08006d18 	.word	0x08006d18
 8006138:	08006d38 	.word	0x08006d38
 800613c:	08006cf8 	.word	0x08006cf8

08006140 <_close_r>:
 8006140:	b538      	push	{r3, r4, r5, lr}
 8006142:	2300      	movs	r3, #0
 8006144:	4d05      	ldr	r5, [pc, #20]	; (800615c <_close_r+0x1c>)
 8006146:	4604      	mov	r4, r0
 8006148:	4608      	mov	r0, r1
 800614a:	602b      	str	r3, [r5, #0]
 800614c:	f7fa fa8c 	bl	8000668 <_close>
 8006150:	1c43      	adds	r3, r0, #1
 8006152:	d102      	bne.n	800615a <_close_r+0x1a>
 8006154:	682b      	ldr	r3, [r5, #0]
 8006156:	b103      	cbz	r3, 800615a <_close_r+0x1a>
 8006158:	6023      	str	r3, [r4, #0]
 800615a:	bd38      	pop	{r3, r4, r5, pc}
 800615c:	20001c1c 	.word	0x20001c1c

08006160 <__sflush_r>:
 8006160:	898a      	ldrh	r2, [r1, #12]
 8006162:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006164:	4605      	mov	r5, r0
 8006166:	0710      	lsls	r0, r2, #28
 8006168:	460c      	mov	r4, r1
 800616a:	d457      	bmi.n	800621c <__sflush_r+0xbc>
 800616c:	684b      	ldr	r3, [r1, #4]
 800616e:	2b00      	cmp	r3, #0
 8006170:	dc04      	bgt.n	800617c <__sflush_r+0x1c>
 8006172:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006174:	2b00      	cmp	r3, #0
 8006176:	dc01      	bgt.n	800617c <__sflush_r+0x1c>
 8006178:	2000      	movs	r0, #0
 800617a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800617c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800617e:	2e00      	cmp	r6, #0
 8006180:	d0fa      	beq.n	8006178 <__sflush_r+0x18>
 8006182:	2300      	movs	r3, #0
 8006184:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006188:	682f      	ldr	r7, [r5, #0]
 800618a:	602b      	str	r3, [r5, #0]
 800618c:	d032      	beq.n	80061f4 <__sflush_r+0x94>
 800618e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006190:	89a3      	ldrh	r3, [r4, #12]
 8006192:	075a      	lsls	r2, r3, #29
 8006194:	d505      	bpl.n	80061a2 <__sflush_r+0x42>
 8006196:	6863      	ldr	r3, [r4, #4]
 8006198:	1ac0      	subs	r0, r0, r3
 800619a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800619c:	b10b      	cbz	r3, 80061a2 <__sflush_r+0x42>
 800619e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80061a0:	1ac0      	subs	r0, r0, r3
 80061a2:	2300      	movs	r3, #0
 80061a4:	4602      	mov	r2, r0
 80061a6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80061a8:	4628      	mov	r0, r5
 80061aa:	6a21      	ldr	r1, [r4, #32]
 80061ac:	47b0      	blx	r6
 80061ae:	1c43      	adds	r3, r0, #1
 80061b0:	89a3      	ldrh	r3, [r4, #12]
 80061b2:	d106      	bne.n	80061c2 <__sflush_r+0x62>
 80061b4:	6829      	ldr	r1, [r5, #0]
 80061b6:	291d      	cmp	r1, #29
 80061b8:	d82c      	bhi.n	8006214 <__sflush_r+0xb4>
 80061ba:	4a29      	ldr	r2, [pc, #164]	; (8006260 <__sflush_r+0x100>)
 80061bc:	40ca      	lsrs	r2, r1
 80061be:	07d6      	lsls	r6, r2, #31
 80061c0:	d528      	bpl.n	8006214 <__sflush_r+0xb4>
 80061c2:	2200      	movs	r2, #0
 80061c4:	6062      	str	r2, [r4, #4]
 80061c6:	6922      	ldr	r2, [r4, #16]
 80061c8:	04d9      	lsls	r1, r3, #19
 80061ca:	6022      	str	r2, [r4, #0]
 80061cc:	d504      	bpl.n	80061d8 <__sflush_r+0x78>
 80061ce:	1c42      	adds	r2, r0, #1
 80061d0:	d101      	bne.n	80061d6 <__sflush_r+0x76>
 80061d2:	682b      	ldr	r3, [r5, #0]
 80061d4:	b903      	cbnz	r3, 80061d8 <__sflush_r+0x78>
 80061d6:	6560      	str	r0, [r4, #84]	; 0x54
 80061d8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80061da:	602f      	str	r7, [r5, #0]
 80061dc:	2900      	cmp	r1, #0
 80061de:	d0cb      	beq.n	8006178 <__sflush_r+0x18>
 80061e0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80061e4:	4299      	cmp	r1, r3
 80061e6:	d002      	beq.n	80061ee <__sflush_r+0x8e>
 80061e8:	4628      	mov	r0, r5
 80061ea:	f000 f903 	bl	80063f4 <_free_r>
 80061ee:	2000      	movs	r0, #0
 80061f0:	6360      	str	r0, [r4, #52]	; 0x34
 80061f2:	e7c2      	b.n	800617a <__sflush_r+0x1a>
 80061f4:	6a21      	ldr	r1, [r4, #32]
 80061f6:	2301      	movs	r3, #1
 80061f8:	4628      	mov	r0, r5
 80061fa:	47b0      	blx	r6
 80061fc:	1c41      	adds	r1, r0, #1
 80061fe:	d1c7      	bne.n	8006190 <__sflush_r+0x30>
 8006200:	682b      	ldr	r3, [r5, #0]
 8006202:	2b00      	cmp	r3, #0
 8006204:	d0c4      	beq.n	8006190 <__sflush_r+0x30>
 8006206:	2b1d      	cmp	r3, #29
 8006208:	d001      	beq.n	800620e <__sflush_r+0xae>
 800620a:	2b16      	cmp	r3, #22
 800620c:	d101      	bne.n	8006212 <__sflush_r+0xb2>
 800620e:	602f      	str	r7, [r5, #0]
 8006210:	e7b2      	b.n	8006178 <__sflush_r+0x18>
 8006212:	89a3      	ldrh	r3, [r4, #12]
 8006214:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006218:	81a3      	strh	r3, [r4, #12]
 800621a:	e7ae      	b.n	800617a <__sflush_r+0x1a>
 800621c:	690f      	ldr	r7, [r1, #16]
 800621e:	2f00      	cmp	r7, #0
 8006220:	d0aa      	beq.n	8006178 <__sflush_r+0x18>
 8006222:	0793      	lsls	r3, r2, #30
 8006224:	bf18      	it	ne
 8006226:	2300      	movne	r3, #0
 8006228:	680e      	ldr	r6, [r1, #0]
 800622a:	bf08      	it	eq
 800622c:	694b      	ldreq	r3, [r1, #20]
 800622e:	1bf6      	subs	r6, r6, r7
 8006230:	600f      	str	r7, [r1, #0]
 8006232:	608b      	str	r3, [r1, #8]
 8006234:	2e00      	cmp	r6, #0
 8006236:	dd9f      	ble.n	8006178 <__sflush_r+0x18>
 8006238:	4633      	mov	r3, r6
 800623a:	463a      	mov	r2, r7
 800623c:	4628      	mov	r0, r5
 800623e:	6a21      	ldr	r1, [r4, #32]
 8006240:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8006244:	47e0      	blx	ip
 8006246:	2800      	cmp	r0, #0
 8006248:	dc06      	bgt.n	8006258 <__sflush_r+0xf8>
 800624a:	89a3      	ldrh	r3, [r4, #12]
 800624c:	f04f 30ff 	mov.w	r0, #4294967295
 8006250:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006254:	81a3      	strh	r3, [r4, #12]
 8006256:	e790      	b.n	800617a <__sflush_r+0x1a>
 8006258:	4407      	add	r7, r0
 800625a:	1a36      	subs	r6, r6, r0
 800625c:	e7ea      	b.n	8006234 <__sflush_r+0xd4>
 800625e:	bf00      	nop
 8006260:	20400001 	.word	0x20400001

08006264 <_fflush_r>:
 8006264:	b538      	push	{r3, r4, r5, lr}
 8006266:	690b      	ldr	r3, [r1, #16]
 8006268:	4605      	mov	r5, r0
 800626a:	460c      	mov	r4, r1
 800626c:	b913      	cbnz	r3, 8006274 <_fflush_r+0x10>
 800626e:	2500      	movs	r5, #0
 8006270:	4628      	mov	r0, r5
 8006272:	bd38      	pop	{r3, r4, r5, pc}
 8006274:	b118      	cbz	r0, 800627e <_fflush_r+0x1a>
 8006276:	6983      	ldr	r3, [r0, #24]
 8006278:	b90b      	cbnz	r3, 800627e <_fflush_r+0x1a>
 800627a:	f7ff fb0d 	bl	8005898 <__sinit>
 800627e:	4b14      	ldr	r3, [pc, #80]	; (80062d0 <_fflush_r+0x6c>)
 8006280:	429c      	cmp	r4, r3
 8006282:	d11b      	bne.n	80062bc <_fflush_r+0x58>
 8006284:	686c      	ldr	r4, [r5, #4]
 8006286:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800628a:	2b00      	cmp	r3, #0
 800628c:	d0ef      	beq.n	800626e <_fflush_r+0xa>
 800628e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006290:	07d0      	lsls	r0, r2, #31
 8006292:	d404      	bmi.n	800629e <_fflush_r+0x3a>
 8006294:	0599      	lsls	r1, r3, #22
 8006296:	d402      	bmi.n	800629e <_fflush_r+0x3a>
 8006298:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800629a:	f7ff fbc0 	bl	8005a1e <__retarget_lock_acquire_recursive>
 800629e:	4628      	mov	r0, r5
 80062a0:	4621      	mov	r1, r4
 80062a2:	f7ff ff5d 	bl	8006160 <__sflush_r>
 80062a6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80062a8:	4605      	mov	r5, r0
 80062aa:	07da      	lsls	r2, r3, #31
 80062ac:	d4e0      	bmi.n	8006270 <_fflush_r+0xc>
 80062ae:	89a3      	ldrh	r3, [r4, #12]
 80062b0:	059b      	lsls	r3, r3, #22
 80062b2:	d4dd      	bmi.n	8006270 <_fflush_r+0xc>
 80062b4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80062b6:	f7ff fbb3 	bl	8005a20 <__retarget_lock_release_recursive>
 80062ba:	e7d9      	b.n	8006270 <_fflush_r+0xc>
 80062bc:	4b05      	ldr	r3, [pc, #20]	; (80062d4 <_fflush_r+0x70>)
 80062be:	429c      	cmp	r4, r3
 80062c0:	d101      	bne.n	80062c6 <_fflush_r+0x62>
 80062c2:	68ac      	ldr	r4, [r5, #8]
 80062c4:	e7df      	b.n	8006286 <_fflush_r+0x22>
 80062c6:	4b04      	ldr	r3, [pc, #16]	; (80062d8 <_fflush_r+0x74>)
 80062c8:	429c      	cmp	r4, r3
 80062ca:	bf08      	it	eq
 80062cc:	68ec      	ldreq	r4, [r5, #12]
 80062ce:	e7da      	b.n	8006286 <_fflush_r+0x22>
 80062d0:	08006d18 	.word	0x08006d18
 80062d4:	08006d38 	.word	0x08006d38
 80062d8:	08006cf8 	.word	0x08006cf8

080062dc <_lseek_r>:
 80062dc:	b538      	push	{r3, r4, r5, lr}
 80062de:	4604      	mov	r4, r0
 80062e0:	4608      	mov	r0, r1
 80062e2:	4611      	mov	r1, r2
 80062e4:	2200      	movs	r2, #0
 80062e6:	4d05      	ldr	r5, [pc, #20]	; (80062fc <_lseek_r+0x20>)
 80062e8:	602a      	str	r2, [r5, #0]
 80062ea:	461a      	mov	r2, r3
 80062ec:	f7fa f9d3 	bl	8000696 <_lseek>
 80062f0:	1c43      	adds	r3, r0, #1
 80062f2:	d102      	bne.n	80062fa <_lseek_r+0x1e>
 80062f4:	682b      	ldr	r3, [r5, #0]
 80062f6:	b103      	cbz	r3, 80062fa <_lseek_r+0x1e>
 80062f8:	6023      	str	r3, [r4, #0]
 80062fa:	bd38      	pop	{r3, r4, r5, pc}
 80062fc:	20001c1c 	.word	0x20001c1c

08006300 <__swhatbuf_r>:
 8006300:	b570      	push	{r4, r5, r6, lr}
 8006302:	460e      	mov	r6, r1
 8006304:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006308:	4614      	mov	r4, r2
 800630a:	2900      	cmp	r1, #0
 800630c:	461d      	mov	r5, r3
 800630e:	b096      	sub	sp, #88	; 0x58
 8006310:	da08      	bge.n	8006324 <__swhatbuf_r+0x24>
 8006312:	2200      	movs	r2, #0
 8006314:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8006318:	602a      	str	r2, [r5, #0]
 800631a:	061a      	lsls	r2, r3, #24
 800631c:	d410      	bmi.n	8006340 <__swhatbuf_r+0x40>
 800631e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006322:	e00e      	b.n	8006342 <__swhatbuf_r+0x42>
 8006324:	466a      	mov	r2, sp
 8006326:	f000 fbad 	bl	8006a84 <_fstat_r>
 800632a:	2800      	cmp	r0, #0
 800632c:	dbf1      	blt.n	8006312 <__swhatbuf_r+0x12>
 800632e:	9a01      	ldr	r2, [sp, #4]
 8006330:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8006334:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8006338:	425a      	negs	r2, r3
 800633a:	415a      	adcs	r2, r3
 800633c:	602a      	str	r2, [r5, #0]
 800633e:	e7ee      	b.n	800631e <__swhatbuf_r+0x1e>
 8006340:	2340      	movs	r3, #64	; 0x40
 8006342:	2000      	movs	r0, #0
 8006344:	6023      	str	r3, [r4, #0]
 8006346:	b016      	add	sp, #88	; 0x58
 8006348:	bd70      	pop	{r4, r5, r6, pc}
	...

0800634c <__smakebuf_r>:
 800634c:	898b      	ldrh	r3, [r1, #12]
 800634e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006350:	079d      	lsls	r5, r3, #30
 8006352:	4606      	mov	r6, r0
 8006354:	460c      	mov	r4, r1
 8006356:	d507      	bpl.n	8006368 <__smakebuf_r+0x1c>
 8006358:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800635c:	6023      	str	r3, [r4, #0]
 800635e:	6123      	str	r3, [r4, #16]
 8006360:	2301      	movs	r3, #1
 8006362:	6163      	str	r3, [r4, #20]
 8006364:	b002      	add	sp, #8
 8006366:	bd70      	pop	{r4, r5, r6, pc}
 8006368:	466a      	mov	r2, sp
 800636a:	ab01      	add	r3, sp, #4
 800636c:	f7ff ffc8 	bl	8006300 <__swhatbuf_r>
 8006370:	9900      	ldr	r1, [sp, #0]
 8006372:	4605      	mov	r5, r0
 8006374:	4630      	mov	r0, r6
 8006376:	f7ff fb8b 	bl	8005a90 <_malloc_r>
 800637a:	b948      	cbnz	r0, 8006390 <__smakebuf_r+0x44>
 800637c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006380:	059a      	lsls	r2, r3, #22
 8006382:	d4ef      	bmi.n	8006364 <__smakebuf_r+0x18>
 8006384:	f023 0303 	bic.w	r3, r3, #3
 8006388:	f043 0302 	orr.w	r3, r3, #2
 800638c:	81a3      	strh	r3, [r4, #12]
 800638e:	e7e3      	b.n	8006358 <__smakebuf_r+0xc>
 8006390:	4b0d      	ldr	r3, [pc, #52]	; (80063c8 <__smakebuf_r+0x7c>)
 8006392:	62b3      	str	r3, [r6, #40]	; 0x28
 8006394:	89a3      	ldrh	r3, [r4, #12]
 8006396:	6020      	str	r0, [r4, #0]
 8006398:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800639c:	81a3      	strh	r3, [r4, #12]
 800639e:	9b00      	ldr	r3, [sp, #0]
 80063a0:	6120      	str	r0, [r4, #16]
 80063a2:	6163      	str	r3, [r4, #20]
 80063a4:	9b01      	ldr	r3, [sp, #4]
 80063a6:	b15b      	cbz	r3, 80063c0 <__smakebuf_r+0x74>
 80063a8:	4630      	mov	r0, r6
 80063aa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80063ae:	f000 fb7b 	bl	8006aa8 <_isatty_r>
 80063b2:	b128      	cbz	r0, 80063c0 <__smakebuf_r+0x74>
 80063b4:	89a3      	ldrh	r3, [r4, #12]
 80063b6:	f023 0303 	bic.w	r3, r3, #3
 80063ba:	f043 0301 	orr.w	r3, r3, #1
 80063be:	81a3      	strh	r3, [r4, #12]
 80063c0:	89a0      	ldrh	r0, [r4, #12]
 80063c2:	4305      	orrs	r5, r0
 80063c4:	81a5      	strh	r5, [r4, #12]
 80063c6:	e7cd      	b.n	8006364 <__smakebuf_r+0x18>
 80063c8:	08005831 	.word	0x08005831

080063cc <malloc>:
 80063cc:	4b02      	ldr	r3, [pc, #8]	; (80063d8 <malloc+0xc>)
 80063ce:	4601      	mov	r1, r0
 80063d0:	6818      	ldr	r0, [r3, #0]
 80063d2:	f7ff bb5d 	b.w	8005a90 <_malloc_r>
 80063d6:	bf00      	nop
 80063d8:	20000014 	.word	0x20000014

080063dc <__malloc_lock>:
 80063dc:	4801      	ldr	r0, [pc, #4]	; (80063e4 <__malloc_lock+0x8>)
 80063de:	f7ff bb1e 	b.w	8005a1e <__retarget_lock_acquire_recursive>
 80063e2:	bf00      	nop
 80063e4:	20001c10 	.word	0x20001c10

080063e8 <__malloc_unlock>:
 80063e8:	4801      	ldr	r0, [pc, #4]	; (80063f0 <__malloc_unlock+0x8>)
 80063ea:	f7ff bb19 	b.w	8005a20 <__retarget_lock_release_recursive>
 80063ee:	bf00      	nop
 80063f0:	20001c10 	.word	0x20001c10

080063f4 <_free_r>:
 80063f4:	b538      	push	{r3, r4, r5, lr}
 80063f6:	4605      	mov	r5, r0
 80063f8:	2900      	cmp	r1, #0
 80063fa:	d040      	beq.n	800647e <_free_r+0x8a>
 80063fc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006400:	1f0c      	subs	r4, r1, #4
 8006402:	2b00      	cmp	r3, #0
 8006404:	bfb8      	it	lt
 8006406:	18e4      	addlt	r4, r4, r3
 8006408:	f7ff ffe8 	bl	80063dc <__malloc_lock>
 800640c:	4a1c      	ldr	r2, [pc, #112]	; (8006480 <_free_r+0x8c>)
 800640e:	6813      	ldr	r3, [r2, #0]
 8006410:	b933      	cbnz	r3, 8006420 <_free_r+0x2c>
 8006412:	6063      	str	r3, [r4, #4]
 8006414:	6014      	str	r4, [r2, #0]
 8006416:	4628      	mov	r0, r5
 8006418:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800641c:	f7ff bfe4 	b.w	80063e8 <__malloc_unlock>
 8006420:	42a3      	cmp	r3, r4
 8006422:	d908      	bls.n	8006436 <_free_r+0x42>
 8006424:	6820      	ldr	r0, [r4, #0]
 8006426:	1821      	adds	r1, r4, r0
 8006428:	428b      	cmp	r3, r1
 800642a:	bf01      	itttt	eq
 800642c:	6819      	ldreq	r1, [r3, #0]
 800642e:	685b      	ldreq	r3, [r3, #4]
 8006430:	1809      	addeq	r1, r1, r0
 8006432:	6021      	streq	r1, [r4, #0]
 8006434:	e7ed      	b.n	8006412 <_free_r+0x1e>
 8006436:	461a      	mov	r2, r3
 8006438:	685b      	ldr	r3, [r3, #4]
 800643a:	b10b      	cbz	r3, 8006440 <_free_r+0x4c>
 800643c:	42a3      	cmp	r3, r4
 800643e:	d9fa      	bls.n	8006436 <_free_r+0x42>
 8006440:	6811      	ldr	r1, [r2, #0]
 8006442:	1850      	adds	r0, r2, r1
 8006444:	42a0      	cmp	r0, r4
 8006446:	d10b      	bne.n	8006460 <_free_r+0x6c>
 8006448:	6820      	ldr	r0, [r4, #0]
 800644a:	4401      	add	r1, r0
 800644c:	1850      	adds	r0, r2, r1
 800644e:	4283      	cmp	r3, r0
 8006450:	6011      	str	r1, [r2, #0]
 8006452:	d1e0      	bne.n	8006416 <_free_r+0x22>
 8006454:	6818      	ldr	r0, [r3, #0]
 8006456:	685b      	ldr	r3, [r3, #4]
 8006458:	4401      	add	r1, r0
 800645a:	6011      	str	r1, [r2, #0]
 800645c:	6053      	str	r3, [r2, #4]
 800645e:	e7da      	b.n	8006416 <_free_r+0x22>
 8006460:	d902      	bls.n	8006468 <_free_r+0x74>
 8006462:	230c      	movs	r3, #12
 8006464:	602b      	str	r3, [r5, #0]
 8006466:	e7d6      	b.n	8006416 <_free_r+0x22>
 8006468:	6820      	ldr	r0, [r4, #0]
 800646a:	1821      	adds	r1, r4, r0
 800646c:	428b      	cmp	r3, r1
 800646e:	bf01      	itttt	eq
 8006470:	6819      	ldreq	r1, [r3, #0]
 8006472:	685b      	ldreq	r3, [r3, #4]
 8006474:	1809      	addeq	r1, r1, r0
 8006476:	6021      	streq	r1, [r4, #0]
 8006478:	6063      	str	r3, [r4, #4]
 800647a:	6054      	str	r4, [r2, #4]
 800647c:	e7cb      	b.n	8006416 <_free_r+0x22>
 800647e:	bd38      	pop	{r3, r4, r5, pc}
 8006480:	20001c14 	.word	0x20001c14

08006484 <__sfputc_r>:
 8006484:	6893      	ldr	r3, [r2, #8]
 8006486:	b410      	push	{r4}
 8006488:	3b01      	subs	r3, #1
 800648a:	2b00      	cmp	r3, #0
 800648c:	6093      	str	r3, [r2, #8]
 800648e:	da07      	bge.n	80064a0 <__sfputc_r+0x1c>
 8006490:	6994      	ldr	r4, [r2, #24]
 8006492:	42a3      	cmp	r3, r4
 8006494:	db01      	blt.n	800649a <__sfputc_r+0x16>
 8006496:	290a      	cmp	r1, #10
 8006498:	d102      	bne.n	80064a0 <__sfputc_r+0x1c>
 800649a:	bc10      	pop	{r4}
 800649c:	f7ff bd7e 	b.w	8005f9c <__swbuf_r>
 80064a0:	6813      	ldr	r3, [r2, #0]
 80064a2:	1c58      	adds	r0, r3, #1
 80064a4:	6010      	str	r0, [r2, #0]
 80064a6:	7019      	strb	r1, [r3, #0]
 80064a8:	4608      	mov	r0, r1
 80064aa:	bc10      	pop	{r4}
 80064ac:	4770      	bx	lr

080064ae <__sfputs_r>:
 80064ae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80064b0:	4606      	mov	r6, r0
 80064b2:	460f      	mov	r7, r1
 80064b4:	4614      	mov	r4, r2
 80064b6:	18d5      	adds	r5, r2, r3
 80064b8:	42ac      	cmp	r4, r5
 80064ba:	d101      	bne.n	80064c0 <__sfputs_r+0x12>
 80064bc:	2000      	movs	r0, #0
 80064be:	e007      	b.n	80064d0 <__sfputs_r+0x22>
 80064c0:	463a      	mov	r2, r7
 80064c2:	4630      	mov	r0, r6
 80064c4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80064c8:	f7ff ffdc 	bl	8006484 <__sfputc_r>
 80064cc:	1c43      	adds	r3, r0, #1
 80064ce:	d1f3      	bne.n	80064b8 <__sfputs_r+0xa>
 80064d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080064d4 <_vfiprintf_r>:
 80064d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80064d8:	460d      	mov	r5, r1
 80064da:	4614      	mov	r4, r2
 80064dc:	4698      	mov	r8, r3
 80064de:	4606      	mov	r6, r0
 80064e0:	b09d      	sub	sp, #116	; 0x74
 80064e2:	b118      	cbz	r0, 80064ec <_vfiprintf_r+0x18>
 80064e4:	6983      	ldr	r3, [r0, #24]
 80064e6:	b90b      	cbnz	r3, 80064ec <_vfiprintf_r+0x18>
 80064e8:	f7ff f9d6 	bl	8005898 <__sinit>
 80064ec:	4b89      	ldr	r3, [pc, #548]	; (8006714 <_vfiprintf_r+0x240>)
 80064ee:	429d      	cmp	r5, r3
 80064f0:	d11b      	bne.n	800652a <_vfiprintf_r+0x56>
 80064f2:	6875      	ldr	r5, [r6, #4]
 80064f4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80064f6:	07d9      	lsls	r1, r3, #31
 80064f8:	d405      	bmi.n	8006506 <_vfiprintf_r+0x32>
 80064fa:	89ab      	ldrh	r3, [r5, #12]
 80064fc:	059a      	lsls	r2, r3, #22
 80064fe:	d402      	bmi.n	8006506 <_vfiprintf_r+0x32>
 8006500:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006502:	f7ff fa8c 	bl	8005a1e <__retarget_lock_acquire_recursive>
 8006506:	89ab      	ldrh	r3, [r5, #12]
 8006508:	071b      	lsls	r3, r3, #28
 800650a:	d501      	bpl.n	8006510 <_vfiprintf_r+0x3c>
 800650c:	692b      	ldr	r3, [r5, #16]
 800650e:	b9eb      	cbnz	r3, 800654c <_vfiprintf_r+0x78>
 8006510:	4629      	mov	r1, r5
 8006512:	4630      	mov	r0, r6
 8006514:	f7ff fda6 	bl	8006064 <__swsetup_r>
 8006518:	b1c0      	cbz	r0, 800654c <_vfiprintf_r+0x78>
 800651a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800651c:	07dc      	lsls	r4, r3, #31
 800651e:	d50e      	bpl.n	800653e <_vfiprintf_r+0x6a>
 8006520:	f04f 30ff 	mov.w	r0, #4294967295
 8006524:	b01d      	add	sp, #116	; 0x74
 8006526:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800652a:	4b7b      	ldr	r3, [pc, #492]	; (8006718 <_vfiprintf_r+0x244>)
 800652c:	429d      	cmp	r5, r3
 800652e:	d101      	bne.n	8006534 <_vfiprintf_r+0x60>
 8006530:	68b5      	ldr	r5, [r6, #8]
 8006532:	e7df      	b.n	80064f4 <_vfiprintf_r+0x20>
 8006534:	4b79      	ldr	r3, [pc, #484]	; (800671c <_vfiprintf_r+0x248>)
 8006536:	429d      	cmp	r5, r3
 8006538:	bf08      	it	eq
 800653a:	68f5      	ldreq	r5, [r6, #12]
 800653c:	e7da      	b.n	80064f4 <_vfiprintf_r+0x20>
 800653e:	89ab      	ldrh	r3, [r5, #12]
 8006540:	0598      	lsls	r0, r3, #22
 8006542:	d4ed      	bmi.n	8006520 <_vfiprintf_r+0x4c>
 8006544:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006546:	f7ff fa6b 	bl	8005a20 <__retarget_lock_release_recursive>
 800654a:	e7e9      	b.n	8006520 <_vfiprintf_r+0x4c>
 800654c:	2300      	movs	r3, #0
 800654e:	9309      	str	r3, [sp, #36]	; 0x24
 8006550:	2320      	movs	r3, #32
 8006552:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006556:	2330      	movs	r3, #48	; 0x30
 8006558:	f04f 0901 	mov.w	r9, #1
 800655c:	f8cd 800c 	str.w	r8, [sp, #12]
 8006560:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8006720 <_vfiprintf_r+0x24c>
 8006564:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006568:	4623      	mov	r3, r4
 800656a:	469a      	mov	sl, r3
 800656c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006570:	b10a      	cbz	r2, 8006576 <_vfiprintf_r+0xa2>
 8006572:	2a25      	cmp	r2, #37	; 0x25
 8006574:	d1f9      	bne.n	800656a <_vfiprintf_r+0x96>
 8006576:	ebba 0b04 	subs.w	fp, sl, r4
 800657a:	d00b      	beq.n	8006594 <_vfiprintf_r+0xc0>
 800657c:	465b      	mov	r3, fp
 800657e:	4622      	mov	r2, r4
 8006580:	4629      	mov	r1, r5
 8006582:	4630      	mov	r0, r6
 8006584:	f7ff ff93 	bl	80064ae <__sfputs_r>
 8006588:	3001      	adds	r0, #1
 800658a:	f000 80aa 	beq.w	80066e2 <_vfiprintf_r+0x20e>
 800658e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006590:	445a      	add	r2, fp
 8006592:	9209      	str	r2, [sp, #36]	; 0x24
 8006594:	f89a 3000 	ldrb.w	r3, [sl]
 8006598:	2b00      	cmp	r3, #0
 800659a:	f000 80a2 	beq.w	80066e2 <_vfiprintf_r+0x20e>
 800659e:	2300      	movs	r3, #0
 80065a0:	f04f 32ff 	mov.w	r2, #4294967295
 80065a4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80065a8:	f10a 0a01 	add.w	sl, sl, #1
 80065ac:	9304      	str	r3, [sp, #16]
 80065ae:	9307      	str	r3, [sp, #28]
 80065b0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80065b4:	931a      	str	r3, [sp, #104]	; 0x68
 80065b6:	4654      	mov	r4, sl
 80065b8:	2205      	movs	r2, #5
 80065ba:	f814 1b01 	ldrb.w	r1, [r4], #1
 80065be:	4858      	ldr	r0, [pc, #352]	; (8006720 <_vfiprintf_r+0x24c>)
 80065c0:	f000 fa82 	bl	8006ac8 <memchr>
 80065c4:	9a04      	ldr	r2, [sp, #16]
 80065c6:	b9d8      	cbnz	r0, 8006600 <_vfiprintf_r+0x12c>
 80065c8:	06d1      	lsls	r1, r2, #27
 80065ca:	bf44      	itt	mi
 80065cc:	2320      	movmi	r3, #32
 80065ce:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80065d2:	0713      	lsls	r3, r2, #28
 80065d4:	bf44      	itt	mi
 80065d6:	232b      	movmi	r3, #43	; 0x2b
 80065d8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80065dc:	f89a 3000 	ldrb.w	r3, [sl]
 80065e0:	2b2a      	cmp	r3, #42	; 0x2a
 80065e2:	d015      	beq.n	8006610 <_vfiprintf_r+0x13c>
 80065e4:	4654      	mov	r4, sl
 80065e6:	2000      	movs	r0, #0
 80065e8:	f04f 0c0a 	mov.w	ip, #10
 80065ec:	9a07      	ldr	r2, [sp, #28]
 80065ee:	4621      	mov	r1, r4
 80065f0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80065f4:	3b30      	subs	r3, #48	; 0x30
 80065f6:	2b09      	cmp	r3, #9
 80065f8:	d94e      	bls.n	8006698 <_vfiprintf_r+0x1c4>
 80065fa:	b1b0      	cbz	r0, 800662a <_vfiprintf_r+0x156>
 80065fc:	9207      	str	r2, [sp, #28]
 80065fe:	e014      	b.n	800662a <_vfiprintf_r+0x156>
 8006600:	eba0 0308 	sub.w	r3, r0, r8
 8006604:	fa09 f303 	lsl.w	r3, r9, r3
 8006608:	4313      	orrs	r3, r2
 800660a:	46a2      	mov	sl, r4
 800660c:	9304      	str	r3, [sp, #16]
 800660e:	e7d2      	b.n	80065b6 <_vfiprintf_r+0xe2>
 8006610:	9b03      	ldr	r3, [sp, #12]
 8006612:	1d19      	adds	r1, r3, #4
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	9103      	str	r1, [sp, #12]
 8006618:	2b00      	cmp	r3, #0
 800661a:	bfbb      	ittet	lt
 800661c:	425b      	neglt	r3, r3
 800661e:	f042 0202 	orrlt.w	r2, r2, #2
 8006622:	9307      	strge	r3, [sp, #28]
 8006624:	9307      	strlt	r3, [sp, #28]
 8006626:	bfb8      	it	lt
 8006628:	9204      	strlt	r2, [sp, #16]
 800662a:	7823      	ldrb	r3, [r4, #0]
 800662c:	2b2e      	cmp	r3, #46	; 0x2e
 800662e:	d10c      	bne.n	800664a <_vfiprintf_r+0x176>
 8006630:	7863      	ldrb	r3, [r4, #1]
 8006632:	2b2a      	cmp	r3, #42	; 0x2a
 8006634:	d135      	bne.n	80066a2 <_vfiprintf_r+0x1ce>
 8006636:	9b03      	ldr	r3, [sp, #12]
 8006638:	3402      	adds	r4, #2
 800663a:	1d1a      	adds	r2, r3, #4
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	9203      	str	r2, [sp, #12]
 8006640:	2b00      	cmp	r3, #0
 8006642:	bfb8      	it	lt
 8006644:	f04f 33ff 	movlt.w	r3, #4294967295
 8006648:	9305      	str	r3, [sp, #20]
 800664a:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8006724 <_vfiprintf_r+0x250>
 800664e:	2203      	movs	r2, #3
 8006650:	4650      	mov	r0, sl
 8006652:	7821      	ldrb	r1, [r4, #0]
 8006654:	f000 fa38 	bl	8006ac8 <memchr>
 8006658:	b140      	cbz	r0, 800666c <_vfiprintf_r+0x198>
 800665a:	2340      	movs	r3, #64	; 0x40
 800665c:	eba0 000a 	sub.w	r0, r0, sl
 8006660:	fa03 f000 	lsl.w	r0, r3, r0
 8006664:	9b04      	ldr	r3, [sp, #16]
 8006666:	3401      	adds	r4, #1
 8006668:	4303      	orrs	r3, r0
 800666a:	9304      	str	r3, [sp, #16]
 800666c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006670:	2206      	movs	r2, #6
 8006672:	482d      	ldr	r0, [pc, #180]	; (8006728 <_vfiprintf_r+0x254>)
 8006674:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006678:	f000 fa26 	bl	8006ac8 <memchr>
 800667c:	2800      	cmp	r0, #0
 800667e:	d03f      	beq.n	8006700 <_vfiprintf_r+0x22c>
 8006680:	4b2a      	ldr	r3, [pc, #168]	; (800672c <_vfiprintf_r+0x258>)
 8006682:	bb1b      	cbnz	r3, 80066cc <_vfiprintf_r+0x1f8>
 8006684:	9b03      	ldr	r3, [sp, #12]
 8006686:	3307      	adds	r3, #7
 8006688:	f023 0307 	bic.w	r3, r3, #7
 800668c:	3308      	adds	r3, #8
 800668e:	9303      	str	r3, [sp, #12]
 8006690:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006692:	443b      	add	r3, r7
 8006694:	9309      	str	r3, [sp, #36]	; 0x24
 8006696:	e767      	b.n	8006568 <_vfiprintf_r+0x94>
 8006698:	460c      	mov	r4, r1
 800669a:	2001      	movs	r0, #1
 800669c:	fb0c 3202 	mla	r2, ip, r2, r3
 80066a0:	e7a5      	b.n	80065ee <_vfiprintf_r+0x11a>
 80066a2:	2300      	movs	r3, #0
 80066a4:	f04f 0c0a 	mov.w	ip, #10
 80066a8:	4619      	mov	r1, r3
 80066aa:	3401      	adds	r4, #1
 80066ac:	9305      	str	r3, [sp, #20]
 80066ae:	4620      	mov	r0, r4
 80066b0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80066b4:	3a30      	subs	r2, #48	; 0x30
 80066b6:	2a09      	cmp	r2, #9
 80066b8:	d903      	bls.n	80066c2 <_vfiprintf_r+0x1ee>
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d0c5      	beq.n	800664a <_vfiprintf_r+0x176>
 80066be:	9105      	str	r1, [sp, #20]
 80066c0:	e7c3      	b.n	800664a <_vfiprintf_r+0x176>
 80066c2:	4604      	mov	r4, r0
 80066c4:	2301      	movs	r3, #1
 80066c6:	fb0c 2101 	mla	r1, ip, r1, r2
 80066ca:	e7f0      	b.n	80066ae <_vfiprintf_r+0x1da>
 80066cc:	ab03      	add	r3, sp, #12
 80066ce:	9300      	str	r3, [sp, #0]
 80066d0:	462a      	mov	r2, r5
 80066d2:	4630      	mov	r0, r6
 80066d4:	4b16      	ldr	r3, [pc, #88]	; (8006730 <_vfiprintf_r+0x25c>)
 80066d6:	a904      	add	r1, sp, #16
 80066d8:	f3af 8000 	nop.w
 80066dc:	4607      	mov	r7, r0
 80066de:	1c78      	adds	r0, r7, #1
 80066e0:	d1d6      	bne.n	8006690 <_vfiprintf_r+0x1bc>
 80066e2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80066e4:	07d9      	lsls	r1, r3, #31
 80066e6:	d405      	bmi.n	80066f4 <_vfiprintf_r+0x220>
 80066e8:	89ab      	ldrh	r3, [r5, #12]
 80066ea:	059a      	lsls	r2, r3, #22
 80066ec:	d402      	bmi.n	80066f4 <_vfiprintf_r+0x220>
 80066ee:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80066f0:	f7ff f996 	bl	8005a20 <__retarget_lock_release_recursive>
 80066f4:	89ab      	ldrh	r3, [r5, #12]
 80066f6:	065b      	lsls	r3, r3, #25
 80066f8:	f53f af12 	bmi.w	8006520 <_vfiprintf_r+0x4c>
 80066fc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80066fe:	e711      	b.n	8006524 <_vfiprintf_r+0x50>
 8006700:	ab03      	add	r3, sp, #12
 8006702:	9300      	str	r3, [sp, #0]
 8006704:	462a      	mov	r2, r5
 8006706:	4630      	mov	r0, r6
 8006708:	4b09      	ldr	r3, [pc, #36]	; (8006730 <_vfiprintf_r+0x25c>)
 800670a:	a904      	add	r1, sp, #16
 800670c:	f000 f882 	bl	8006814 <_printf_i>
 8006710:	e7e4      	b.n	80066dc <_vfiprintf_r+0x208>
 8006712:	bf00      	nop
 8006714:	08006d18 	.word	0x08006d18
 8006718:	08006d38 	.word	0x08006d38
 800671c:	08006cf8 	.word	0x08006cf8
 8006720:	08006d5c 	.word	0x08006d5c
 8006724:	08006d62 	.word	0x08006d62
 8006728:	08006d66 	.word	0x08006d66
 800672c:	00000000 	.word	0x00000000
 8006730:	080064af 	.word	0x080064af

08006734 <_printf_common>:
 8006734:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006738:	4616      	mov	r6, r2
 800673a:	4699      	mov	r9, r3
 800673c:	688a      	ldr	r2, [r1, #8]
 800673e:	690b      	ldr	r3, [r1, #16]
 8006740:	4607      	mov	r7, r0
 8006742:	4293      	cmp	r3, r2
 8006744:	bfb8      	it	lt
 8006746:	4613      	movlt	r3, r2
 8006748:	6033      	str	r3, [r6, #0]
 800674a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800674e:	460c      	mov	r4, r1
 8006750:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006754:	b10a      	cbz	r2, 800675a <_printf_common+0x26>
 8006756:	3301      	adds	r3, #1
 8006758:	6033      	str	r3, [r6, #0]
 800675a:	6823      	ldr	r3, [r4, #0]
 800675c:	0699      	lsls	r1, r3, #26
 800675e:	bf42      	ittt	mi
 8006760:	6833      	ldrmi	r3, [r6, #0]
 8006762:	3302      	addmi	r3, #2
 8006764:	6033      	strmi	r3, [r6, #0]
 8006766:	6825      	ldr	r5, [r4, #0]
 8006768:	f015 0506 	ands.w	r5, r5, #6
 800676c:	d106      	bne.n	800677c <_printf_common+0x48>
 800676e:	f104 0a19 	add.w	sl, r4, #25
 8006772:	68e3      	ldr	r3, [r4, #12]
 8006774:	6832      	ldr	r2, [r6, #0]
 8006776:	1a9b      	subs	r3, r3, r2
 8006778:	42ab      	cmp	r3, r5
 800677a:	dc28      	bgt.n	80067ce <_printf_common+0x9a>
 800677c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006780:	1e13      	subs	r3, r2, #0
 8006782:	6822      	ldr	r2, [r4, #0]
 8006784:	bf18      	it	ne
 8006786:	2301      	movne	r3, #1
 8006788:	0692      	lsls	r2, r2, #26
 800678a:	d42d      	bmi.n	80067e8 <_printf_common+0xb4>
 800678c:	4649      	mov	r1, r9
 800678e:	4638      	mov	r0, r7
 8006790:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006794:	47c0      	blx	r8
 8006796:	3001      	adds	r0, #1
 8006798:	d020      	beq.n	80067dc <_printf_common+0xa8>
 800679a:	6823      	ldr	r3, [r4, #0]
 800679c:	68e5      	ldr	r5, [r4, #12]
 800679e:	f003 0306 	and.w	r3, r3, #6
 80067a2:	2b04      	cmp	r3, #4
 80067a4:	bf18      	it	ne
 80067a6:	2500      	movne	r5, #0
 80067a8:	6832      	ldr	r2, [r6, #0]
 80067aa:	f04f 0600 	mov.w	r6, #0
 80067ae:	68a3      	ldr	r3, [r4, #8]
 80067b0:	bf08      	it	eq
 80067b2:	1aad      	subeq	r5, r5, r2
 80067b4:	6922      	ldr	r2, [r4, #16]
 80067b6:	bf08      	it	eq
 80067b8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80067bc:	4293      	cmp	r3, r2
 80067be:	bfc4      	itt	gt
 80067c0:	1a9b      	subgt	r3, r3, r2
 80067c2:	18ed      	addgt	r5, r5, r3
 80067c4:	341a      	adds	r4, #26
 80067c6:	42b5      	cmp	r5, r6
 80067c8:	d11a      	bne.n	8006800 <_printf_common+0xcc>
 80067ca:	2000      	movs	r0, #0
 80067cc:	e008      	b.n	80067e0 <_printf_common+0xac>
 80067ce:	2301      	movs	r3, #1
 80067d0:	4652      	mov	r2, sl
 80067d2:	4649      	mov	r1, r9
 80067d4:	4638      	mov	r0, r7
 80067d6:	47c0      	blx	r8
 80067d8:	3001      	adds	r0, #1
 80067da:	d103      	bne.n	80067e4 <_printf_common+0xb0>
 80067dc:	f04f 30ff 	mov.w	r0, #4294967295
 80067e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80067e4:	3501      	adds	r5, #1
 80067e6:	e7c4      	b.n	8006772 <_printf_common+0x3e>
 80067e8:	2030      	movs	r0, #48	; 0x30
 80067ea:	18e1      	adds	r1, r4, r3
 80067ec:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80067f0:	1c5a      	adds	r2, r3, #1
 80067f2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80067f6:	4422      	add	r2, r4
 80067f8:	3302      	adds	r3, #2
 80067fa:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80067fe:	e7c5      	b.n	800678c <_printf_common+0x58>
 8006800:	2301      	movs	r3, #1
 8006802:	4622      	mov	r2, r4
 8006804:	4649      	mov	r1, r9
 8006806:	4638      	mov	r0, r7
 8006808:	47c0      	blx	r8
 800680a:	3001      	adds	r0, #1
 800680c:	d0e6      	beq.n	80067dc <_printf_common+0xa8>
 800680e:	3601      	adds	r6, #1
 8006810:	e7d9      	b.n	80067c6 <_printf_common+0x92>
	...

08006814 <_printf_i>:
 8006814:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006818:	7e0f      	ldrb	r7, [r1, #24]
 800681a:	4691      	mov	r9, r2
 800681c:	2f78      	cmp	r7, #120	; 0x78
 800681e:	4680      	mov	r8, r0
 8006820:	460c      	mov	r4, r1
 8006822:	469a      	mov	sl, r3
 8006824:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006826:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800682a:	d807      	bhi.n	800683c <_printf_i+0x28>
 800682c:	2f62      	cmp	r7, #98	; 0x62
 800682e:	d80a      	bhi.n	8006846 <_printf_i+0x32>
 8006830:	2f00      	cmp	r7, #0
 8006832:	f000 80d9 	beq.w	80069e8 <_printf_i+0x1d4>
 8006836:	2f58      	cmp	r7, #88	; 0x58
 8006838:	f000 80a4 	beq.w	8006984 <_printf_i+0x170>
 800683c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006840:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006844:	e03a      	b.n	80068bc <_printf_i+0xa8>
 8006846:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800684a:	2b15      	cmp	r3, #21
 800684c:	d8f6      	bhi.n	800683c <_printf_i+0x28>
 800684e:	a101      	add	r1, pc, #4	; (adr r1, 8006854 <_printf_i+0x40>)
 8006850:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006854:	080068ad 	.word	0x080068ad
 8006858:	080068c1 	.word	0x080068c1
 800685c:	0800683d 	.word	0x0800683d
 8006860:	0800683d 	.word	0x0800683d
 8006864:	0800683d 	.word	0x0800683d
 8006868:	0800683d 	.word	0x0800683d
 800686c:	080068c1 	.word	0x080068c1
 8006870:	0800683d 	.word	0x0800683d
 8006874:	0800683d 	.word	0x0800683d
 8006878:	0800683d 	.word	0x0800683d
 800687c:	0800683d 	.word	0x0800683d
 8006880:	080069cf 	.word	0x080069cf
 8006884:	080068f1 	.word	0x080068f1
 8006888:	080069b1 	.word	0x080069b1
 800688c:	0800683d 	.word	0x0800683d
 8006890:	0800683d 	.word	0x0800683d
 8006894:	080069f1 	.word	0x080069f1
 8006898:	0800683d 	.word	0x0800683d
 800689c:	080068f1 	.word	0x080068f1
 80068a0:	0800683d 	.word	0x0800683d
 80068a4:	0800683d 	.word	0x0800683d
 80068a8:	080069b9 	.word	0x080069b9
 80068ac:	682b      	ldr	r3, [r5, #0]
 80068ae:	1d1a      	adds	r2, r3, #4
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	602a      	str	r2, [r5, #0]
 80068b4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80068b8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80068bc:	2301      	movs	r3, #1
 80068be:	e0a4      	b.n	8006a0a <_printf_i+0x1f6>
 80068c0:	6820      	ldr	r0, [r4, #0]
 80068c2:	6829      	ldr	r1, [r5, #0]
 80068c4:	0606      	lsls	r6, r0, #24
 80068c6:	f101 0304 	add.w	r3, r1, #4
 80068ca:	d50a      	bpl.n	80068e2 <_printf_i+0xce>
 80068cc:	680e      	ldr	r6, [r1, #0]
 80068ce:	602b      	str	r3, [r5, #0]
 80068d0:	2e00      	cmp	r6, #0
 80068d2:	da03      	bge.n	80068dc <_printf_i+0xc8>
 80068d4:	232d      	movs	r3, #45	; 0x2d
 80068d6:	4276      	negs	r6, r6
 80068d8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80068dc:	230a      	movs	r3, #10
 80068de:	485e      	ldr	r0, [pc, #376]	; (8006a58 <_printf_i+0x244>)
 80068e0:	e019      	b.n	8006916 <_printf_i+0x102>
 80068e2:	680e      	ldr	r6, [r1, #0]
 80068e4:	f010 0f40 	tst.w	r0, #64	; 0x40
 80068e8:	602b      	str	r3, [r5, #0]
 80068ea:	bf18      	it	ne
 80068ec:	b236      	sxthne	r6, r6
 80068ee:	e7ef      	b.n	80068d0 <_printf_i+0xbc>
 80068f0:	682b      	ldr	r3, [r5, #0]
 80068f2:	6820      	ldr	r0, [r4, #0]
 80068f4:	1d19      	adds	r1, r3, #4
 80068f6:	6029      	str	r1, [r5, #0]
 80068f8:	0601      	lsls	r1, r0, #24
 80068fa:	d501      	bpl.n	8006900 <_printf_i+0xec>
 80068fc:	681e      	ldr	r6, [r3, #0]
 80068fe:	e002      	b.n	8006906 <_printf_i+0xf2>
 8006900:	0646      	lsls	r6, r0, #25
 8006902:	d5fb      	bpl.n	80068fc <_printf_i+0xe8>
 8006904:	881e      	ldrh	r6, [r3, #0]
 8006906:	2f6f      	cmp	r7, #111	; 0x6f
 8006908:	bf0c      	ite	eq
 800690a:	2308      	moveq	r3, #8
 800690c:	230a      	movne	r3, #10
 800690e:	4852      	ldr	r0, [pc, #328]	; (8006a58 <_printf_i+0x244>)
 8006910:	2100      	movs	r1, #0
 8006912:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006916:	6865      	ldr	r5, [r4, #4]
 8006918:	2d00      	cmp	r5, #0
 800691a:	bfa8      	it	ge
 800691c:	6821      	ldrge	r1, [r4, #0]
 800691e:	60a5      	str	r5, [r4, #8]
 8006920:	bfa4      	itt	ge
 8006922:	f021 0104 	bicge.w	r1, r1, #4
 8006926:	6021      	strge	r1, [r4, #0]
 8006928:	b90e      	cbnz	r6, 800692e <_printf_i+0x11a>
 800692a:	2d00      	cmp	r5, #0
 800692c:	d04d      	beq.n	80069ca <_printf_i+0x1b6>
 800692e:	4615      	mov	r5, r2
 8006930:	fbb6 f1f3 	udiv	r1, r6, r3
 8006934:	fb03 6711 	mls	r7, r3, r1, r6
 8006938:	5dc7      	ldrb	r7, [r0, r7]
 800693a:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800693e:	4637      	mov	r7, r6
 8006940:	42bb      	cmp	r3, r7
 8006942:	460e      	mov	r6, r1
 8006944:	d9f4      	bls.n	8006930 <_printf_i+0x11c>
 8006946:	2b08      	cmp	r3, #8
 8006948:	d10b      	bne.n	8006962 <_printf_i+0x14e>
 800694a:	6823      	ldr	r3, [r4, #0]
 800694c:	07de      	lsls	r6, r3, #31
 800694e:	d508      	bpl.n	8006962 <_printf_i+0x14e>
 8006950:	6923      	ldr	r3, [r4, #16]
 8006952:	6861      	ldr	r1, [r4, #4]
 8006954:	4299      	cmp	r1, r3
 8006956:	bfde      	ittt	le
 8006958:	2330      	movle	r3, #48	; 0x30
 800695a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800695e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006962:	1b52      	subs	r2, r2, r5
 8006964:	6122      	str	r2, [r4, #16]
 8006966:	464b      	mov	r3, r9
 8006968:	4621      	mov	r1, r4
 800696a:	4640      	mov	r0, r8
 800696c:	f8cd a000 	str.w	sl, [sp]
 8006970:	aa03      	add	r2, sp, #12
 8006972:	f7ff fedf 	bl	8006734 <_printf_common>
 8006976:	3001      	adds	r0, #1
 8006978:	d14c      	bne.n	8006a14 <_printf_i+0x200>
 800697a:	f04f 30ff 	mov.w	r0, #4294967295
 800697e:	b004      	add	sp, #16
 8006980:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006984:	4834      	ldr	r0, [pc, #208]	; (8006a58 <_printf_i+0x244>)
 8006986:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800698a:	6829      	ldr	r1, [r5, #0]
 800698c:	6823      	ldr	r3, [r4, #0]
 800698e:	f851 6b04 	ldr.w	r6, [r1], #4
 8006992:	6029      	str	r1, [r5, #0]
 8006994:	061d      	lsls	r5, r3, #24
 8006996:	d514      	bpl.n	80069c2 <_printf_i+0x1ae>
 8006998:	07df      	lsls	r7, r3, #31
 800699a:	bf44      	itt	mi
 800699c:	f043 0320 	orrmi.w	r3, r3, #32
 80069a0:	6023      	strmi	r3, [r4, #0]
 80069a2:	b91e      	cbnz	r6, 80069ac <_printf_i+0x198>
 80069a4:	6823      	ldr	r3, [r4, #0]
 80069a6:	f023 0320 	bic.w	r3, r3, #32
 80069aa:	6023      	str	r3, [r4, #0]
 80069ac:	2310      	movs	r3, #16
 80069ae:	e7af      	b.n	8006910 <_printf_i+0xfc>
 80069b0:	6823      	ldr	r3, [r4, #0]
 80069b2:	f043 0320 	orr.w	r3, r3, #32
 80069b6:	6023      	str	r3, [r4, #0]
 80069b8:	2378      	movs	r3, #120	; 0x78
 80069ba:	4828      	ldr	r0, [pc, #160]	; (8006a5c <_printf_i+0x248>)
 80069bc:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80069c0:	e7e3      	b.n	800698a <_printf_i+0x176>
 80069c2:	0659      	lsls	r1, r3, #25
 80069c4:	bf48      	it	mi
 80069c6:	b2b6      	uxthmi	r6, r6
 80069c8:	e7e6      	b.n	8006998 <_printf_i+0x184>
 80069ca:	4615      	mov	r5, r2
 80069cc:	e7bb      	b.n	8006946 <_printf_i+0x132>
 80069ce:	682b      	ldr	r3, [r5, #0]
 80069d0:	6826      	ldr	r6, [r4, #0]
 80069d2:	1d18      	adds	r0, r3, #4
 80069d4:	6961      	ldr	r1, [r4, #20]
 80069d6:	6028      	str	r0, [r5, #0]
 80069d8:	0635      	lsls	r5, r6, #24
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	d501      	bpl.n	80069e2 <_printf_i+0x1ce>
 80069de:	6019      	str	r1, [r3, #0]
 80069e0:	e002      	b.n	80069e8 <_printf_i+0x1d4>
 80069e2:	0670      	lsls	r0, r6, #25
 80069e4:	d5fb      	bpl.n	80069de <_printf_i+0x1ca>
 80069e6:	8019      	strh	r1, [r3, #0]
 80069e8:	2300      	movs	r3, #0
 80069ea:	4615      	mov	r5, r2
 80069ec:	6123      	str	r3, [r4, #16]
 80069ee:	e7ba      	b.n	8006966 <_printf_i+0x152>
 80069f0:	682b      	ldr	r3, [r5, #0]
 80069f2:	2100      	movs	r1, #0
 80069f4:	1d1a      	adds	r2, r3, #4
 80069f6:	602a      	str	r2, [r5, #0]
 80069f8:	681d      	ldr	r5, [r3, #0]
 80069fa:	6862      	ldr	r2, [r4, #4]
 80069fc:	4628      	mov	r0, r5
 80069fe:	f000 f863 	bl	8006ac8 <memchr>
 8006a02:	b108      	cbz	r0, 8006a08 <_printf_i+0x1f4>
 8006a04:	1b40      	subs	r0, r0, r5
 8006a06:	6060      	str	r0, [r4, #4]
 8006a08:	6863      	ldr	r3, [r4, #4]
 8006a0a:	6123      	str	r3, [r4, #16]
 8006a0c:	2300      	movs	r3, #0
 8006a0e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006a12:	e7a8      	b.n	8006966 <_printf_i+0x152>
 8006a14:	462a      	mov	r2, r5
 8006a16:	4649      	mov	r1, r9
 8006a18:	4640      	mov	r0, r8
 8006a1a:	6923      	ldr	r3, [r4, #16]
 8006a1c:	47d0      	blx	sl
 8006a1e:	3001      	adds	r0, #1
 8006a20:	d0ab      	beq.n	800697a <_printf_i+0x166>
 8006a22:	6823      	ldr	r3, [r4, #0]
 8006a24:	079b      	lsls	r3, r3, #30
 8006a26:	d413      	bmi.n	8006a50 <_printf_i+0x23c>
 8006a28:	68e0      	ldr	r0, [r4, #12]
 8006a2a:	9b03      	ldr	r3, [sp, #12]
 8006a2c:	4298      	cmp	r0, r3
 8006a2e:	bfb8      	it	lt
 8006a30:	4618      	movlt	r0, r3
 8006a32:	e7a4      	b.n	800697e <_printf_i+0x16a>
 8006a34:	2301      	movs	r3, #1
 8006a36:	4632      	mov	r2, r6
 8006a38:	4649      	mov	r1, r9
 8006a3a:	4640      	mov	r0, r8
 8006a3c:	47d0      	blx	sl
 8006a3e:	3001      	adds	r0, #1
 8006a40:	d09b      	beq.n	800697a <_printf_i+0x166>
 8006a42:	3501      	adds	r5, #1
 8006a44:	68e3      	ldr	r3, [r4, #12]
 8006a46:	9903      	ldr	r1, [sp, #12]
 8006a48:	1a5b      	subs	r3, r3, r1
 8006a4a:	42ab      	cmp	r3, r5
 8006a4c:	dcf2      	bgt.n	8006a34 <_printf_i+0x220>
 8006a4e:	e7eb      	b.n	8006a28 <_printf_i+0x214>
 8006a50:	2500      	movs	r5, #0
 8006a52:	f104 0619 	add.w	r6, r4, #25
 8006a56:	e7f5      	b.n	8006a44 <_printf_i+0x230>
 8006a58:	08006d6d 	.word	0x08006d6d
 8006a5c:	08006d7e 	.word	0x08006d7e

08006a60 <_read_r>:
 8006a60:	b538      	push	{r3, r4, r5, lr}
 8006a62:	4604      	mov	r4, r0
 8006a64:	4608      	mov	r0, r1
 8006a66:	4611      	mov	r1, r2
 8006a68:	2200      	movs	r2, #0
 8006a6a:	4d05      	ldr	r5, [pc, #20]	; (8006a80 <_read_r+0x20>)
 8006a6c:	602a      	str	r2, [r5, #0]
 8006a6e:	461a      	mov	r2, r3
 8006a70:	f7f9 fe22 	bl	80006b8 <_read>
 8006a74:	1c43      	adds	r3, r0, #1
 8006a76:	d102      	bne.n	8006a7e <_read_r+0x1e>
 8006a78:	682b      	ldr	r3, [r5, #0]
 8006a7a:	b103      	cbz	r3, 8006a7e <_read_r+0x1e>
 8006a7c:	6023      	str	r3, [r4, #0]
 8006a7e:	bd38      	pop	{r3, r4, r5, pc}
 8006a80:	20001c1c 	.word	0x20001c1c

08006a84 <_fstat_r>:
 8006a84:	b538      	push	{r3, r4, r5, lr}
 8006a86:	2300      	movs	r3, #0
 8006a88:	4d06      	ldr	r5, [pc, #24]	; (8006aa4 <_fstat_r+0x20>)
 8006a8a:	4604      	mov	r4, r0
 8006a8c:	4608      	mov	r0, r1
 8006a8e:	4611      	mov	r1, r2
 8006a90:	602b      	str	r3, [r5, #0]
 8006a92:	f7f9 fe39 	bl	8000708 <_fstat>
 8006a96:	1c43      	adds	r3, r0, #1
 8006a98:	d102      	bne.n	8006aa0 <_fstat_r+0x1c>
 8006a9a:	682b      	ldr	r3, [r5, #0]
 8006a9c:	b103      	cbz	r3, 8006aa0 <_fstat_r+0x1c>
 8006a9e:	6023      	str	r3, [r4, #0]
 8006aa0:	bd38      	pop	{r3, r4, r5, pc}
 8006aa2:	bf00      	nop
 8006aa4:	20001c1c 	.word	0x20001c1c

08006aa8 <_isatty_r>:
 8006aa8:	b538      	push	{r3, r4, r5, lr}
 8006aaa:	2300      	movs	r3, #0
 8006aac:	4d05      	ldr	r5, [pc, #20]	; (8006ac4 <_isatty_r+0x1c>)
 8006aae:	4604      	mov	r4, r0
 8006ab0:	4608      	mov	r0, r1
 8006ab2:	602b      	str	r3, [r5, #0]
 8006ab4:	f7f9 fd96 	bl	80005e4 <_isatty>
 8006ab8:	1c43      	adds	r3, r0, #1
 8006aba:	d102      	bne.n	8006ac2 <_isatty_r+0x1a>
 8006abc:	682b      	ldr	r3, [r5, #0]
 8006abe:	b103      	cbz	r3, 8006ac2 <_isatty_r+0x1a>
 8006ac0:	6023      	str	r3, [r4, #0]
 8006ac2:	bd38      	pop	{r3, r4, r5, pc}
 8006ac4:	20001c1c 	.word	0x20001c1c

08006ac8 <memchr>:
 8006ac8:	4603      	mov	r3, r0
 8006aca:	b510      	push	{r4, lr}
 8006acc:	b2c9      	uxtb	r1, r1
 8006ace:	4402      	add	r2, r0
 8006ad0:	4293      	cmp	r3, r2
 8006ad2:	4618      	mov	r0, r3
 8006ad4:	d101      	bne.n	8006ada <memchr+0x12>
 8006ad6:	2000      	movs	r0, #0
 8006ad8:	e003      	b.n	8006ae2 <memchr+0x1a>
 8006ada:	7804      	ldrb	r4, [r0, #0]
 8006adc:	3301      	adds	r3, #1
 8006ade:	428c      	cmp	r4, r1
 8006ae0:	d1f6      	bne.n	8006ad0 <memchr+0x8>
 8006ae2:	bd10      	pop	{r4, pc}

08006ae4 <_sbrk>:
 8006ae4:	4a04      	ldr	r2, [pc, #16]	; (8006af8 <_sbrk+0x14>)
 8006ae6:	4603      	mov	r3, r0
 8006ae8:	6811      	ldr	r1, [r2, #0]
 8006aea:	b909      	cbnz	r1, 8006af0 <_sbrk+0xc>
 8006aec:	4903      	ldr	r1, [pc, #12]	; (8006afc <_sbrk+0x18>)
 8006aee:	6011      	str	r1, [r2, #0]
 8006af0:	6810      	ldr	r0, [r2, #0]
 8006af2:	4403      	add	r3, r0
 8006af4:	6013      	str	r3, [r2, #0]
 8006af6:	4770      	bx	lr
 8006af8:	20001c20 	.word	0x20001c20
 8006afc:	20001c28 	.word	0x20001c28

08006b00 <_init>:
 8006b00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b02:	bf00      	nop
 8006b04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006b06:	bc08      	pop	{r3}
 8006b08:	469e      	mov	lr, r3
 8006b0a:	4770      	bx	lr

08006b0c <_fini>:
 8006b0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b0e:	bf00      	nop
 8006b10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006b12:	bc08      	pop	{r3}
 8006b14:	469e      	mov	lr, r3
 8006b16:	4770      	bx	lr
