
LAB5.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007150  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000024c  08007260  08007260  00017260  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080074ac  080074ac  00020080  2**0
                  CONTENTS
  4 .ARM          00000000  080074ac  080074ac  00020080  2**0
                  CONTENTS
  5 .preinit_array 00000000  080074ac  080074ac  00020080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080074ac  080074ac  000174ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080074b0  080074b0  000174b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  080074b4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001c3c  20000080  08007534  00020080  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001cbc  08007534  00021cbc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019e37  00000000  00000000  000200a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003960  00000000  00000000  00039ee0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001488  00000000  00000000  0003d840  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001310  00000000  00000000  0003ecc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a7ba  00000000  00000000  0003ffd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001850b  00000000  00000000  0005a792  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00094f05  00000000  00000000  00072c9d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00107ba2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000059ac  00000000  00000000  00107bf4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000080 	.word	0x20000080
 800012c:	00000000 	.word	0x00000000
 8000130:	08007248 	.word	0x08007248

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000084 	.word	0x20000084
 800014c:	08007248 	.word	0x08007248

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000160:	b580      	push	{r7, lr}
 8000162:	b082      	sub	sp, #8
 8000164:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000166:	4b0c      	ldr	r3, [pc, #48]	; (8000198 <MX_DMA_Init+0x38>)
 8000168:	695b      	ldr	r3, [r3, #20]
 800016a:	4a0b      	ldr	r2, [pc, #44]	; (8000198 <MX_DMA_Init+0x38>)
 800016c:	f043 0301 	orr.w	r3, r3, #1
 8000170:	6153      	str	r3, [r2, #20]
 8000172:	4b09      	ldr	r3, [pc, #36]	; (8000198 <MX_DMA_Init+0x38>)
 8000174:	695b      	ldr	r3, [r3, #20]
 8000176:	f003 0301 	and.w	r3, r3, #1
 800017a:	607b      	str	r3, [r7, #4]
 800017c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 5, 0);
 800017e:	2200      	movs	r2, #0
 8000180:	2105      	movs	r1, #5
 8000182:	200e      	movs	r0, #14
 8000184:	f001 f94d 	bl	8001422 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8000188:	200e      	movs	r0, #14
 800018a:	f001 f966 	bl	800145a <HAL_NVIC_EnableIRQ>

}
 800018e:	bf00      	nop
 8000190:	3708      	adds	r7, #8
 8000192:	46bd      	mov	sp, r7
 8000194:	bd80      	pop	{r7, pc}
 8000196:	bf00      	nop
 8000198:	40021000 	.word	0x40021000

0800019c <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 800019c:	b5b0      	push	{r4, r5, r7, lr}
 800019e:	b08c      	sub	sp, #48	; 0x30
 80001a0:	af02      	add	r7, sp, #8
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80001a2:	4a34      	ldr	r2, [pc, #208]	; (8000274 <MX_FREERTOS_Init+0xd8>)
 80001a4:	2100      	movs	r1, #0
 80001a6:	4834      	ldr	r0, [pc, #208]	; (8000278 <MX_FREERTOS_Init+0xdc>)
 80001a8:	f003 fe18 	bl	8003ddc <osThreadNew>
 80001ac:	4603      	mov	r3, r0
 80001ae:	4a33      	ldr	r2, [pc, #204]	; (800027c <MX_FREERTOS_Init+0xe0>)
 80001b0:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */

#ifdef TASK_LED
  if(xTaskCreate(vLEDTaskStart,LED_pcName,LED_usStackDepth,NULL,LED_uxPriority,&LED_pxCreatedTask) != pdPASS) {
 80001b2:	4b33      	ldr	r3, [pc, #204]	; (8000280 <MX_FREERTOS_Init+0xe4>)
 80001b4:	6819      	ldr	r1, [r3, #0]
 80001b6:	2040      	movs	r0, #64	; 0x40
 80001b8:	2319      	movs	r3, #25
 80001ba:	4a32      	ldr	r2, [pc, #200]	; (8000284 <MX_FREERTOS_Init+0xe8>)
 80001bc:	9201      	str	r2, [sp, #4]
 80001be:	9300      	str	r3, [sp, #0]
 80001c0:	2300      	movs	r3, #0
 80001c2:	4602      	mov	r2, r0
 80001c4:	4830      	ldr	r0, [pc, #192]	; (8000288 <MX_FREERTOS_Init+0xec>)
 80001c6:	f004 fd03 	bl	8004bd0 <xTaskCreate>
 80001ca:	4603      	mov	r3, r0
 80001cc:	2b01      	cmp	r3, #1
 80001ce:	d014      	beq.n	80001fa <MX_FREERTOS_Init+0x5e>
    uint8_t ch[] = "Fail to create Task_LED!!!\r\n";
 80001d0:	4b2e      	ldr	r3, [pc, #184]	; (800028c <MX_FREERTOS_Init+0xf0>)
 80001d2:	463c      	mov	r4, r7
 80001d4:	461d      	mov	r5, r3
 80001d6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80001d8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80001da:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80001de:	c407      	stmia	r4!, {r0, r1, r2}
 80001e0:	7023      	strb	r3, [r4, #0]
    HAL_UART_Transmit(&huart1, ch, strlen((char*)ch), 0xFFFF);
 80001e2:	463b      	mov	r3, r7
 80001e4:	4618      	mov	r0, r3
 80001e6:	f7ff ffb3 	bl	8000150 <strlen>
 80001ea:	4603      	mov	r3, r0
 80001ec:	b29a      	uxth	r2, r3
 80001ee:	4639      	mov	r1, r7
 80001f0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80001f4:	4826      	ldr	r0, [pc, #152]	; (8000290 <MX_FREERTOS_Init+0xf4>)
 80001f6:	f002 fe73 	bl	8002ee0 <HAL_UART_Transmit>
//    uint8_t ch[] = "Create Task_LED success!!!\r\n";
//    HAL_UART_Transmit(&huart1, ch, strlen((char*)ch), 0xFFFF);
//  }
#endif
#ifdef TASK_DH11
  if (xTaskCreate(vDH11TaskStart, DH11_pcName, DH11_usStackDepth, NULL, DH11_uxPriority, &DH11_pxCreatedTask) != pdPASS)
 80001fa:	4b26      	ldr	r3, [pc, #152]	; (8000294 <MX_FREERTOS_Init+0xf8>)
 80001fc:	6819      	ldr	r1, [r3, #0]
 80001fe:	2080      	movs	r0, #128	; 0x80
 8000200:	2319      	movs	r3, #25
 8000202:	4a25      	ldr	r2, [pc, #148]	; (8000298 <MX_FREERTOS_Init+0xfc>)
 8000204:	9201      	str	r2, [sp, #4]
 8000206:	9300      	str	r3, [sp, #0]
 8000208:	2300      	movs	r3, #0
 800020a:	4602      	mov	r2, r0
 800020c:	4823      	ldr	r0, [pc, #140]	; (800029c <MX_FREERTOS_Init+0x100>)
 800020e:	f004 fcdf 	bl	8004bd0 <xTaskCreate>
 8000212:	4603      	mov	r3, r0
 8000214:	2b01      	cmp	r3, #1
 8000216:	d00c      	beq.n	8000232 <MX_FREERTOS_Init+0x96>
  {
	  char* ch = "Failed to create Task_DHT11!\r\n";
 8000218:	4b21      	ldr	r3, [pc, #132]	; (80002a0 <MX_FREERTOS_Init+0x104>)
 800021a:	627b      	str	r3, [r7, #36]	; 0x24
	  HAL_UART_Transmit(&huart1, (uint8_t*)ch, strlen((char*)ch), 0xffff);
 800021c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800021e:	f7ff ff97 	bl	8000150 <strlen>
 8000222:	4603      	mov	r3, r0
 8000224:	b29a      	uxth	r2, r3
 8000226:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800022a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800022c:	4818      	ldr	r0, [pc, #96]	; (8000290 <MX_FREERTOS_Init+0xf4>)
 800022e:	f002 fe57 	bl	8002ee0 <HAL_UART_Transmit>
  //   HAL_UART_Transmit_DMA(&huart1, TxBuffer,30);
  // }
#endif

#ifdef TASK_Display
  if (xTaskCreate(vDisplayTaskStart, Display_pcName, Display_usStackDepth, NULL, Display_uxPriority, &Display_pxCreatedTask) != pdPASS)
 8000232:	4b1c      	ldr	r3, [pc, #112]	; (80002a4 <MX_FREERTOS_Init+0x108>)
 8000234:	6819      	ldr	r1, [r3, #0]
 8000236:	2040      	movs	r0, #64	; 0x40
 8000238:	2319      	movs	r3, #25
 800023a:	4a1b      	ldr	r2, [pc, #108]	; (80002a8 <MX_FREERTOS_Init+0x10c>)
 800023c:	9201      	str	r2, [sp, #4]
 800023e:	9300      	str	r3, [sp, #0]
 8000240:	2300      	movs	r3, #0
 8000242:	4602      	mov	r2, r0
 8000244:	4819      	ldr	r0, [pc, #100]	; (80002ac <MX_FREERTOS_Init+0x110>)
 8000246:	f004 fcc3 	bl	8004bd0 <xTaskCreate>
 800024a:	4603      	mov	r3, r0
 800024c:	2b01      	cmp	r3, #1
 800024e:	d00c      	beq.n	800026a <MX_FREERTOS_Init+0xce>
  {
    char* ch = "Failed to create Task_Display!\r\n";
 8000250:	4b17      	ldr	r3, [pc, #92]	; (80002b0 <MX_FREERTOS_Init+0x114>)
 8000252:	623b      	str	r3, [r7, #32]
    HAL_UART_Transmit(&huart1, (uint8_t*)ch, strlen((char*)ch), 0xffff);
 8000254:	6a38      	ldr	r0, [r7, #32]
 8000256:	f7ff ff7b 	bl	8000150 <strlen>
 800025a:	4603      	mov	r3, r0
 800025c:	b29a      	uxth	r2, r3
 800025e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000262:	6a39      	ldr	r1, [r7, #32]
 8000264:	480a      	ldr	r0, [pc, #40]	; (8000290 <MX_FREERTOS_Init+0xf4>)
 8000266:	f002 fe3b 	bl	8002ee0 <HAL_UART_Transmit>

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 800026a:	bf00      	nop
 800026c:	3728      	adds	r7, #40	; 0x28
 800026e:	46bd      	mov	sp, r7
 8000270:	bdb0      	pop	{r4, r5, r7, pc}
 8000272:	bf00      	nop
 8000274:	080073c8 	.word	0x080073c8
 8000278:	080002b5 	.word	0x080002b5
 800027c:	20000134 	.word	0x20000134
 8000280:	20000000 	.word	0x20000000
 8000284:	20000128 	.word	0x20000128
 8000288:	080002c9 	.word	0x080002c9
 800028c:	080072d8 	.word	0x080072d8
 8000290:	20000214 	.word	0x20000214
 8000294:	20000004 	.word	0x20000004
 8000298:	2000012c 	.word	0x2000012c
 800029c:	08000679 	.word	0x08000679
 80002a0:	08007294 	.word	0x08007294
 80002a4:	20000008 	.word	0x20000008
 80002a8:	20000130 	.word	0x20000130
 80002ac:	08000701 	.word	0x08000701
 80002b0:	080072b4 	.word	0x080072b4

080002b4 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80002b4:	b580      	push	{r7, lr}
 80002b6:	b082      	sub	sp, #8
 80002b8:	af00      	add	r7, sp, #0
 80002ba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(500);
 80002bc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80002c0:	f003 fe36 	bl	8003f30 <osDelay>
 80002c4:	e7fa      	b.n	80002bc <StartDefaultTask+0x8>
	...

080002c8 <vLEDTaskStart>:

/* Private application code --------------------------------------------------*/
/* USER CODE BEGIN Application */

void vLEDTaskStart(void *pvParameters)
{
 80002c8:	b580      	push	{r7, lr}
 80002ca:	b084      	sub	sp, #16
 80002cc:	af00      	add	r7, sp, #0
 80002ce:	6078      	str	r0, [r7, #4]
  TickType_t xLastWakeTime;
  const TickType_t delay_time = pdMS_TO_TICKS(1000);
 80002d0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80002d4:	60fb      	str	r3, [r7, #12]

  xLastWakeTime = xTaskGetTickCount();
 80002d6:	f004 ff9d 	bl	8005214 <xTaskGetTickCount>
 80002da:	4603      	mov	r3, r0
 80002dc:	60bb      	str	r3, [r7, #8]
  for(;;)
  {
    HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);//翻转电平
 80002de:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80002e2:	4805      	ldr	r0, [pc, #20]	; (80002f8 <vLEDTaskStart+0x30>)
 80002e4:	f001 fd1d 	bl	8001d22 <HAL_GPIO_TogglePin>
    vTaskDelayUntil(&xLastWakeTime, delay_time);//延时
 80002e8:	f107 0308 	add.w	r3, r7, #8
 80002ec:	68f9      	ldr	r1, [r7, #12]
 80002ee:	4618      	mov	r0, r3
 80002f0:	f004 fdc2 	bl	8004e78 <vTaskDelayUntil>
    HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);//翻转电平
 80002f4:	e7f3      	b.n	80002de <vLEDTaskStart+0x16>
 80002f6:	bf00      	nop
 80002f8:	40011000 	.word	0x40011000

080002fc <GpioSwitchToInput>:
 * 
 * @param GPIO_Port 引脚端口
 * @param GPIO_Pin 引脚编号
 */
void GpioSwitchToInput(GPIO_TypeDef *GPIO_Port, uint16_t GPIO_Pin)
{
 80002fc:	b580      	push	{r7, lr}
 80002fe:	b086      	sub	sp, #24
 8000300:	af00      	add	r7, sp, #0
 8000302:	6078      	str	r0, [r7, #4]
 8000304:	460b      	mov	r3, r1
 8000306:	807b      	strh	r3, [r7, #2]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000308:	f107 0308 	add.w	r3, r7, #8
 800030c:	2200      	movs	r2, #0
 800030e:	601a      	str	r2, [r3, #0]
 8000310:	605a      	str	r2, [r3, #4]
 8000312:	609a      	str	r2, [r3, #8]
 8000314:	60da      	str	r2, [r3, #12]

  GPIO_InitStruct.Pin = GPIO_Pin; //设置引脚编号
 8000316:	887b      	ldrh	r3, [r7, #2]
 8000318:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;//设置引脚模式
 800031a:	2300      	movs	r3, #0
 800031c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;//省略上拉电阻
 800031e:	2301      	movs	r3, #1
 8000320:	613b      	str	r3, [r7, #16]
  // GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIO_Port, &GPIO_InitStruct);
 8000322:	f107 0308 	add.w	r3, r7, #8
 8000326:	4619      	mov	r1, r3
 8000328:	6878      	ldr	r0, [r7, #4]
 800032a:	f001 fb47 	bl	80019bc <HAL_GPIO_Init>
}
 800032e:	bf00      	nop
 8000330:	3718      	adds	r7, #24
 8000332:	46bd      	mov	sp, r7
 8000334:	bd80      	pop	{r7, pc}

08000336 <GpioSwitchToOutput>:
 * 
 * @param GPIO_Port 引脚端口
 * @param GPIO_Pin 引脚编号
 */
void GpioSwitchToOutput(GPIO_TypeDef *GPIO_Port, uint16_t GPIO_Pin)
{
 8000336:	b580      	push	{r7, lr}
 8000338:	b086      	sub	sp, #24
 800033a:	af00      	add	r7, sp, #0
 800033c:	6078      	str	r0, [r7, #4]
 800033e:	460b      	mov	r3, r1
 8000340:	807b      	strh	r3, [r7, #2]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000342:	f107 0308 	add.w	r3, r7, #8
 8000346:	2200      	movs	r2, #0
 8000348:	601a      	str	r2, [r3, #0]
 800034a:	605a      	str	r2, [r3, #4]
 800034c:	609a      	str	r2, [r3, #8]
 800034e:	60da      	str	r2, [r3, #12]

  GPIO_InitStruct.Pin = GPIO_Pin;//设置引脚编号
 8000350:	887b      	ldrh	r3, [r7, #2]
 8000352:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;//设置引脚模式
 8000354:	2301      	movs	r3, #1
 8000356:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;//省略上拉电阻
 8000358:	2301      	movs	r3, #1
 800035a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800035c:	2302      	movs	r3, #2
 800035e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIO_Port, &GPIO_InitStruct);
 8000360:	f107 0308 	add.w	r3, r7, #8
 8000364:	4619      	mov	r1, r3
 8000366:	6878      	ldr	r0, [r7, #4]
 8000368:	f001 fb28 	bl	80019bc <HAL_GPIO_Init>
}
 800036c:	bf00      	nop
 800036e:	3718      	adds	r7, #24
 8000370:	46bd      	mov	sp, r7
 8000372:	bd80      	pop	{r7, pc}

08000374 <Delay_us>:

void Delay_us(uint16_t delay)//通过定时器TIM2实现微秒级定�????????????
{
 8000374:	b480      	push	{r7}
 8000376:	b083      	sub	sp, #12
 8000378:	af00      	add	r7, sp, #0
 800037a:	4603      	mov	r3, r0
 800037c:	80fb      	strh	r3, [r7, #6]
  //
  __HAL_TIM_DISABLE(&htim2);
 800037e:	4b24      	ldr	r3, [pc, #144]	; (8000410 <Delay_us+0x9c>)
 8000380:	681b      	ldr	r3, [r3, #0]
 8000382:	6a1a      	ldr	r2, [r3, #32]
 8000384:	f241 1311 	movw	r3, #4369	; 0x1111
 8000388:	4013      	ands	r3, r2
 800038a:	2b00      	cmp	r3, #0
 800038c:	d10f      	bne.n	80003ae <Delay_us+0x3a>
 800038e:	4b20      	ldr	r3, [pc, #128]	; (8000410 <Delay_us+0x9c>)
 8000390:	681b      	ldr	r3, [r3, #0]
 8000392:	6a1a      	ldr	r2, [r3, #32]
 8000394:	f240 4344 	movw	r3, #1092	; 0x444
 8000398:	4013      	ands	r3, r2
 800039a:	2b00      	cmp	r3, #0
 800039c:	d107      	bne.n	80003ae <Delay_us+0x3a>
 800039e:	4b1c      	ldr	r3, [pc, #112]	; (8000410 <Delay_us+0x9c>)
 80003a0:	681b      	ldr	r3, [r3, #0]
 80003a2:	681a      	ldr	r2, [r3, #0]
 80003a4:	4b1a      	ldr	r3, [pc, #104]	; (8000410 <Delay_us+0x9c>)
 80003a6:	681b      	ldr	r3, [r3, #0]
 80003a8:	f022 0201 	bic.w	r2, r2, #1
 80003ac:	601a      	str	r2, [r3, #0]
  __HAL_TIM_SET_COUNTER(&htim2,0);
 80003ae:	4b18      	ldr	r3, [pc, #96]	; (8000410 <Delay_us+0x9c>)
 80003b0:	681b      	ldr	r3, [r3, #0]
 80003b2:	2200      	movs	r2, #0
 80003b4:	625a      	str	r2, [r3, #36]	; 0x24
  __HAL_TIM_ENABLE(&htim2);
 80003b6:	4b16      	ldr	r3, [pc, #88]	; (8000410 <Delay_us+0x9c>)
 80003b8:	681b      	ldr	r3, [r3, #0]
 80003ba:	681a      	ldr	r2, [r3, #0]
 80003bc:	4b14      	ldr	r3, [pc, #80]	; (8000410 <Delay_us+0x9c>)
 80003be:	681b      	ldr	r3, [r3, #0]
 80003c0:	f042 0201 	orr.w	r2, r2, #1
 80003c4:	601a      	str	r2, [r3, #0]

  while(__HAL_TIM_GET_COUNTER(&htim2) < delay){
 80003c6:	bf00      	nop
 80003c8:	4b11      	ldr	r3, [pc, #68]	; (8000410 <Delay_us+0x9c>)
 80003ca:	681b      	ldr	r3, [r3, #0]
 80003cc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80003ce:	88fb      	ldrh	r3, [r7, #6]
 80003d0:	429a      	cmp	r2, r3
 80003d2:	d3f9      	bcc.n	80003c8 <Delay_us+0x54>

  }

  __HAL_TIM_DISABLE(&htim2);
 80003d4:	4b0e      	ldr	r3, [pc, #56]	; (8000410 <Delay_us+0x9c>)
 80003d6:	681b      	ldr	r3, [r3, #0]
 80003d8:	6a1a      	ldr	r2, [r3, #32]
 80003da:	f241 1311 	movw	r3, #4369	; 0x1111
 80003de:	4013      	ands	r3, r2
 80003e0:	2b00      	cmp	r3, #0
 80003e2:	d10f      	bne.n	8000404 <Delay_us+0x90>
 80003e4:	4b0a      	ldr	r3, [pc, #40]	; (8000410 <Delay_us+0x9c>)
 80003e6:	681b      	ldr	r3, [r3, #0]
 80003e8:	6a1a      	ldr	r2, [r3, #32]
 80003ea:	f240 4344 	movw	r3, #1092	; 0x444
 80003ee:	4013      	ands	r3, r2
 80003f0:	2b00      	cmp	r3, #0
 80003f2:	d107      	bne.n	8000404 <Delay_us+0x90>
 80003f4:	4b06      	ldr	r3, [pc, #24]	; (8000410 <Delay_us+0x9c>)
 80003f6:	681b      	ldr	r3, [r3, #0]
 80003f8:	681a      	ldr	r2, [r3, #0]
 80003fa:	4b05      	ldr	r3, [pc, #20]	; (8000410 <Delay_us+0x9c>)
 80003fc:	681b      	ldr	r3, [r3, #0]
 80003fe:	f022 0201 	bic.w	r2, r2, #1
 8000402:	601a      	str	r2, [r3, #0]
  }
 8000404:	bf00      	nop
 8000406:	370c      	adds	r7, #12
 8000408:	46bd      	mov	sp, r7
 800040a:	bc80      	pop	{r7}
 800040c:	4770      	bx	lr
 800040e:	bf00      	nop
 8000410:	20000184 	.word	0x20000184

08000414 <vDH11SignalStart>:

void vDH11SignalStart()
{
 8000414:	b580      	push	{r7, lr}
 8000416:	af00      	add	r7, sp, #0
  GpioSwitchToOutput(DH11_DATA_GPIO_Port,DH11_DATA_Pin);//将引脚设置为输出模式
 8000418:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800041c:	480b      	ldr	r0, [pc, #44]	; (800044c <vDH11SignalStart+0x38>)
 800041e:	f7ff ff8a 	bl	8000336 <GpioSwitchToOutput>

  HAL_GPIO_WritePin(DH11_DATA_GPIO_Port,DH11_DATA_Pin, GPIO_PIN_RESET);//将引脚电平拉
 8000422:	2200      	movs	r2, #0
 8000424:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000428:	4808      	ldr	r0, [pc, #32]	; (800044c <vDH11SignalStart+0x38>)
 800042a:	f001 fc62 	bl	8001cf2 <HAL_GPIO_WritePin>
  HAL_Delay(18);//延迟18ms
 800042e:	2012      	movs	r0, #18
 8000430:	f000 ff1e 	bl	8001270 <HAL_Delay>

  HAL_GPIO_WritePin(DH11_DATA_GPIO_Port,DH11_DATA_Pin, GPIO_PIN_SET);//将引脚电平拉
 8000434:	2201      	movs	r2, #1
 8000436:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800043a:	4804      	ldr	r0, [pc, #16]	; (800044c <vDH11SignalStart+0x38>)
 800043c:	f001 fc59 	bl	8001cf2 <HAL_GPIO_WritePin>
  Delay_us(30);//延时30us
 8000440:	201e      	movs	r0, #30
 8000442:	f7ff ff97 	bl	8000374 <Delay_us>


}
 8000446:	bf00      	nop
 8000448:	bd80      	pop	{r7, pc}
 800044a:	bf00      	nop
 800044c:	40010c00 	.word	0x40010c00

08000450 <CheckResponseSignal>:
uint8_t CheckResponseSignal()
{
 8000450:	b580      	push	{r7, lr}
 8000452:	b082      	sub	sp, #8
 8000454:	af00      	add	r7, sp, #0
  uint8_t wait=0;
 8000456:	2300      	movs	r3, #0
 8000458:	71fb      	strb	r3, [r7, #7]
  GpioSwitchToInput(DH11_DATA_GPIO_Port,DH11_DATA_Pin);//切换到输入模�????????????
 800045a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800045e:	4819      	ldr	r0, [pc, #100]	; (80004c4 <CheckResponseSignal+0x74>)
 8000460:	f7ff ff4c 	bl	80002fc <GpioSwitchToInput>

  //等待DHT接收响应拉低电平，最多等20us
  while(GPIO_PIN_SET == HAL_GPIO_ReadPin(DH11_DATA_GPIO_Port,DH11_DATA_Pin) && wait < 20){
 8000464:	e005      	b.n	8000472 <CheckResponseSignal+0x22>
    wait++;
 8000466:	79fb      	ldrb	r3, [r7, #7]
 8000468:	3301      	adds	r3, #1
 800046a:	71fb      	strb	r3, [r7, #7]
    Delay_us(1);
 800046c:	2001      	movs	r0, #1
 800046e:	f7ff ff81 	bl	8000374 <Delay_us>
  while(GPIO_PIN_SET == HAL_GPIO_ReadPin(DH11_DATA_GPIO_Port,DH11_DATA_Pin) && wait < 20){
 8000472:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000476:	4813      	ldr	r0, [pc, #76]	; (80004c4 <CheckResponseSignal+0x74>)
 8000478:	f001 fc24 	bl	8001cc4 <HAL_GPIO_ReadPin>
 800047c:	4603      	mov	r3, r0
 800047e:	2b01      	cmp	r3, #1
 8000480:	d102      	bne.n	8000488 <CheckResponseSignal+0x38>
 8000482:	79fb      	ldrb	r3, [r7, #7]
 8000484:	2b13      	cmp	r3, #19
 8000486:	d9ee      	bls.n	8000466 <CheckResponseSignal+0x16>
  }
  //接收响应信号
  wait = 0;
 8000488:	2300      	movs	r3, #0
 800048a:	71fb      	strb	r3, [r7, #7]
  while(GPIO_PIN_RESET == HAL_GPIO_ReadPin(DH11_DATA_GPIO_Port,DH11_DATA_Pin) && wait < 100){
 800048c:	e005      	b.n	800049a <CheckResponseSignal+0x4a>
    wait++;
 800048e:	79fb      	ldrb	r3, [r7, #7]
 8000490:	3301      	adds	r3, #1
 8000492:	71fb      	strb	r3, [r7, #7]
    Delay_us(1);
 8000494:	2001      	movs	r0, #1
 8000496:	f7ff ff6d 	bl	8000374 <Delay_us>
  while(GPIO_PIN_RESET == HAL_GPIO_ReadPin(DH11_DATA_GPIO_Port,DH11_DATA_Pin) && wait < 100){
 800049a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800049e:	4809      	ldr	r0, [pc, #36]	; (80004c4 <CheckResponseSignal+0x74>)
 80004a0:	f001 fc10 	bl	8001cc4 <HAL_GPIO_ReadPin>
 80004a4:	4603      	mov	r3, r0
 80004a6:	2b00      	cmp	r3, #0
 80004a8:	d102      	bne.n	80004b0 <CheckResponseSignal+0x60>
 80004aa:	79fb      	ldrb	r3, [r7, #7]
 80004ac:	2b63      	cmp	r3, #99	; 0x63
 80004ae:	d9ee      	bls.n	800048e <CheckResponseSignal+0x3e>
  }
  if(wait > 99 ){
 80004b0:	79fb      	ldrb	r3, [r7, #7]
 80004b2:	2b63      	cmp	r3, #99	; 0x63
 80004b4:	d901      	bls.n	80004ba <CheckResponseSignal+0x6a>
    return wait;
 80004b6:	79fb      	ldrb	r3, [r7, #7]
 80004b8:	e000      	b.n	80004bc <CheckResponseSignal+0x6c>
  }
  return 0;
 80004ba:	2300      	movs	r3, #0
}
 80004bc:	4618      	mov	r0, r3
 80004be:	3708      	adds	r7, #8
 80004c0:	46bd      	mov	sp, r7
 80004c2:	bd80      	pop	{r7, pc}
 80004c4:	40010c00 	.word	0x40010c00

080004c8 <DH11BitRead>:

uint8_t DH11BitRead()
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	b082      	sub	sp, #8
 80004cc:	af00      	add	r7, sp, #0
  uint8_t wait=0;
 80004ce:	2300      	movs	r3, #0
 80004d0:	71fb      	strb	r3, [r7, #7]

  // 上一个DHT拉高可能没有结束，且引脚电平转换电平�???????????要时间�?�等�???????????
  while(GPIO_PIN_SET == HAL_GPIO_ReadPin(DH11_DATA_GPIO_Port, DH11_DATA_Pin) && wait < 50)
 80004d2:	e005      	b.n	80004e0 <DH11BitRead+0x18>
  {
    wait++;
 80004d4:	79fb      	ldrb	r3, [r7, #7]
 80004d6:	3301      	adds	r3, #1
 80004d8:	71fb      	strb	r3, [r7, #7]
    Delay_us(1);
 80004da:	2001      	movs	r0, #1
 80004dc:	f7ff ff4a 	bl	8000374 <Delay_us>
  while(GPIO_PIN_SET == HAL_GPIO_ReadPin(DH11_DATA_GPIO_Port, DH11_DATA_Pin) && wait < 50)
 80004e0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80004e4:	481a      	ldr	r0, [pc, #104]	; (8000550 <DH11BitRead+0x88>)
 80004e6:	f001 fbed 	bl	8001cc4 <HAL_GPIO_ReadPin>
 80004ea:	4603      	mov	r3, r0
 80004ec:	2b01      	cmp	r3, #1
 80004ee:	d102      	bne.n	80004f6 <DH11BitRead+0x2e>
 80004f0:	79fb      	ldrb	r3, [r7, #7]
 80004f2:	2b31      	cmp	r3, #49	; 0x31
 80004f4:	d9ee      	bls.n	80004d4 <DH11BitRead+0xc>
  }
  
  wait = 0;
 80004f6:	2300      	movs	r3, #0
 80004f8:	71fb      	strb	r3, [r7, #7]
  //�???????????测测DH11 1Bit �???????????始信号，标准持续50us，至多等�???????????70us
  while(GPIO_PIN_RESET == HAL_GPIO_ReadPin(DH11_DATA_GPIO_Port, DH11_DATA_Pin) && wait < 50)
 80004fa:	e005      	b.n	8000508 <DH11BitRead+0x40>
  {
    wait++;
 80004fc:	79fb      	ldrb	r3, [r7, #7]
 80004fe:	3301      	adds	r3, #1
 8000500:	71fb      	strb	r3, [r7, #7]
    Delay_us(1);
 8000502:	2001      	movs	r0, #1
 8000504:	f7ff ff36 	bl	8000374 <Delay_us>
  while(GPIO_PIN_RESET == HAL_GPIO_ReadPin(DH11_DATA_GPIO_Port, DH11_DATA_Pin) && wait < 50)
 8000508:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800050c:	4810      	ldr	r0, [pc, #64]	; (8000550 <DH11BitRead+0x88>)
 800050e:	f001 fbd9 	bl	8001cc4 <HAL_GPIO_ReadPin>
 8000512:	4603      	mov	r3, r0
 8000514:	2b00      	cmp	r3, #0
 8000516:	d102      	bne.n	800051e <DH11BitRead+0x56>
 8000518:	79fb      	ldrb	r3, [r7, #7]
 800051a:	2b31      	cmp	r3, #49	; 0x31
 800051c:	d9ee      	bls.n	80004fc <DH11BitRead+0x34>
  }
  if(wait >= 50) {
 800051e:	79fb      	ldrb	r3, [r7, #7]
 8000520:	2b31      	cmp	r3, #49	; 0x31
 8000522:	d903      	bls.n	800052c <DH11BitRead+0x64>
    sprintf(TxBuffer,"DHT send bit begin fail\r\n");
 8000524:	490b      	ldr	r1, [pc, #44]	; (8000554 <DH11BitRead+0x8c>)
 8000526:	480c      	ldr	r0, [pc, #48]	; (8000558 <DH11BitRead+0x90>)
 8000528:	f006 fac8 	bl	8006abc <siprintf>
//    HAL_UART_Transmit_DMA(&huart1,TxBuffer,30);
  }
  //DHT根据高电平脉冲宽度决定传输的数据�????????????26us-28us表示0, 70us表示1，所�????????????40us后仍为高电平则是1
  Delay_us(40);
 800052c:	2028      	movs	r0, #40	; 0x28
 800052e:	f7ff ff21 	bl	8000374 <Delay_us>
  if(GPIO_PIN_SET == HAL_GPIO_ReadPin(DH11_DATA_GPIO_Port,DH11_DATA_Pin)) return 1;
 8000532:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000536:	4806      	ldr	r0, [pc, #24]	; (8000550 <DH11BitRead+0x88>)
 8000538:	f001 fbc4 	bl	8001cc4 <HAL_GPIO_ReadPin>
 800053c:	4603      	mov	r3, r0
 800053e:	2b01      	cmp	r3, #1
 8000540:	d101      	bne.n	8000546 <DH11BitRead+0x7e>
 8000542:	2301      	movs	r3, #1
 8000544:	e000      	b.n	8000548 <DH11BitRead+0x80>
  else return 0;
 8000546:	2300      	movs	r3, #0

}
 8000548:	4618      	mov	r0, r3
 800054a:	3708      	adds	r7, #8
 800054c:	46bd      	mov	sp, r7
 800054e:	bd80      	pop	{r7, pc}
 8000550:	40010c00 	.word	0x40010c00
 8000554:	080072f8 	.word	0x080072f8
 8000558:	2000009c 	.word	0x2000009c

0800055c <DH11ByteRead>:

uint8_t DH11ByteRead()
{
 800055c:	b580      	push	{r7, lr}
 800055e:	b082      	sub	sp, #8
 8000560:	af00      	add	r7, sp, #0
  uint8_t ret;
  for (uint8_t i = 0; i < 8; i++)
 8000562:	2300      	movs	r3, #0
 8000564:	71bb      	strb	r3, [r7, #6]
 8000566:	e00c      	b.n	8000582 <DH11ByteRead+0x26>
  {
    //接收DHT数据，从高位到低�???????????
    ret <<= 1;
 8000568:	79fb      	ldrb	r3, [r7, #7]
 800056a:	005b      	lsls	r3, r3, #1
 800056c:	71fb      	strb	r3, [r7, #7]
    ret |= DH11BitRead(); 
 800056e:	f7ff ffab 	bl	80004c8 <DH11BitRead>
 8000572:	4603      	mov	r3, r0
 8000574:	461a      	mov	r2, r3
 8000576:	79fb      	ldrb	r3, [r7, #7]
 8000578:	4313      	orrs	r3, r2
 800057a:	71fb      	strb	r3, [r7, #7]
  for (uint8_t i = 0; i < 8; i++)
 800057c:	79bb      	ldrb	r3, [r7, #6]
 800057e:	3301      	adds	r3, #1
 8000580:	71bb      	strb	r3, [r7, #6]
 8000582:	79bb      	ldrb	r3, [r7, #6]
 8000584:	2b07      	cmp	r3, #7
 8000586:	d9ef      	bls.n	8000568 <DH11ByteRead+0xc>
  }
  return ret;
 8000588:	79fb      	ldrb	r3, [r7, #7]
}
 800058a:	4618      	mov	r0, r3
 800058c:	3708      	adds	r7, #8
 800058e:	46bd      	mov	sp, r7
 8000590:	bd80      	pop	{r7, pc}
	...

08000594 <DH11AllConnect>:


uint8_t DH11AllConnect()//进行�????????????次完整的DHT交互，将得到的数据存储到全局变量�????????????
{
 8000594:	b590      	push	{r4, r7, lr}
 8000596:	b087      	sub	sp, #28
 8000598:	af04      	add	r7, sp, #16
  uint8_t ret;
  vDH11SignalStart();
 800059a:	f7ff ff3b 	bl	8000414 <vDH11SignalStart>
  if((ret = CheckResponseSignal()) == 0)
 800059e:	f7ff ff57 	bl	8000450 <CheckResponseSignal>
 80005a2:	4603      	mov	r3, r0
 80005a4:	71bb      	strb	r3, [r7, #6]
 80005a6:	79bb      	ldrb	r3, [r7, #6]
 80005a8:	2b00      	cmp	r3, #0
 80005aa:	d14d      	bne.n	8000648 <DH11AllConnect+0xb4>
  {
    uint8_t data[5] = {0};
 80005ac:	2300      	movs	r3, #0
 80005ae:	603b      	str	r3, [r7, #0]
 80005b0:	2300      	movs	r3, #0
 80005b2:	713b      	strb	r3, [r7, #4]
    for(uint8_t i = 0; i < 5; i++){
 80005b4:	2300      	movs	r3, #0
 80005b6:	71fb      	strb	r3, [r7, #7]
 80005b8:	e00c      	b.n	80005d4 <DH11AllConnect+0x40>
      data[i] = DH11ByteRead();
 80005ba:	79fc      	ldrb	r4, [r7, #7]
 80005bc:	f7ff ffce 	bl	800055c <DH11ByteRead>
 80005c0:	4603      	mov	r3, r0
 80005c2:	461a      	mov	r2, r3
 80005c4:	f104 0308 	add.w	r3, r4, #8
 80005c8:	443b      	add	r3, r7
 80005ca:	f803 2c08 	strb.w	r2, [r3, #-8]
    for(uint8_t i = 0; i < 5; i++){
 80005ce:	79fb      	ldrb	r3, [r7, #7]
 80005d0:	3301      	adds	r3, #1
 80005d2:	71fb      	strb	r3, [r7, #7]
 80005d4:	79fb      	ldrb	r3, [r7, #7]
 80005d6:	2b04      	cmp	r3, #4
 80005d8:	d9ef      	bls.n	80005ba <DH11AllConnect+0x26>
    }
    if((data[0]+data[1]+data[2]+data[3]) == data[4]){
 80005da:	783b      	ldrb	r3, [r7, #0]
 80005dc:	461a      	mov	r2, r3
 80005de:	787b      	ldrb	r3, [r7, #1]
 80005e0:	4413      	add	r3, r2
 80005e2:	78ba      	ldrb	r2, [r7, #2]
 80005e4:	4413      	add	r3, r2
 80005e6:	78fa      	ldrb	r2, [r7, #3]
 80005e8:	4413      	add	r3, r2
 80005ea:	793a      	ldrb	r2, [r7, #4]
 80005ec:	4293      	cmp	r3, r2
 80005ee:	d119      	bne.n	8000624 <DH11AllConnect+0x90>
      humidity[0] = data[0];
 80005f0:	783a      	ldrb	r2, [r7, #0]
 80005f2:	4b1b      	ldr	r3, [pc, #108]	; (8000660 <DH11AllConnect+0xcc>)
 80005f4:	701a      	strb	r2, [r3, #0]
      humidity[1] = data[1];
 80005f6:	787a      	ldrb	r2, [r7, #1]
 80005f8:	4b19      	ldr	r3, [pc, #100]	; (8000660 <DH11AllConnect+0xcc>)
 80005fa:	705a      	strb	r2, [r3, #1]
      temperature[0] = data[2];
 80005fc:	78ba      	ldrb	r2, [r7, #2]
 80005fe:	4b19      	ldr	r3, [pc, #100]	; (8000664 <DH11AllConnect+0xd0>)
 8000600:	701a      	strb	r2, [r3, #0]
      temperature[1] = data[3];
 8000602:	78fa      	ldrb	r2, [r7, #3]
 8000604:	4b17      	ldr	r3, [pc, #92]	; (8000664 <DH11AllConnect+0xd0>)
 8000606:	705a      	strb	r2, [r3, #1]
#ifdef DHT_Digit
      DHTnumber = humidity[0] *100 + temperature[0];
 8000608:	4b15      	ldr	r3, [pc, #84]	; (8000660 <DH11AllConnect+0xcc>)
 800060a:	781b      	ldrb	r3, [r3, #0]
 800060c:	461a      	mov	r2, r3
 800060e:	2364      	movs	r3, #100	; 0x64
 8000610:	fb02 f303 	mul.w	r3, r2, r3
 8000614:	4a13      	ldr	r2, [pc, #76]	; (8000664 <DH11AllConnect+0xd0>)
 8000616:	7812      	ldrb	r2, [r2, #0]
 8000618:	4413      	add	r3, r2
 800061a:	461a      	mov	r2, r3
 800061c:	4b12      	ldr	r3, [pc, #72]	; (8000668 <DH11AllConnect+0xd4>)
 800061e:	601a      	str	r2, [r3, #0]
#endif
      return 0;
 8000620:	2300      	movs	r3, #0
 8000622:	e018      	b.n	8000656 <DH11AllConnect+0xc2>
    } else {
      sprintf(TxBuffer,"DH11 Data checksum wrong, %u %u %u %u %u \r\n",data[0],data[1],data[2],data[3],data[4]);
 8000624:	783b      	ldrb	r3, [r7, #0]
 8000626:	4618      	mov	r0, r3
 8000628:	787b      	ldrb	r3, [r7, #1]
 800062a:	461c      	mov	r4, r3
 800062c:	78bb      	ldrb	r3, [r7, #2]
 800062e:	78fa      	ldrb	r2, [r7, #3]
 8000630:	7939      	ldrb	r1, [r7, #4]
 8000632:	9102      	str	r1, [sp, #8]
 8000634:	9201      	str	r2, [sp, #4]
 8000636:	9300      	str	r3, [sp, #0]
 8000638:	4623      	mov	r3, r4
 800063a:	4602      	mov	r2, r0
 800063c:	490b      	ldr	r1, [pc, #44]	; (800066c <DH11AllConnect+0xd8>)
 800063e:	480c      	ldr	r0, [pc, #48]	; (8000670 <DH11AllConnect+0xdc>)
 8000640:	f006 fa3c 	bl	8006abc <siprintf>
//      HAL_UART_Transmit(&huart1, TxBuffer, 50,0xFFFF);
      return 2;
 8000644:	2302      	movs	r3, #2
 8000646:	e006      	b.n	8000656 <DH11AllConnect+0xc2>
    }
    
  } else {
    sprintf(TxBuffer,"DH11 connect fail,code %u\r\n",ret);
 8000648:	79bb      	ldrb	r3, [r7, #6]
 800064a:	461a      	mov	r2, r3
 800064c:	4909      	ldr	r1, [pc, #36]	; (8000674 <DH11AllConnect+0xe0>)
 800064e:	4808      	ldr	r0, [pc, #32]	; (8000670 <DH11AllConnect+0xdc>)
 8000650:	f006 fa34 	bl	8006abc <siprintf>
//    HAL_UART_Transmit_DMA(&huart1, TxBuffer,35);
    return 1;
 8000654:	2301      	movs	r3, #1
  }
}
 8000656:	4618      	mov	r0, r3
 8000658:	370c      	adds	r7, #12
 800065a:	46bd      	mov	sp, r7
 800065c:	bd90      	pop	{r4, r7, pc}
 800065e:	bf00      	nop
 8000660:	20000120 	.word	0x20000120
 8000664:	2000011c 	.word	0x2000011c
 8000668:	20000124 	.word	0x20000124
 800066c:	08007314 	.word	0x08007314
 8000670:	2000009c 	.word	0x2000009c
 8000674:	08007340 	.word	0x08007340

08000678 <vDH11TaskStart>:


void vDH11TaskStart(void * pvParameters)
{
 8000678:	b580      	push	{r7, lr}
 800067a:	b08e      	sub	sp, #56	; 0x38
 800067c:	af02      	add	r7, sp, #8
 800067e:	6078      	str	r0, [r7, #4]
  TickType_t xLastWakeTime;
  const TickType_t delay_time = pdMS_TO_TICKS(1000);
 8000680:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000684:	62fb      	str	r3, [r7, #44]	; 0x2c
  xLastWakeTime = xTaskGetTickCount();
 8000686:	f004 fdc5 	bl	8005214 <xTaskGetTickCount>
 800068a:	4603      	mov	r3, r0
 800068c:	627b      	str	r3, [r7, #36]	; 0x24

  for(;;){
    vTaskDelayUntil(&xLastWakeTime, delay_time);//每秒�???????????测一�???????????
 800068e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000692:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8000694:	4618      	mov	r0, r3
 8000696:	f004 fbef 	bl	8004e78 <vTaskDelayUntil>

    uint ret = DH11AllConnect();
 800069a:	f7ff ff7b 	bl	8000594 <DH11AllConnect>
 800069e:	4603      	mov	r3, r0
 80006a0:	62bb      	str	r3, [r7, #40]	; 0x28
    if(ret == 0){
 80006a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	d118      	bne.n	80006da <vDH11TaskStart+0x62>
      sprintf(TxBuffer,"Humidity: %u.%u %%    Temperature: %u.%u ^C  \r\n",humidity[0], humidity[1],temperature[0], temperature[1]);
 80006a8:	4b0f      	ldr	r3, [pc, #60]	; (80006e8 <vDH11TaskStart+0x70>)
 80006aa:	781b      	ldrb	r3, [r3, #0]
 80006ac:	4619      	mov	r1, r3
 80006ae:	4b0e      	ldr	r3, [pc, #56]	; (80006e8 <vDH11TaskStart+0x70>)
 80006b0:	785b      	ldrb	r3, [r3, #1]
 80006b2:	4618      	mov	r0, r3
 80006b4:	4b0d      	ldr	r3, [pc, #52]	; (80006ec <vDH11TaskStart+0x74>)
 80006b6:	781b      	ldrb	r3, [r3, #0]
 80006b8:	461a      	mov	r2, r3
 80006ba:	4b0c      	ldr	r3, [pc, #48]	; (80006ec <vDH11TaskStart+0x74>)
 80006bc:	785b      	ldrb	r3, [r3, #1]
 80006be:	9301      	str	r3, [sp, #4]
 80006c0:	9200      	str	r2, [sp, #0]
 80006c2:	4603      	mov	r3, r0
 80006c4:	460a      	mov	r2, r1
 80006c6:	490a      	ldr	r1, [pc, #40]	; (80006f0 <vDH11TaskStart+0x78>)
 80006c8:	480a      	ldr	r0, [pc, #40]	; (80006f4 <vDH11TaskStart+0x7c>)
 80006ca:	f006 f9f7 	bl	8006abc <siprintf>
      HAL_UART_Transmit_DMA(&huart1, TxBuffer, 50);
 80006ce:	2232      	movs	r2, #50	; 0x32
 80006d0:	4908      	ldr	r1, [pc, #32]	; (80006f4 <vDH11TaskStart+0x7c>)
 80006d2:	4809      	ldr	r0, [pc, #36]	; (80006f8 <vDH11TaskStart+0x80>)
 80006d4:	f002 fc88 	bl	8002fe8 <HAL_UART_Transmit_DMA>
 80006d8:	e7d9      	b.n	800068e <vDH11TaskStart+0x16>
    } else {
      uint8_t Tx[25];
      sprintf(Tx,"fail to put DHT data\r\n");
 80006da:	f107 0308 	add.w	r3, r7, #8
 80006de:	4907      	ldr	r1, [pc, #28]	; (80006fc <vDH11TaskStart+0x84>)
 80006e0:	4618      	mov	r0, r3
 80006e2:	f006 f9eb 	bl	8006abc <siprintf>
  for(;;){
 80006e6:	e7d2      	b.n	800068e <vDH11TaskStart+0x16>
 80006e8:	20000120 	.word	0x20000120
 80006ec:	2000011c 	.word	0x2000011c
 80006f0:	0800735c 	.word	0x0800735c
 80006f4:	2000009c 	.word	0x2000009c
 80006f8:	20000214 	.word	0x20000214
 80006fc:	0800738c 	.word	0x0800738c

08000700 <vDisplayTaskStart>:
    }
  }
}

void vDisplayTaskStart(void * pvParameters)//数码管显示任�?????
{
 8000700:	b580      	push	{r7, lr}
 8000702:	b082      	sub	sp, #8
 8000704:	af00      	add	r7, sp, #0
 8000706:	6078      	str	r0, [r7, #4]
#endif
#ifdef CountDigit
  DiffDigit(&digit);
#endif
#ifdef DHT_Digit
  DiffDigit(&DHTnumber);
 8000708:	4801      	ldr	r0, [pc, #4]	; (8000710 <vDisplayTaskStart+0x10>)
 800070a:	f000 f803 	bl	8000714 <DiffDigit>
 800070e:	e7fb      	b.n	8000708 <vDisplayTaskStart+0x8>
 8000710:	20000124 	.word	0x20000124

08000714 <DiffDigit>:
  HAL_GPIO_WritePin(LHG_GPIO_Port,LHG_Pin, ((Digit[digit]>>Shift_G) & Mask));
  HAL_GPIO_WritePin(LHDot_GPIO_Port,LHDot_Pin, ((Digit[digit]>>Shift_Dot)&Mask) );
}

void DiffDigit(uint32_t* digit)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	b086      	sub	sp, #24
 8000718:	af00      	add	r7, sp, #0
 800071a:	6078      	str	r0, [r7, #4]
  TickType_t xLastWakeTime;
  const TickType_t delay_time = pdMS_TO_TICKS(1);
 800071c:	2301      	movs	r3, #1
 800071e:	617b      	str	r3, [r7, #20]
  xLastWakeTime = xTaskGetTickCount();
 8000720:	f004 fd78 	bl	8005214 <xTaskGetTickCount>
 8000724:	6138      	str	r0, [r7, #16]

  while(1){
    uint16_t single=0;
 8000726:	2300      	movs	r3, #0
 8000728:	81fb      	strh	r3, [r7, #14]

    //第一组数码管
     single = *digit/1000 %10;
 800072a:	687b      	ldr	r3, [r7, #4]
 800072c:	681b      	ldr	r3, [r3, #0]
 800072e:	4a41      	ldr	r2, [pc, #260]	; (8000834 <DiffDigit+0x120>)
 8000730:	fba2 2303 	umull	r2, r3, r2, r3
 8000734:	0999      	lsrs	r1, r3, #6
 8000736:	4b40      	ldr	r3, [pc, #256]	; (8000838 <DiffDigit+0x124>)
 8000738:	fba3 2301 	umull	r2, r3, r3, r1
 800073c:	08da      	lsrs	r2, r3, #3
 800073e:	4613      	mov	r3, r2
 8000740:	009b      	lsls	r3, r3, #2
 8000742:	4413      	add	r3, r2
 8000744:	005b      	lsls	r3, r3, #1
 8000746:	1aca      	subs	r2, r1, r3
 8000748:	4613      	mov	r3, r2
 800074a:	81fb      	strh	r3, [r7, #14]
     HAL_GPIO_WritePin(LH1_GPIO_Port,LH1_Pin,GPIO_PIN_SET); //使能第一组数码管
 800074c:	2201      	movs	r2, #1
 800074e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000752:	483a      	ldr	r0, [pc, #232]	; (800083c <DiffDigit+0x128>)
 8000754:	f001 facd 	bl	8001cf2 <HAL_GPIO_WritePin>
     #ifdef Light
     OneDigit_SameLight(single);
 8000758:	89fb      	ldrh	r3, [r7, #14]
 800075a:	b2db      	uxtb	r3, r3
 800075c:	4618      	mov	r0, r3
 800075e:	f000 f871 	bl	8000844 <OneDigit_SameLight>
     #else
     OneDigit(single); //显示数字
     vTaskDelayUntil(&xLastWakeTime, delay_time);//延时40ms
     #endif
     HAL_GPIO_WritePin(LH1_GPIO_Port,LH1_Pin,GPIO_PIN_RESET); //终止第一组的显示，利用视觉暂留效应保留视觉上的数�??
 8000762:	2200      	movs	r2, #0
 8000764:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000768:	4834      	ldr	r0, [pc, #208]	; (800083c <DiffDigit+0x128>)
 800076a:	f001 fac2 	bl	8001cf2 <HAL_GPIO_WritePin>

     //第二组数码管
     single = (*digit / 100)%10;
 800076e:	687b      	ldr	r3, [r7, #4]
 8000770:	681b      	ldr	r3, [r3, #0]
 8000772:	4a33      	ldr	r2, [pc, #204]	; (8000840 <DiffDigit+0x12c>)
 8000774:	fba2 2303 	umull	r2, r3, r2, r3
 8000778:	0959      	lsrs	r1, r3, #5
 800077a:	4b2f      	ldr	r3, [pc, #188]	; (8000838 <DiffDigit+0x124>)
 800077c:	fba3 2301 	umull	r2, r3, r3, r1
 8000780:	08da      	lsrs	r2, r3, #3
 8000782:	4613      	mov	r3, r2
 8000784:	009b      	lsls	r3, r3, #2
 8000786:	4413      	add	r3, r2
 8000788:	005b      	lsls	r3, r3, #1
 800078a:	1aca      	subs	r2, r1, r3
 800078c:	4613      	mov	r3, r2
 800078e:	81fb      	strh	r3, [r7, #14]
    HAL_GPIO_WritePin(LH2_GPIO_Port,LH2_Pin,GPIO_PIN_SET); //使能第二组数码管
 8000790:	2201      	movs	r2, #1
 8000792:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000796:	4829      	ldr	r0, [pc, #164]	; (800083c <DiffDigit+0x128>)
 8000798:	f001 faab 	bl	8001cf2 <HAL_GPIO_WritePin>
     #ifdef Light
     OneDigit_SameLight(single);
 800079c:	89fb      	ldrh	r3, [r7, #14]
 800079e:	b2db      	uxtb	r3, r3
 80007a0:	4618      	mov	r0, r3
 80007a2:	f000 f84f 	bl	8000844 <OneDigit_SameLight>
     #else
     OneDigit(single); //显示数字
     vTaskDelayUntil(&xLastWakeTime, delay_time);//延时40ms
     #endif
     HAL_GPIO_WritePin(LH2_GPIO_Port,LH2_Pin,GPIO_PIN_RESET); //终止第二组的显示，利用视觉暂留效应保留视觉上的数�??
 80007a6:	2200      	movs	r2, #0
 80007a8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80007ac:	4823      	ldr	r0, [pc, #140]	; (800083c <DiffDigit+0x128>)
 80007ae:	f001 faa0 	bl	8001cf2 <HAL_GPIO_WritePin>

     //第三组数码管
     single = *digit/10 %10;
 80007b2:	687b      	ldr	r3, [r7, #4]
 80007b4:	681b      	ldr	r3, [r3, #0]
 80007b6:	4a20      	ldr	r2, [pc, #128]	; (8000838 <DiffDigit+0x124>)
 80007b8:	fba2 2303 	umull	r2, r3, r2, r3
 80007bc:	08d9      	lsrs	r1, r3, #3
 80007be:	4b1e      	ldr	r3, [pc, #120]	; (8000838 <DiffDigit+0x124>)
 80007c0:	fba3 2301 	umull	r2, r3, r3, r1
 80007c4:	08da      	lsrs	r2, r3, #3
 80007c6:	4613      	mov	r3, r2
 80007c8:	009b      	lsls	r3, r3, #2
 80007ca:	4413      	add	r3, r2
 80007cc:	005b      	lsls	r3, r3, #1
 80007ce:	1aca      	subs	r2, r1, r3
 80007d0:	4613      	mov	r3, r2
 80007d2:	81fb      	strh	r3, [r7, #14]
     HAL_GPIO_WritePin(LH3_GPIO_Port,LH3_Pin,GPIO_PIN_SET); //使能第三组数码管
 80007d4:	2201      	movs	r2, #1
 80007d6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80007da:	4818      	ldr	r0, [pc, #96]	; (800083c <DiffDigit+0x128>)
 80007dc:	f001 fa89 	bl	8001cf2 <HAL_GPIO_WritePin>
     #ifdef Light
     OneDigit_SameLight(single);
 80007e0:	89fb      	ldrh	r3, [r7, #14]
 80007e2:	b2db      	uxtb	r3, r3
 80007e4:	4618      	mov	r0, r3
 80007e6:	f000 f82d 	bl	8000844 <OneDigit_SameLight>
     #else
     OneDigit(single); //显示数字
     vTaskDelayUntil(&xLastWakeTime, delay_time);//延时40ms
     #endif
     HAL_GPIO_WritePin(LH3_GPIO_Port,LH3_Pin,GPIO_PIN_RESET); //终止第三组的显示，利用视觉暂留效应保留视觉上的数�??
 80007ea:	2200      	movs	r2, #0
 80007ec:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80007f0:	4812      	ldr	r0, [pc, #72]	; (800083c <DiffDigit+0x128>)
 80007f2:	f001 fa7e 	bl	8001cf2 <HAL_GPIO_WritePin>

     //第四组数码管
     single = *digit %10;
 80007f6:	687b      	ldr	r3, [r7, #4]
 80007f8:	6819      	ldr	r1, [r3, #0]
 80007fa:	4b0f      	ldr	r3, [pc, #60]	; (8000838 <DiffDigit+0x124>)
 80007fc:	fba3 2301 	umull	r2, r3, r3, r1
 8000800:	08da      	lsrs	r2, r3, #3
 8000802:	4613      	mov	r3, r2
 8000804:	009b      	lsls	r3, r3, #2
 8000806:	4413      	add	r3, r2
 8000808:	005b      	lsls	r3, r3, #1
 800080a:	1aca      	subs	r2, r1, r3
 800080c:	4613      	mov	r3, r2
 800080e:	81fb      	strh	r3, [r7, #14]
     HAL_GPIO_WritePin(LH4_GPIO_Port,LH4_Pin,GPIO_PIN_SET); //使能第四组数码管
 8000810:	2201      	movs	r2, #1
 8000812:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000816:	4809      	ldr	r0, [pc, #36]	; (800083c <DiffDigit+0x128>)
 8000818:	f001 fa6b 	bl	8001cf2 <HAL_GPIO_WritePin>
     #ifdef Light
     OneDigit_SameLight(single);
 800081c:	89fb      	ldrh	r3, [r7, #14]
 800081e:	b2db      	uxtb	r3, r3
 8000820:	4618      	mov	r0, r3
 8000822:	f000 f80f 	bl	8000844 <OneDigit_SameLight>
     #else
     OneDigit(single); //显示数字
     vTaskDelayUntil(&xLastWakeTime, delay_time);//延时40ms
     #endif
     HAL_GPIO_WritePin(LH4_GPIO_Port,LH4_Pin,GPIO_PIN_RESET); //终止第四组的显示，利用视觉暂留效应保留视觉上的数�??
 8000826:	2200      	movs	r2, #0
 8000828:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800082c:	4803      	ldr	r0, [pc, #12]	; (800083c <DiffDigit+0x128>)
 800082e:	f001 fa60 	bl	8001cf2 <HAL_GPIO_WritePin>
  while(1){
 8000832:	e778      	b.n	8000726 <DiffDigit+0x12>
 8000834:	10624dd3 	.word	0x10624dd3
 8000838:	cccccccd 	.word	0xcccccccd
 800083c:	40010c00 	.word	0x40010c00
 8000840:	51eb851f 	.word	0x51eb851f

08000844 <OneDigit_SameLight>:
  }
}
#endif 

void OneDigit_SameLight(uint8_t digit)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	b084      	sub	sp, #16
 8000848:	af00      	add	r7, sp, #0
 800084a:	4603      	mov	r3, r0
 800084c:	71fb      	strb	r3, [r7, #7]
	  TickType_t xLastWakeTime;
	  const TickType_t delay_time = pdMS_TO_TICKS(1);
 800084e:	2301      	movs	r3, #1
 8000850:	60fb      	str	r3, [r7, #12]
	  xLastWakeTime = xTaskGetTickCount();
 8000852:	f004 fcdf 	bl	8005214 <xTaskGetTickCount>
 8000856:	4603      	mov	r3, r0
 8000858:	60bb      	str	r3, [r7, #8]
	  HAL_GPIO_WritePin(LHDot_GPIO_Port,LHDot_Pin, GPIO_PIN_SET );
 800085a:	2201      	movs	r2, #1
 800085c:	2108      	movs	r1, #8
 800085e:	4875      	ldr	r0, [pc, #468]	; (8000a34 <OneDigit_SameLight+0x1f0>)
 8000860:	f001 fa47 	bl	8001cf2 <HAL_GPIO_WritePin>
  //  根据传入的数�????0~9控制七段数码管的亮灭�????
  //  经过译码转换�????8bit表示的字节控�????8个段显示
if(((Digit[digit]>>Shift_A) & Mask) == 0){
 8000864:	79fb      	ldrb	r3, [r7, #7]
 8000866:	4a74      	ldr	r2, [pc, #464]	; (8000a38 <OneDigit_SameLight+0x1f4>)
 8000868:	5cd3      	ldrb	r3, [r2, r3]
 800086a:	f003 0301 	and.w	r3, r3, #1
 800086e:	2b00      	cmp	r3, #0
 8000870:	d115      	bne.n	800089e <OneDigit_SameLight+0x5a>
     HAL_GPIO_WritePin(LHA_GPIO_Port,LHA_Pin, ((Digit[digit]>>Shift_A) & Mask)); //是否显示a�??
 8000872:	79fb      	ldrb	r3, [r7, #7]
 8000874:	4a70      	ldr	r2, [pc, #448]	; (8000a38 <OneDigit_SameLight+0x1f4>)
 8000876:	5cd3      	ldrb	r3, [r2, r3]
 8000878:	f003 0301 	and.w	r3, r3, #1
 800087c:	b2db      	uxtb	r3, r3
 800087e:	461a      	mov	r2, r3
 8000880:	2108      	movs	r1, #8
 8000882:	486e      	ldr	r0, [pc, #440]	; (8000a3c <OneDigit_SameLight+0x1f8>)
 8000884:	f001 fa35 	bl	8001cf2 <HAL_GPIO_WritePin>
     vTaskDelayUntil(&xLastWakeTime, delay_time);//延时40ms
 8000888:	f107 0308 	add.w	r3, r7, #8
 800088c:	68f9      	ldr	r1, [r7, #12]
 800088e:	4618      	mov	r0, r3
 8000890:	f004 faf2 	bl	8004e78 <vTaskDelayUntil>
     HAL_GPIO_WritePin(LHA_GPIO_Port,LHA_Pin, GPIO_PIN_SET);
 8000894:	2201      	movs	r2, #1
 8000896:	2108      	movs	r1, #8
 8000898:	4868      	ldr	r0, [pc, #416]	; (8000a3c <OneDigit_SameLight+0x1f8>)
 800089a:	f001 fa2a 	bl	8001cf2 <HAL_GPIO_WritePin>
}
if(((Digit[digit]>>Shift_B) & Mask) == 0){
 800089e:	79fb      	ldrb	r3, [r7, #7]
 80008a0:	4a65      	ldr	r2, [pc, #404]	; (8000a38 <OneDigit_SameLight+0x1f4>)
 80008a2:	5cd3      	ldrb	r3, [r2, r3]
 80008a4:	085b      	lsrs	r3, r3, #1
 80008a6:	b2db      	uxtb	r3, r3
 80008a8:	f003 0301 	and.w	r3, r3, #1
 80008ac:	2b00      	cmp	r3, #0
 80008ae:	d117      	bne.n	80008e0 <OneDigit_SameLight+0x9c>
     HAL_GPIO_WritePin(LHB_GPIO_Port,LHB_Pin, ((Digit[digit]>>Shift_B) & Mask));
 80008b0:	79fb      	ldrb	r3, [r7, #7]
 80008b2:	4a61      	ldr	r2, [pc, #388]	; (8000a38 <OneDigit_SameLight+0x1f4>)
 80008b4:	5cd3      	ldrb	r3, [r2, r3]
 80008b6:	085b      	lsrs	r3, r3, #1
 80008b8:	b2db      	uxtb	r3, r3
 80008ba:	f003 0301 	and.w	r3, r3, #1
 80008be:	b2db      	uxtb	r3, r3
 80008c0:	461a      	mov	r2, r3
 80008c2:	2120      	movs	r1, #32
 80008c4:	485d      	ldr	r0, [pc, #372]	; (8000a3c <OneDigit_SameLight+0x1f8>)
 80008c6:	f001 fa14 	bl	8001cf2 <HAL_GPIO_WritePin>
     vTaskDelayUntil(&xLastWakeTime, delay_time);//延时40ms
 80008ca:	f107 0308 	add.w	r3, r7, #8
 80008ce:	68f9      	ldr	r1, [r7, #12]
 80008d0:	4618      	mov	r0, r3
 80008d2:	f004 fad1 	bl	8004e78 <vTaskDelayUntil>
     HAL_GPIO_WritePin(LHB_GPIO_Port,LHB_Pin, GPIO_PIN_SET);
 80008d6:	2201      	movs	r2, #1
 80008d8:	2120      	movs	r1, #32
 80008da:	4858      	ldr	r0, [pc, #352]	; (8000a3c <OneDigit_SameLight+0x1f8>)
 80008dc:	f001 fa09 	bl	8001cf2 <HAL_GPIO_WritePin>
}
if(((Digit[digit]>>Shift_C) & Mask) == 0){
 80008e0:	79fb      	ldrb	r3, [r7, #7]
 80008e2:	4a55      	ldr	r2, [pc, #340]	; (8000a38 <OneDigit_SameLight+0x1f4>)
 80008e4:	5cd3      	ldrb	r3, [r2, r3]
 80008e6:	089b      	lsrs	r3, r3, #2
 80008e8:	b2db      	uxtb	r3, r3
 80008ea:	f003 0301 	and.w	r3, r3, #1
 80008ee:	2b00      	cmp	r3, #0
 80008f0:	d117      	bne.n	8000922 <OneDigit_SameLight+0xde>
     HAL_GPIO_WritePin(LHC_GPIO_Port,LHC_Pin, ((Digit[digit]>>Shift_C) & Mask));
 80008f2:	79fb      	ldrb	r3, [r7, #7]
 80008f4:	4a50      	ldr	r2, [pc, #320]	; (8000a38 <OneDigit_SameLight+0x1f4>)
 80008f6:	5cd3      	ldrb	r3, [r2, r3]
 80008f8:	089b      	lsrs	r3, r3, #2
 80008fa:	b2db      	uxtb	r3, r3
 80008fc:	f003 0301 	and.w	r3, r3, #1
 8000900:	b2db      	uxtb	r3, r3
 8000902:	461a      	mov	r2, r3
 8000904:	2120      	movs	r1, #32
 8000906:	484b      	ldr	r0, [pc, #300]	; (8000a34 <OneDigit_SameLight+0x1f0>)
 8000908:	f001 f9f3 	bl	8001cf2 <HAL_GPIO_WritePin>
     vTaskDelayUntil(&xLastWakeTime, delay_time);//延时40ms
 800090c:	f107 0308 	add.w	r3, r7, #8
 8000910:	68f9      	ldr	r1, [r7, #12]
 8000912:	4618      	mov	r0, r3
 8000914:	f004 fab0 	bl	8004e78 <vTaskDelayUntil>
     HAL_GPIO_WritePin(LHC_GPIO_Port,LHC_Pin, GPIO_PIN_SET);
 8000918:	2201      	movs	r2, #1
 800091a:	2120      	movs	r1, #32
 800091c:	4845      	ldr	r0, [pc, #276]	; (8000a34 <OneDigit_SameLight+0x1f0>)
 800091e:	f001 f9e8 	bl	8001cf2 <HAL_GPIO_WritePin>
}
if(((Digit[digit]>>Shift_D) & Mask) == 0){
 8000922:	79fb      	ldrb	r3, [r7, #7]
 8000924:	4a44      	ldr	r2, [pc, #272]	; (8000a38 <OneDigit_SameLight+0x1f4>)
 8000926:	5cd3      	ldrb	r3, [r2, r3]
 8000928:	08db      	lsrs	r3, r3, #3
 800092a:	b2db      	uxtb	r3, r3
 800092c:	f003 0301 	and.w	r3, r3, #1
 8000930:	2b00      	cmp	r3, #0
 8000932:	d117      	bne.n	8000964 <OneDigit_SameLight+0x120>
     HAL_GPIO_WritePin(LHD_GPIO_Port,LHD_Pin, ((Digit[digit]>>Shift_D) & Mask));
 8000934:	79fb      	ldrb	r3, [r7, #7]
 8000936:	4a40      	ldr	r2, [pc, #256]	; (8000a38 <OneDigit_SameLight+0x1f4>)
 8000938:	5cd3      	ldrb	r3, [r2, r3]
 800093a:	08db      	lsrs	r3, r3, #3
 800093c:	b2db      	uxtb	r3, r3
 800093e:	f003 0301 	and.w	r3, r3, #1
 8000942:	b2db      	uxtb	r3, r3
 8000944:	461a      	mov	r2, r3
 8000946:	2140      	movs	r1, #64	; 0x40
 8000948:	483a      	ldr	r0, [pc, #232]	; (8000a34 <OneDigit_SameLight+0x1f0>)
 800094a:	f001 f9d2 	bl	8001cf2 <HAL_GPIO_WritePin>
     vTaskDelayUntil(&xLastWakeTime, delay_time);//延时40ms
 800094e:	f107 0308 	add.w	r3, r7, #8
 8000952:	68f9      	ldr	r1, [r7, #12]
 8000954:	4618      	mov	r0, r3
 8000956:	f004 fa8f 	bl	8004e78 <vTaskDelayUntil>
     HAL_GPIO_WritePin(LHD_GPIO_Port,LHD_Pin, GPIO_PIN_SET);
 800095a:	2201      	movs	r2, #1
 800095c:	2140      	movs	r1, #64	; 0x40
 800095e:	4835      	ldr	r0, [pc, #212]	; (8000a34 <OneDigit_SameLight+0x1f0>)
 8000960:	f001 f9c7 	bl	8001cf2 <HAL_GPIO_WritePin>
}
if(((Digit[digit]>>Shift_E) & Mask) == 0){
 8000964:	79fb      	ldrb	r3, [r7, #7]
 8000966:	4a34      	ldr	r2, [pc, #208]	; (8000a38 <OneDigit_SameLight+0x1f4>)
 8000968:	5cd3      	ldrb	r3, [r2, r3]
 800096a:	091b      	lsrs	r3, r3, #4
 800096c:	b2db      	uxtb	r3, r3
 800096e:	f003 0301 	and.w	r3, r3, #1
 8000972:	2b00      	cmp	r3, #0
 8000974:	d117      	bne.n	80009a6 <OneDigit_SameLight+0x162>
     HAL_GPIO_WritePin(LHE_GPIO_Port,LHE_Pin, ((Digit[digit]>>Shift_E) & Mask));
 8000976:	79fb      	ldrb	r3, [r7, #7]
 8000978:	4a2f      	ldr	r2, [pc, #188]	; (8000a38 <OneDigit_SameLight+0x1f4>)
 800097a:	5cd3      	ldrb	r3, [r2, r3]
 800097c:	091b      	lsrs	r3, r3, #4
 800097e:	b2db      	uxtb	r3, r3
 8000980:	f003 0301 	and.w	r3, r3, #1
 8000984:	b2db      	uxtb	r3, r3
 8000986:	461a      	mov	r2, r3
 8000988:	2180      	movs	r1, #128	; 0x80
 800098a:	482a      	ldr	r0, [pc, #168]	; (8000a34 <OneDigit_SameLight+0x1f0>)
 800098c:	f001 f9b1 	bl	8001cf2 <HAL_GPIO_WritePin>
     vTaskDelayUntil(&xLastWakeTime, delay_time);//延时40ms
 8000990:	f107 0308 	add.w	r3, r7, #8
 8000994:	68f9      	ldr	r1, [r7, #12]
 8000996:	4618      	mov	r0, r3
 8000998:	f004 fa6e 	bl	8004e78 <vTaskDelayUntil>
     HAL_GPIO_WritePin(LHE_GPIO_Port,LHE_Pin, GPIO_PIN_SET);
 800099c:	2201      	movs	r2, #1
 800099e:	2180      	movs	r1, #128	; 0x80
 80009a0:	4824      	ldr	r0, [pc, #144]	; (8000a34 <OneDigit_SameLight+0x1f0>)
 80009a2:	f001 f9a6 	bl	8001cf2 <HAL_GPIO_WritePin>
}
if(((Digit[digit]>>Shift_F) & Mask) == 0){
 80009a6:	79fb      	ldrb	r3, [r7, #7]
 80009a8:	4a23      	ldr	r2, [pc, #140]	; (8000a38 <OneDigit_SameLight+0x1f4>)
 80009aa:	5cd3      	ldrb	r3, [r2, r3]
 80009ac:	095b      	lsrs	r3, r3, #5
 80009ae:	b2db      	uxtb	r3, r3
 80009b0:	f003 0301 	and.w	r3, r3, #1
 80009b4:	2b00      	cmp	r3, #0
 80009b6:	d117      	bne.n	80009e8 <OneDigit_SameLight+0x1a4>
     HAL_GPIO_WritePin(LHF_GPIO_Port,LHF_Pin, ((Digit[digit]>>Shift_F) & Mask));
 80009b8:	79fb      	ldrb	r3, [r7, #7]
 80009ba:	4a1f      	ldr	r2, [pc, #124]	; (8000a38 <OneDigit_SameLight+0x1f4>)
 80009bc:	5cd3      	ldrb	r3, [r2, r3]
 80009be:	095b      	lsrs	r3, r3, #5
 80009c0:	b2db      	uxtb	r3, r3
 80009c2:	f003 0301 	and.w	r3, r3, #1
 80009c6:	b2db      	uxtb	r3, r3
 80009c8:	461a      	mov	r2, r3
 80009ca:	2110      	movs	r1, #16
 80009cc:	481b      	ldr	r0, [pc, #108]	; (8000a3c <OneDigit_SameLight+0x1f8>)
 80009ce:	f001 f990 	bl	8001cf2 <HAL_GPIO_WritePin>
     vTaskDelayUntil(&xLastWakeTime, delay_time);//延时40ms
 80009d2:	f107 0308 	add.w	r3, r7, #8
 80009d6:	68f9      	ldr	r1, [r7, #12]
 80009d8:	4618      	mov	r0, r3
 80009da:	f004 fa4d 	bl	8004e78 <vTaskDelayUntil>
     HAL_GPIO_WritePin(LHF_GPIO_Port,LHF_Pin, GPIO_PIN_SET);
 80009de:	2201      	movs	r2, #1
 80009e0:	2110      	movs	r1, #16
 80009e2:	4816      	ldr	r0, [pc, #88]	; (8000a3c <OneDigit_SameLight+0x1f8>)
 80009e4:	f001 f985 	bl	8001cf2 <HAL_GPIO_WritePin>
}
if(((Digit[digit]>>Shift_G) & Mask) == 0){
 80009e8:	79fb      	ldrb	r3, [r7, #7]
 80009ea:	4a13      	ldr	r2, [pc, #76]	; (8000a38 <OneDigit_SameLight+0x1f4>)
 80009ec:	5cd3      	ldrb	r3, [r2, r3]
 80009ee:	099b      	lsrs	r3, r3, #6
 80009f0:	b2db      	uxtb	r3, r3
 80009f2:	f003 0301 	and.w	r3, r3, #1
 80009f6:	2b00      	cmp	r3, #0
 80009f8:	d117      	bne.n	8000a2a <OneDigit_SameLight+0x1e6>
     HAL_GPIO_WritePin(LHG_GPIO_Port,LHG_Pin, ((Digit[digit]>>Shift_G) & Mask));
 80009fa:	79fb      	ldrb	r3, [r7, #7]
 80009fc:	4a0e      	ldr	r2, [pc, #56]	; (8000a38 <OneDigit_SameLight+0x1f4>)
 80009fe:	5cd3      	ldrb	r3, [r2, r3]
 8000a00:	099b      	lsrs	r3, r3, #6
 8000a02:	b2db      	uxtb	r3, r3
 8000a04:	f003 0301 	and.w	r3, r3, #1
 8000a08:	b2db      	uxtb	r3, r3
 8000a0a:	461a      	mov	r2, r3
 8000a0c:	2110      	movs	r1, #16
 8000a0e:	4809      	ldr	r0, [pc, #36]	; (8000a34 <OneDigit_SameLight+0x1f0>)
 8000a10:	f001 f96f 	bl	8001cf2 <HAL_GPIO_WritePin>
     vTaskDelayUntil(&xLastWakeTime, delay_time);//延时40ms
 8000a14:	f107 0308 	add.w	r3, r7, #8
 8000a18:	68f9      	ldr	r1, [r7, #12]
 8000a1a:	4618      	mov	r0, r3
 8000a1c:	f004 fa2c 	bl	8004e78 <vTaskDelayUntil>
     HAL_GPIO_WritePin(LHG_GPIO_Port,LHG_Pin, GPIO_PIN_SET);
 8000a20:	2201      	movs	r2, #1
 8000a22:	2110      	movs	r1, #16
 8000a24:	4803      	ldr	r0, [pc, #12]	; (8000a34 <OneDigit_SameLight+0x1f0>)
 8000a26:	f001 f964 	bl	8001cf2 <HAL_GPIO_WritePin>
//if(((Digit[digit]>>Shift_Dot) & Mask) == 0){
//     HAL_GPIO_WritePin(LHDot_GPIO_Port,LHDot_Pin, ((Digit[digit]>>Shift_Dot)&Mask) );
//     vTaskDelayUntil(&xLastWakeTime, delay_time);//延时40ms
//     HAL_GPIO_WritePin(LHDot_GPIO_Port,LHDot_Pin, GPIO_PIN_SET);
//}
}
 8000a2a:	bf00      	nop
 8000a2c:	3710      	adds	r7, #16
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	bd80      	pop	{r7, pc}
 8000a32:	bf00      	nop
 8000a34:	40010800 	.word	0x40010800
 8000a38:	080073bc 	.word	0x080073bc
 8000a3c:	40010c00 	.word	0x40010c00

08000a40 <MX_GPIO_Init>:
        * EVENT_OUT
        * EXTI
     PA8   ------> RCC_MCO
*/
void MX_GPIO_Init(void)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	b088      	sub	sp, #32
 8000a44:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a46:	f107 0310 	add.w	r3, r7, #16
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	601a      	str	r2, [r3, #0]
 8000a4e:	605a      	str	r2, [r3, #4]
 8000a50:	609a      	str	r2, [r3, #8]
 8000a52:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a54:	4b47      	ldr	r3, [pc, #284]	; (8000b74 <MX_GPIO_Init+0x134>)
 8000a56:	699b      	ldr	r3, [r3, #24]
 8000a58:	4a46      	ldr	r2, [pc, #280]	; (8000b74 <MX_GPIO_Init+0x134>)
 8000a5a:	f043 0310 	orr.w	r3, r3, #16
 8000a5e:	6193      	str	r3, [r2, #24]
 8000a60:	4b44      	ldr	r3, [pc, #272]	; (8000b74 <MX_GPIO_Init+0x134>)
 8000a62:	699b      	ldr	r3, [r3, #24]
 8000a64:	f003 0310 	and.w	r3, r3, #16
 8000a68:	60fb      	str	r3, [r7, #12]
 8000a6a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a6c:	4b41      	ldr	r3, [pc, #260]	; (8000b74 <MX_GPIO_Init+0x134>)
 8000a6e:	699b      	ldr	r3, [r3, #24]
 8000a70:	4a40      	ldr	r2, [pc, #256]	; (8000b74 <MX_GPIO_Init+0x134>)
 8000a72:	f043 0320 	orr.w	r3, r3, #32
 8000a76:	6193      	str	r3, [r2, #24]
 8000a78:	4b3e      	ldr	r3, [pc, #248]	; (8000b74 <MX_GPIO_Init+0x134>)
 8000a7a:	699b      	ldr	r3, [r3, #24]
 8000a7c:	f003 0320 	and.w	r3, r3, #32
 8000a80:	60bb      	str	r3, [r7, #8]
 8000a82:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a84:	4b3b      	ldr	r3, [pc, #236]	; (8000b74 <MX_GPIO_Init+0x134>)
 8000a86:	699b      	ldr	r3, [r3, #24]
 8000a88:	4a3a      	ldr	r2, [pc, #232]	; (8000b74 <MX_GPIO_Init+0x134>)
 8000a8a:	f043 0304 	orr.w	r3, r3, #4
 8000a8e:	6193      	str	r3, [r2, #24]
 8000a90:	4b38      	ldr	r3, [pc, #224]	; (8000b74 <MX_GPIO_Init+0x134>)
 8000a92:	699b      	ldr	r3, [r3, #24]
 8000a94:	f003 0304 	and.w	r3, r3, #4
 8000a98:	607b      	str	r3, [r7, #4]
 8000a9a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a9c:	4b35      	ldr	r3, [pc, #212]	; (8000b74 <MX_GPIO_Init+0x134>)
 8000a9e:	699b      	ldr	r3, [r3, #24]
 8000aa0:	4a34      	ldr	r2, [pc, #208]	; (8000b74 <MX_GPIO_Init+0x134>)
 8000aa2:	f043 0308 	orr.w	r3, r3, #8
 8000aa6:	6193      	str	r3, [r2, #24]
 8000aa8:	4b32      	ldr	r3, [pc, #200]	; (8000b74 <MX_GPIO_Init+0x134>)
 8000aaa:	699b      	ldr	r3, [r3, #24]
 8000aac:	f003 0308 	and.w	r3, r3, #8
 8000ab0:	603b      	str	r3, [r7, #0]
 8000ab2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000aba:	482f      	ldr	r0, [pc, #188]	; (8000b78 <MX_GPIO_Init+0x138>)
 8000abc:	f001 f919 	bl	8001cf2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LHDot_Pin|LHG_Pin|LHC_Pin|LHD_Pin
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	21f8      	movs	r1, #248	; 0xf8
 8000ac4:	482d      	ldr	r0, [pc, #180]	; (8000b7c <MX_GPIO_Init+0x13c>)
 8000ac6:	f001 f914 	bl	8001cf2 <HAL_GPIO_WritePin>
                          |LHE_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LH1_Pin|LH2_Pin|LH3_Pin|LH4_Pin, GPIO_PIN_SET);
 8000aca:	2201      	movs	r2, #1
 8000acc:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8000ad0:	482b      	ldr	r0, [pc, #172]	; (8000b80 <MX_GPIO_Init+0x140>)
 8000ad2:	f001 f90e 	bl	8001cf2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LHA_Pin|LHF_Pin|LHB_Pin, GPIO_PIN_RESET);
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	2138      	movs	r1, #56	; 0x38
 8000ada:	4829      	ldr	r0, [pc, #164]	; (8000b80 <MX_GPIO_Init+0x140>)
 8000adc:	f001 f909 	bl	8001cf2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000ae0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000ae4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ae6:	2301      	movs	r3, #1
 8000ae8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aea:	2300      	movs	r3, #0
 8000aec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aee:	2302      	movs	r3, #2
 8000af0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000af2:	f107 0310 	add.w	r3, r7, #16
 8000af6:	4619      	mov	r1, r3
 8000af8:	481f      	ldr	r0, [pc, #124]	; (8000b78 <MX_GPIO_Init+0x138>)
 8000afa:	f000 ff5f 	bl	80019bc <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin
                           PAPin */
  GPIO_InitStruct.Pin = LHDot_Pin|LHG_Pin|LHC_Pin|LHD_Pin
 8000afe:	23f8      	movs	r3, #248	; 0xf8
 8000b00:	613b      	str	r3, [r7, #16]
                          |LHE_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b02:	2301      	movs	r3, #1
 8000b04:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b06:	2301      	movs	r3, #1
 8000b08:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000b0a:	2303      	movs	r3, #3
 8000b0c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b0e:	f107 0310 	add.w	r3, r7, #16
 8000b12:	4619      	mov	r1, r3
 8000b14:	4819      	ldr	r0, [pc, #100]	; (8000b7c <MX_GPIO_Init+0x13c>)
 8000b16:	f000 ff51 	bl	80019bc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DH11_DATA_Pin;
 8000b1a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000b1e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b20:	2300      	movs	r3, #0
 8000b22:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b24:	2301      	movs	r3, #1
 8000b26:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(DH11_DATA_GPIO_Port, &GPIO_InitStruct);
 8000b28:	f107 0310 	add.w	r3, r7, #16
 8000b2c:	4619      	mov	r1, r3
 8000b2e:	4814      	ldr	r0, [pc, #80]	; (8000b80 <MX_GPIO_Init+0x140>)
 8000b30:	f000 ff44 	bl	80019bc <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LH1_Pin|LH2_Pin|LH3_Pin|LH4_Pin
 8000b34:	f24f 0338 	movw	r3, #61496	; 0xf038
 8000b38:	613b      	str	r3, [r7, #16]
                          |LHA_Pin|LHF_Pin|LHB_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b3a:	2301      	movs	r3, #1
 8000b3c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b3e:	2301      	movs	r3, #1
 8000b40:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000b42:	2303      	movs	r3, #3
 8000b44:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b46:	f107 0310 	add.w	r3, r7, #16
 8000b4a:	4619      	mov	r1, r3
 8000b4c:	480c      	ldr	r0, [pc, #48]	; (8000b80 <MX_GPIO_Init+0x140>)
 8000b4e:	f000 ff35 	bl	80019bc <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000b52:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000b56:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b58:	2302      	movs	r3, #2
 8000b5a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b5c:	2302      	movs	r3, #2
 8000b5e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b60:	f107 0310 	add.w	r3, r7, #16
 8000b64:	4619      	mov	r1, r3
 8000b66:	4805      	ldr	r0, [pc, #20]	; (8000b7c <MX_GPIO_Init+0x13c>)
 8000b68:	f000 ff28 	bl	80019bc <HAL_GPIO_Init>

}
 8000b6c:	bf00      	nop
 8000b6e:	3720      	adds	r7, #32
 8000b70:	46bd      	mov	sp, r7
 8000b72:	bd80      	pop	{r7, pc}
 8000b74:	40021000 	.word	0x40021000
 8000b78:	40011000 	.word	0x40011000
 8000b7c:	40010800 	.word	0x40010800
 8000b80:	40010c00 	.word	0x40010c00

08000b84 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b88:	f000 fb40 	bl	800120c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b8c:	f000 f815 	bl	8000bba <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b90:	f7ff ff56 	bl	8000a40 <MX_GPIO_Init>
  MX_DMA_Init();
 8000b94:	f7ff fae4 	bl	8000160 <MX_DMA_Init>
  MX_USART1_UART_Init();
 8000b98:	f000 fa62 	bl	8001060 <MX_USART1_UART_Init>
  MX_TIM2_Init();
 8000b9c:	f000 f98e 	bl	8000ebc <MX_TIM2_Init>
  MX_TIM3_Init();
 8000ba0:	f000 f9d8 	bl	8000f54 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_Delay(1000);
 8000ba4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000ba8:	f000 fb62 	bl	8001270 <HAL_Delay>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 8000bac:	f003 f8b0 	bl	8003d10 <osKernelInitialize>
  MX_FREERTOS_Init();
 8000bb0:	f7ff faf4 	bl	800019c <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8000bb4:	f003 f8de 	bl	8003d74 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000bb8:	e7fe      	b.n	8000bb8 <main+0x34>

08000bba <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000bba:	b580      	push	{r7, lr}
 8000bbc:	b090      	sub	sp, #64	; 0x40
 8000bbe:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000bc0:	f107 0318 	add.w	r3, r7, #24
 8000bc4:	2228      	movs	r2, #40	; 0x28
 8000bc6:	2100      	movs	r1, #0
 8000bc8:	4618      	mov	r0, r3
 8000bca:	f005 fe61 	bl	8006890 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000bce:	1d3b      	adds	r3, r7, #4
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	601a      	str	r2, [r3, #0]
 8000bd4:	605a      	str	r2, [r3, #4]
 8000bd6:	609a      	str	r2, [r3, #8]
 8000bd8:	60da      	str	r2, [r3, #12]
 8000bda:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000bdc:	2301      	movs	r3, #1
 8000bde:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000be0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000be4:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000be6:	2300      	movs	r3, #0
 8000be8:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000bea:	2301      	movs	r3, #1
 8000bec:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000bee:	2302      	movs	r3, #2
 8000bf0:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000bf2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000bf6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000bf8:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000bfc:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000bfe:	f107 0318 	add.w	r3, r7, #24
 8000c02:	4618      	mov	r0, r3
 8000c04:	f001 f8a6 	bl	8001d54 <HAL_RCC_OscConfig>
 8000c08:	4603      	mov	r3, r0
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	d001      	beq.n	8000c12 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000c0e:	f000 f831 	bl	8000c74 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c12:	230f      	movs	r3, #15
 8000c14:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c16:	2302      	movs	r3, #2
 8000c18:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000c1e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000c22:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c24:	2300      	movs	r3, #0
 8000c26:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000c28:	1d3b      	adds	r3, r7, #4
 8000c2a:	2102      	movs	r1, #2
 8000c2c:	4618      	mov	r0, r3
 8000c2e:	f001 fb13 	bl	8002258 <HAL_RCC_ClockConfig>
 8000c32:	4603      	mov	r3, r0
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d001      	beq.n	8000c3c <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000c38:	f000 f81c 	bl	8000c74 <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO, RCC_MCO1SOURCE_PLLCLK, RCC_MCODIV_1);
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	f04f 61e0 	mov.w	r1, #117440512	; 0x7000000
 8000c42:	2000      	movs	r0, #0
 8000c44:	f001 fbf2 	bl	800242c <HAL_RCC_MCOConfig>
}
 8000c48:	bf00      	nop
 8000c4a:	3740      	adds	r7, #64	; 0x40
 8000c4c:	46bd      	mov	sp, r7
 8000c4e:	bd80      	pop	{r7, pc}

08000c50 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	b082      	sub	sp, #8
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	4a04      	ldr	r2, [pc, #16]	; (8000c70 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000c5e:	4293      	cmp	r3, r2
 8000c60:	d101      	bne.n	8000c66 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000c62:	f000 fae9 	bl	8001238 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000c66:	bf00      	nop
 8000c68:	3708      	adds	r7, #8
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	bd80      	pop	{r7, pc}
 8000c6e:	bf00      	nop
 8000c70:	40012c00 	.word	0x40012c00

08000c74 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c74:	b480      	push	{r7}
 8000c76:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c78:	b672      	cpsid	i
}
 8000c7a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c7c:	e7fe      	b.n	8000c7c <Error_Handler+0x8>
	...

08000c80 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	b084      	sub	sp, #16
 8000c84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000c86:	4b18      	ldr	r3, [pc, #96]	; (8000ce8 <HAL_MspInit+0x68>)
 8000c88:	699b      	ldr	r3, [r3, #24]
 8000c8a:	4a17      	ldr	r2, [pc, #92]	; (8000ce8 <HAL_MspInit+0x68>)
 8000c8c:	f043 0301 	orr.w	r3, r3, #1
 8000c90:	6193      	str	r3, [r2, #24]
 8000c92:	4b15      	ldr	r3, [pc, #84]	; (8000ce8 <HAL_MspInit+0x68>)
 8000c94:	699b      	ldr	r3, [r3, #24]
 8000c96:	f003 0301 	and.w	r3, r3, #1
 8000c9a:	60bb      	str	r3, [r7, #8]
 8000c9c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c9e:	4b12      	ldr	r3, [pc, #72]	; (8000ce8 <HAL_MspInit+0x68>)
 8000ca0:	69db      	ldr	r3, [r3, #28]
 8000ca2:	4a11      	ldr	r2, [pc, #68]	; (8000ce8 <HAL_MspInit+0x68>)
 8000ca4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ca8:	61d3      	str	r3, [r2, #28]
 8000caa:	4b0f      	ldr	r3, [pc, #60]	; (8000ce8 <HAL_MspInit+0x68>)
 8000cac:	69db      	ldr	r3, [r3, #28]
 8000cae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000cb2:	607b      	str	r3, [r7, #4]
 8000cb4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	210f      	movs	r1, #15
 8000cba:	f06f 0001 	mvn.w	r0, #1
 8000cbe:	f000 fbb0 	bl	8001422 <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000cc2:	4b0a      	ldr	r3, [pc, #40]	; (8000cec <HAL_MspInit+0x6c>)
 8000cc4:	685b      	ldr	r3, [r3, #4]
 8000cc6:	60fb      	str	r3, [r7, #12]
 8000cc8:	68fb      	ldr	r3, [r7, #12]
 8000cca:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000cce:	60fb      	str	r3, [r7, #12]
 8000cd0:	68fb      	ldr	r3, [r7, #12]
 8000cd2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000cd6:	60fb      	str	r3, [r7, #12]
 8000cd8:	4a04      	ldr	r2, [pc, #16]	; (8000cec <HAL_MspInit+0x6c>)
 8000cda:	68fb      	ldr	r3, [r7, #12]
 8000cdc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cde:	bf00      	nop
 8000ce0:	3710      	adds	r7, #16
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	bd80      	pop	{r7, pc}
 8000ce6:	bf00      	nop
 8000ce8:	40021000 	.word	0x40021000
 8000cec:	40010000 	.word	0x40010000

08000cf0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	b08c      	sub	sp, #48	; 0x30
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8000d00:	2300      	movs	r3, #0
 8000d02:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000d06:	4b2e      	ldr	r3, [pc, #184]	; (8000dc0 <HAL_InitTick+0xd0>)
 8000d08:	699b      	ldr	r3, [r3, #24]
 8000d0a:	4a2d      	ldr	r2, [pc, #180]	; (8000dc0 <HAL_InitTick+0xd0>)
 8000d0c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000d10:	6193      	str	r3, [r2, #24]
 8000d12:	4b2b      	ldr	r3, [pc, #172]	; (8000dc0 <HAL_InitTick+0xd0>)
 8000d14:	699b      	ldr	r3, [r3, #24]
 8000d16:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000d1a:	60bb      	str	r3, [r7, #8]
 8000d1c:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000d1e:	f107 020c 	add.w	r2, r7, #12
 8000d22:	f107 0310 	add.w	r3, r7, #16
 8000d26:	4611      	mov	r1, r2
 8000d28:	4618      	mov	r0, r3
 8000d2a:	f001 fc3d 	bl	80025a8 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000d2e:	f001 fc27 	bl	8002580 <HAL_RCC_GetPCLK2Freq>
 8000d32:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000d34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d36:	4a23      	ldr	r2, [pc, #140]	; (8000dc4 <HAL_InitTick+0xd4>)
 8000d38:	fba2 2303 	umull	r2, r3, r2, r3
 8000d3c:	0c9b      	lsrs	r3, r3, #18
 8000d3e:	3b01      	subs	r3, #1
 8000d40:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000d42:	4b21      	ldr	r3, [pc, #132]	; (8000dc8 <HAL_InitTick+0xd8>)
 8000d44:	4a21      	ldr	r2, [pc, #132]	; (8000dcc <HAL_InitTick+0xdc>)
 8000d46:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000d48:	4b1f      	ldr	r3, [pc, #124]	; (8000dc8 <HAL_InitTick+0xd8>)
 8000d4a:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000d4e:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000d50:	4a1d      	ldr	r2, [pc, #116]	; (8000dc8 <HAL_InitTick+0xd8>)
 8000d52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d54:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000d56:	4b1c      	ldr	r3, [pc, #112]	; (8000dc8 <HAL_InitTick+0xd8>)
 8000d58:	2200      	movs	r2, #0
 8000d5a:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d5c:	4b1a      	ldr	r3, [pc, #104]	; (8000dc8 <HAL_InitTick+0xd8>)
 8000d5e:	2200      	movs	r2, #0
 8000d60:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d62:	4b19      	ldr	r3, [pc, #100]	; (8000dc8 <HAL_InitTick+0xd8>)
 8000d64:	2200      	movs	r2, #0
 8000d66:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8000d68:	4817      	ldr	r0, [pc, #92]	; (8000dc8 <HAL_InitTick+0xd8>)
 8000d6a:	f001 fc6b 	bl	8002644 <HAL_TIM_Base_Init>
 8000d6e:	4603      	mov	r3, r0
 8000d70:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8000d74:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	d11b      	bne.n	8000db4 <HAL_InitTick+0xc4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8000d7c:	4812      	ldr	r0, [pc, #72]	; (8000dc8 <HAL_InitTick+0xd8>)
 8000d7e:	f001 fcb1 	bl	80026e4 <HAL_TIM_Base_Start_IT>
 8000d82:	4603      	mov	r3, r0
 8000d84:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8000d88:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	d111      	bne.n	8000db4 <HAL_InitTick+0xc4>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8000d90:	2019      	movs	r0, #25
 8000d92:	f000 fb62 	bl	800145a <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	2b0f      	cmp	r3, #15
 8000d9a:	d808      	bhi.n	8000dae <HAL_InitTick+0xbe>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority, 0U);
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	6879      	ldr	r1, [r7, #4]
 8000da0:	2019      	movs	r0, #25
 8000da2:	f000 fb3e 	bl	8001422 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000da6:	4a0a      	ldr	r2, [pc, #40]	; (8000dd0 <HAL_InitTick+0xe0>)
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	6013      	str	r3, [r2, #0]
 8000dac:	e002      	b.n	8000db4 <HAL_InitTick+0xc4>
      }
      else
      {
        status = HAL_ERROR;
 8000dae:	2301      	movs	r3, #1
 8000db0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000db4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8000db8:	4618      	mov	r0, r3
 8000dba:	3730      	adds	r7, #48	; 0x30
 8000dbc:	46bd      	mov	sp, r7
 8000dbe:	bd80      	pop	{r7, pc}
 8000dc0:	40021000 	.word	0x40021000
 8000dc4:	431bde83 	.word	0x431bde83
 8000dc8:	20000138 	.word	0x20000138
 8000dcc:	40012c00 	.word	0x40012c00
 8000dd0:	20000010 	.word	0x20000010

08000dd4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000dd4:	b480      	push	{r7}
 8000dd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000dd8:	e7fe      	b.n	8000dd8 <NMI_Handler+0x4>

08000dda <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000dda:	b480      	push	{r7}
 8000ddc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000dde:	e7fe      	b.n	8000dde <HardFault_Handler+0x4>

08000de0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000de0:	b480      	push	{r7}
 8000de2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000de4:	e7fe      	b.n	8000de4 <MemManage_Handler+0x4>

08000de6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000de6:	b480      	push	{r7}
 8000de8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000dea:	e7fe      	b.n	8000dea <BusFault_Handler+0x4>

08000dec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000dec:	b480      	push	{r7}
 8000dee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000df0:	e7fe      	b.n	8000df0 <UsageFault_Handler+0x4>

08000df2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000df2:	b480      	push	{r7}
 8000df4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000df6:	bf00      	nop
 8000df8:	46bd      	mov	sp, r7
 8000dfa:	bc80      	pop	{r7}
 8000dfc:	4770      	bx	lr
	...

08000e00 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8000e04:	4802      	ldr	r0, [pc, #8]	; (8000e10 <DMA1_Channel4_IRQHandler+0x10>)
 8000e06:	f000 fca5 	bl	8001754 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8000e0a:	bf00      	nop
 8000e0c:	bd80      	pop	{r7, pc}
 8000e0e:	bf00      	nop
 8000e10:	2000025c 	.word	0x2000025c

08000e14 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000e18:	4802      	ldr	r0, [pc, #8]	; (8000e24 <TIM1_UP_IRQHandler+0x10>)
 8000e1a:	f001 fcb5 	bl	8002788 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8000e1e:	bf00      	nop
 8000e20:	bd80      	pop	{r7, pc}
 8000e22:	bf00      	nop
 8000e24:	20000138 	.word	0x20000138

08000e28 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000e2c:	4802      	ldr	r0, [pc, #8]	; (8000e38 <TIM3_IRQHandler+0x10>)
 8000e2e:	f001 fcab 	bl	8002788 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000e32:	bf00      	nop
 8000e34:	bd80      	pop	{r7, pc}
 8000e36:	bf00      	nop
 8000e38:	200001cc 	.word	0x200001cc

08000e3c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000e40:	4802      	ldr	r0, [pc, #8]	; (8000e4c <USART1_IRQHandler+0x10>)
 8000e42:	f002 f941 	bl	80030c8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000e46:	bf00      	nop
 8000e48:	bd80      	pop	{r7, pc}
 8000e4a:	bf00      	nop
 8000e4c:	20000214 	.word	0x20000214

08000e50 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b086      	sub	sp, #24
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e58:	4a14      	ldr	r2, [pc, #80]	; (8000eac <_sbrk+0x5c>)
 8000e5a:	4b15      	ldr	r3, [pc, #84]	; (8000eb0 <_sbrk+0x60>)
 8000e5c:	1ad3      	subs	r3, r2, r3
 8000e5e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e60:	697b      	ldr	r3, [r7, #20]
 8000e62:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e64:	4b13      	ldr	r3, [pc, #76]	; (8000eb4 <_sbrk+0x64>)
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	d102      	bne.n	8000e72 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e6c:	4b11      	ldr	r3, [pc, #68]	; (8000eb4 <_sbrk+0x64>)
 8000e6e:	4a12      	ldr	r2, [pc, #72]	; (8000eb8 <_sbrk+0x68>)
 8000e70:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e72:	4b10      	ldr	r3, [pc, #64]	; (8000eb4 <_sbrk+0x64>)
 8000e74:	681a      	ldr	r2, [r3, #0]
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	4413      	add	r3, r2
 8000e7a:	693a      	ldr	r2, [r7, #16]
 8000e7c:	429a      	cmp	r2, r3
 8000e7e:	d207      	bcs.n	8000e90 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e80:	f005 fccc 	bl	800681c <__errno>
 8000e84:	4603      	mov	r3, r0
 8000e86:	220c      	movs	r2, #12
 8000e88:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e8a:	f04f 33ff 	mov.w	r3, #4294967295
 8000e8e:	e009      	b.n	8000ea4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e90:	4b08      	ldr	r3, [pc, #32]	; (8000eb4 <_sbrk+0x64>)
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e96:	4b07      	ldr	r3, [pc, #28]	; (8000eb4 <_sbrk+0x64>)
 8000e98:	681a      	ldr	r2, [r3, #0]
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	4413      	add	r3, r2
 8000e9e:	4a05      	ldr	r2, [pc, #20]	; (8000eb4 <_sbrk+0x64>)
 8000ea0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000ea2:	68fb      	ldr	r3, [r7, #12]
}
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	3718      	adds	r7, #24
 8000ea8:	46bd      	mov	sp, r7
 8000eaa:	bd80      	pop	{r7, pc}
 8000eac:	20005000 	.word	0x20005000
 8000eb0:	00000400 	.word	0x00000400
 8000eb4:	20000180 	.word	0x20000180
 8000eb8:	20001cc0 	.word	0x20001cc0

08000ebc <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b086      	sub	sp, #24
 8000ec0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000ec2:	f107 0308 	add.w	r3, r7, #8
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	601a      	str	r2, [r3, #0]
 8000eca:	605a      	str	r2, [r3, #4]
 8000ecc:	609a      	str	r2, [r3, #8]
 8000ece:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ed0:	463b      	mov	r3, r7
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	601a      	str	r2, [r3, #0]
 8000ed6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000ed8:	4b1d      	ldr	r3, [pc, #116]	; (8000f50 <MX_TIM2_Init+0x94>)
 8000eda:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000ede:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 72-1;
 8000ee0:	4b1b      	ldr	r3, [pc, #108]	; (8000f50 <MX_TIM2_Init+0x94>)
 8000ee2:	2247      	movs	r2, #71	; 0x47
 8000ee4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ee6:	4b1a      	ldr	r3, [pc, #104]	; (8000f50 <MX_TIM2_Init+0x94>)
 8000ee8:	2200      	movs	r2, #0
 8000eea:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8000eec:	4b18      	ldr	r3, [pc, #96]	; (8000f50 <MX_TIM2_Init+0x94>)
 8000eee:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000ef2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ef4:	4b16      	ldr	r3, [pc, #88]	; (8000f50 <MX_TIM2_Init+0x94>)
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000efa:	4b15      	ldr	r3, [pc, #84]	; (8000f50 <MX_TIM2_Init+0x94>)
 8000efc:	2200      	movs	r2, #0
 8000efe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000f00:	4813      	ldr	r0, [pc, #76]	; (8000f50 <MX_TIM2_Init+0x94>)
 8000f02:	f001 fb9f 	bl	8002644 <HAL_TIM_Base_Init>
 8000f06:	4603      	mov	r3, r0
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d001      	beq.n	8000f10 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000f0c:	f7ff feb2 	bl	8000c74 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f10:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f14:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000f16:	f107 0308 	add.w	r3, r7, #8
 8000f1a:	4619      	mov	r1, r3
 8000f1c:	480c      	ldr	r0, [pc, #48]	; (8000f50 <MX_TIM2_Init+0x94>)
 8000f1e:	f001 fd3b 	bl	8002998 <HAL_TIM_ConfigClockSource>
 8000f22:	4603      	mov	r3, r0
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d001      	beq.n	8000f2c <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000f28:	f7ff fea4 	bl	8000c74 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f30:	2300      	movs	r3, #0
 8000f32:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000f34:	463b      	mov	r3, r7
 8000f36:	4619      	mov	r1, r3
 8000f38:	4805      	ldr	r0, [pc, #20]	; (8000f50 <MX_TIM2_Init+0x94>)
 8000f3a:	f001 ff11 	bl	8002d60 <HAL_TIMEx_MasterConfigSynchronization>
 8000f3e:	4603      	mov	r3, r0
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d001      	beq.n	8000f48 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000f44:	f7ff fe96 	bl	8000c74 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000f48:	bf00      	nop
 8000f4a:	3718      	adds	r7, #24
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	bd80      	pop	{r7, pc}
 8000f50:	20000184 	.word	0x20000184

08000f54 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	b086      	sub	sp, #24
 8000f58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f5a:	f107 0308 	add.w	r3, r7, #8
 8000f5e:	2200      	movs	r2, #0
 8000f60:	601a      	str	r2, [r3, #0]
 8000f62:	605a      	str	r2, [r3, #4]
 8000f64:	609a      	str	r2, [r3, #8]
 8000f66:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f68:	463b      	mov	r3, r7
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	601a      	str	r2, [r3, #0]
 8000f6e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000f70:	4b1d      	ldr	r3, [pc, #116]	; (8000fe8 <MX_TIM3_Init+0x94>)
 8000f72:	4a1e      	ldr	r2, [pc, #120]	; (8000fec <MX_TIM3_Init+0x98>)
 8000f74:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000f76:	4b1c      	ldr	r3, [pc, #112]	; (8000fe8 <MX_TIM3_Init+0x94>)
 8000f78:	2200      	movs	r2, #0
 8000f7a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f7c:	4b1a      	ldr	r3, [pc, #104]	; (8000fe8 <MX_TIM3_Init+0x94>)
 8000f7e:	2200      	movs	r2, #0
 8000f80:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000f82:	4b19      	ldr	r3, [pc, #100]	; (8000fe8 <MX_TIM3_Init+0x94>)
 8000f84:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000f88:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f8a:	4b17      	ldr	r3, [pc, #92]	; (8000fe8 <MX_TIM3_Init+0x94>)
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f90:	4b15      	ldr	r3, [pc, #84]	; (8000fe8 <MX_TIM3_Init+0x94>)
 8000f92:	2200      	movs	r2, #0
 8000f94:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000f96:	4814      	ldr	r0, [pc, #80]	; (8000fe8 <MX_TIM3_Init+0x94>)
 8000f98:	f001 fb54 	bl	8002644 <HAL_TIM_Base_Init>
 8000f9c:	4603      	mov	r3, r0
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d001      	beq.n	8000fa6 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8000fa2:	f7ff fe67 	bl	8000c74 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000fa6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000faa:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000fac:	f107 0308 	add.w	r3, r7, #8
 8000fb0:	4619      	mov	r1, r3
 8000fb2:	480d      	ldr	r0, [pc, #52]	; (8000fe8 <MX_TIM3_Init+0x94>)
 8000fb4:	f001 fcf0 	bl	8002998 <HAL_TIM_ConfigClockSource>
 8000fb8:	4603      	mov	r3, r0
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d001      	beq.n	8000fc2 <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8000fbe:	f7ff fe59 	bl	8000c74 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000fca:	463b      	mov	r3, r7
 8000fcc:	4619      	mov	r1, r3
 8000fce:	4806      	ldr	r0, [pc, #24]	; (8000fe8 <MX_TIM3_Init+0x94>)
 8000fd0:	f001 fec6 	bl	8002d60 <HAL_TIMEx_MasterConfigSynchronization>
 8000fd4:	4603      	mov	r3, r0
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d001      	beq.n	8000fde <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8000fda:	f7ff fe4b 	bl	8000c74 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000fde:	bf00      	nop
 8000fe0:	3718      	adds	r7, #24
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	bd80      	pop	{r7, pc}
 8000fe6:	bf00      	nop
 8000fe8:	200001cc 	.word	0x200001cc
 8000fec:	40000400 	.word	0x40000400

08000ff0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b084      	sub	sp, #16
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001000:	d10c      	bne.n	800101c <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001002:	4b15      	ldr	r3, [pc, #84]	; (8001058 <HAL_TIM_Base_MspInit+0x68>)
 8001004:	69db      	ldr	r3, [r3, #28]
 8001006:	4a14      	ldr	r2, [pc, #80]	; (8001058 <HAL_TIM_Base_MspInit+0x68>)
 8001008:	f043 0301 	orr.w	r3, r3, #1
 800100c:	61d3      	str	r3, [r2, #28]
 800100e:	4b12      	ldr	r3, [pc, #72]	; (8001058 <HAL_TIM_Base_MspInit+0x68>)
 8001010:	69db      	ldr	r3, [r3, #28]
 8001012:	f003 0301 	and.w	r3, r3, #1
 8001016:	60fb      	str	r3, [r7, #12]
 8001018:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 800101a:	e018      	b.n	800104e <HAL_TIM_Base_MspInit+0x5e>
  else if(tim_baseHandle->Instance==TIM3)
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	4a0e      	ldr	r2, [pc, #56]	; (800105c <HAL_TIM_Base_MspInit+0x6c>)
 8001022:	4293      	cmp	r3, r2
 8001024:	d113      	bne.n	800104e <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001026:	4b0c      	ldr	r3, [pc, #48]	; (8001058 <HAL_TIM_Base_MspInit+0x68>)
 8001028:	69db      	ldr	r3, [r3, #28]
 800102a:	4a0b      	ldr	r2, [pc, #44]	; (8001058 <HAL_TIM_Base_MspInit+0x68>)
 800102c:	f043 0302 	orr.w	r3, r3, #2
 8001030:	61d3      	str	r3, [r2, #28]
 8001032:	4b09      	ldr	r3, [pc, #36]	; (8001058 <HAL_TIM_Base_MspInit+0x68>)
 8001034:	69db      	ldr	r3, [r3, #28]
 8001036:	f003 0302 	and.w	r3, r3, #2
 800103a:	60bb      	str	r3, [r7, #8]
 800103c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 800103e:	2200      	movs	r2, #0
 8001040:	2105      	movs	r1, #5
 8001042:	201d      	movs	r0, #29
 8001044:	f000 f9ed 	bl	8001422 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001048:	201d      	movs	r0, #29
 800104a:	f000 fa06 	bl	800145a <HAL_NVIC_EnableIRQ>
}
 800104e:	bf00      	nop
 8001050:	3710      	adds	r7, #16
 8001052:	46bd      	mov	sp, r7
 8001054:	bd80      	pop	{r7, pc}
 8001056:	bf00      	nop
 8001058:	40021000 	.word	0x40021000
 800105c:	40000400 	.word	0x40000400

08001060 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001064:	4b11      	ldr	r3, [pc, #68]	; (80010ac <MX_USART1_UART_Init+0x4c>)
 8001066:	4a12      	ldr	r2, [pc, #72]	; (80010b0 <MX_USART1_UART_Init+0x50>)
 8001068:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800106a:	4b10      	ldr	r3, [pc, #64]	; (80010ac <MX_USART1_UART_Init+0x4c>)
 800106c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001070:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001072:	4b0e      	ldr	r3, [pc, #56]	; (80010ac <MX_USART1_UART_Init+0x4c>)
 8001074:	2200      	movs	r2, #0
 8001076:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001078:	4b0c      	ldr	r3, [pc, #48]	; (80010ac <MX_USART1_UART_Init+0x4c>)
 800107a:	2200      	movs	r2, #0
 800107c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800107e:	4b0b      	ldr	r3, [pc, #44]	; (80010ac <MX_USART1_UART_Init+0x4c>)
 8001080:	2200      	movs	r2, #0
 8001082:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001084:	4b09      	ldr	r3, [pc, #36]	; (80010ac <MX_USART1_UART_Init+0x4c>)
 8001086:	220c      	movs	r2, #12
 8001088:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800108a:	4b08      	ldr	r3, [pc, #32]	; (80010ac <MX_USART1_UART_Init+0x4c>)
 800108c:	2200      	movs	r2, #0
 800108e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001090:	4b06      	ldr	r3, [pc, #24]	; (80010ac <MX_USART1_UART_Init+0x4c>)
 8001092:	2200      	movs	r2, #0
 8001094:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001096:	4805      	ldr	r0, [pc, #20]	; (80010ac <MX_USART1_UART_Init+0x4c>)
 8001098:	f001 fed2 	bl	8002e40 <HAL_UART_Init>
 800109c:	4603      	mov	r3, r0
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d001      	beq.n	80010a6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80010a2:	f7ff fde7 	bl	8000c74 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80010a6:	bf00      	nop
 80010a8:	bd80      	pop	{r7, pc}
 80010aa:	bf00      	nop
 80010ac:	20000214 	.word	0x20000214
 80010b0:	40013800 	.word	0x40013800

080010b4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b088      	sub	sp, #32
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010bc:	f107 0310 	add.w	r3, r7, #16
 80010c0:	2200      	movs	r2, #0
 80010c2:	601a      	str	r2, [r3, #0]
 80010c4:	605a      	str	r2, [r3, #4]
 80010c6:	609a      	str	r2, [r3, #8]
 80010c8:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	4a34      	ldr	r2, [pc, #208]	; (80011a0 <HAL_UART_MspInit+0xec>)
 80010d0:	4293      	cmp	r3, r2
 80010d2:	d160      	bne.n	8001196 <HAL_UART_MspInit+0xe2>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80010d4:	4b33      	ldr	r3, [pc, #204]	; (80011a4 <HAL_UART_MspInit+0xf0>)
 80010d6:	699b      	ldr	r3, [r3, #24]
 80010d8:	4a32      	ldr	r2, [pc, #200]	; (80011a4 <HAL_UART_MspInit+0xf0>)
 80010da:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010de:	6193      	str	r3, [r2, #24]
 80010e0:	4b30      	ldr	r3, [pc, #192]	; (80011a4 <HAL_UART_MspInit+0xf0>)
 80010e2:	699b      	ldr	r3, [r3, #24]
 80010e4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80010e8:	60fb      	str	r3, [r7, #12]
 80010ea:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010ec:	4b2d      	ldr	r3, [pc, #180]	; (80011a4 <HAL_UART_MspInit+0xf0>)
 80010ee:	699b      	ldr	r3, [r3, #24]
 80010f0:	4a2c      	ldr	r2, [pc, #176]	; (80011a4 <HAL_UART_MspInit+0xf0>)
 80010f2:	f043 0304 	orr.w	r3, r3, #4
 80010f6:	6193      	str	r3, [r2, #24]
 80010f8:	4b2a      	ldr	r3, [pc, #168]	; (80011a4 <HAL_UART_MspInit+0xf0>)
 80010fa:	699b      	ldr	r3, [r3, #24]
 80010fc:	f003 0304 	and.w	r3, r3, #4
 8001100:	60bb      	str	r3, [r7, #8]
 8001102:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001104:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001108:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800110a:	2302      	movs	r3, #2
 800110c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800110e:	2303      	movs	r3, #3
 8001110:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001112:	f107 0310 	add.w	r3, r7, #16
 8001116:	4619      	mov	r1, r3
 8001118:	4823      	ldr	r0, [pc, #140]	; (80011a8 <HAL_UART_MspInit+0xf4>)
 800111a:	f000 fc4f 	bl	80019bc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800111e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001122:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001124:	2300      	movs	r3, #0
 8001126:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001128:	2300      	movs	r3, #0
 800112a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800112c:	f107 0310 	add.w	r3, r7, #16
 8001130:	4619      	mov	r1, r3
 8001132:	481d      	ldr	r0, [pc, #116]	; (80011a8 <HAL_UART_MspInit+0xf4>)
 8001134:	f000 fc42 	bl	80019bc <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel4;
 8001138:	4b1c      	ldr	r3, [pc, #112]	; (80011ac <HAL_UART_MspInit+0xf8>)
 800113a:	4a1d      	ldr	r2, [pc, #116]	; (80011b0 <HAL_UART_MspInit+0xfc>)
 800113c:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800113e:	4b1b      	ldr	r3, [pc, #108]	; (80011ac <HAL_UART_MspInit+0xf8>)
 8001140:	2210      	movs	r2, #16
 8001142:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001144:	4b19      	ldr	r3, [pc, #100]	; (80011ac <HAL_UART_MspInit+0xf8>)
 8001146:	2200      	movs	r2, #0
 8001148:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800114a:	4b18      	ldr	r3, [pc, #96]	; (80011ac <HAL_UART_MspInit+0xf8>)
 800114c:	2280      	movs	r2, #128	; 0x80
 800114e:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001150:	4b16      	ldr	r3, [pc, #88]	; (80011ac <HAL_UART_MspInit+0xf8>)
 8001152:	2200      	movs	r2, #0
 8001154:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001156:	4b15      	ldr	r3, [pc, #84]	; (80011ac <HAL_UART_MspInit+0xf8>)
 8001158:	2200      	movs	r2, #0
 800115a:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 800115c:	4b13      	ldr	r3, [pc, #76]	; (80011ac <HAL_UART_MspInit+0xf8>)
 800115e:	2200      	movs	r2, #0
 8001160:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8001162:	4b12      	ldr	r3, [pc, #72]	; (80011ac <HAL_UART_MspInit+0xf8>)
 8001164:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001168:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 800116a:	4810      	ldr	r0, [pc, #64]	; (80011ac <HAL_UART_MspInit+0xf8>)
 800116c:	f000 f984 	bl	8001478 <HAL_DMA_Init>
 8001170:	4603      	mov	r3, r0
 8001172:	2b00      	cmp	r3, #0
 8001174:	d001      	beq.n	800117a <HAL_UART_MspInit+0xc6>
    {
      Error_Handler();
 8001176:	f7ff fd7d 	bl	8000c74 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	4a0b      	ldr	r2, [pc, #44]	; (80011ac <HAL_UART_MspInit+0xf8>)
 800117e:	639a      	str	r2, [r3, #56]	; 0x38
 8001180:	4a0a      	ldr	r2, [pc, #40]	; (80011ac <HAL_UART_MspInit+0xf8>)
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8001186:	2200      	movs	r2, #0
 8001188:	2105      	movs	r1, #5
 800118a:	2025      	movs	r0, #37	; 0x25
 800118c:	f000 f949 	bl	8001422 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001190:	2025      	movs	r0, #37	; 0x25
 8001192:	f000 f962 	bl	800145a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8001196:	bf00      	nop
 8001198:	3720      	adds	r7, #32
 800119a:	46bd      	mov	sp, r7
 800119c:	bd80      	pop	{r7, pc}
 800119e:	bf00      	nop
 80011a0:	40013800 	.word	0x40013800
 80011a4:	40021000 	.word	0x40021000
 80011a8:	40010800 	.word	0x40010800
 80011ac:	2000025c 	.word	0x2000025c
 80011b0:	40020044 	.word	0x40020044

080011b4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80011b4:	f000 f823 	bl	80011fe <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80011b8:	480b      	ldr	r0, [pc, #44]	; (80011e8 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80011ba:	490c      	ldr	r1, [pc, #48]	; (80011ec <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80011bc:	4a0c      	ldr	r2, [pc, #48]	; (80011f0 <LoopFillZerobss+0x16>)
  movs r3, #0
 80011be:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80011c0:	e002      	b.n	80011c8 <LoopCopyDataInit>

080011c2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80011c2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80011c4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80011c6:	3304      	adds	r3, #4

080011c8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80011c8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80011ca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80011cc:	d3f9      	bcc.n	80011c2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80011ce:	4a09      	ldr	r2, [pc, #36]	; (80011f4 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80011d0:	4c09      	ldr	r4, [pc, #36]	; (80011f8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80011d2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80011d4:	e001      	b.n	80011da <LoopFillZerobss>

080011d6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80011d6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80011d8:	3204      	adds	r2, #4

080011da <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80011da:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80011dc:	d3fb      	bcc.n	80011d6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80011de:	f005 fb23 	bl	8006828 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80011e2:	f7ff fccf 	bl	8000b84 <main>
  bx lr
 80011e6:	4770      	bx	lr
  ldr r0, =_sdata
 80011e8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80011ec:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 80011f0:	080074b4 	.word	0x080074b4
  ldr r2, =_sbss
 80011f4:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 80011f8:	20001cbc 	.word	0x20001cbc

080011fc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80011fc:	e7fe      	b.n	80011fc <ADC1_2_IRQHandler>

080011fe <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80011fe:	b480      	push	{r7}
 8001200:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001202:	bf00      	nop
 8001204:	46bd      	mov	sp, r7
 8001206:	bc80      	pop	{r7}
 8001208:	4770      	bx	lr
	...

0800120c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001210:	4b08      	ldr	r3, [pc, #32]	; (8001234 <HAL_Init+0x28>)
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	4a07      	ldr	r2, [pc, #28]	; (8001234 <HAL_Init+0x28>)
 8001216:	f043 0310 	orr.w	r3, r3, #16
 800121a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800121c:	2003      	movs	r0, #3
 800121e:	f000 f8f5 	bl	800140c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001222:	200f      	movs	r0, #15
 8001224:	f7ff fd64 	bl	8000cf0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001228:	f7ff fd2a 	bl	8000c80 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800122c:	2300      	movs	r3, #0
}
 800122e:	4618      	mov	r0, r3
 8001230:	bd80      	pop	{r7, pc}
 8001232:	bf00      	nop
 8001234:	40022000 	.word	0x40022000

08001238 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001238:	b480      	push	{r7}
 800123a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800123c:	4b05      	ldr	r3, [pc, #20]	; (8001254 <HAL_IncTick+0x1c>)
 800123e:	781b      	ldrb	r3, [r3, #0]
 8001240:	461a      	mov	r2, r3
 8001242:	4b05      	ldr	r3, [pc, #20]	; (8001258 <HAL_IncTick+0x20>)
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	4413      	add	r3, r2
 8001248:	4a03      	ldr	r2, [pc, #12]	; (8001258 <HAL_IncTick+0x20>)
 800124a:	6013      	str	r3, [r2, #0]
}
 800124c:	bf00      	nop
 800124e:	46bd      	mov	sp, r7
 8001250:	bc80      	pop	{r7}
 8001252:	4770      	bx	lr
 8001254:	20000014 	.word	0x20000014
 8001258:	200002a0 	.word	0x200002a0

0800125c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800125c:	b480      	push	{r7}
 800125e:	af00      	add	r7, sp, #0
  return uwTick;
 8001260:	4b02      	ldr	r3, [pc, #8]	; (800126c <HAL_GetTick+0x10>)
 8001262:	681b      	ldr	r3, [r3, #0]
}
 8001264:	4618      	mov	r0, r3
 8001266:	46bd      	mov	sp, r7
 8001268:	bc80      	pop	{r7}
 800126a:	4770      	bx	lr
 800126c:	200002a0 	.word	0x200002a0

08001270 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	b084      	sub	sp, #16
 8001274:	af00      	add	r7, sp, #0
 8001276:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001278:	f7ff fff0 	bl	800125c <HAL_GetTick>
 800127c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001282:	68fb      	ldr	r3, [r7, #12]
 8001284:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001288:	d005      	beq.n	8001296 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800128a:	4b0a      	ldr	r3, [pc, #40]	; (80012b4 <HAL_Delay+0x44>)
 800128c:	781b      	ldrb	r3, [r3, #0]
 800128e:	461a      	mov	r2, r3
 8001290:	68fb      	ldr	r3, [r7, #12]
 8001292:	4413      	add	r3, r2
 8001294:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001296:	bf00      	nop
 8001298:	f7ff ffe0 	bl	800125c <HAL_GetTick>
 800129c:	4602      	mov	r2, r0
 800129e:	68bb      	ldr	r3, [r7, #8]
 80012a0:	1ad3      	subs	r3, r2, r3
 80012a2:	68fa      	ldr	r2, [r7, #12]
 80012a4:	429a      	cmp	r2, r3
 80012a6:	d8f7      	bhi.n	8001298 <HAL_Delay+0x28>
  {
  }
}
 80012a8:	bf00      	nop
 80012aa:	bf00      	nop
 80012ac:	3710      	adds	r7, #16
 80012ae:	46bd      	mov	sp, r7
 80012b0:	bd80      	pop	{r7, pc}
 80012b2:	bf00      	nop
 80012b4:	20000014 	.word	0x20000014

080012b8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012b8:	b480      	push	{r7}
 80012ba:	b085      	sub	sp, #20
 80012bc:	af00      	add	r7, sp, #0
 80012be:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	f003 0307 	and.w	r3, r3, #7
 80012c6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80012c8:	4b0c      	ldr	r3, [pc, #48]	; (80012fc <__NVIC_SetPriorityGrouping+0x44>)
 80012ca:	68db      	ldr	r3, [r3, #12]
 80012cc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80012ce:	68ba      	ldr	r2, [r7, #8]
 80012d0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80012d4:	4013      	ands	r3, r2
 80012d6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80012d8:	68fb      	ldr	r3, [r7, #12]
 80012da:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80012dc:	68bb      	ldr	r3, [r7, #8]
 80012de:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80012e0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80012e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80012e8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80012ea:	4a04      	ldr	r2, [pc, #16]	; (80012fc <__NVIC_SetPriorityGrouping+0x44>)
 80012ec:	68bb      	ldr	r3, [r7, #8]
 80012ee:	60d3      	str	r3, [r2, #12]
}
 80012f0:	bf00      	nop
 80012f2:	3714      	adds	r7, #20
 80012f4:	46bd      	mov	sp, r7
 80012f6:	bc80      	pop	{r7}
 80012f8:	4770      	bx	lr
 80012fa:	bf00      	nop
 80012fc:	e000ed00 	.word	0xe000ed00

08001300 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001300:	b480      	push	{r7}
 8001302:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001304:	4b04      	ldr	r3, [pc, #16]	; (8001318 <__NVIC_GetPriorityGrouping+0x18>)
 8001306:	68db      	ldr	r3, [r3, #12]
 8001308:	0a1b      	lsrs	r3, r3, #8
 800130a:	f003 0307 	and.w	r3, r3, #7
}
 800130e:	4618      	mov	r0, r3
 8001310:	46bd      	mov	sp, r7
 8001312:	bc80      	pop	{r7}
 8001314:	4770      	bx	lr
 8001316:	bf00      	nop
 8001318:	e000ed00 	.word	0xe000ed00

0800131c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800131c:	b480      	push	{r7}
 800131e:	b083      	sub	sp, #12
 8001320:	af00      	add	r7, sp, #0
 8001322:	4603      	mov	r3, r0
 8001324:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001326:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800132a:	2b00      	cmp	r3, #0
 800132c:	db0b      	blt.n	8001346 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800132e:	79fb      	ldrb	r3, [r7, #7]
 8001330:	f003 021f 	and.w	r2, r3, #31
 8001334:	4906      	ldr	r1, [pc, #24]	; (8001350 <__NVIC_EnableIRQ+0x34>)
 8001336:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800133a:	095b      	lsrs	r3, r3, #5
 800133c:	2001      	movs	r0, #1
 800133e:	fa00 f202 	lsl.w	r2, r0, r2
 8001342:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001346:	bf00      	nop
 8001348:	370c      	adds	r7, #12
 800134a:	46bd      	mov	sp, r7
 800134c:	bc80      	pop	{r7}
 800134e:	4770      	bx	lr
 8001350:	e000e100 	.word	0xe000e100

08001354 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001354:	b480      	push	{r7}
 8001356:	b083      	sub	sp, #12
 8001358:	af00      	add	r7, sp, #0
 800135a:	4603      	mov	r3, r0
 800135c:	6039      	str	r1, [r7, #0]
 800135e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001360:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001364:	2b00      	cmp	r3, #0
 8001366:	db0a      	blt.n	800137e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001368:	683b      	ldr	r3, [r7, #0]
 800136a:	b2da      	uxtb	r2, r3
 800136c:	490c      	ldr	r1, [pc, #48]	; (80013a0 <__NVIC_SetPriority+0x4c>)
 800136e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001372:	0112      	lsls	r2, r2, #4
 8001374:	b2d2      	uxtb	r2, r2
 8001376:	440b      	add	r3, r1
 8001378:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800137c:	e00a      	b.n	8001394 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800137e:	683b      	ldr	r3, [r7, #0]
 8001380:	b2da      	uxtb	r2, r3
 8001382:	4908      	ldr	r1, [pc, #32]	; (80013a4 <__NVIC_SetPriority+0x50>)
 8001384:	79fb      	ldrb	r3, [r7, #7]
 8001386:	f003 030f 	and.w	r3, r3, #15
 800138a:	3b04      	subs	r3, #4
 800138c:	0112      	lsls	r2, r2, #4
 800138e:	b2d2      	uxtb	r2, r2
 8001390:	440b      	add	r3, r1
 8001392:	761a      	strb	r2, [r3, #24]
}
 8001394:	bf00      	nop
 8001396:	370c      	adds	r7, #12
 8001398:	46bd      	mov	sp, r7
 800139a:	bc80      	pop	{r7}
 800139c:	4770      	bx	lr
 800139e:	bf00      	nop
 80013a0:	e000e100 	.word	0xe000e100
 80013a4:	e000ed00 	.word	0xe000ed00

080013a8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013a8:	b480      	push	{r7}
 80013aa:	b089      	sub	sp, #36	; 0x24
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	60f8      	str	r0, [r7, #12]
 80013b0:	60b9      	str	r1, [r7, #8]
 80013b2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80013b4:	68fb      	ldr	r3, [r7, #12]
 80013b6:	f003 0307 	and.w	r3, r3, #7
 80013ba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80013bc:	69fb      	ldr	r3, [r7, #28]
 80013be:	f1c3 0307 	rsb	r3, r3, #7
 80013c2:	2b04      	cmp	r3, #4
 80013c4:	bf28      	it	cs
 80013c6:	2304      	movcs	r3, #4
 80013c8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80013ca:	69fb      	ldr	r3, [r7, #28]
 80013cc:	3304      	adds	r3, #4
 80013ce:	2b06      	cmp	r3, #6
 80013d0:	d902      	bls.n	80013d8 <NVIC_EncodePriority+0x30>
 80013d2:	69fb      	ldr	r3, [r7, #28]
 80013d4:	3b03      	subs	r3, #3
 80013d6:	e000      	b.n	80013da <NVIC_EncodePriority+0x32>
 80013d8:	2300      	movs	r3, #0
 80013da:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013dc:	f04f 32ff 	mov.w	r2, #4294967295
 80013e0:	69bb      	ldr	r3, [r7, #24]
 80013e2:	fa02 f303 	lsl.w	r3, r2, r3
 80013e6:	43da      	mvns	r2, r3
 80013e8:	68bb      	ldr	r3, [r7, #8]
 80013ea:	401a      	ands	r2, r3
 80013ec:	697b      	ldr	r3, [r7, #20]
 80013ee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80013f0:	f04f 31ff 	mov.w	r1, #4294967295
 80013f4:	697b      	ldr	r3, [r7, #20]
 80013f6:	fa01 f303 	lsl.w	r3, r1, r3
 80013fa:	43d9      	mvns	r1, r3
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001400:	4313      	orrs	r3, r2
         );
}
 8001402:	4618      	mov	r0, r3
 8001404:	3724      	adds	r7, #36	; 0x24
 8001406:	46bd      	mov	sp, r7
 8001408:	bc80      	pop	{r7}
 800140a:	4770      	bx	lr

0800140c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	b082      	sub	sp, #8
 8001410:	af00      	add	r7, sp, #0
 8001412:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001414:	6878      	ldr	r0, [r7, #4]
 8001416:	f7ff ff4f 	bl	80012b8 <__NVIC_SetPriorityGrouping>
}
 800141a:	bf00      	nop
 800141c:	3708      	adds	r7, #8
 800141e:	46bd      	mov	sp, r7
 8001420:	bd80      	pop	{r7, pc}

08001422 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001422:	b580      	push	{r7, lr}
 8001424:	b086      	sub	sp, #24
 8001426:	af00      	add	r7, sp, #0
 8001428:	4603      	mov	r3, r0
 800142a:	60b9      	str	r1, [r7, #8]
 800142c:	607a      	str	r2, [r7, #4]
 800142e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001430:	2300      	movs	r3, #0
 8001432:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001434:	f7ff ff64 	bl	8001300 <__NVIC_GetPriorityGrouping>
 8001438:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800143a:	687a      	ldr	r2, [r7, #4]
 800143c:	68b9      	ldr	r1, [r7, #8]
 800143e:	6978      	ldr	r0, [r7, #20]
 8001440:	f7ff ffb2 	bl	80013a8 <NVIC_EncodePriority>
 8001444:	4602      	mov	r2, r0
 8001446:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800144a:	4611      	mov	r1, r2
 800144c:	4618      	mov	r0, r3
 800144e:	f7ff ff81 	bl	8001354 <__NVIC_SetPriority>
}
 8001452:	bf00      	nop
 8001454:	3718      	adds	r7, #24
 8001456:	46bd      	mov	sp, r7
 8001458:	bd80      	pop	{r7, pc}

0800145a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800145a:	b580      	push	{r7, lr}
 800145c:	b082      	sub	sp, #8
 800145e:	af00      	add	r7, sp, #0
 8001460:	4603      	mov	r3, r0
 8001462:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001464:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001468:	4618      	mov	r0, r3
 800146a:	f7ff ff57 	bl	800131c <__NVIC_EnableIRQ>
}
 800146e:	bf00      	nop
 8001470:	3708      	adds	r7, #8
 8001472:	46bd      	mov	sp, r7
 8001474:	bd80      	pop	{r7, pc}
	...

08001478 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001478:	b480      	push	{r7}
 800147a:	b085      	sub	sp, #20
 800147c:	af00      	add	r7, sp, #0
 800147e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001480:	2300      	movs	r3, #0
 8001482:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	2b00      	cmp	r3, #0
 8001488:	d101      	bne.n	800148e <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 800148a:	2301      	movs	r3, #1
 800148c:	e043      	b.n	8001516 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	461a      	mov	r2, r3
 8001494:	4b22      	ldr	r3, [pc, #136]	; (8001520 <HAL_DMA_Init+0xa8>)
 8001496:	4413      	add	r3, r2
 8001498:	4a22      	ldr	r2, [pc, #136]	; (8001524 <HAL_DMA_Init+0xac>)
 800149a:	fba2 2303 	umull	r2, r3, r2, r3
 800149e:	091b      	lsrs	r3, r3, #4
 80014a0:	009a      	lsls	r2, r3, #2
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	4a1f      	ldr	r2, [pc, #124]	; (8001528 <HAL_DMA_Init+0xb0>)
 80014aa:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	2202      	movs	r2, #2
 80014b0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80014bc:	68fb      	ldr	r3, [r7, #12]
 80014be:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80014c2:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80014c6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80014d0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	68db      	ldr	r3, [r3, #12]
 80014d6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80014dc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	695b      	ldr	r3, [r3, #20]
 80014e2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80014e8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	69db      	ldr	r3, [r3, #28]
 80014ee:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80014f0:	68fa      	ldr	r2, [r7, #12]
 80014f2:	4313      	orrs	r3, r2
 80014f4:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	68fa      	ldr	r2, [r7, #12]
 80014fc:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	2200      	movs	r2, #0
 8001502:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	2201      	movs	r2, #1
 8001508:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	2200      	movs	r2, #0
 8001510:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8001514:	2300      	movs	r3, #0
}
 8001516:	4618      	mov	r0, r3
 8001518:	3714      	adds	r7, #20
 800151a:	46bd      	mov	sp, r7
 800151c:	bc80      	pop	{r7}
 800151e:	4770      	bx	lr
 8001520:	bffdfff8 	.word	0xbffdfff8
 8001524:	cccccccd 	.word	0xcccccccd
 8001528:	40020000 	.word	0x40020000

0800152c <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	b086      	sub	sp, #24
 8001530:	af00      	add	r7, sp, #0
 8001532:	60f8      	str	r0, [r7, #12]
 8001534:	60b9      	str	r1, [r7, #8]
 8001536:	607a      	str	r2, [r7, #4]
 8001538:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800153a:	2300      	movs	r3, #0
 800153c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800153e:	68fb      	ldr	r3, [r7, #12]
 8001540:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001544:	2b01      	cmp	r3, #1
 8001546:	d101      	bne.n	800154c <HAL_DMA_Start_IT+0x20>
 8001548:	2302      	movs	r3, #2
 800154a:	e04b      	b.n	80015e4 <HAL_DMA_Start_IT+0xb8>
 800154c:	68fb      	ldr	r3, [r7, #12]
 800154e:	2201      	movs	r2, #1
 8001550:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800155a:	b2db      	uxtb	r3, r3
 800155c:	2b01      	cmp	r3, #1
 800155e:	d13a      	bne.n	80015d6 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	2202      	movs	r2, #2
 8001564:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001568:	68fb      	ldr	r3, [r7, #12]
 800156a:	2200      	movs	r2, #0
 800156c:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800156e:	68fb      	ldr	r3, [r7, #12]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	681a      	ldr	r2, [r3, #0]
 8001574:	68fb      	ldr	r3, [r7, #12]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	f022 0201 	bic.w	r2, r2, #1
 800157c:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800157e:	683b      	ldr	r3, [r7, #0]
 8001580:	687a      	ldr	r2, [r7, #4]
 8001582:	68b9      	ldr	r1, [r7, #8]
 8001584:	68f8      	ldr	r0, [r7, #12]
 8001586:	f000 f9eb 	bl	8001960 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 800158a:	68fb      	ldr	r3, [r7, #12]
 800158c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800158e:	2b00      	cmp	r3, #0
 8001590:	d008      	beq.n	80015a4 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001592:	68fb      	ldr	r3, [r7, #12]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	681a      	ldr	r2, [r3, #0]
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	f042 020e 	orr.w	r2, r2, #14
 80015a0:	601a      	str	r2, [r3, #0]
 80015a2:	e00f      	b.n	80015c4 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80015a4:	68fb      	ldr	r3, [r7, #12]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	681a      	ldr	r2, [r3, #0]
 80015aa:	68fb      	ldr	r3, [r7, #12]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	f022 0204 	bic.w	r2, r2, #4
 80015b2:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	681a      	ldr	r2, [r3, #0]
 80015ba:	68fb      	ldr	r3, [r7, #12]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	f042 020a 	orr.w	r2, r2, #10
 80015c2:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80015c4:	68fb      	ldr	r3, [r7, #12]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	681a      	ldr	r2, [r3, #0]
 80015ca:	68fb      	ldr	r3, [r7, #12]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	f042 0201 	orr.w	r2, r2, #1
 80015d2:	601a      	str	r2, [r3, #0]
 80015d4:	e005      	b.n	80015e2 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80015d6:	68fb      	ldr	r3, [r7, #12]
 80015d8:	2200      	movs	r2, #0
 80015da:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 80015de:	2302      	movs	r3, #2
 80015e0:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 80015e2:	7dfb      	ldrb	r3, [r7, #23]
}
 80015e4:	4618      	mov	r0, r3
 80015e6:	3718      	adds	r7, #24
 80015e8:	46bd      	mov	sp, r7
 80015ea:	bd80      	pop	{r7, pc}

080015ec <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80015ec:	b480      	push	{r7}
 80015ee:	b085      	sub	sp, #20
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80015f4:	2300      	movs	r3, #0
 80015f6:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80015fe:	b2db      	uxtb	r3, r3
 8001600:	2b02      	cmp	r3, #2
 8001602:	d008      	beq.n	8001616 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	2204      	movs	r2, #4
 8001608:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	2200      	movs	r2, #0
 800160e:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001612:	2301      	movs	r3, #1
 8001614:	e020      	b.n	8001658 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	681a      	ldr	r2, [r3, #0]
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	f022 020e 	bic.w	r2, r2, #14
 8001624:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	681a      	ldr	r2, [r3, #0]
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	f022 0201 	bic.w	r2, r2, #1
 8001634:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800163e:	2101      	movs	r1, #1
 8001640:	fa01 f202 	lsl.w	r2, r1, r2
 8001644:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	2201      	movs	r2, #1
 800164a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	2200      	movs	r2, #0
 8001652:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8001656:	7bfb      	ldrb	r3, [r7, #15]
}
 8001658:	4618      	mov	r0, r3
 800165a:	3714      	adds	r7, #20
 800165c:	46bd      	mov	sp, r7
 800165e:	bc80      	pop	{r7}
 8001660:	4770      	bx	lr
	...

08001664 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001664:	b580      	push	{r7, lr}
 8001666:	b084      	sub	sp, #16
 8001668:	af00      	add	r7, sp, #0
 800166a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800166c:	2300      	movs	r3, #0
 800166e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001676:	b2db      	uxtb	r3, r3
 8001678:	2b02      	cmp	r3, #2
 800167a:	d005      	beq.n	8001688 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	2204      	movs	r2, #4
 8001680:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001682:	2301      	movs	r3, #1
 8001684:	73fb      	strb	r3, [r7, #15]
 8001686:	e051      	b.n	800172c <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	681a      	ldr	r2, [r3, #0]
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	f022 020e 	bic.w	r2, r2, #14
 8001696:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	681a      	ldr	r2, [r3, #0]
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	f022 0201 	bic.w	r2, r2, #1
 80016a6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	4a22      	ldr	r2, [pc, #136]	; (8001738 <HAL_DMA_Abort_IT+0xd4>)
 80016ae:	4293      	cmp	r3, r2
 80016b0:	d029      	beq.n	8001706 <HAL_DMA_Abort_IT+0xa2>
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	4a21      	ldr	r2, [pc, #132]	; (800173c <HAL_DMA_Abort_IT+0xd8>)
 80016b8:	4293      	cmp	r3, r2
 80016ba:	d022      	beq.n	8001702 <HAL_DMA_Abort_IT+0x9e>
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	4a1f      	ldr	r2, [pc, #124]	; (8001740 <HAL_DMA_Abort_IT+0xdc>)
 80016c2:	4293      	cmp	r3, r2
 80016c4:	d01a      	beq.n	80016fc <HAL_DMA_Abort_IT+0x98>
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	4a1e      	ldr	r2, [pc, #120]	; (8001744 <HAL_DMA_Abort_IT+0xe0>)
 80016cc:	4293      	cmp	r3, r2
 80016ce:	d012      	beq.n	80016f6 <HAL_DMA_Abort_IT+0x92>
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	4a1c      	ldr	r2, [pc, #112]	; (8001748 <HAL_DMA_Abort_IT+0xe4>)
 80016d6:	4293      	cmp	r3, r2
 80016d8:	d00a      	beq.n	80016f0 <HAL_DMA_Abort_IT+0x8c>
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	4a1b      	ldr	r2, [pc, #108]	; (800174c <HAL_DMA_Abort_IT+0xe8>)
 80016e0:	4293      	cmp	r3, r2
 80016e2:	d102      	bne.n	80016ea <HAL_DMA_Abort_IT+0x86>
 80016e4:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80016e8:	e00e      	b.n	8001708 <HAL_DMA_Abort_IT+0xa4>
 80016ea:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80016ee:	e00b      	b.n	8001708 <HAL_DMA_Abort_IT+0xa4>
 80016f0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80016f4:	e008      	b.n	8001708 <HAL_DMA_Abort_IT+0xa4>
 80016f6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80016fa:	e005      	b.n	8001708 <HAL_DMA_Abort_IT+0xa4>
 80016fc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001700:	e002      	b.n	8001708 <HAL_DMA_Abort_IT+0xa4>
 8001702:	2310      	movs	r3, #16
 8001704:	e000      	b.n	8001708 <HAL_DMA_Abort_IT+0xa4>
 8001706:	2301      	movs	r3, #1
 8001708:	4a11      	ldr	r2, [pc, #68]	; (8001750 <HAL_DMA_Abort_IT+0xec>)
 800170a:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	2201      	movs	r2, #1
 8001710:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	2200      	movs	r2, #0
 8001718:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001720:	2b00      	cmp	r3, #0
 8001722:	d003      	beq.n	800172c <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001728:	6878      	ldr	r0, [r7, #4]
 800172a:	4798      	blx	r3
    } 
  }
  return status;
 800172c:	7bfb      	ldrb	r3, [r7, #15]
}
 800172e:	4618      	mov	r0, r3
 8001730:	3710      	adds	r7, #16
 8001732:	46bd      	mov	sp, r7
 8001734:	bd80      	pop	{r7, pc}
 8001736:	bf00      	nop
 8001738:	40020008 	.word	0x40020008
 800173c:	4002001c 	.word	0x4002001c
 8001740:	40020030 	.word	0x40020030
 8001744:	40020044 	.word	0x40020044
 8001748:	40020058 	.word	0x40020058
 800174c:	4002006c 	.word	0x4002006c
 8001750:	40020000 	.word	0x40020000

08001754 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001754:	b580      	push	{r7, lr}
 8001756:	b084      	sub	sp, #16
 8001758:	af00      	add	r7, sp, #0
 800175a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001770:	2204      	movs	r2, #4
 8001772:	409a      	lsls	r2, r3
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	4013      	ands	r3, r2
 8001778:	2b00      	cmp	r3, #0
 800177a:	d04f      	beq.n	800181c <HAL_DMA_IRQHandler+0xc8>
 800177c:	68bb      	ldr	r3, [r7, #8]
 800177e:	f003 0304 	and.w	r3, r3, #4
 8001782:	2b00      	cmp	r3, #0
 8001784:	d04a      	beq.n	800181c <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	f003 0320 	and.w	r3, r3, #32
 8001790:	2b00      	cmp	r3, #0
 8001792:	d107      	bne.n	80017a4 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	681a      	ldr	r2, [r3, #0]
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	f022 0204 	bic.w	r2, r2, #4
 80017a2:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	4a66      	ldr	r2, [pc, #408]	; (8001944 <HAL_DMA_IRQHandler+0x1f0>)
 80017aa:	4293      	cmp	r3, r2
 80017ac:	d029      	beq.n	8001802 <HAL_DMA_IRQHandler+0xae>
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	4a65      	ldr	r2, [pc, #404]	; (8001948 <HAL_DMA_IRQHandler+0x1f4>)
 80017b4:	4293      	cmp	r3, r2
 80017b6:	d022      	beq.n	80017fe <HAL_DMA_IRQHandler+0xaa>
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	4a63      	ldr	r2, [pc, #396]	; (800194c <HAL_DMA_IRQHandler+0x1f8>)
 80017be:	4293      	cmp	r3, r2
 80017c0:	d01a      	beq.n	80017f8 <HAL_DMA_IRQHandler+0xa4>
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	4a62      	ldr	r2, [pc, #392]	; (8001950 <HAL_DMA_IRQHandler+0x1fc>)
 80017c8:	4293      	cmp	r3, r2
 80017ca:	d012      	beq.n	80017f2 <HAL_DMA_IRQHandler+0x9e>
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	4a60      	ldr	r2, [pc, #384]	; (8001954 <HAL_DMA_IRQHandler+0x200>)
 80017d2:	4293      	cmp	r3, r2
 80017d4:	d00a      	beq.n	80017ec <HAL_DMA_IRQHandler+0x98>
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	4a5f      	ldr	r2, [pc, #380]	; (8001958 <HAL_DMA_IRQHandler+0x204>)
 80017dc:	4293      	cmp	r3, r2
 80017de:	d102      	bne.n	80017e6 <HAL_DMA_IRQHandler+0x92>
 80017e0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80017e4:	e00e      	b.n	8001804 <HAL_DMA_IRQHandler+0xb0>
 80017e6:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80017ea:	e00b      	b.n	8001804 <HAL_DMA_IRQHandler+0xb0>
 80017ec:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80017f0:	e008      	b.n	8001804 <HAL_DMA_IRQHandler+0xb0>
 80017f2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80017f6:	e005      	b.n	8001804 <HAL_DMA_IRQHandler+0xb0>
 80017f8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80017fc:	e002      	b.n	8001804 <HAL_DMA_IRQHandler+0xb0>
 80017fe:	2340      	movs	r3, #64	; 0x40
 8001800:	e000      	b.n	8001804 <HAL_DMA_IRQHandler+0xb0>
 8001802:	2304      	movs	r3, #4
 8001804:	4a55      	ldr	r2, [pc, #340]	; (800195c <HAL_DMA_IRQHandler+0x208>)
 8001806:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800180c:	2b00      	cmp	r3, #0
 800180e:	f000 8094 	beq.w	800193a <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001816:	6878      	ldr	r0, [r7, #4]
 8001818:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 800181a:	e08e      	b.n	800193a <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001820:	2202      	movs	r2, #2
 8001822:	409a      	lsls	r2, r3
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	4013      	ands	r3, r2
 8001828:	2b00      	cmp	r3, #0
 800182a:	d056      	beq.n	80018da <HAL_DMA_IRQHandler+0x186>
 800182c:	68bb      	ldr	r3, [r7, #8]
 800182e:	f003 0302 	and.w	r3, r3, #2
 8001832:	2b00      	cmp	r3, #0
 8001834:	d051      	beq.n	80018da <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	f003 0320 	and.w	r3, r3, #32
 8001840:	2b00      	cmp	r3, #0
 8001842:	d10b      	bne.n	800185c <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	681a      	ldr	r2, [r3, #0]
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	f022 020a 	bic.w	r2, r2, #10
 8001852:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	2201      	movs	r2, #1
 8001858:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	4a38      	ldr	r2, [pc, #224]	; (8001944 <HAL_DMA_IRQHandler+0x1f0>)
 8001862:	4293      	cmp	r3, r2
 8001864:	d029      	beq.n	80018ba <HAL_DMA_IRQHandler+0x166>
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	4a37      	ldr	r2, [pc, #220]	; (8001948 <HAL_DMA_IRQHandler+0x1f4>)
 800186c:	4293      	cmp	r3, r2
 800186e:	d022      	beq.n	80018b6 <HAL_DMA_IRQHandler+0x162>
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	4a35      	ldr	r2, [pc, #212]	; (800194c <HAL_DMA_IRQHandler+0x1f8>)
 8001876:	4293      	cmp	r3, r2
 8001878:	d01a      	beq.n	80018b0 <HAL_DMA_IRQHandler+0x15c>
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	4a34      	ldr	r2, [pc, #208]	; (8001950 <HAL_DMA_IRQHandler+0x1fc>)
 8001880:	4293      	cmp	r3, r2
 8001882:	d012      	beq.n	80018aa <HAL_DMA_IRQHandler+0x156>
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	4a32      	ldr	r2, [pc, #200]	; (8001954 <HAL_DMA_IRQHandler+0x200>)
 800188a:	4293      	cmp	r3, r2
 800188c:	d00a      	beq.n	80018a4 <HAL_DMA_IRQHandler+0x150>
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	4a31      	ldr	r2, [pc, #196]	; (8001958 <HAL_DMA_IRQHandler+0x204>)
 8001894:	4293      	cmp	r3, r2
 8001896:	d102      	bne.n	800189e <HAL_DMA_IRQHandler+0x14a>
 8001898:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800189c:	e00e      	b.n	80018bc <HAL_DMA_IRQHandler+0x168>
 800189e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80018a2:	e00b      	b.n	80018bc <HAL_DMA_IRQHandler+0x168>
 80018a4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80018a8:	e008      	b.n	80018bc <HAL_DMA_IRQHandler+0x168>
 80018aa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80018ae:	e005      	b.n	80018bc <HAL_DMA_IRQHandler+0x168>
 80018b0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80018b4:	e002      	b.n	80018bc <HAL_DMA_IRQHandler+0x168>
 80018b6:	2320      	movs	r3, #32
 80018b8:	e000      	b.n	80018bc <HAL_DMA_IRQHandler+0x168>
 80018ba:	2302      	movs	r3, #2
 80018bc:	4a27      	ldr	r2, [pc, #156]	; (800195c <HAL_DMA_IRQHandler+0x208>)
 80018be:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	2200      	movs	r2, #0
 80018c4:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d034      	beq.n	800193a <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018d4:	6878      	ldr	r0, [r7, #4]
 80018d6:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80018d8:	e02f      	b.n	800193a <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018de:	2208      	movs	r2, #8
 80018e0:	409a      	lsls	r2, r3
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	4013      	ands	r3, r2
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d028      	beq.n	800193c <HAL_DMA_IRQHandler+0x1e8>
 80018ea:	68bb      	ldr	r3, [r7, #8]
 80018ec:	f003 0308 	and.w	r3, r3, #8
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d023      	beq.n	800193c <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	681a      	ldr	r2, [r3, #0]
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	f022 020e 	bic.w	r2, r2, #14
 8001902:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800190c:	2101      	movs	r1, #1
 800190e:	fa01 f202 	lsl.w	r2, r1, r2
 8001912:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	2201      	movs	r2, #1
 8001918:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	2201      	movs	r2, #1
 800191e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	2200      	movs	r2, #0
 8001926:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800192e:	2b00      	cmp	r3, #0
 8001930:	d004      	beq.n	800193c <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001936:	6878      	ldr	r0, [r7, #4]
 8001938:	4798      	blx	r3
    }
  }
  return;
 800193a:	bf00      	nop
 800193c:	bf00      	nop
}
 800193e:	3710      	adds	r7, #16
 8001940:	46bd      	mov	sp, r7
 8001942:	bd80      	pop	{r7, pc}
 8001944:	40020008 	.word	0x40020008
 8001948:	4002001c 	.word	0x4002001c
 800194c:	40020030 	.word	0x40020030
 8001950:	40020044 	.word	0x40020044
 8001954:	40020058 	.word	0x40020058
 8001958:	4002006c 	.word	0x4002006c
 800195c:	40020000 	.word	0x40020000

08001960 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001960:	b480      	push	{r7}
 8001962:	b085      	sub	sp, #20
 8001964:	af00      	add	r7, sp, #0
 8001966:	60f8      	str	r0, [r7, #12]
 8001968:	60b9      	str	r1, [r7, #8]
 800196a:	607a      	str	r2, [r7, #4]
 800196c:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001976:	2101      	movs	r1, #1
 8001978:	fa01 f202 	lsl.w	r2, r1, r2
 800197c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	683a      	ldr	r2, [r7, #0]
 8001984:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	685b      	ldr	r3, [r3, #4]
 800198a:	2b10      	cmp	r3, #16
 800198c:	d108      	bne.n	80019a0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	687a      	ldr	r2, [r7, #4]
 8001994:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	68ba      	ldr	r2, [r7, #8]
 800199c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800199e:	e007      	b.n	80019b0 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	68ba      	ldr	r2, [r7, #8]
 80019a6:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	687a      	ldr	r2, [r7, #4]
 80019ae:	60da      	str	r2, [r3, #12]
}
 80019b0:	bf00      	nop
 80019b2:	3714      	adds	r7, #20
 80019b4:	46bd      	mov	sp, r7
 80019b6:	bc80      	pop	{r7}
 80019b8:	4770      	bx	lr
	...

080019bc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80019bc:	b480      	push	{r7}
 80019be:	b08b      	sub	sp, #44	; 0x2c
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	6078      	str	r0, [r7, #4]
 80019c4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80019c6:	2300      	movs	r3, #0
 80019c8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80019ca:	2300      	movs	r3, #0
 80019cc:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80019ce:	e169      	b.n	8001ca4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80019d0:	2201      	movs	r2, #1
 80019d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019d4:	fa02 f303 	lsl.w	r3, r2, r3
 80019d8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80019da:	683b      	ldr	r3, [r7, #0]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	69fa      	ldr	r2, [r7, #28]
 80019e0:	4013      	ands	r3, r2
 80019e2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80019e4:	69ba      	ldr	r2, [r7, #24]
 80019e6:	69fb      	ldr	r3, [r7, #28]
 80019e8:	429a      	cmp	r2, r3
 80019ea:	f040 8158 	bne.w	8001c9e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80019ee:	683b      	ldr	r3, [r7, #0]
 80019f0:	685b      	ldr	r3, [r3, #4]
 80019f2:	4a9a      	ldr	r2, [pc, #616]	; (8001c5c <HAL_GPIO_Init+0x2a0>)
 80019f4:	4293      	cmp	r3, r2
 80019f6:	d05e      	beq.n	8001ab6 <HAL_GPIO_Init+0xfa>
 80019f8:	4a98      	ldr	r2, [pc, #608]	; (8001c5c <HAL_GPIO_Init+0x2a0>)
 80019fa:	4293      	cmp	r3, r2
 80019fc:	d875      	bhi.n	8001aea <HAL_GPIO_Init+0x12e>
 80019fe:	4a98      	ldr	r2, [pc, #608]	; (8001c60 <HAL_GPIO_Init+0x2a4>)
 8001a00:	4293      	cmp	r3, r2
 8001a02:	d058      	beq.n	8001ab6 <HAL_GPIO_Init+0xfa>
 8001a04:	4a96      	ldr	r2, [pc, #600]	; (8001c60 <HAL_GPIO_Init+0x2a4>)
 8001a06:	4293      	cmp	r3, r2
 8001a08:	d86f      	bhi.n	8001aea <HAL_GPIO_Init+0x12e>
 8001a0a:	4a96      	ldr	r2, [pc, #600]	; (8001c64 <HAL_GPIO_Init+0x2a8>)
 8001a0c:	4293      	cmp	r3, r2
 8001a0e:	d052      	beq.n	8001ab6 <HAL_GPIO_Init+0xfa>
 8001a10:	4a94      	ldr	r2, [pc, #592]	; (8001c64 <HAL_GPIO_Init+0x2a8>)
 8001a12:	4293      	cmp	r3, r2
 8001a14:	d869      	bhi.n	8001aea <HAL_GPIO_Init+0x12e>
 8001a16:	4a94      	ldr	r2, [pc, #592]	; (8001c68 <HAL_GPIO_Init+0x2ac>)
 8001a18:	4293      	cmp	r3, r2
 8001a1a:	d04c      	beq.n	8001ab6 <HAL_GPIO_Init+0xfa>
 8001a1c:	4a92      	ldr	r2, [pc, #584]	; (8001c68 <HAL_GPIO_Init+0x2ac>)
 8001a1e:	4293      	cmp	r3, r2
 8001a20:	d863      	bhi.n	8001aea <HAL_GPIO_Init+0x12e>
 8001a22:	4a92      	ldr	r2, [pc, #584]	; (8001c6c <HAL_GPIO_Init+0x2b0>)
 8001a24:	4293      	cmp	r3, r2
 8001a26:	d046      	beq.n	8001ab6 <HAL_GPIO_Init+0xfa>
 8001a28:	4a90      	ldr	r2, [pc, #576]	; (8001c6c <HAL_GPIO_Init+0x2b0>)
 8001a2a:	4293      	cmp	r3, r2
 8001a2c:	d85d      	bhi.n	8001aea <HAL_GPIO_Init+0x12e>
 8001a2e:	2b12      	cmp	r3, #18
 8001a30:	d82a      	bhi.n	8001a88 <HAL_GPIO_Init+0xcc>
 8001a32:	2b12      	cmp	r3, #18
 8001a34:	d859      	bhi.n	8001aea <HAL_GPIO_Init+0x12e>
 8001a36:	a201      	add	r2, pc, #4	; (adr r2, 8001a3c <HAL_GPIO_Init+0x80>)
 8001a38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a3c:	08001ab7 	.word	0x08001ab7
 8001a40:	08001a91 	.word	0x08001a91
 8001a44:	08001aa3 	.word	0x08001aa3
 8001a48:	08001ae5 	.word	0x08001ae5
 8001a4c:	08001aeb 	.word	0x08001aeb
 8001a50:	08001aeb 	.word	0x08001aeb
 8001a54:	08001aeb 	.word	0x08001aeb
 8001a58:	08001aeb 	.word	0x08001aeb
 8001a5c:	08001aeb 	.word	0x08001aeb
 8001a60:	08001aeb 	.word	0x08001aeb
 8001a64:	08001aeb 	.word	0x08001aeb
 8001a68:	08001aeb 	.word	0x08001aeb
 8001a6c:	08001aeb 	.word	0x08001aeb
 8001a70:	08001aeb 	.word	0x08001aeb
 8001a74:	08001aeb 	.word	0x08001aeb
 8001a78:	08001aeb 	.word	0x08001aeb
 8001a7c:	08001aeb 	.word	0x08001aeb
 8001a80:	08001a99 	.word	0x08001a99
 8001a84:	08001aad 	.word	0x08001aad
 8001a88:	4a79      	ldr	r2, [pc, #484]	; (8001c70 <HAL_GPIO_Init+0x2b4>)
 8001a8a:	4293      	cmp	r3, r2
 8001a8c:	d013      	beq.n	8001ab6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001a8e:	e02c      	b.n	8001aea <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001a90:	683b      	ldr	r3, [r7, #0]
 8001a92:	68db      	ldr	r3, [r3, #12]
 8001a94:	623b      	str	r3, [r7, #32]
          break;
 8001a96:	e029      	b.n	8001aec <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001a98:	683b      	ldr	r3, [r7, #0]
 8001a9a:	68db      	ldr	r3, [r3, #12]
 8001a9c:	3304      	adds	r3, #4
 8001a9e:	623b      	str	r3, [r7, #32]
          break;
 8001aa0:	e024      	b.n	8001aec <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001aa2:	683b      	ldr	r3, [r7, #0]
 8001aa4:	68db      	ldr	r3, [r3, #12]
 8001aa6:	3308      	adds	r3, #8
 8001aa8:	623b      	str	r3, [r7, #32]
          break;
 8001aaa:	e01f      	b.n	8001aec <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001aac:	683b      	ldr	r3, [r7, #0]
 8001aae:	68db      	ldr	r3, [r3, #12]
 8001ab0:	330c      	adds	r3, #12
 8001ab2:	623b      	str	r3, [r7, #32]
          break;
 8001ab4:	e01a      	b.n	8001aec <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001ab6:	683b      	ldr	r3, [r7, #0]
 8001ab8:	689b      	ldr	r3, [r3, #8]
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d102      	bne.n	8001ac4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001abe:	2304      	movs	r3, #4
 8001ac0:	623b      	str	r3, [r7, #32]
          break;
 8001ac2:	e013      	b.n	8001aec <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001ac4:	683b      	ldr	r3, [r7, #0]
 8001ac6:	689b      	ldr	r3, [r3, #8]
 8001ac8:	2b01      	cmp	r3, #1
 8001aca:	d105      	bne.n	8001ad8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001acc:	2308      	movs	r3, #8
 8001ace:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	69fa      	ldr	r2, [r7, #28]
 8001ad4:	611a      	str	r2, [r3, #16]
          break;
 8001ad6:	e009      	b.n	8001aec <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001ad8:	2308      	movs	r3, #8
 8001ada:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	69fa      	ldr	r2, [r7, #28]
 8001ae0:	615a      	str	r2, [r3, #20]
          break;
 8001ae2:	e003      	b.n	8001aec <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001ae4:	2300      	movs	r3, #0
 8001ae6:	623b      	str	r3, [r7, #32]
          break;
 8001ae8:	e000      	b.n	8001aec <HAL_GPIO_Init+0x130>
          break;
 8001aea:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001aec:	69bb      	ldr	r3, [r7, #24]
 8001aee:	2bff      	cmp	r3, #255	; 0xff
 8001af0:	d801      	bhi.n	8001af6 <HAL_GPIO_Init+0x13a>
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	e001      	b.n	8001afa <HAL_GPIO_Init+0x13e>
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	3304      	adds	r3, #4
 8001afa:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001afc:	69bb      	ldr	r3, [r7, #24]
 8001afe:	2bff      	cmp	r3, #255	; 0xff
 8001b00:	d802      	bhi.n	8001b08 <HAL_GPIO_Init+0x14c>
 8001b02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b04:	009b      	lsls	r3, r3, #2
 8001b06:	e002      	b.n	8001b0e <HAL_GPIO_Init+0x152>
 8001b08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b0a:	3b08      	subs	r3, #8
 8001b0c:	009b      	lsls	r3, r3, #2
 8001b0e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001b10:	697b      	ldr	r3, [r7, #20]
 8001b12:	681a      	ldr	r2, [r3, #0]
 8001b14:	210f      	movs	r1, #15
 8001b16:	693b      	ldr	r3, [r7, #16]
 8001b18:	fa01 f303 	lsl.w	r3, r1, r3
 8001b1c:	43db      	mvns	r3, r3
 8001b1e:	401a      	ands	r2, r3
 8001b20:	6a39      	ldr	r1, [r7, #32]
 8001b22:	693b      	ldr	r3, [r7, #16]
 8001b24:	fa01 f303 	lsl.w	r3, r1, r3
 8001b28:	431a      	orrs	r2, r3
 8001b2a:	697b      	ldr	r3, [r7, #20]
 8001b2c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001b2e:	683b      	ldr	r3, [r7, #0]
 8001b30:	685b      	ldr	r3, [r3, #4]
 8001b32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	f000 80b1 	beq.w	8001c9e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001b3c:	4b4d      	ldr	r3, [pc, #308]	; (8001c74 <HAL_GPIO_Init+0x2b8>)
 8001b3e:	699b      	ldr	r3, [r3, #24]
 8001b40:	4a4c      	ldr	r2, [pc, #304]	; (8001c74 <HAL_GPIO_Init+0x2b8>)
 8001b42:	f043 0301 	orr.w	r3, r3, #1
 8001b46:	6193      	str	r3, [r2, #24]
 8001b48:	4b4a      	ldr	r3, [pc, #296]	; (8001c74 <HAL_GPIO_Init+0x2b8>)
 8001b4a:	699b      	ldr	r3, [r3, #24]
 8001b4c:	f003 0301 	and.w	r3, r3, #1
 8001b50:	60bb      	str	r3, [r7, #8]
 8001b52:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001b54:	4a48      	ldr	r2, [pc, #288]	; (8001c78 <HAL_GPIO_Init+0x2bc>)
 8001b56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b58:	089b      	lsrs	r3, r3, #2
 8001b5a:	3302      	adds	r3, #2
 8001b5c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b60:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001b62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b64:	f003 0303 	and.w	r3, r3, #3
 8001b68:	009b      	lsls	r3, r3, #2
 8001b6a:	220f      	movs	r2, #15
 8001b6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b70:	43db      	mvns	r3, r3
 8001b72:	68fa      	ldr	r2, [r7, #12]
 8001b74:	4013      	ands	r3, r2
 8001b76:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	4a40      	ldr	r2, [pc, #256]	; (8001c7c <HAL_GPIO_Init+0x2c0>)
 8001b7c:	4293      	cmp	r3, r2
 8001b7e:	d013      	beq.n	8001ba8 <HAL_GPIO_Init+0x1ec>
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	4a3f      	ldr	r2, [pc, #252]	; (8001c80 <HAL_GPIO_Init+0x2c4>)
 8001b84:	4293      	cmp	r3, r2
 8001b86:	d00d      	beq.n	8001ba4 <HAL_GPIO_Init+0x1e8>
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	4a3e      	ldr	r2, [pc, #248]	; (8001c84 <HAL_GPIO_Init+0x2c8>)
 8001b8c:	4293      	cmp	r3, r2
 8001b8e:	d007      	beq.n	8001ba0 <HAL_GPIO_Init+0x1e4>
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	4a3d      	ldr	r2, [pc, #244]	; (8001c88 <HAL_GPIO_Init+0x2cc>)
 8001b94:	4293      	cmp	r3, r2
 8001b96:	d101      	bne.n	8001b9c <HAL_GPIO_Init+0x1e0>
 8001b98:	2303      	movs	r3, #3
 8001b9a:	e006      	b.n	8001baa <HAL_GPIO_Init+0x1ee>
 8001b9c:	2304      	movs	r3, #4
 8001b9e:	e004      	b.n	8001baa <HAL_GPIO_Init+0x1ee>
 8001ba0:	2302      	movs	r3, #2
 8001ba2:	e002      	b.n	8001baa <HAL_GPIO_Init+0x1ee>
 8001ba4:	2301      	movs	r3, #1
 8001ba6:	e000      	b.n	8001baa <HAL_GPIO_Init+0x1ee>
 8001ba8:	2300      	movs	r3, #0
 8001baa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001bac:	f002 0203 	and.w	r2, r2, #3
 8001bb0:	0092      	lsls	r2, r2, #2
 8001bb2:	4093      	lsls	r3, r2
 8001bb4:	68fa      	ldr	r2, [r7, #12]
 8001bb6:	4313      	orrs	r3, r2
 8001bb8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001bba:	492f      	ldr	r1, [pc, #188]	; (8001c78 <HAL_GPIO_Init+0x2bc>)
 8001bbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bbe:	089b      	lsrs	r3, r3, #2
 8001bc0:	3302      	adds	r3, #2
 8001bc2:	68fa      	ldr	r2, [r7, #12]
 8001bc4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001bc8:	683b      	ldr	r3, [r7, #0]
 8001bca:	685b      	ldr	r3, [r3, #4]
 8001bcc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d006      	beq.n	8001be2 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001bd4:	4b2d      	ldr	r3, [pc, #180]	; (8001c8c <HAL_GPIO_Init+0x2d0>)
 8001bd6:	689a      	ldr	r2, [r3, #8]
 8001bd8:	492c      	ldr	r1, [pc, #176]	; (8001c8c <HAL_GPIO_Init+0x2d0>)
 8001bda:	69bb      	ldr	r3, [r7, #24]
 8001bdc:	4313      	orrs	r3, r2
 8001bde:	608b      	str	r3, [r1, #8]
 8001be0:	e006      	b.n	8001bf0 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001be2:	4b2a      	ldr	r3, [pc, #168]	; (8001c8c <HAL_GPIO_Init+0x2d0>)
 8001be4:	689a      	ldr	r2, [r3, #8]
 8001be6:	69bb      	ldr	r3, [r7, #24]
 8001be8:	43db      	mvns	r3, r3
 8001bea:	4928      	ldr	r1, [pc, #160]	; (8001c8c <HAL_GPIO_Init+0x2d0>)
 8001bec:	4013      	ands	r3, r2
 8001bee:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001bf0:	683b      	ldr	r3, [r7, #0]
 8001bf2:	685b      	ldr	r3, [r3, #4]
 8001bf4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d006      	beq.n	8001c0a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001bfc:	4b23      	ldr	r3, [pc, #140]	; (8001c8c <HAL_GPIO_Init+0x2d0>)
 8001bfe:	68da      	ldr	r2, [r3, #12]
 8001c00:	4922      	ldr	r1, [pc, #136]	; (8001c8c <HAL_GPIO_Init+0x2d0>)
 8001c02:	69bb      	ldr	r3, [r7, #24]
 8001c04:	4313      	orrs	r3, r2
 8001c06:	60cb      	str	r3, [r1, #12]
 8001c08:	e006      	b.n	8001c18 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001c0a:	4b20      	ldr	r3, [pc, #128]	; (8001c8c <HAL_GPIO_Init+0x2d0>)
 8001c0c:	68da      	ldr	r2, [r3, #12]
 8001c0e:	69bb      	ldr	r3, [r7, #24]
 8001c10:	43db      	mvns	r3, r3
 8001c12:	491e      	ldr	r1, [pc, #120]	; (8001c8c <HAL_GPIO_Init+0x2d0>)
 8001c14:	4013      	ands	r3, r2
 8001c16:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001c18:	683b      	ldr	r3, [r7, #0]
 8001c1a:	685b      	ldr	r3, [r3, #4]
 8001c1c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d006      	beq.n	8001c32 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001c24:	4b19      	ldr	r3, [pc, #100]	; (8001c8c <HAL_GPIO_Init+0x2d0>)
 8001c26:	685a      	ldr	r2, [r3, #4]
 8001c28:	4918      	ldr	r1, [pc, #96]	; (8001c8c <HAL_GPIO_Init+0x2d0>)
 8001c2a:	69bb      	ldr	r3, [r7, #24]
 8001c2c:	4313      	orrs	r3, r2
 8001c2e:	604b      	str	r3, [r1, #4]
 8001c30:	e006      	b.n	8001c40 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001c32:	4b16      	ldr	r3, [pc, #88]	; (8001c8c <HAL_GPIO_Init+0x2d0>)
 8001c34:	685a      	ldr	r2, [r3, #4]
 8001c36:	69bb      	ldr	r3, [r7, #24]
 8001c38:	43db      	mvns	r3, r3
 8001c3a:	4914      	ldr	r1, [pc, #80]	; (8001c8c <HAL_GPIO_Init+0x2d0>)
 8001c3c:	4013      	ands	r3, r2
 8001c3e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001c40:	683b      	ldr	r3, [r7, #0]
 8001c42:	685b      	ldr	r3, [r3, #4]
 8001c44:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d021      	beq.n	8001c90 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001c4c:	4b0f      	ldr	r3, [pc, #60]	; (8001c8c <HAL_GPIO_Init+0x2d0>)
 8001c4e:	681a      	ldr	r2, [r3, #0]
 8001c50:	490e      	ldr	r1, [pc, #56]	; (8001c8c <HAL_GPIO_Init+0x2d0>)
 8001c52:	69bb      	ldr	r3, [r7, #24]
 8001c54:	4313      	orrs	r3, r2
 8001c56:	600b      	str	r3, [r1, #0]
 8001c58:	e021      	b.n	8001c9e <HAL_GPIO_Init+0x2e2>
 8001c5a:	bf00      	nop
 8001c5c:	10320000 	.word	0x10320000
 8001c60:	10310000 	.word	0x10310000
 8001c64:	10220000 	.word	0x10220000
 8001c68:	10210000 	.word	0x10210000
 8001c6c:	10120000 	.word	0x10120000
 8001c70:	10110000 	.word	0x10110000
 8001c74:	40021000 	.word	0x40021000
 8001c78:	40010000 	.word	0x40010000
 8001c7c:	40010800 	.word	0x40010800
 8001c80:	40010c00 	.word	0x40010c00
 8001c84:	40011000 	.word	0x40011000
 8001c88:	40011400 	.word	0x40011400
 8001c8c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001c90:	4b0b      	ldr	r3, [pc, #44]	; (8001cc0 <HAL_GPIO_Init+0x304>)
 8001c92:	681a      	ldr	r2, [r3, #0]
 8001c94:	69bb      	ldr	r3, [r7, #24]
 8001c96:	43db      	mvns	r3, r3
 8001c98:	4909      	ldr	r1, [pc, #36]	; (8001cc0 <HAL_GPIO_Init+0x304>)
 8001c9a:	4013      	ands	r3, r2
 8001c9c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001c9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ca0:	3301      	adds	r3, #1
 8001ca2:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001ca4:	683b      	ldr	r3, [r7, #0]
 8001ca6:	681a      	ldr	r2, [r3, #0]
 8001ca8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001caa:	fa22 f303 	lsr.w	r3, r2, r3
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	f47f ae8e 	bne.w	80019d0 <HAL_GPIO_Init+0x14>
  }
}
 8001cb4:	bf00      	nop
 8001cb6:	bf00      	nop
 8001cb8:	372c      	adds	r7, #44	; 0x2c
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	bc80      	pop	{r7}
 8001cbe:	4770      	bx	lr
 8001cc0:	40010400 	.word	0x40010400

08001cc4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001cc4:	b480      	push	{r7}
 8001cc6:	b085      	sub	sp, #20
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	6078      	str	r0, [r7, #4]
 8001ccc:	460b      	mov	r3, r1
 8001cce:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	689a      	ldr	r2, [r3, #8]
 8001cd4:	887b      	ldrh	r3, [r7, #2]
 8001cd6:	4013      	ands	r3, r2
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d002      	beq.n	8001ce2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001cdc:	2301      	movs	r3, #1
 8001cde:	73fb      	strb	r3, [r7, #15]
 8001ce0:	e001      	b.n	8001ce6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001ce6:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ce8:	4618      	mov	r0, r3
 8001cea:	3714      	adds	r7, #20
 8001cec:	46bd      	mov	sp, r7
 8001cee:	bc80      	pop	{r7}
 8001cf0:	4770      	bx	lr

08001cf2 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001cf2:	b480      	push	{r7}
 8001cf4:	b083      	sub	sp, #12
 8001cf6:	af00      	add	r7, sp, #0
 8001cf8:	6078      	str	r0, [r7, #4]
 8001cfa:	460b      	mov	r3, r1
 8001cfc:	807b      	strh	r3, [r7, #2]
 8001cfe:	4613      	mov	r3, r2
 8001d00:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001d02:	787b      	ldrb	r3, [r7, #1]
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d003      	beq.n	8001d10 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001d08:	887a      	ldrh	r2, [r7, #2]
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001d0e:	e003      	b.n	8001d18 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001d10:	887b      	ldrh	r3, [r7, #2]
 8001d12:	041a      	lsls	r2, r3, #16
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	611a      	str	r2, [r3, #16]
}
 8001d18:	bf00      	nop
 8001d1a:	370c      	adds	r7, #12
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	bc80      	pop	{r7}
 8001d20:	4770      	bx	lr

08001d22 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001d22:	b480      	push	{r7}
 8001d24:	b085      	sub	sp, #20
 8001d26:	af00      	add	r7, sp, #0
 8001d28:	6078      	str	r0, [r7, #4]
 8001d2a:	460b      	mov	r3, r1
 8001d2c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	68db      	ldr	r3, [r3, #12]
 8001d32:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001d34:	887a      	ldrh	r2, [r7, #2]
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	4013      	ands	r3, r2
 8001d3a:	041a      	lsls	r2, r3, #16
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	43d9      	mvns	r1, r3
 8001d40:	887b      	ldrh	r3, [r7, #2]
 8001d42:	400b      	ands	r3, r1
 8001d44:	431a      	orrs	r2, r3
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	611a      	str	r2, [r3, #16]
}
 8001d4a:	bf00      	nop
 8001d4c:	3714      	adds	r7, #20
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	bc80      	pop	{r7}
 8001d52:	4770      	bx	lr

08001d54 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001d54:	b580      	push	{r7, lr}
 8001d56:	b086      	sub	sp, #24
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d101      	bne.n	8001d66 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001d62:	2301      	movs	r3, #1
 8001d64:	e272      	b.n	800224c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	f003 0301 	and.w	r3, r3, #1
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	f000 8087 	beq.w	8001e82 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001d74:	4b92      	ldr	r3, [pc, #584]	; (8001fc0 <HAL_RCC_OscConfig+0x26c>)
 8001d76:	685b      	ldr	r3, [r3, #4]
 8001d78:	f003 030c 	and.w	r3, r3, #12
 8001d7c:	2b04      	cmp	r3, #4
 8001d7e:	d00c      	beq.n	8001d9a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001d80:	4b8f      	ldr	r3, [pc, #572]	; (8001fc0 <HAL_RCC_OscConfig+0x26c>)
 8001d82:	685b      	ldr	r3, [r3, #4]
 8001d84:	f003 030c 	and.w	r3, r3, #12
 8001d88:	2b08      	cmp	r3, #8
 8001d8a:	d112      	bne.n	8001db2 <HAL_RCC_OscConfig+0x5e>
 8001d8c:	4b8c      	ldr	r3, [pc, #560]	; (8001fc0 <HAL_RCC_OscConfig+0x26c>)
 8001d8e:	685b      	ldr	r3, [r3, #4]
 8001d90:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d94:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d98:	d10b      	bne.n	8001db2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d9a:	4b89      	ldr	r3, [pc, #548]	; (8001fc0 <HAL_RCC_OscConfig+0x26c>)
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d06c      	beq.n	8001e80 <HAL_RCC_OscConfig+0x12c>
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	685b      	ldr	r3, [r3, #4]
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d168      	bne.n	8001e80 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001dae:	2301      	movs	r3, #1
 8001db0:	e24c      	b.n	800224c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	685b      	ldr	r3, [r3, #4]
 8001db6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001dba:	d106      	bne.n	8001dca <HAL_RCC_OscConfig+0x76>
 8001dbc:	4b80      	ldr	r3, [pc, #512]	; (8001fc0 <HAL_RCC_OscConfig+0x26c>)
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	4a7f      	ldr	r2, [pc, #508]	; (8001fc0 <HAL_RCC_OscConfig+0x26c>)
 8001dc2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001dc6:	6013      	str	r3, [r2, #0]
 8001dc8:	e02e      	b.n	8001e28 <HAL_RCC_OscConfig+0xd4>
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	685b      	ldr	r3, [r3, #4]
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d10c      	bne.n	8001dec <HAL_RCC_OscConfig+0x98>
 8001dd2:	4b7b      	ldr	r3, [pc, #492]	; (8001fc0 <HAL_RCC_OscConfig+0x26c>)
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	4a7a      	ldr	r2, [pc, #488]	; (8001fc0 <HAL_RCC_OscConfig+0x26c>)
 8001dd8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ddc:	6013      	str	r3, [r2, #0]
 8001dde:	4b78      	ldr	r3, [pc, #480]	; (8001fc0 <HAL_RCC_OscConfig+0x26c>)
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	4a77      	ldr	r2, [pc, #476]	; (8001fc0 <HAL_RCC_OscConfig+0x26c>)
 8001de4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001de8:	6013      	str	r3, [r2, #0]
 8001dea:	e01d      	b.n	8001e28 <HAL_RCC_OscConfig+0xd4>
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	685b      	ldr	r3, [r3, #4]
 8001df0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001df4:	d10c      	bne.n	8001e10 <HAL_RCC_OscConfig+0xbc>
 8001df6:	4b72      	ldr	r3, [pc, #456]	; (8001fc0 <HAL_RCC_OscConfig+0x26c>)
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	4a71      	ldr	r2, [pc, #452]	; (8001fc0 <HAL_RCC_OscConfig+0x26c>)
 8001dfc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001e00:	6013      	str	r3, [r2, #0]
 8001e02:	4b6f      	ldr	r3, [pc, #444]	; (8001fc0 <HAL_RCC_OscConfig+0x26c>)
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	4a6e      	ldr	r2, [pc, #440]	; (8001fc0 <HAL_RCC_OscConfig+0x26c>)
 8001e08:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e0c:	6013      	str	r3, [r2, #0]
 8001e0e:	e00b      	b.n	8001e28 <HAL_RCC_OscConfig+0xd4>
 8001e10:	4b6b      	ldr	r3, [pc, #428]	; (8001fc0 <HAL_RCC_OscConfig+0x26c>)
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	4a6a      	ldr	r2, [pc, #424]	; (8001fc0 <HAL_RCC_OscConfig+0x26c>)
 8001e16:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e1a:	6013      	str	r3, [r2, #0]
 8001e1c:	4b68      	ldr	r3, [pc, #416]	; (8001fc0 <HAL_RCC_OscConfig+0x26c>)
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	4a67      	ldr	r2, [pc, #412]	; (8001fc0 <HAL_RCC_OscConfig+0x26c>)
 8001e22:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001e26:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	685b      	ldr	r3, [r3, #4]
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d013      	beq.n	8001e58 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e30:	f7ff fa14 	bl	800125c <HAL_GetTick>
 8001e34:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e36:	e008      	b.n	8001e4a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e38:	f7ff fa10 	bl	800125c <HAL_GetTick>
 8001e3c:	4602      	mov	r2, r0
 8001e3e:	693b      	ldr	r3, [r7, #16]
 8001e40:	1ad3      	subs	r3, r2, r3
 8001e42:	2b64      	cmp	r3, #100	; 0x64
 8001e44:	d901      	bls.n	8001e4a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001e46:	2303      	movs	r3, #3
 8001e48:	e200      	b.n	800224c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e4a:	4b5d      	ldr	r3, [pc, #372]	; (8001fc0 <HAL_RCC_OscConfig+0x26c>)
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d0f0      	beq.n	8001e38 <HAL_RCC_OscConfig+0xe4>
 8001e56:	e014      	b.n	8001e82 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e58:	f7ff fa00 	bl	800125c <HAL_GetTick>
 8001e5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e5e:	e008      	b.n	8001e72 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e60:	f7ff f9fc 	bl	800125c <HAL_GetTick>
 8001e64:	4602      	mov	r2, r0
 8001e66:	693b      	ldr	r3, [r7, #16]
 8001e68:	1ad3      	subs	r3, r2, r3
 8001e6a:	2b64      	cmp	r3, #100	; 0x64
 8001e6c:	d901      	bls.n	8001e72 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001e6e:	2303      	movs	r3, #3
 8001e70:	e1ec      	b.n	800224c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e72:	4b53      	ldr	r3, [pc, #332]	; (8001fc0 <HAL_RCC_OscConfig+0x26c>)
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d1f0      	bne.n	8001e60 <HAL_RCC_OscConfig+0x10c>
 8001e7e:	e000      	b.n	8001e82 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e80:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	f003 0302 	and.w	r3, r3, #2
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d063      	beq.n	8001f56 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001e8e:	4b4c      	ldr	r3, [pc, #304]	; (8001fc0 <HAL_RCC_OscConfig+0x26c>)
 8001e90:	685b      	ldr	r3, [r3, #4]
 8001e92:	f003 030c 	and.w	r3, r3, #12
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d00b      	beq.n	8001eb2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001e9a:	4b49      	ldr	r3, [pc, #292]	; (8001fc0 <HAL_RCC_OscConfig+0x26c>)
 8001e9c:	685b      	ldr	r3, [r3, #4]
 8001e9e:	f003 030c 	and.w	r3, r3, #12
 8001ea2:	2b08      	cmp	r3, #8
 8001ea4:	d11c      	bne.n	8001ee0 <HAL_RCC_OscConfig+0x18c>
 8001ea6:	4b46      	ldr	r3, [pc, #280]	; (8001fc0 <HAL_RCC_OscConfig+0x26c>)
 8001ea8:	685b      	ldr	r3, [r3, #4]
 8001eaa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d116      	bne.n	8001ee0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001eb2:	4b43      	ldr	r3, [pc, #268]	; (8001fc0 <HAL_RCC_OscConfig+0x26c>)
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	f003 0302 	and.w	r3, r3, #2
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d005      	beq.n	8001eca <HAL_RCC_OscConfig+0x176>
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	691b      	ldr	r3, [r3, #16]
 8001ec2:	2b01      	cmp	r3, #1
 8001ec4:	d001      	beq.n	8001eca <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001ec6:	2301      	movs	r3, #1
 8001ec8:	e1c0      	b.n	800224c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001eca:	4b3d      	ldr	r3, [pc, #244]	; (8001fc0 <HAL_RCC_OscConfig+0x26c>)
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	695b      	ldr	r3, [r3, #20]
 8001ed6:	00db      	lsls	r3, r3, #3
 8001ed8:	4939      	ldr	r1, [pc, #228]	; (8001fc0 <HAL_RCC_OscConfig+0x26c>)
 8001eda:	4313      	orrs	r3, r2
 8001edc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ede:	e03a      	b.n	8001f56 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	691b      	ldr	r3, [r3, #16]
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d020      	beq.n	8001f2a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001ee8:	4b36      	ldr	r3, [pc, #216]	; (8001fc4 <HAL_RCC_OscConfig+0x270>)
 8001eea:	2201      	movs	r2, #1
 8001eec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001eee:	f7ff f9b5 	bl	800125c <HAL_GetTick>
 8001ef2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ef4:	e008      	b.n	8001f08 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ef6:	f7ff f9b1 	bl	800125c <HAL_GetTick>
 8001efa:	4602      	mov	r2, r0
 8001efc:	693b      	ldr	r3, [r7, #16]
 8001efe:	1ad3      	subs	r3, r2, r3
 8001f00:	2b02      	cmp	r3, #2
 8001f02:	d901      	bls.n	8001f08 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001f04:	2303      	movs	r3, #3
 8001f06:	e1a1      	b.n	800224c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f08:	4b2d      	ldr	r3, [pc, #180]	; (8001fc0 <HAL_RCC_OscConfig+0x26c>)
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	f003 0302 	and.w	r3, r3, #2
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d0f0      	beq.n	8001ef6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f14:	4b2a      	ldr	r3, [pc, #168]	; (8001fc0 <HAL_RCC_OscConfig+0x26c>)
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	695b      	ldr	r3, [r3, #20]
 8001f20:	00db      	lsls	r3, r3, #3
 8001f22:	4927      	ldr	r1, [pc, #156]	; (8001fc0 <HAL_RCC_OscConfig+0x26c>)
 8001f24:	4313      	orrs	r3, r2
 8001f26:	600b      	str	r3, [r1, #0]
 8001f28:	e015      	b.n	8001f56 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001f2a:	4b26      	ldr	r3, [pc, #152]	; (8001fc4 <HAL_RCC_OscConfig+0x270>)
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f30:	f7ff f994 	bl	800125c <HAL_GetTick>
 8001f34:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f36:	e008      	b.n	8001f4a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f38:	f7ff f990 	bl	800125c <HAL_GetTick>
 8001f3c:	4602      	mov	r2, r0
 8001f3e:	693b      	ldr	r3, [r7, #16]
 8001f40:	1ad3      	subs	r3, r2, r3
 8001f42:	2b02      	cmp	r3, #2
 8001f44:	d901      	bls.n	8001f4a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001f46:	2303      	movs	r3, #3
 8001f48:	e180      	b.n	800224c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f4a:	4b1d      	ldr	r3, [pc, #116]	; (8001fc0 <HAL_RCC_OscConfig+0x26c>)
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	f003 0302 	and.w	r3, r3, #2
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d1f0      	bne.n	8001f38 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	f003 0308 	and.w	r3, r3, #8
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d03a      	beq.n	8001fd8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	699b      	ldr	r3, [r3, #24]
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d019      	beq.n	8001f9e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001f6a:	4b17      	ldr	r3, [pc, #92]	; (8001fc8 <HAL_RCC_OscConfig+0x274>)
 8001f6c:	2201      	movs	r2, #1
 8001f6e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f70:	f7ff f974 	bl	800125c <HAL_GetTick>
 8001f74:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f76:	e008      	b.n	8001f8a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f78:	f7ff f970 	bl	800125c <HAL_GetTick>
 8001f7c:	4602      	mov	r2, r0
 8001f7e:	693b      	ldr	r3, [r7, #16]
 8001f80:	1ad3      	subs	r3, r2, r3
 8001f82:	2b02      	cmp	r3, #2
 8001f84:	d901      	bls.n	8001f8a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001f86:	2303      	movs	r3, #3
 8001f88:	e160      	b.n	800224c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f8a:	4b0d      	ldr	r3, [pc, #52]	; (8001fc0 <HAL_RCC_OscConfig+0x26c>)
 8001f8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f8e:	f003 0302 	and.w	r3, r3, #2
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d0f0      	beq.n	8001f78 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001f96:	2001      	movs	r0, #1
 8001f98:	f000 fb36 	bl	8002608 <RCC_Delay>
 8001f9c:	e01c      	b.n	8001fd8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001f9e:	4b0a      	ldr	r3, [pc, #40]	; (8001fc8 <HAL_RCC_OscConfig+0x274>)
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001fa4:	f7ff f95a 	bl	800125c <HAL_GetTick>
 8001fa8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001faa:	e00f      	b.n	8001fcc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001fac:	f7ff f956 	bl	800125c <HAL_GetTick>
 8001fb0:	4602      	mov	r2, r0
 8001fb2:	693b      	ldr	r3, [r7, #16]
 8001fb4:	1ad3      	subs	r3, r2, r3
 8001fb6:	2b02      	cmp	r3, #2
 8001fb8:	d908      	bls.n	8001fcc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001fba:	2303      	movs	r3, #3
 8001fbc:	e146      	b.n	800224c <HAL_RCC_OscConfig+0x4f8>
 8001fbe:	bf00      	nop
 8001fc0:	40021000 	.word	0x40021000
 8001fc4:	42420000 	.word	0x42420000
 8001fc8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001fcc:	4b92      	ldr	r3, [pc, #584]	; (8002218 <HAL_RCC_OscConfig+0x4c4>)
 8001fce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fd0:	f003 0302 	and.w	r3, r3, #2
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d1e9      	bne.n	8001fac <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	f003 0304 	and.w	r3, r3, #4
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	f000 80a6 	beq.w	8002132 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001fe6:	2300      	movs	r3, #0
 8001fe8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001fea:	4b8b      	ldr	r3, [pc, #556]	; (8002218 <HAL_RCC_OscConfig+0x4c4>)
 8001fec:	69db      	ldr	r3, [r3, #28]
 8001fee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d10d      	bne.n	8002012 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ff6:	4b88      	ldr	r3, [pc, #544]	; (8002218 <HAL_RCC_OscConfig+0x4c4>)
 8001ff8:	69db      	ldr	r3, [r3, #28]
 8001ffa:	4a87      	ldr	r2, [pc, #540]	; (8002218 <HAL_RCC_OscConfig+0x4c4>)
 8001ffc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002000:	61d3      	str	r3, [r2, #28]
 8002002:	4b85      	ldr	r3, [pc, #532]	; (8002218 <HAL_RCC_OscConfig+0x4c4>)
 8002004:	69db      	ldr	r3, [r3, #28]
 8002006:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800200a:	60bb      	str	r3, [r7, #8]
 800200c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800200e:	2301      	movs	r3, #1
 8002010:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002012:	4b82      	ldr	r3, [pc, #520]	; (800221c <HAL_RCC_OscConfig+0x4c8>)
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800201a:	2b00      	cmp	r3, #0
 800201c:	d118      	bne.n	8002050 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800201e:	4b7f      	ldr	r3, [pc, #508]	; (800221c <HAL_RCC_OscConfig+0x4c8>)
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	4a7e      	ldr	r2, [pc, #504]	; (800221c <HAL_RCC_OscConfig+0x4c8>)
 8002024:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002028:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800202a:	f7ff f917 	bl	800125c <HAL_GetTick>
 800202e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002030:	e008      	b.n	8002044 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002032:	f7ff f913 	bl	800125c <HAL_GetTick>
 8002036:	4602      	mov	r2, r0
 8002038:	693b      	ldr	r3, [r7, #16]
 800203a:	1ad3      	subs	r3, r2, r3
 800203c:	2b64      	cmp	r3, #100	; 0x64
 800203e:	d901      	bls.n	8002044 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002040:	2303      	movs	r3, #3
 8002042:	e103      	b.n	800224c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002044:	4b75      	ldr	r3, [pc, #468]	; (800221c <HAL_RCC_OscConfig+0x4c8>)
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800204c:	2b00      	cmp	r3, #0
 800204e:	d0f0      	beq.n	8002032 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	68db      	ldr	r3, [r3, #12]
 8002054:	2b01      	cmp	r3, #1
 8002056:	d106      	bne.n	8002066 <HAL_RCC_OscConfig+0x312>
 8002058:	4b6f      	ldr	r3, [pc, #444]	; (8002218 <HAL_RCC_OscConfig+0x4c4>)
 800205a:	6a1b      	ldr	r3, [r3, #32]
 800205c:	4a6e      	ldr	r2, [pc, #440]	; (8002218 <HAL_RCC_OscConfig+0x4c4>)
 800205e:	f043 0301 	orr.w	r3, r3, #1
 8002062:	6213      	str	r3, [r2, #32]
 8002064:	e02d      	b.n	80020c2 <HAL_RCC_OscConfig+0x36e>
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	68db      	ldr	r3, [r3, #12]
 800206a:	2b00      	cmp	r3, #0
 800206c:	d10c      	bne.n	8002088 <HAL_RCC_OscConfig+0x334>
 800206e:	4b6a      	ldr	r3, [pc, #424]	; (8002218 <HAL_RCC_OscConfig+0x4c4>)
 8002070:	6a1b      	ldr	r3, [r3, #32]
 8002072:	4a69      	ldr	r2, [pc, #420]	; (8002218 <HAL_RCC_OscConfig+0x4c4>)
 8002074:	f023 0301 	bic.w	r3, r3, #1
 8002078:	6213      	str	r3, [r2, #32]
 800207a:	4b67      	ldr	r3, [pc, #412]	; (8002218 <HAL_RCC_OscConfig+0x4c4>)
 800207c:	6a1b      	ldr	r3, [r3, #32]
 800207e:	4a66      	ldr	r2, [pc, #408]	; (8002218 <HAL_RCC_OscConfig+0x4c4>)
 8002080:	f023 0304 	bic.w	r3, r3, #4
 8002084:	6213      	str	r3, [r2, #32]
 8002086:	e01c      	b.n	80020c2 <HAL_RCC_OscConfig+0x36e>
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	68db      	ldr	r3, [r3, #12]
 800208c:	2b05      	cmp	r3, #5
 800208e:	d10c      	bne.n	80020aa <HAL_RCC_OscConfig+0x356>
 8002090:	4b61      	ldr	r3, [pc, #388]	; (8002218 <HAL_RCC_OscConfig+0x4c4>)
 8002092:	6a1b      	ldr	r3, [r3, #32]
 8002094:	4a60      	ldr	r2, [pc, #384]	; (8002218 <HAL_RCC_OscConfig+0x4c4>)
 8002096:	f043 0304 	orr.w	r3, r3, #4
 800209a:	6213      	str	r3, [r2, #32]
 800209c:	4b5e      	ldr	r3, [pc, #376]	; (8002218 <HAL_RCC_OscConfig+0x4c4>)
 800209e:	6a1b      	ldr	r3, [r3, #32]
 80020a0:	4a5d      	ldr	r2, [pc, #372]	; (8002218 <HAL_RCC_OscConfig+0x4c4>)
 80020a2:	f043 0301 	orr.w	r3, r3, #1
 80020a6:	6213      	str	r3, [r2, #32]
 80020a8:	e00b      	b.n	80020c2 <HAL_RCC_OscConfig+0x36e>
 80020aa:	4b5b      	ldr	r3, [pc, #364]	; (8002218 <HAL_RCC_OscConfig+0x4c4>)
 80020ac:	6a1b      	ldr	r3, [r3, #32]
 80020ae:	4a5a      	ldr	r2, [pc, #360]	; (8002218 <HAL_RCC_OscConfig+0x4c4>)
 80020b0:	f023 0301 	bic.w	r3, r3, #1
 80020b4:	6213      	str	r3, [r2, #32]
 80020b6:	4b58      	ldr	r3, [pc, #352]	; (8002218 <HAL_RCC_OscConfig+0x4c4>)
 80020b8:	6a1b      	ldr	r3, [r3, #32]
 80020ba:	4a57      	ldr	r2, [pc, #348]	; (8002218 <HAL_RCC_OscConfig+0x4c4>)
 80020bc:	f023 0304 	bic.w	r3, r3, #4
 80020c0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	68db      	ldr	r3, [r3, #12]
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d015      	beq.n	80020f6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020ca:	f7ff f8c7 	bl	800125c <HAL_GetTick>
 80020ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80020d0:	e00a      	b.n	80020e8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80020d2:	f7ff f8c3 	bl	800125c <HAL_GetTick>
 80020d6:	4602      	mov	r2, r0
 80020d8:	693b      	ldr	r3, [r7, #16]
 80020da:	1ad3      	subs	r3, r2, r3
 80020dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80020e0:	4293      	cmp	r3, r2
 80020e2:	d901      	bls.n	80020e8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80020e4:	2303      	movs	r3, #3
 80020e6:	e0b1      	b.n	800224c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80020e8:	4b4b      	ldr	r3, [pc, #300]	; (8002218 <HAL_RCC_OscConfig+0x4c4>)
 80020ea:	6a1b      	ldr	r3, [r3, #32]
 80020ec:	f003 0302 	and.w	r3, r3, #2
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d0ee      	beq.n	80020d2 <HAL_RCC_OscConfig+0x37e>
 80020f4:	e014      	b.n	8002120 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020f6:	f7ff f8b1 	bl	800125c <HAL_GetTick>
 80020fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80020fc:	e00a      	b.n	8002114 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80020fe:	f7ff f8ad 	bl	800125c <HAL_GetTick>
 8002102:	4602      	mov	r2, r0
 8002104:	693b      	ldr	r3, [r7, #16]
 8002106:	1ad3      	subs	r3, r2, r3
 8002108:	f241 3288 	movw	r2, #5000	; 0x1388
 800210c:	4293      	cmp	r3, r2
 800210e:	d901      	bls.n	8002114 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002110:	2303      	movs	r3, #3
 8002112:	e09b      	b.n	800224c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002114:	4b40      	ldr	r3, [pc, #256]	; (8002218 <HAL_RCC_OscConfig+0x4c4>)
 8002116:	6a1b      	ldr	r3, [r3, #32]
 8002118:	f003 0302 	and.w	r3, r3, #2
 800211c:	2b00      	cmp	r3, #0
 800211e:	d1ee      	bne.n	80020fe <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002120:	7dfb      	ldrb	r3, [r7, #23]
 8002122:	2b01      	cmp	r3, #1
 8002124:	d105      	bne.n	8002132 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002126:	4b3c      	ldr	r3, [pc, #240]	; (8002218 <HAL_RCC_OscConfig+0x4c4>)
 8002128:	69db      	ldr	r3, [r3, #28]
 800212a:	4a3b      	ldr	r2, [pc, #236]	; (8002218 <HAL_RCC_OscConfig+0x4c4>)
 800212c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002130:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	69db      	ldr	r3, [r3, #28]
 8002136:	2b00      	cmp	r3, #0
 8002138:	f000 8087 	beq.w	800224a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800213c:	4b36      	ldr	r3, [pc, #216]	; (8002218 <HAL_RCC_OscConfig+0x4c4>)
 800213e:	685b      	ldr	r3, [r3, #4]
 8002140:	f003 030c 	and.w	r3, r3, #12
 8002144:	2b08      	cmp	r3, #8
 8002146:	d061      	beq.n	800220c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	69db      	ldr	r3, [r3, #28]
 800214c:	2b02      	cmp	r3, #2
 800214e:	d146      	bne.n	80021de <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002150:	4b33      	ldr	r3, [pc, #204]	; (8002220 <HAL_RCC_OscConfig+0x4cc>)
 8002152:	2200      	movs	r2, #0
 8002154:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002156:	f7ff f881 	bl	800125c <HAL_GetTick>
 800215a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800215c:	e008      	b.n	8002170 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800215e:	f7ff f87d 	bl	800125c <HAL_GetTick>
 8002162:	4602      	mov	r2, r0
 8002164:	693b      	ldr	r3, [r7, #16]
 8002166:	1ad3      	subs	r3, r2, r3
 8002168:	2b02      	cmp	r3, #2
 800216a:	d901      	bls.n	8002170 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800216c:	2303      	movs	r3, #3
 800216e:	e06d      	b.n	800224c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002170:	4b29      	ldr	r3, [pc, #164]	; (8002218 <HAL_RCC_OscConfig+0x4c4>)
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002178:	2b00      	cmp	r3, #0
 800217a:	d1f0      	bne.n	800215e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	6a1b      	ldr	r3, [r3, #32]
 8002180:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002184:	d108      	bne.n	8002198 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002186:	4b24      	ldr	r3, [pc, #144]	; (8002218 <HAL_RCC_OscConfig+0x4c4>)
 8002188:	685b      	ldr	r3, [r3, #4]
 800218a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	689b      	ldr	r3, [r3, #8]
 8002192:	4921      	ldr	r1, [pc, #132]	; (8002218 <HAL_RCC_OscConfig+0x4c4>)
 8002194:	4313      	orrs	r3, r2
 8002196:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002198:	4b1f      	ldr	r3, [pc, #124]	; (8002218 <HAL_RCC_OscConfig+0x4c4>)
 800219a:	685b      	ldr	r3, [r3, #4]
 800219c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	6a19      	ldr	r1, [r3, #32]
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021a8:	430b      	orrs	r3, r1
 80021aa:	491b      	ldr	r1, [pc, #108]	; (8002218 <HAL_RCC_OscConfig+0x4c4>)
 80021ac:	4313      	orrs	r3, r2
 80021ae:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80021b0:	4b1b      	ldr	r3, [pc, #108]	; (8002220 <HAL_RCC_OscConfig+0x4cc>)
 80021b2:	2201      	movs	r2, #1
 80021b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021b6:	f7ff f851 	bl	800125c <HAL_GetTick>
 80021ba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80021bc:	e008      	b.n	80021d0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021be:	f7ff f84d 	bl	800125c <HAL_GetTick>
 80021c2:	4602      	mov	r2, r0
 80021c4:	693b      	ldr	r3, [r7, #16]
 80021c6:	1ad3      	subs	r3, r2, r3
 80021c8:	2b02      	cmp	r3, #2
 80021ca:	d901      	bls.n	80021d0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80021cc:	2303      	movs	r3, #3
 80021ce:	e03d      	b.n	800224c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80021d0:	4b11      	ldr	r3, [pc, #68]	; (8002218 <HAL_RCC_OscConfig+0x4c4>)
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d0f0      	beq.n	80021be <HAL_RCC_OscConfig+0x46a>
 80021dc:	e035      	b.n	800224a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80021de:	4b10      	ldr	r3, [pc, #64]	; (8002220 <HAL_RCC_OscConfig+0x4cc>)
 80021e0:	2200      	movs	r2, #0
 80021e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021e4:	f7ff f83a 	bl	800125c <HAL_GetTick>
 80021e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80021ea:	e008      	b.n	80021fe <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021ec:	f7ff f836 	bl	800125c <HAL_GetTick>
 80021f0:	4602      	mov	r2, r0
 80021f2:	693b      	ldr	r3, [r7, #16]
 80021f4:	1ad3      	subs	r3, r2, r3
 80021f6:	2b02      	cmp	r3, #2
 80021f8:	d901      	bls.n	80021fe <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80021fa:	2303      	movs	r3, #3
 80021fc:	e026      	b.n	800224c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80021fe:	4b06      	ldr	r3, [pc, #24]	; (8002218 <HAL_RCC_OscConfig+0x4c4>)
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002206:	2b00      	cmp	r3, #0
 8002208:	d1f0      	bne.n	80021ec <HAL_RCC_OscConfig+0x498>
 800220a:	e01e      	b.n	800224a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	69db      	ldr	r3, [r3, #28]
 8002210:	2b01      	cmp	r3, #1
 8002212:	d107      	bne.n	8002224 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002214:	2301      	movs	r3, #1
 8002216:	e019      	b.n	800224c <HAL_RCC_OscConfig+0x4f8>
 8002218:	40021000 	.word	0x40021000
 800221c:	40007000 	.word	0x40007000
 8002220:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002224:	4b0b      	ldr	r3, [pc, #44]	; (8002254 <HAL_RCC_OscConfig+0x500>)
 8002226:	685b      	ldr	r3, [r3, #4]
 8002228:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	6a1b      	ldr	r3, [r3, #32]
 8002234:	429a      	cmp	r2, r3
 8002236:	d106      	bne.n	8002246 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002242:	429a      	cmp	r2, r3
 8002244:	d001      	beq.n	800224a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002246:	2301      	movs	r3, #1
 8002248:	e000      	b.n	800224c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800224a:	2300      	movs	r3, #0
}
 800224c:	4618      	mov	r0, r3
 800224e:	3718      	adds	r7, #24
 8002250:	46bd      	mov	sp, r7
 8002252:	bd80      	pop	{r7, pc}
 8002254:	40021000 	.word	0x40021000

08002258 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002258:	b580      	push	{r7, lr}
 800225a:	b084      	sub	sp, #16
 800225c:	af00      	add	r7, sp, #0
 800225e:	6078      	str	r0, [r7, #4]
 8002260:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	2b00      	cmp	r3, #0
 8002266:	d101      	bne.n	800226c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002268:	2301      	movs	r3, #1
 800226a:	e0d0      	b.n	800240e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800226c:	4b6a      	ldr	r3, [pc, #424]	; (8002418 <HAL_RCC_ClockConfig+0x1c0>)
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	f003 0307 	and.w	r3, r3, #7
 8002274:	683a      	ldr	r2, [r7, #0]
 8002276:	429a      	cmp	r2, r3
 8002278:	d910      	bls.n	800229c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800227a:	4b67      	ldr	r3, [pc, #412]	; (8002418 <HAL_RCC_ClockConfig+0x1c0>)
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	f023 0207 	bic.w	r2, r3, #7
 8002282:	4965      	ldr	r1, [pc, #404]	; (8002418 <HAL_RCC_ClockConfig+0x1c0>)
 8002284:	683b      	ldr	r3, [r7, #0]
 8002286:	4313      	orrs	r3, r2
 8002288:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800228a:	4b63      	ldr	r3, [pc, #396]	; (8002418 <HAL_RCC_ClockConfig+0x1c0>)
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	f003 0307 	and.w	r3, r3, #7
 8002292:	683a      	ldr	r2, [r7, #0]
 8002294:	429a      	cmp	r2, r3
 8002296:	d001      	beq.n	800229c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002298:	2301      	movs	r3, #1
 800229a:	e0b8      	b.n	800240e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	f003 0302 	and.w	r3, r3, #2
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d020      	beq.n	80022ea <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	f003 0304 	and.w	r3, r3, #4
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d005      	beq.n	80022c0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80022b4:	4b59      	ldr	r3, [pc, #356]	; (800241c <HAL_RCC_ClockConfig+0x1c4>)
 80022b6:	685b      	ldr	r3, [r3, #4]
 80022b8:	4a58      	ldr	r2, [pc, #352]	; (800241c <HAL_RCC_ClockConfig+0x1c4>)
 80022ba:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80022be:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	f003 0308 	and.w	r3, r3, #8
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d005      	beq.n	80022d8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80022cc:	4b53      	ldr	r3, [pc, #332]	; (800241c <HAL_RCC_ClockConfig+0x1c4>)
 80022ce:	685b      	ldr	r3, [r3, #4]
 80022d0:	4a52      	ldr	r2, [pc, #328]	; (800241c <HAL_RCC_ClockConfig+0x1c4>)
 80022d2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80022d6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80022d8:	4b50      	ldr	r3, [pc, #320]	; (800241c <HAL_RCC_ClockConfig+0x1c4>)
 80022da:	685b      	ldr	r3, [r3, #4]
 80022dc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	689b      	ldr	r3, [r3, #8]
 80022e4:	494d      	ldr	r1, [pc, #308]	; (800241c <HAL_RCC_ClockConfig+0x1c4>)
 80022e6:	4313      	orrs	r3, r2
 80022e8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	f003 0301 	and.w	r3, r3, #1
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d040      	beq.n	8002378 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	685b      	ldr	r3, [r3, #4]
 80022fa:	2b01      	cmp	r3, #1
 80022fc:	d107      	bne.n	800230e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022fe:	4b47      	ldr	r3, [pc, #284]	; (800241c <HAL_RCC_ClockConfig+0x1c4>)
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002306:	2b00      	cmp	r3, #0
 8002308:	d115      	bne.n	8002336 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800230a:	2301      	movs	r3, #1
 800230c:	e07f      	b.n	800240e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	685b      	ldr	r3, [r3, #4]
 8002312:	2b02      	cmp	r3, #2
 8002314:	d107      	bne.n	8002326 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002316:	4b41      	ldr	r3, [pc, #260]	; (800241c <HAL_RCC_ClockConfig+0x1c4>)
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800231e:	2b00      	cmp	r3, #0
 8002320:	d109      	bne.n	8002336 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002322:	2301      	movs	r3, #1
 8002324:	e073      	b.n	800240e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002326:	4b3d      	ldr	r3, [pc, #244]	; (800241c <HAL_RCC_ClockConfig+0x1c4>)
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	f003 0302 	and.w	r3, r3, #2
 800232e:	2b00      	cmp	r3, #0
 8002330:	d101      	bne.n	8002336 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002332:	2301      	movs	r3, #1
 8002334:	e06b      	b.n	800240e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002336:	4b39      	ldr	r3, [pc, #228]	; (800241c <HAL_RCC_ClockConfig+0x1c4>)
 8002338:	685b      	ldr	r3, [r3, #4]
 800233a:	f023 0203 	bic.w	r2, r3, #3
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	685b      	ldr	r3, [r3, #4]
 8002342:	4936      	ldr	r1, [pc, #216]	; (800241c <HAL_RCC_ClockConfig+0x1c4>)
 8002344:	4313      	orrs	r3, r2
 8002346:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002348:	f7fe ff88 	bl	800125c <HAL_GetTick>
 800234c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800234e:	e00a      	b.n	8002366 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002350:	f7fe ff84 	bl	800125c <HAL_GetTick>
 8002354:	4602      	mov	r2, r0
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	1ad3      	subs	r3, r2, r3
 800235a:	f241 3288 	movw	r2, #5000	; 0x1388
 800235e:	4293      	cmp	r3, r2
 8002360:	d901      	bls.n	8002366 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002362:	2303      	movs	r3, #3
 8002364:	e053      	b.n	800240e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002366:	4b2d      	ldr	r3, [pc, #180]	; (800241c <HAL_RCC_ClockConfig+0x1c4>)
 8002368:	685b      	ldr	r3, [r3, #4]
 800236a:	f003 020c 	and.w	r2, r3, #12
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	685b      	ldr	r3, [r3, #4]
 8002372:	009b      	lsls	r3, r3, #2
 8002374:	429a      	cmp	r2, r3
 8002376:	d1eb      	bne.n	8002350 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002378:	4b27      	ldr	r3, [pc, #156]	; (8002418 <HAL_RCC_ClockConfig+0x1c0>)
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	f003 0307 	and.w	r3, r3, #7
 8002380:	683a      	ldr	r2, [r7, #0]
 8002382:	429a      	cmp	r2, r3
 8002384:	d210      	bcs.n	80023a8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002386:	4b24      	ldr	r3, [pc, #144]	; (8002418 <HAL_RCC_ClockConfig+0x1c0>)
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	f023 0207 	bic.w	r2, r3, #7
 800238e:	4922      	ldr	r1, [pc, #136]	; (8002418 <HAL_RCC_ClockConfig+0x1c0>)
 8002390:	683b      	ldr	r3, [r7, #0]
 8002392:	4313      	orrs	r3, r2
 8002394:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002396:	4b20      	ldr	r3, [pc, #128]	; (8002418 <HAL_RCC_ClockConfig+0x1c0>)
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	f003 0307 	and.w	r3, r3, #7
 800239e:	683a      	ldr	r2, [r7, #0]
 80023a0:	429a      	cmp	r2, r3
 80023a2:	d001      	beq.n	80023a8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80023a4:	2301      	movs	r3, #1
 80023a6:	e032      	b.n	800240e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	f003 0304 	and.w	r3, r3, #4
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d008      	beq.n	80023c6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80023b4:	4b19      	ldr	r3, [pc, #100]	; (800241c <HAL_RCC_ClockConfig+0x1c4>)
 80023b6:	685b      	ldr	r3, [r3, #4]
 80023b8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	68db      	ldr	r3, [r3, #12]
 80023c0:	4916      	ldr	r1, [pc, #88]	; (800241c <HAL_RCC_ClockConfig+0x1c4>)
 80023c2:	4313      	orrs	r3, r2
 80023c4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	f003 0308 	and.w	r3, r3, #8
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d009      	beq.n	80023e6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80023d2:	4b12      	ldr	r3, [pc, #72]	; (800241c <HAL_RCC_ClockConfig+0x1c4>)
 80023d4:	685b      	ldr	r3, [r3, #4]
 80023d6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	691b      	ldr	r3, [r3, #16]
 80023de:	00db      	lsls	r3, r3, #3
 80023e0:	490e      	ldr	r1, [pc, #56]	; (800241c <HAL_RCC_ClockConfig+0x1c4>)
 80023e2:	4313      	orrs	r3, r2
 80023e4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80023e6:	f000 f859 	bl	800249c <HAL_RCC_GetSysClockFreq>
 80023ea:	4602      	mov	r2, r0
 80023ec:	4b0b      	ldr	r3, [pc, #44]	; (800241c <HAL_RCC_ClockConfig+0x1c4>)
 80023ee:	685b      	ldr	r3, [r3, #4]
 80023f0:	091b      	lsrs	r3, r3, #4
 80023f2:	f003 030f 	and.w	r3, r3, #15
 80023f6:	490a      	ldr	r1, [pc, #40]	; (8002420 <HAL_RCC_ClockConfig+0x1c8>)
 80023f8:	5ccb      	ldrb	r3, [r1, r3]
 80023fa:	fa22 f303 	lsr.w	r3, r2, r3
 80023fe:	4a09      	ldr	r2, [pc, #36]	; (8002424 <HAL_RCC_ClockConfig+0x1cc>)
 8002400:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002402:	4b09      	ldr	r3, [pc, #36]	; (8002428 <HAL_RCC_ClockConfig+0x1d0>)
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	4618      	mov	r0, r3
 8002408:	f7fe fc72 	bl	8000cf0 <HAL_InitTick>

  return HAL_OK;
 800240c:	2300      	movs	r3, #0
}
 800240e:	4618      	mov	r0, r3
 8002410:	3710      	adds	r7, #16
 8002412:	46bd      	mov	sp, r7
 8002414:	bd80      	pop	{r7, pc}
 8002416:	bf00      	nop
 8002418:	40022000 	.word	0x40022000
 800241c:	40021000 	.word	0x40021000
 8002420:	080073ec 	.word	0x080073ec
 8002424:	2000000c 	.word	0x2000000c
 8002428:	20000010 	.word	0x20000010

0800242c <HAL_RCC_MCOConfig>:
  *          This parameter can be one of the following values:
  *            @arg @ref RCC_MCODIV_1 no division applied to MCO clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 800242c:	b580      	push	{r7, lr}
 800242e:	b08a      	sub	sp, #40	; 0x28
 8002430:	af00      	add	r7, sp, #0
 8002432:	60f8      	str	r0, [r7, #12]
 8002434:	60b9      	str	r1, [r7, #8]
 8002436:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef gpio = {0U};
 8002438:	f107 0318 	add.w	r3, r7, #24
 800243c:	2200      	movs	r2, #0
 800243e:	601a      	str	r2, [r3, #0]
 8002440:	605a      	str	r2, [r3, #4]
 8002442:	609a      	str	r2, [r3, #8]
 8002444:	60da      	str	r2, [r3, #12]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(RCC_MCOx);
  UNUSED(RCC_MCODiv);

  /* Configure the MCO1 pin in alternate function mode */
  gpio.Mode      = GPIO_MODE_AF_PP;
 8002446:	2302      	movs	r3, #2
 8002448:	61fb      	str	r3, [r7, #28]
  gpio.Speed     = GPIO_SPEED_FREQ_HIGH;
 800244a:	2303      	movs	r3, #3
 800244c:	627b      	str	r3, [r7, #36]	; 0x24
  gpio.Pull      = GPIO_NOPULL;
 800244e:	2300      	movs	r3, #0
 8002450:	623b      	str	r3, [r7, #32]
  gpio.Pin       = MCO1_PIN;
 8002452:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002456:	61bb      	str	r3, [r7, #24]

  /* MCO1 Clock Enable */
  MCO1_CLK_ENABLE();
 8002458:	4b0e      	ldr	r3, [pc, #56]	; (8002494 <HAL_RCC_MCOConfig+0x68>)
 800245a:	699b      	ldr	r3, [r3, #24]
 800245c:	4a0d      	ldr	r2, [pc, #52]	; (8002494 <HAL_RCC_MCOConfig+0x68>)
 800245e:	f043 0304 	orr.w	r3, r3, #4
 8002462:	6193      	str	r3, [r2, #24]
 8002464:	4b0b      	ldr	r3, [pc, #44]	; (8002494 <HAL_RCC_MCOConfig+0x68>)
 8002466:	699b      	ldr	r3, [r3, #24]
 8002468:	f003 0304 	and.w	r3, r3, #4
 800246c:	617b      	str	r3, [r7, #20]
 800246e:	697b      	ldr	r3, [r7, #20]

  HAL_GPIO_Init(MCO1_GPIO_PORT, &gpio);
 8002470:	f107 0318 	add.w	r3, r7, #24
 8002474:	4619      	mov	r1, r3
 8002476:	4808      	ldr	r0, [pc, #32]	; (8002498 <HAL_RCC_MCOConfig+0x6c>)
 8002478:	f7ff faa0 	bl	80019bc <HAL_GPIO_Init>

  /* Configure the MCO clock source */
  __HAL_RCC_MCO1_CONFIG(RCC_MCOSource, RCC_MCODiv);
 800247c:	4b05      	ldr	r3, [pc, #20]	; (8002494 <HAL_RCC_MCOConfig+0x68>)
 800247e:	685b      	ldr	r3, [r3, #4]
 8002480:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8002484:	4903      	ldr	r1, [pc, #12]	; (8002494 <HAL_RCC_MCOConfig+0x68>)
 8002486:	68bb      	ldr	r3, [r7, #8]
 8002488:	4313      	orrs	r3, r2
 800248a:	604b      	str	r3, [r1, #4]
}
 800248c:	bf00      	nop
 800248e:	3728      	adds	r7, #40	; 0x28
 8002490:	46bd      	mov	sp, r7
 8002492:	bd80      	pop	{r7, pc}
 8002494:	40021000 	.word	0x40021000
 8002498:	40010800 	.word	0x40010800

0800249c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800249c:	b480      	push	{r7}
 800249e:	b087      	sub	sp, #28
 80024a0:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80024a2:	2300      	movs	r3, #0
 80024a4:	60fb      	str	r3, [r7, #12]
 80024a6:	2300      	movs	r3, #0
 80024a8:	60bb      	str	r3, [r7, #8]
 80024aa:	2300      	movs	r3, #0
 80024ac:	617b      	str	r3, [r7, #20]
 80024ae:	2300      	movs	r3, #0
 80024b0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80024b2:	2300      	movs	r3, #0
 80024b4:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80024b6:	4b1e      	ldr	r3, [pc, #120]	; (8002530 <HAL_RCC_GetSysClockFreq+0x94>)
 80024b8:	685b      	ldr	r3, [r3, #4]
 80024ba:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	f003 030c 	and.w	r3, r3, #12
 80024c2:	2b04      	cmp	r3, #4
 80024c4:	d002      	beq.n	80024cc <HAL_RCC_GetSysClockFreq+0x30>
 80024c6:	2b08      	cmp	r3, #8
 80024c8:	d003      	beq.n	80024d2 <HAL_RCC_GetSysClockFreq+0x36>
 80024ca:	e027      	b.n	800251c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80024cc:	4b19      	ldr	r3, [pc, #100]	; (8002534 <HAL_RCC_GetSysClockFreq+0x98>)
 80024ce:	613b      	str	r3, [r7, #16]
      break;
 80024d0:	e027      	b.n	8002522 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	0c9b      	lsrs	r3, r3, #18
 80024d6:	f003 030f 	and.w	r3, r3, #15
 80024da:	4a17      	ldr	r2, [pc, #92]	; (8002538 <HAL_RCC_GetSysClockFreq+0x9c>)
 80024dc:	5cd3      	ldrb	r3, [r2, r3]
 80024de:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d010      	beq.n	800250c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80024ea:	4b11      	ldr	r3, [pc, #68]	; (8002530 <HAL_RCC_GetSysClockFreq+0x94>)
 80024ec:	685b      	ldr	r3, [r3, #4]
 80024ee:	0c5b      	lsrs	r3, r3, #17
 80024f0:	f003 0301 	and.w	r3, r3, #1
 80024f4:	4a11      	ldr	r2, [pc, #68]	; (800253c <HAL_RCC_GetSysClockFreq+0xa0>)
 80024f6:	5cd3      	ldrb	r3, [r2, r3]
 80024f8:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	4a0d      	ldr	r2, [pc, #52]	; (8002534 <HAL_RCC_GetSysClockFreq+0x98>)
 80024fe:	fb03 f202 	mul.w	r2, r3, r2
 8002502:	68bb      	ldr	r3, [r7, #8]
 8002504:	fbb2 f3f3 	udiv	r3, r2, r3
 8002508:	617b      	str	r3, [r7, #20]
 800250a:	e004      	b.n	8002516 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	4a0c      	ldr	r2, [pc, #48]	; (8002540 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002510:	fb02 f303 	mul.w	r3, r2, r3
 8002514:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002516:	697b      	ldr	r3, [r7, #20]
 8002518:	613b      	str	r3, [r7, #16]
      break;
 800251a:	e002      	b.n	8002522 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800251c:	4b05      	ldr	r3, [pc, #20]	; (8002534 <HAL_RCC_GetSysClockFreq+0x98>)
 800251e:	613b      	str	r3, [r7, #16]
      break;
 8002520:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002522:	693b      	ldr	r3, [r7, #16]
}
 8002524:	4618      	mov	r0, r3
 8002526:	371c      	adds	r7, #28
 8002528:	46bd      	mov	sp, r7
 800252a:	bc80      	pop	{r7}
 800252c:	4770      	bx	lr
 800252e:	bf00      	nop
 8002530:	40021000 	.word	0x40021000
 8002534:	007a1200 	.word	0x007a1200
 8002538:	08007404 	.word	0x08007404
 800253c:	08007414 	.word	0x08007414
 8002540:	003d0900 	.word	0x003d0900

08002544 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002544:	b480      	push	{r7}
 8002546:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002548:	4b02      	ldr	r3, [pc, #8]	; (8002554 <HAL_RCC_GetHCLKFreq+0x10>)
 800254a:	681b      	ldr	r3, [r3, #0]
}
 800254c:	4618      	mov	r0, r3
 800254e:	46bd      	mov	sp, r7
 8002550:	bc80      	pop	{r7}
 8002552:	4770      	bx	lr
 8002554:	2000000c 	.word	0x2000000c

08002558 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002558:	b580      	push	{r7, lr}
 800255a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800255c:	f7ff fff2 	bl	8002544 <HAL_RCC_GetHCLKFreq>
 8002560:	4602      	mov	r2, r0
 8002562:	4b05      	ldr	r3, [pc, #20]	; (8002578 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002564:	685b      	ldr	r3, [r3, #4]
 8002566:	0a1b      	lsrs	r3, r3, #8
 8002568:	f003 0307 	and.w	r3, r3, #7
 800256c:	4903      	ldr	r1, [pc, #12]	; (800257c <HAL_RCC_GetPCLK1Freq+0x24>)
 800256e:	5ccb      	ldrb	r3, [r1, r3]
 8002570:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002574:	4618      	mov	r0, r3
 8002576:	bd80      	pop	{r7, pc}
 8002578:	40021000 	.word	0x40021000
 800257c:	080073fc 	.word	0x080073fc

08002580 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002580:	b580      	push	{r7, lr}
 8002582:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002584:	f7ff ffde 	bl	8002544 <HAL_RCC_GetHCLKFreq>
 8002588:	4602      	mov	r2, r0
 800258a:	4b05      	ldr	r3, [pc, #20]	; (80025a0 <HAL_RCC_GetPCLK2Freq+0x20>)
 800258c:	685b      	ldr	r3, [r3, #4]
 800258e:	0adb      	lsrs	r3, r3, #11
 8002590:	f003 0307 	and.w	r3, r3, #7
 8002594:	4903      	ldr	r1, [pc, #12]	; (80025a4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002596:	5ccb      	ldrb	r3, [r1, r3]
 8002598:	fa22 f303 	lsr.w	r3, r2, r3
}
 800259c:	4618      	mov	r0, r3
 800259e:	bd80      	pop	{r7, pc}
 80025a0:	40021000 	.word	0x40021000
 80025a4:	080073fc 	.word	0x080073fc

080025a8 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80025a8:	b480      	push	{r7}
 80025aa:	b083      	sub	sp, #12
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	6078      	str	r0, [r7, #4]
 80025b0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	220f      	movs	r2, #15
 80025b6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80025b8:	4b11      	ldr	r3, [pc, #68]	; (8002600 <HAL_RCC_GetClockConfig+0x58>)
 80025ba:	685b      	ldr	r3, [r3, #4]
 80025bc:	f003 0203 	and.w	r2, r3, #3
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80025c4:	4b0e      	ldr	r3, [pc, #56]	; (8002600 <HAL_RCC_GetClockConfig+0x58>)
 80025c6:	685b      	ldr	r3, [r3, #4]
 80025c8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80025d0:	4b0b      	ldr	r3, [pc, #44]	; (8002600 <HAL_RCC_GetClockConfig+0x58>)
 80025d2:	685b      	ldr	r3, [r3, #4]
 80025d4:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80025dc:	4b08      	ldr	r3, [pc, #32]	; (8002600 <HAL_RCC_GetClockConfig+0x58>)
 80025de:	685b      	ldr	r3, [r3, #4]
 80025e0:	08db      	lsrs	r3, r3, #3
 80025e2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80025ea:	4b06      	ldr	r3, [pc, #24]	; (8002604 <HAL_RCC_GetClockConfig+0x5c>)
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	f003 0207 	and.w	r2, r3, #7
 80025f2:	683b      	ldr	r3, [r7, #0]
 80025f4:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 80025f6:	bf00      	nop
 80025f8:	370c      	adds	r7, #12
 80025fa:	46bd      	mov	sp, r7
 80025fc:	bc80      	pop	{r7}
 80025fe:	4770      	bx	lr
 8002600:	40021000 	.word	0x40021000
 8002604:	40022000 	.word	0x40022000

08002608 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002608:	b480      	push	{r7}
 800260a:	b085      	sub	sp, #20
 800260c:	af00      	add	r7, sp, #0
 800260e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002610:	4b0a      	ldr	r3, [pc, #40]	; (800263c <RCC_Delay+0x34>)
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	4a0a      	ldr	r2, [pc, #40]	; (8002640 <RCC_Delay+0x38>)
 8002616:	fba2 2303 	umull	r2, r3, r2, r3
 800261a:	0a5b      	lsrs	r3, r3, #9
 800261c:	687a      	ldr	r2, [r7, #4]
 800261e:	fb02 f303 	mul.w	r3, r2, r3
 8002622:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002624:	bf00      	nop
  }
  while (Delay --);
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	1e5a      	subs	r2, r3, #1
 800262a:	60fa      	str	r2, [r7, #12]
 800262c:	2b00      	cmp	r3, #0
 800262e:	d1f9      	bne.n	8002624 <RCC_Delay+0x1c>
}
 8002630:	bf00      	nop
 8002632:	bf00      	nop
 8002634:	3714      	adds	r7, #20
 8002636:	46bd      	mov	sp, r7
 8002638:	bc80      	pop	{r7}
 800263a:	4770      	bx	lr
 800263c:	2000000c 	.word	0x2000000c
 8002640:	10624dd3 	.word	0x10624dd3

08002644 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002644:	b580      	push	{r7, lr}
 8002646:	b082      	sub	sp, #8
 8002648:	af00      	add	r7, sp, #0
 800264a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	2b00      	cmp	r3, #0
 8002650:	d101      	bne.n	8002656 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002652:	2301      	movs	r3, #1
 8002654:	e041      	b.n	80026da <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800265c:	b2db      	uxtb	r3, r3
 800265e:	2b00      	cmp	r3, #0
 8002660:	d106      	bne.n	8002670 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	2200      	movs	r2, #0
 8002666:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800266a:	6878      	ldr	r0, [r7, #4]
 800266c:	f7fe fcc0 	bl	8000ff0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	2202      	movs	r2, #2
 8002674:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681a      	ldr	r2, [r3, #0]
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	3304      	adds	r3, #4
 8002680:	4619      	mov	r1, r3
 8002682:	4610      	mov	r0, r2
 8002684:	f000 fa74 	bl	8002b70 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	2201      	movs	r2, #1
 800268c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	2201      	movs	r2, #1
 8002694:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	2201      	movs	r2, #1
 800269c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	2201      	movs	r2, #1
 80026a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	2201      	movs	r2, #1
 80026ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	2201      	movs	r2, #1
 80026b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	2201      	movs	r2, #1
 80026bc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	2201      	movs	r2, #1
 80026c4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	2201      	movs	r2, #1
 80026cc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	2201      	movs	r2, #1
 80026d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80026d8:	2300      	movs	r3, #0
}
 80026da:	4618      	mov	r0, r3
 80026dc:	3708      	adds	r7, #8
 80026de:	46bd      	mov	sp, r7
 80026e0:	bd80      	pop	{r7, pc}
	...

080026e4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80026e4:	b480      	push	{r7}
 80026e6:	b085      	sub	sp, #20
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80026f2:	b2db      	uxtb	r3, r3
 80026f4:	2b01      	cmp	r3, #1
 80026f6:	d001      	beq.n	80026fc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80026f8:	2301      	movs	r3, #1
 80026fa:	e03a      	b.n	8002772 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	2202      	movs	r2, #2
 8002700:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	68da      	ldr	r2, [r3, #12]
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	f042 0201 	orr.w	r2, r2, #1
 8002712:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	4a18      	ldr	r2, [pc, #96]	; (800277c <HAL_TIM_Base_Start_IT+0x98>)
 800271a:	4293      	cmp	r3, r2
 800271c:	d00e      	beq.n	800273c <HAL_TIM_Base_Start_IT+0x58>
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002726:	d009      	beq.n	800273c <HAL_TIM_Base_Start_IT+0x58>
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	4a14      	ldr	r2, [pc, #80]	; (8002780 <HAL_TIM_Base_Start_IT+0x9c>)
 800272e:	4293      	cmp	r3, r2
 8002730:	d004      	beq.n	800273c <HAL_TIM_Base_Start_IT+0x58>
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	4a13      	ldr	r2, [pc, #76]	; (8002784 <HAL_TIM_Base_Start_IT+0xa0>)
 8002738:	4293      	cmp	r3, r2
 800273a:	d111      	bne.n	8002760 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	689b      	ldr	r3, [r3, #8]
 8002742:	f003 0307 	and.w	r3, r3, #7
 8002746:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	2b06      	cmp	r3, #6
 800274c:	d010      	beq.n	8002770 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	681a      	ldr	r2, [r3, #0]
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	f042 0201 	orr.w	r2, r2, #1
 800275c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800275e:	e007      	b.n	8002770 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	681a      	ldr	r2, [r3, #0]
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	f042 0201 	orr.w	r2, r2, #1
 800276e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002770:	2300      	movs	r3, #0
}
 8002772:	4618      	mov	r0, r3
 8002774:	3714      	adds	r7, #20
 8002776:	46bd      	mov	sp, r7
 8002778:	bc80      	pop	{r7}
 800277a:	4770      	bx	lr
 800277c:	40012c00 	.word	0x40012c00
 8002780:	40000400 	.word	0x40000400
 8002784:	40000800 	.word	0x40000800

08002788 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002788:	b580      	push	{r7, lr}
 800278a:	b082      	sub	sp, #8
 800278c:	af00      	add	r7, sp, #0
 800278e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	691b      	ldr	r3, [r3, #16]
 8002796:	f003 0302 	and.w	r3, r3, #2
 800279a:	2b02      	cmp	r3, #2
 800279c:	d122      	bne.n	80027e4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	68db      	ldr	r3, [r3, #12]
 80027a4:	f003 0302 	and.w	r3, r3, #2
 80027a8:	2b02      	cmp	r3, #2
 80027aa:	d11b      	bne.n	80027e4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	f06f 0202 	mvn.w	r2, #2
 80027b4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	2201      	movs	r2, #1
 80027ba:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	699b      	ldr	r3, [r3, #24]
 80027c2:	f003 0303 	and.w	r3, r3, #3
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d003      	beq.n	80027d2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80027ca:	6878      	ldr	r0, [r7, #4]
 80027cc:	f000 f9b4 	bl	8002b38 <HAL_TIM_IC_CaptureCallback>
 80027d0:	e005      	b.n	80027de <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80027d2:	6878      	ldr	r0, [r7, #4]
 80027d4:	f000 f9a7 	bl	8002b26 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80027d8:	6878      	ldr	r0, [r7, #4]
 80027da:	f000 f9b6 	bl	8002b4a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	2200      	movs	r2, #0
 80027e2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	691b      	ldr	r3, [r3, #16]
 80027ea:	f003 0304 	and.w	r3, r3, #4
 80027ee:	2b04      	cmp	r3, #4
 80027f0:	d122      	bne.n	8002838 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	68db      	ldr	r3, [r3, #12]
 80027f8:	f003 0304 	and.w	r3, r3, #4
 80027fc:	2b04      	cmp	r3, #4
 80027fe:	d11b      	bne.n	8002838 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	f06f 0204 	mvn.w	r2, #4
 8002808:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	2202      	movs	r2, #2
 800280e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	699b      	ldr	r3, [r3, #24]
 8002816:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800281a:	2b00      	cmp	r3, #0
 800281c:	d003      	beq.n	8002826 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800281e:	6878      	ldr	r0, [r7, #4]
 8002820:	f000 f98a 	bl	8002b38 <HAL_TIM_IC_CaptureCallback>
 8002824:	e005      	b.n	8002832 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002826:	6878      	ldr	r0, [r7, #4]
 8002828:	f000 f97d 	bl	8002b26 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800282c:	6878      	ldr	r0, [r7, #4]
 800282e:	f000 f98c 	bl	8002b4a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	2200      	movs	r2, #0
 8002836:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	691b      	ldr	r3, [r3, #16]
 800283e:	f003 0308 	and.w	r3, r3, #8
 8002842:	2b08      	cmp	r3, #8
 8002844:	d122      	bne.n	800288c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	68db      	ldr	r3, [r3, #12]
 800284c:	f003 0308 	and.w	r3, r3, #8
 8002850:	2b08      	cmp	r3, #8
 8002852:	d11b      	bne.n	800288c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	f06f 0208 	mvn.w	r2, #8
 800285c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	2204      	movs	r2, #4
 8002862:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	69db      	ldr	r3, [r3, #28]
 800286a:	f003 0303 	and.w	r3, r3, #3
 800286e:	2b00      	cmp	r3, #0
 8002870:	d003      	beq.n	800287a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002872:	6878      	ldr	r0, [r7, #4]
 8002874:	f000 f960 	bl	8002b38 <HAL_TIM_IC_CaptureCallback>
 8002878:	e005      	b.n	8002886 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800287a:	6878      	ldr	r0, [r7, #4]
 800287c:	f000 f953 	bl	8002b26 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002880:	6878      	ldr	r0, [r7, #4]
 8002882:	f000 f962 	bl	8002b4a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	2200      	movs	r2, #0
 800288a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	691b      	ldr	r3, [r3, #16]
 8002892:	f003 0310 	and.w	r3, r3, #16
 8002896:	2b10      	cmp	r3, #16
 8002898:	d122      	bne.n	80028e0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	68db      	ldr	r3, [r3, #12]
 80028a0:	f003 0310 	and.w	r3, r3, #16
 80028a4:	2b10      	cmp	r3, #16
 80028a6:	d11b      	bne.n	80028e0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	f06f 0210 	mvn.w	r2, #16
 80028b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	2208      	movs	r2, #8
 80028b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	69db      	ldr	r3, [r3, #28]
 80028be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d003      	beq.n	80028ce <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80028c6:	6878      	ldr	r0, [r7, #4]
 80028c8:	f000 f936 	bl	8002b38 <HAL_TIM_IC_CaptureCallback>
 80028cc:	e005      	b.n	80028da <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80028ce:	6878      	ldr	r0, [r7, #4]
 80028d0:	f000 f929 	bl	8002b26 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80028d4:	6878      	ldr	r0, [r7, #4]
 80028d6:	f000 f938 	bl	8002b4a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	2200      	movs	r2, #0
 80028de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	691b      	ldr	r3, [r3, #16]
 80028e6:	f003 0301 	and.w	r3, r3, #1
 80028ea:	2b01      	cmp	r3, #1
 80028ec:	d10e      	bne.n	800290c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	68db      	ldr	r3, [r3, #12]
 80028f4:	f003 0301 	and.w	r3, r3, #1
 80028f8:	2b01      	cmp	r3, #1
 80028fa:	d107      	bne.n	800290c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	f06f 0201 	mvn.w	r2, #1
 8002904:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002906:	6878      	ldr	r0, [r7, #4]
 8002908:	f7fe f9a2 	bl	8000c50 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	691b      	ldr	r3, [r3, #16]
 8002912:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002916:	2b80      	cmp	r3, #128	; 0x80
 8002918:	d10e      	bne.n	8002938 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	68db      	ldr	r3, [r3, #12]
 8002920:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002924:	2b80      	cmp	r3, #128	; 0x80
 8002926:	d107      	bne.n	8002938 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002930:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002932:	6878      	ldr	r0, [r7, #4]
 8002934:	f000 fa7b 	bl	8002e2e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	691b      	ldr	r3, [r3, #16]
 800293e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002942:	2b40      	cmp	r3, #64	; 0x40
 8002944:	d10e      	bne.n	8002964 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	68db      	ldr	r3, [r3, #12]
 800294c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002950:	2b40      	cmp	r3, #64	; 0x40
 8002952:	d107      	bne.n	8002964 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800295c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800295e:	6878      	ldr	r0, [r7, #4]
 8002960:	f000 f8fc 	bl	8002b5c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	691b      	ldr	r3, [r3, #16]
 800296a:	f003 0320 	and.w	r3, r3, #32
 800296e:	2b20      	cmp	r3, #32
 8002970:	d10e      	bne.n	8002990 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	68db      	ldr	r3, [r3, #12]
 8002978:	f003 0320 	and.w	r3, r3, #32
 800297c:	2b20      	cmp	r3, #32
 800297e:	d107      	bne.n	8002990 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	f06f 0220 	mvn.w	r2, #32
 8002988:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800298a:	6878      	ldr	r0, [r7, #4]
 800298c:	f000 fa46 	bl	8002e1c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002990:	bf00      	nop
 8002992:	3708      	adds	r7, #8
 8002994:	46bd      	mov	sp, r7
 8002996:	bd80      	pop	{r7, pc}

08002998 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002998:	b580      	push	{r7, lr}
 800299a:	b084      	sub	sp, #16
 800299c:	af00      	add	r7, sp, #0
 800299e:	6078      	str	r0, [r7, #4]
 80029a0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80029a2:	2300      	movs	r3, #0
 80029a4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80029ac:	2b01      	cmp	r3, #1
 80029ae:	d101      	bne.n	80029b4 <HAL_TIM_ConfigClockSource+0x1c>
 80029b0:	2302      	movs	r3, #2
 80029b2:	e0b4      	b.n	8002b1e <HAL_TIM_ConfigClockSource+0x186>
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	2201      	movs	r2, #1
 80029b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	2202      	movs	r2, #2
 80029c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	689b      	ldr	r3, [r3, #8]
 80029ca:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80029cc:	68bb      	ldr	r3, [r7, #8]
 80029ce:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80029d2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80029d4:	68bb      	ldr	r3, [r7, #8]
 80029d6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80029da:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	68ba      	ldr	r2, [r7, #8]
 80029e2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80029e4:	683b      	ldr	r3, [r7, #0]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80029ec:	d03e      	beq.n	8002a6c <HAL_TIM_ConfigClockSource+0xd4>
 80029ee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80029f2:	f200 8087 	bhi.w	8002b04 <HAL_TIM_ConfigClockSource+0x16c>
 80029f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80029fa:	f000 8086 	beq.w	8002b0a <HAL_TIM_ConfigClockSource+0x172>
 80029fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002a02:	d87f      	bhi.n	8002b04 <HAL_TIM_ConfigClockSource+0x16c>
 8002a04:	2b70      	cmp	r3, #112	; 0x70
 8002a06:	d01a      	beq.n	8002a3e <HAL_TIM_ConfigClockSource+0xa6>
 8002a08:	2b70      	cmp	r3, #112	; 0x70
 8002a0a:	d87b      	bhi.n	8002b04 <HAL_TIM_ConfigClockSource+0x16c>
 8002a0c:	2b60      	cmp	r3, #96	; 0x60
 8002a0e:	d050      	beq.n	8002ab2 <HAL_TIM_ConfigClockSource+0x11a>
 8002a10:	2b60      	cmp	r3, #96	; 0x60
 8002a12:	d877      	bhi.n	8002b04 <HAL_TIM_ConfigClockSource+0x16c>
 8002a14:	2b50      	cmp	r3, #80	; 0x50
 8002a16:	d03c      	beq.n	8002a92 <HAL_TIM_ConfigClockSource+0xfa>
 8002a18:	2b50      	cmp	r3, #80	; 0x50
 8002a1a:	d873      	bhi.n	8002b04 <HAL_TIM_ConfigClockSource+0x16c>
 8002a1c:	2b40      	cmp	r3, #64	; 0x40
 8002a1e:	d058      	beq.n	8002ad2 <HAL_TIM_ConfigClockSource+0x13a>
 8002a20:	2b40      	cmp	r3, #64	; 0x40
 8002a22:	d86f      	bhi.n	8002b04 <HAL_TIM_ConfigClockSource+0x16c>
 8002a24:	2b30      	cmp	r3, #48	; 0x30
 8002a26:	d064      	beq.n	8002af2 <HAL_TIM_ConfigClockSource+0x15a>
 8002a28:	2b30      	cmp	r3, #48	; 0x30
 8002a2a:	d86b      	bhi.n	8002b04 <HAL_TIM_ConfigClockSource+0x16c>
 8002a2c:	2b20      	cmp	r3, #32
 8002a2e:	d060      	beq.n	8002af2 <HAL_TIM_ConfigClockSource+0x15a>
 8002a30:	2b20      	cmp	r3, #32
 8002a32:	d867      	bhi.n	8002b04 <HAL_TIM_ConfigClockSource+0x16c>
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d05c      	beq.n	8002af2 <HAL_TIM_ConfigClockSource+0x15a>
 8002a38:	2b10      	cmp	r3, #16
 8002a3a:	d05a      	beq.n	8002af2 <HAL_TIM_ConfigClockSource+0x15a>
 8002a3c:	e062      	b.n	8002b04 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	6818      	ldr	r0, [r3, #0]
 8002a42:	683b      	ldr	r3, [r7, #0]
 8002a44:	6899      	ldr	r1, [r3, #8]
 8002a46:	683b      	ldr	r3, [r7, #0]
 8002a48:	685a      	ldr	r2, [r3, #4]
 8002a4a:	683b      	ldr	r3, [r7, #0]
 8002a4c:	68db      	ldr	r3, [r3, #12]
 8002a4e:	f000 f968 	bl	8002d22 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	689b      	ldr	r3, [r3, #8]
 8002a58:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002a5a:	68bb      	ldr	r3, [r7, #8]
 8002a5c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002a60:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	68ba      	ldr	r2, [r7, #8]
 8002a68:	609a      	str	r2, [r3, #8]
      break;
 8002a6a:	e04f      	b.n	8002b0c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	6818      	ldr	r0, [r3, #0]
 8002a70:	683b      	ldr	r3, [r7, #0]
 8002a72:	6899      	ldr	r1, [r3, #8]
 8002a74:	683b      	ldr	r3, [r7, #0]
 8002a76:	685a      	ldr	r2, [r3, #4]
 8002a78:	683b      	ldr	r3, [r7, #0]
 8002a7a:	68db      	ldr	r3, [r3, #12]
 8002a7c:	f000 f951 	bl	8002d22 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	689a      	ldr	r2, [r3, #8]
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002a8e:	609a      	str	r2, [r3, #8]
      break;
 8002a90:	e03c      	b.n	8002b0c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	6818      	ldr	r0, [r3, #0]
 8002a96:	683b      	ldr	r3, [r7, #0]
 8002a98:	6859      	ldr	r1, [r3, #4]
 8002a9a:	683b      	ldr	r3, [r7, #0]
 8002a9c:	68db      	ldr	r3, [r3, #12]
 8002a9e:	461a      	mov	r2, r3
 8002aa0:	f000 f8c8 	bl	8002c34 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	2150      	movs	r1, #80	; 0x50
 8002aaa:	4618      	mov	r0, r3
 8002aac:	f000 f91f 	bl	8002cee <TIM_ITRx_SetConfig>
      break;
 8002ab0:	e02c      	b.n	8002b0c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	6818      	ldr	r0, [r3, #0]
 8002ab6:	683b      	ldr	r3, [r7, #0]
 8002ab8:	6859      	ldr	r1, [r3, #4]
 8002aba:	683b      	ldr	r3, [r7, #0]
 8002abc:	68db      	ldr	r3, [r3, #12]
 8002abe:	461a      	mov	r2, r3
 8002ac0:	f000 f8e6 	bl	8002c90 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	2160      	movs	r1, #96	; 0x60
 8002aca:	4618      	mov	r0, r3
 8002acc:	f000 f90f 	bl	8002cee <TIM_ITRx_SetConfig>
      break;
 8002ad0:	e01c      	b.n	8002b0c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	6818      	ldr	r0, [r3, #0]
 8002ad6:	683b      	ldr	r3, [r7, #0]
 8002ad8:	6859      	ldr	r1, [r3, #4]
 8002ada:	683b      	ldr	r3, [r7, #0]
 8002adc:	68db      	ldr	r3, [r3, #12]
 8002ade:	461a      	mov	r2, r3
 8002ae0:	f000 f8a8 	bl	8002c34 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	2140      	movs	r1, #64	; 0x40
 8002aea:	4618      	mov	r0, r3
 8002aec:	f000 f8ff 	bl	8002cee <TIM_ITRx_SetConfig>
      break;
 8002af0:	e00c      	b.n	8002b0c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681a      	ldr	r2, [r3, #0]
 8002af6:	683b      	ldr	r3, [r7, #0]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	4619      	mov	r1, r3
 8002afc:	4610      	mov	r0, r2
 8002afe:	f000 f8f6 	bl	8002cee <TIM_ITRx_SetConfig>
      break;
 8002b02:	e003      	b.n	8002b0c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002b04:	2301      	movs	r3, #1
 8002b06:	73fb      	strb	r3, [r7, #15]
      break;
 8002b08:	e000      	b.n	8002b0c <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002b0a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	2201      	movs	r2, #1
 8002b10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	2200      	movs	r2, #0
 8002b18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002b1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b1e:	4618      	mov	r0, r3
 8002b20:	3710      	adds	r7, #16
 8002b22:	46bd      	mov	sp, r7
 8002b24:	bd80      	pop	{r7, pc}

08002b26 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002b26:	b480      	push	{r7}
 8002b28:	b083      	sub	sp, #12
 8002b2a:	af00      	add	r7, sp, #0
 8002b2c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002b2e:	bf00      	nop
 8002b30:	370c      	adds	r7, #12
 8002b32:	46bd      	mov	sp, r7
 8002b34:	bc80      	pop	{r7}
 8002b36:	4770      	bx	lr

08002b38 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002b38:	b480      	push	{r7}
 8002b3a:	b083      	sub	sp, #12
 8002b3c:	af00      	add	r7, sp, #0
 8002b3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002b40:	bf00      	nop
 8002b42:	370c      	adds	r7, #12
 8002b44:	46bd      	mov	sp, r7
 8002b46:	bc80      	pop	{r7}
 8002b48:	4770      	bx	lr

08002b4a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002b4a:	b480      	push	{r7}
 8002b4c:	b083      	sub	sp, #12
 8002b4e:	af00      	add	r7, sp, #0
 8002b50:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002b52:	bf00      	nop
 8002b54:	370c      	adds	r7, #12
 8002b56:	46bd      	mov	sp, r7
 8002b58:	bc80      	pop	{r7}
 8002b5a:	4770      	bx	lr

08002b5c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002b5c:	b480      	push	{r7}
 8002b5e:	b083      	sub	sp, #12
 8002b60:	af00      	add	r7, sp, #0
 8002b62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002b64:	bf00      	nop
 8002b66:	370c      	adds	r7, #12
 8002b68:	46bd      	mov	sp, r7
 8002b6a:	bc80      	pop	{r7}
 8002b6c:	4770      	bx	lr
	...

08002b70 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002b70:	b480      	push	{r7}
 8002b72:	b085      	sub	sp, #20
 8002b74:	af00      	add	r7, sp, #0
 8002b76:	6078      	str	r0, [r7, #4]
 8002b78:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	4a29      	ldr	r2, [pc, #164]	; (8002c28 <TIM_Base_SetConfig+0xb8>)
 8002b84:	4293      	cmp	r3, r2
 8002b86:	d00b      	beq.n	8002ba0 <TIM_Base_SetConfig+0x30>
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b8e:	d007      	beq.n	8002ba0 <TIM_Base_SetConfig+0x30>
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	4a26      	ldr	r2, [pc, #152]	; (8002c2c <TIM_Base_SetConfig+0xbc>)
 8002b94:	4293      	cmp	r3, r2
 8002b96:	d003      	beq.n	8002ba0 <TIM_Base_SetConfig+0x30>
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	4a25      	ldr	r2, [pc, #148]	; (8002c30 <TIM_Base_SetConfig+0xc0>)
 8002b9c:	4293      	cmp	r3, r2
 8002b9e:	d108      	bne.n	8002bb2 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ba6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002ba8:	683b      	ldr	r3, [r7, #0]
 8002baa:	685b      	ldr	r3, [r3, #4]
 8002bac:	68fa      	ldr	r2, [r7, #12]
 8002bae:	4313      	orrs	r3, r2
 8002bb0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	4a1c      	ldr	r2, [pc, #112]	; (8002c28 <TIM_Base_SetConfig+0xb8>)
 8002bb6:	4293      	cmp	r3, r2
 8002bb8:	d00b      	beq.n	8002bd2 <TIM_Base_SetConfig+0x62>
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002bc0:	d007      	beq.n	8002bd2 <TIM_Base_SetConfig+0x62>
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	4a19      	ldr	r2, [pc, #100]	; (8002c2c <TIM_Base_SetConfig+0xbc>)
 8002bc6:	4293      	cmp	r3, r2
 8002bc8:	d003      	beq.n	8002bd2 <TIM_Base_SetConfig+0x62>
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	4a18      	ldr	r2, [pc, #96]	; (8002c30 <TIM_Base_SetConfig+0xc0>)
 8002bce:	4293      	cmp	r3, r2
 8002bd0:	d108      	bne.n	8002be4 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002bd8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002bda:	683b      	ldr	r3, [r7, #0]
 8002bdc:	68db      	ldr	r3, [r3, #12]
 8002bde:	68fa      	ldr	r2, [r7, #12]
 8002be0:	4313      	orrs	r3, r2
 8002be2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002bea:	683b      	ldr	r3, [r7, #0]
 8002bec:	695b      	ldr	r3, [r3, #20]
 8002bee:	4313      	orrs	r3, r2
 8002bf0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	68fa      	ldr	r2, [r7, #12]
 8002bf6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002bf8:	683b      	ldr	r3, [r7, #0]
 8002bfa:	689a      	ldr	r2, [r3, #8]
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002c00:	683b      	ldr	r3, [r7, #0]
 8002c02:	681a      	ldr	r2, [r3, #0]
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	4a07      	ldr	r2, [pc, #28]	; (8002c28 <TIM_Base_SetConfig+0xb8>)
 8002c0c:	4293      	cmp	r3, r2
 8002c0e:	d103      	bne.n	8002c18 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002c10:	683b      	ldr	r3, [r7, #0]
 8002c12:	691a      	ldr	r2, [r3, #16]
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	2201      	movs	r2, #1
 8002c1c:	615a      	str	r2, [r3, #20]
}
 8002c1e:	bf00      	nop
 8002c20:	3714      	adds	r7, #20
 8002c22:	46bd      	mov	sp, r7
 8002c24:	bc80      	pop	{r7}
 8002c26:	4770      	bx	lr
 8002c28:	40012c00 	.word	0x40012c00
 8002c2c:	40000400 	.word	0x40000400
 8002c30:	40000800 	.word	0x40000800

08002c34 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002c34:	b480      	push	{r7}
 8002c36:	b087      	sub	sp, #28
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	60f8      	str	r0, [r7, #12]
 8002c3c:	60b9      	str	r1, [r7, #8]
 8002c3e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	6a1b      	ldr	r3, [r3, #32]
 8002c44:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	6a1b      	ldr	r3, [r3, #32]
 8002c4a:	f023 0201 	bic.w	r2, r3, #1
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	699b      	ldr	r3, [r3, #24]
 8002c56:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002c58:	693b      	ldr	r3, [r7, #16]
 8002c5a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002c5e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	011b      	lsls	r3, r3, #4
 8002c64:	693a      	ldr	r2, [r7, #16]
 8002c66:	4313      	orrs	r3, r2
 8002c68:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002c6a:	697b      	ldr	r3, [r7, #20]
 8002c6c:	f023 030a 	bic.w	r3, r3, #10
 8002c70:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002c72:	697a      	ldr	r2, [r7, #20]
 8002c74:	68bb      	ldr	r3, [r7, #8]
 8002c76:	4313      	orrs	r3, r2
 8002c78:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	693a      	ldr	r2, [r7, #16]
 8002c7e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	697a      	ldr	r2, [r7, #20]
 8002c84:	621a      	str	r2, [r3, #32]
}
 8002c86:	bf00      	nop
 8002c88:	371c      	adds	r7, #28
 8002c8a:	46bd      	mov	sp, r7
 8002c8c:	bc80      	pop	{r7}
 8002c8e:	4770      	bx	lr

08002c90 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002c90:	b480      	push	{r7}
 8002c92:	b087      	sub	sp, #28
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	60f8      	str	r0, [r7, #12]
 8002c98:	60b9      	str	r1, [r7, #8]
 8002c9a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	6a1b      	ldr	r3, [r3, #32]
 8002ca0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	6a1b      	ldr	r3, [r3, #32]
 8002ca6:	f023 0210 	bic.w	r2, r3, #16
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	699b      	ldr	r3, [r3, #24]
 8002cb2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002cb4:	693b      	ldr	r3, [r7, #16]
 8002cb6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002cba:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	031b      	lsls	r3, r3, #12
 8002cc0:	693a      	ldr	r2, [r7, #16]
 8002cc2:	4313      	orrs	r3, r2
 8002cc4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002cc6:	697b      	ldr	r3, [r7, #20]
 8002cc8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002ccc:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002cce:	68bb      	ldr	r3, [r7, #8]
 8002cd0:	011b      	lsls	r3, r3, #4
 8002cd2:	697a      	ldr	r2, [r7, #20]
 8002cd4:	4313      	orrs	r3, r2
 8002cd6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	693a      	ldr	r2, [r7, #16]
 8002cdc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	697a      	ldr	r2, [r7, #20]
 8002ce2:	621a      	str	r2, [r3, #32]
}
 8002ce4:	bf00      	nop
 8002ce6:	371c      	adds	r7, #28
 8002ce8:	46bd      	mov	sp, r7
 8002cea:	bc80      	pop	{r7}
 8002cec:	4770      	bx	lr

08002cee <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002cee:	b480      	push	{r7}
 8002cf0:	b085      	sub	sp, #20
 8002cf2:	af00      	add	r7, sp, #0
 8002cf4:	6078      	str	r0, [r7, #4]
 8002cf6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	689b      	ldr	r3, [r3, #8]
 8002cfc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d04:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002d06:	683a      	ldr	r2, [r7, #0]
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	4313      	orrs	r3, r2
 8002d0c:	f043 0307 	orr.w	r3, r3, #7
 8002d10:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	68fa      	ldr	r2, [r7, #12]
 8002d16:	609a      	str	r2, [r3, #8]
}
 8002d18:	bf00      	nop
 8002d1a:	3714      	adds	r7, #20
 8002d1c:	46bd      	mov	sp, r7
 8002d1e:	bc80      	pop	{r7}
 8002d20:	4770      	bx	lr

08002d22 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002d22:	b480      	push	{r7}
 8002d24:	b087      	sub	sp, #28
 8002d26:	af00      	add	r7, sp, #0
 8002d28:	60f8      	str	r0, [r7, #12]
 8002d2a:	60b9      	str	r1, [r7, #8]
 8002d2c:	607a      	str	r2, [r7, #4]
 8002d2e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	689b      	ldr	r3, [r3, #8]
 8002d34:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002d36:	697b      	ldr	r3, [r7, #20]
 8002d38:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002d3c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002d3e:	683b      	ldr	r3, [r7, #0]
 8002d40:	021a      	lsls	r2, r3, #8
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	431a      	orrs	r2, r3
 8002d46:	68bb      	ldr	r3, [r7, #8]
 8002d48:	4313      	orrs	r3, r2
 8002d4a:	697a      	ldr	r2, [r7, #20]
 8002d4c:	4313      	orrs	r3, r2
 8002d4e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	697a      	ldr	r2, [r7, #20]
 8002d54:	609a      	str	r2, [r3, #8]
}
 8002d56:	bf00      	nop
 8002d58:	371c      	adds	r7, #28
 8002d5a:	46bd      	mov	sp, r7
 8002d5c:	bc80      	pop	{r7}
 8002d5e:	4770      	bx	lr

08002d60 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002d60:	b480      	push	{r7}
 8002d62:	b085      	sub	sp, #20
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	6078      	str	r0, [r7, #4]
 8002d68:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002d70:	2b01      	cmp	r3, #1
 8002d72:	d101      	bne.n	8002d78 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002d74:	2302      	movs	r3, #2
 8002d76:	e046      	b.n	8002e06 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	2201      	movs	r2, #1
 8002d7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	2202      	movs	r2, #2
 8002d84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	685b      	ldr	r3, [r3, #4]
 8002d8e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	689b      	ldr	r3, [r3, #8]
 8002d96:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d9e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002da0:	683b      	ldr	r3, [r7, #0]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	68fa      	ldr	r2, [r7, #12]
 8002da6:	4313      	orrs	r3, r2
 8002da8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	68fa      	ldr	r2, [r7, #12]
 8002db0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	4a16      	ldr	r2, [pc, #88]	; (8002e10 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8002db8:	4293      	cmp	r3, r2
 8002dba:	d00e      	beq.n	8002dda <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002dc4:	d009      	beq.n	8002dda <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	4a12      	ldr	r2, [pc, #72]	; (8002e14 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8002dcc:	4293      	cmp	r3, r2
 8002dce:	d004      	beq.n	8002dda <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	4a10      	ldr	r2, [pc, #64]	; (8002e18 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8002dd6:	4293      	cmp	r3, r2
 8002dd8:	d10c      	bne.n	8002df4 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002dda:	68bb      	ldr	r3, [r7, #8]
 8002ddc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002de0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002de2:	683b      	ldr	r3, [r7, #0]
 8002de4:	685b      	ldr	r3, [r3, #4]
 8002de6:	68ba      	ldr	r2, [r7, #8]
 8002de8:	4313      	orrs	r3, r2
 8002dea:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	68ba      	ldr	r2, [r7, #8]
 8002df2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	2201      	movs	r2, #1
 8002df8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	2200      	movs	r2, #0
 8002e00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002e04:	2300      	movs	r3, #0
}
 8002e06:	4618      	mov	r0, r3
 8002e08:	3714      	adds	r7, #20
 8002e0a:	46bd      	mov	sp, r7
 8002e0c:	bc80      	pop	{r7}
 8002e0e:	4770      	bx	lr
 8002e10:	40012c00 	.word	0x40012c00
 8002e14:	40000400 	.word	0x40000400
 8002e18:	40000800 	.word	0x40000800

08002e1c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002e1c:	b480      	push	{r7}
 8002e1e:	b083      	sub	sp, #12
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002e24:	bf00      	nop
 8002e26:	370c      	adds	r7, #12
 8002e28:	46bd      	mov	sp, r7
 8002e2a:	bc80      	pop	{r7}
 8002e2c:	4770      	bx	lr

08002e2e <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002e2e:	b480      	push	{r7}
 8002e30:	b083      	sub	sp, #12
 8002e32:	af00      	add	r7, sp, #0
 8002e34:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002e36:	bf00      	nop
 8002e38:	370c      	adds	r7, #12
 8002e3a:	46bd      	mov	sp, r7
 8002e3c:	bc80      	pop	{r7}
 8002e3e:	4770      	bx	lr

08002e40 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002e40:	b580      	push	{r7, lr}
 8002e42:	b082      	sub	sp, #8
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d101      	bne.n	8002e52 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002e4e:	2301      	movs	r3, #1
 8002e50:	e042      	b.n	8002ed8 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002e58:	b2db      	uxtb	r3, r3
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d106      	bne.n	8002e6c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	2200      	movs	r2, #0
 8002e62:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002e66:	6878      	ldr	r0, [r7, #4]
 8002e68:	f7fe f924 	bl	80010b4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	2224      	movs	r2, #36	; 0x24
 8002e70:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	68da      	ldr	r2, [r3, #12]
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002e82:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002e84:	6878      	ldr	r0, [r7, #4]
 8002e86:	f000 feb5 	bl	8003bf4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	691a      	ldr	r2, [r3, #16]
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002e98:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	695a      	ldr	r2, [r3, #20]
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002ea8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	68da      	ldr	r2, [r3, #12]
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002eb8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	2200      	movs	r2, #0
 8002ebe:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	2220      	movs	r2, #32
 8002ec4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	2220      	movs	r2, #32
 8002ecc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	2200      	movs	r2, #0
 8002ed4:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8002ed6:	2300      	movs	r3, #0
}
 8002ed8:	4618      	mov	r0, r3
 8002eda:	3708      	adds	r7, #8
 8002edc:	46bd      	mov	sp, r7
 8002ede:	bd80      	pop	{r7, pc}

08002ee0 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002ee0:	b580      	push	{r7, lr}
 8002ee2:	b08a      	sub	sp, #40	; 0x28
 8002ee4:	af02      	add	r7, sp, #8
 8002ee6:	60f8      	str	r0, [r7, #12]
 8002ee8:	60b9      	str	r1, [r7, #8]
 8002eea:	603b      	str	r3, [r7, #0]
 8002eec:	4613      	mov	r3, r2
 8002eee:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002ef0:	2300      	movs	r3, #0
 8002ef2:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002efa:	b2db      	uxtb	r3, r3
 8002efc:	2b20      	cmp	r3, #32
 8002efe:	d16d      	bne.n	8002fdc <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8002f00:	68bb      	ldr	r3, [r7, #8]
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d002      	beq.n	8002f0c <HAL_UART_Transmit+0x2c>
 8002f06:	88fb      	ldrh	r3, [r7, #6]
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d101      	bne.n	8002f10 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002f0c:	2301      	movs	r3, #1
 8002f0e:	e066      	b.n	8002fde <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	2200      	movs	r2, #0
 8002f14:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	2221      	movs	r2, #33	; 0x21
 8002f1a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002f1e:	f7fe f99d 	bl	800125c <HAL_GetTick>
 8002f22:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	88fa      	ldrh	r2, [r7, #6]
 8002f28:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	88fa      	ldrh	r2, [r7, #6]
 8002f2e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	689b      	ldr	r3, [r3, #8]
 8002f34:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f38:	d108      	bne.n	8002f4c <HAL_UART_Transmit+0x6c>
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	691b      	ldr	r3, [r3, #16]
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d104      	bne.n	8002f4c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002f42:	2300      	movs	r3, #0
 8002f44:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002f46:	68bb      	ldr	r3, [r7, #8]
 8002f48:	61bb      	str	r3, [r7, #24]
 8002f4a:	e003      	b.n	8002f54 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002f4c:	68bb      	ldr	r3, [r7, #8]
 8002f4e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002f50:	2300      	movs	r3, #0
 8002f52:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002f54:	e02a      	b.n	8002fac <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002f56:	683b      	ldr	r3, [r7, #0]
 8002f58:	9300      	str	r3, [sp, #0]
 8002f5a:	697b      	ldr	r3, [r7, #20]
 8002f5c:	2200      	movs	r2, #0
 8002f5e:	2180      	movs	r1, #128	; 0x80
 8002f60:	68f8      	ldr	r0, [r7, #12]
 8002f62:	f000 fc17 	bl	8003794 <UART_WaitOnFlagUntilTimeout>
 8002f66:	4603      	mov	r3, r0
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d001      	beq.n	8002f70 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8002f6c:	2303      	movs	r3, #3
 8002f6e:	e036      	b.n	8002fde <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8002f70:	69fb      	ldr	r3, [r7, #28]
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d10b      	bne.n	8002f8e <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002f76:	69bb      	ldr	r3, [r7, #24]
 8002f78:	881b      	ldrh	r3, [r3, #0]
 8002f7a:	461a      	mov	r2, r3
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002f84:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002f86:	69bb      	ldr	r3, [r7, #24]
 8002f88:	3302      	adds	r3, #2
 8002f8a:	61bb      	str	r3, [r7, #24]
 8002f8c:	e007      	b.n	8002f9e <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002f8e:	69fb      	ldr	r3, [r7, #28]
 8002f90:	781a      	ldrb	r2, [r3, #0]
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002f98:	69fb      	ldr	r3, [r7, #28]
 8002f9a:	3301      	adds	r3, #1
 8002f9c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002fa2:	b29b      	uxth	r3, r3
 8002fa4:	3b01      	subs	r3, #1
 8002fa6:	b29a      	uxth	r2, r3
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002fb0:	b29b      	uxth	r3, r3
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d1cf      	bne.n	8002f56 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002fb6:	683b      	ldr	r3, [r7, #0]
 8002fb8:	9300      	str	r3, [sp, #0]
 8002fba:	697b      	ldr	r3, [r7, #20]
 8002fbc:	2200      	movs	r2, #0
 8002fbe:	2140      	movs	r1, #64	; 0x40
 8002fc0:	68f8      	ldr	r0, [r7, #12]
 8002fc2:	f000 fbe7 	bl	8003794 <UART_WaitOnFlagUntilTimeout>
 8002fc6:	4603      	mov	r3, r0
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d001      	beq.n	8002fd0 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8002fcc:	2303      	movs	r3, #3
 8002fce:	e006      	b.n	8002fde <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	2220      	movs	r2, #32
 8002fd4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8002fd8:	2300      	movs	r3, #0
 8002fda:	e000      	b.n	8002fde <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8002fdc:	2302      	movs	r3, #2
  }
}
 8002fde:	4618      	mov	r0, r3
 8002fe0:	3720      	adds	r7, #32
 8002fe2:	46bd      	mov	sp, r7
 8002fe4:	bd80      	pop	{r7, pc}
	...

08002fe8 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8002fe8:	b580      	push	{r7, lr}
 8002fea:	b08c      	sub	sp, #48	; 0x30
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	60f8      	str	r0, [r7, #12]
 8002ff0:	60b9      	str	r1, [r7, #8]
 8002ff2:	4613      	mov	r3, r2
 8002ff4:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002ffc:	b2db      	uxtb	r3, r3
 8002ffe:	2b20      	cmp	r3, #32
 8003000:	d156      	bne.n	80030b0 <HAL_UART_Transmit_DMA+0xc8>
  {
    if ((pData == NULL) || (Size == 0U))
 8003002:	68bb      	ldr	r3, [r7, #8]
 8003004:	2b00      	cmp	r3, #0
 8003006:	d002      	beq.n	800300e <HAL_UART_Transmit_DMA+0x26>
 8003008:	88fb      	ldrh	r3, [r7, #6]
 800300a:	2b00      	cmp	r3, #0
 800300c:	d101      	bne.n	8003012 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 800300e:	2301      	movs	r3, #1
 8003010:	e04f      	b.n	80030b2 <HAL_UART_Transmit_DMA+0xca>
    }

    huart->pTxBuffPtr = pData;
 8003012:	68ba      	ldr	r2, [r7, #8]
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	88fa      	ldrh	r2, [r7, #6]
 800301c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	88fa      	ldrh	r2, [r7, #6]
 8003022:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	2200      	movs	r2, #0
 8003028:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	2221      	movs	r2, #33	; 0x21
 800302e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003036:	4a21      	ldr	r2, [pc, #132]	; (80030bc <HAL_UART_Transmit_DMA+0xd4>)
 8003038:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800303e:	4a20      	ldr	r2, [pc, #128]	; (80030c0 <HAL_UART_Transmit_DMA+0xd8>)
 8003040:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003046:	4a1f      	ldr	r2, [pc, #124]	; (80030c4 <HAL_UART_Transmit_DMA+0xdc>)
 8003048:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800304e:	2200      	movs	r2, #0
 8003050:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the UART transmit DMA channel */
    tmp = (const uint32_t *)&pData;
 8003052:	f107 0308 	add.w	r3, r7, #8
 8003056:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800305c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800305e:	6819      	ldr	r1, [r3, #0]
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	3304      	adds	r3, #4
 8003066:	461a      	mov	r2, r3
 8003068:	88fb      	ldrh	r3, [r7, #6]
 800306a:	f7fe fa5f 	bl	800152c <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003076:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	3314      	adds	r3, #20
 800307e:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003080:	69bb      	ldr	r3, [r7, #24]
 8003082:	e853 3f00 	ldrex	r3, [r3]
 8003086:	617b      	str	r3, [r7, #20]
   return(result);
 8003088:	697b      	ldr	r3, [r7, #20]
 800308a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800308e:	62bb      	str	r3, [r7, #40]	; 0x28
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	3314      	adds	r3, #20
 8003096:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003098:	627a      	str	r2, [r7, #36]	; 0x24
 800309a:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800309c:	6a39      	ldr	r1, [r7, #32]
 800309e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80030a0:	e841 2300 	strex	r3, r2, [r1]
 80030a4:	61fb      	str	r3, [r7, #28]
   return(result);
 80030a6:	69fb      	ldr	r3, [r7, #28]
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d1e5      	bne.n	8003078 <HAL_UART_Transmit_DMA+0x90>

    return HAL_OK;
 80030ac:	2300      	movs	r3, #0
 80030ae:	e000      	b.n	80030b2 <HAL_UART_Transmit_DMA+0xca>
  }
  else
  {
    return HAL_BUSY;
 80030b0:	2302      	movs	r3, #2
  }
}
 80030b2:	4618      	mov	r0, r3
 80030b4:	3730      	adds	r7, #48	; 0x30
 80030b6:	46bd      	mov	sp, r7
 80030b8:	bd80      	pop	{r7, pc}
 80030ba:	bf00      	nop
 80030bc:	0800364b 	.word	0x0800364b
 80030c0:	080036e5 	.word	0x080036e5
 80030c4:	08003701 	.word	0x08003701

080030c8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80030c8:	b580      	push	{r7, lr}
 80030ca:	b0ba      	sub	sp, #232	; 0xe8
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	68db      	ldr	r3, [r3, #12]
 80030e0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	695b      	ldr	r3, [r3, #20]
 80030ea:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80030ee:	2300      	movs	r3, #0
 80030f0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80030f4:	2300      	movs	r3, #0
 80030f6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80030fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80030fe:	f003 030f 	and.w	r3, r3, #15
 8003102:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8003106:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800310a:	2b00      	cmp	r3, #0
 800310c:	d10f      	bne.n	800312e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800310e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003112:	f003 0320 	and.w	r3, r3, #32
 8003116:	2b00      	cmp	r3, #0
 8003118:	d009      	beq.n	800312e <HAL_UART_IRQHandler+0x66>
 800311a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800311e:	f003 0320 	and.w	r3, r3, #32
 8003122:	2b00      	cmp	r3, #0
 8003124:	d003      	beq.n	800312e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003126:	6878      	ldr	r0, [r7, #4]
 8003128:	f000 fca6 	bl	8003a78 <UART_Receive_IT>
      return;
 800312c:	e25b      	b.n	80035e6 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800312e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003132:	2b00      	cmp	r3, #0
 8003134:	f000 80de 	beq.w	80032f4 <HAL_UART_IRQHandler+0x22c>
 8003138:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800313c:	f003 0301 	and.w	r3, r3, #1
 8003140:	2b00      	cmp	r3, #0
 8003142:	d106      	bne.n	8003152 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003144:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003148:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800314c:	2b00      	cmp	r3, #0
 800314e:	f000 80d1 	beq.w	80032f4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003152:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003156:	f003 0301 	and.w	r3, r3, #1
 800315a:	2b00      	cmp	r3, #0
 800315c:	d00b      	beq.n	8003176 <HAL_UART_IRQHandler+0xae>
 800315e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003162:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003166:	2b00      	cmp	r3, #0
 8003168:	d005      	beq.n	8003176 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800316e:	f043 0201 	orr.w	r2, r3, #1
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003176:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800317a:	f003 0304 	and.w	r3, r3, #4
 800317e:	2b00      	cmp	r3, #0
 8003180:	d00b      	beq.n	800319a <HAL_UART_IRQHandler+0xd2>
 8003182:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003186:	f003 0301 	and.w	r3, r3, #1
 800318a:	2b00      	cmp	r3, #0
 800318c:	d005      	beq.n	800319a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003192:	f043 0202 	orr.w	r2, r3, #2
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800319a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800319e:	f003 0302 	and.w	r3, r3, #2
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d00b      	beq.n	80031be <HAL_UART_IRQHandler+0xf6>
 80031a6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80031aa:	f003 0301 	and.w	r3, r3, #1
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d005      	beq.n	80031be <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031b6:	f043 0204 	orr.w	r2, r3, #4
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80031be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80031c2:	f003 0308 	and.w	r3, r3, #8
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d011      	beq.n	80031ee <HAL_UART_IRQHandler+0x126>
 80031ca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80031ce:	f003 0320 	and.w	r3, r3, #32
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d105      	bne.n	80031e2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80031d6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80031da:	f003 0301 	and.w	r3, r3, #1
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d005      	beq.n	80031ee <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031e6:	f043 0208 	orr.w	r2, r3, #8
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	f000 81f2 	beq.w	80035dc <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80031f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80031fc:	f003 0320 	and.w	r3, r3, #32
 8003200:	2b00      	cmp	r3, #0
 8003202:	d008      	beq.n	8003216 <HAL_UART_IRQHandler+0x14e>
 8003204:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003208:	f003 0320 	and.w	r3, r3, #32
 800320c:	2b00      	cmp	r3, #0
 800320e:	d002      	beq.n	8003216 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003210:	6878      	ldr	r0, [r7, #4]
 8003212:	f000 fc31 	bl	8003a78 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	695b      	ldr	r3, [r3, #20]
 800321c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003220:	2b00      	cmp	r3, #0
 8003222:	bf14      	ite	ne
 8003224:	2301      	movne	r3, #1
 8003226:	2300      	moveq	r3, #0
 8003228:	b2db      	uxtb	r3, r3
 800322a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003232:	f003 0308 	and.w	r3, r3, #8
 8003236:	2b00      	cmp	r3, #0
 8003238:	d103      	bne.n	8003242 <HAL_UART_IRQHandler+0x17a>
 800323a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800323e:	2b00      	cmp	r3, #0
 8003240:	d04f      	beq.n	80032e2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003242:	6878      	ldr	r0, [r7, #4]
 8003244:	f000 fb3b 	bl	80038be <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	695b      	ldr	r3, [r3, #20]
 800324e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003252:	2b00      	cmp	r3, #0
 8003254:	d041      	beq.n	80032da <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	3314      	adds	r3, #20
 800325c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003260:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003264:	e853 3f00 	ldrex	r3, [r3]
 8003268:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800326c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003270:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003274:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	3314      	adds	r3, #20
 800327e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003282:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003286:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800328a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800328e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003292:	e841 2300 	strex	r3, r2, [r1]
 8003296:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800329a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d1d9      	bne.n	8003256 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d013      	beq.n	80032d2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032ae:	4a7e      	ldr	r2, [pc, #504]	; (80034a8 <HAL_UART_IRQHandler+0x3e0>)
 80032b0:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032b6:	4618      	mov	r0, r3
 80032b8:	f7fe f9d4 	bl	8001664 <HAL_DMA_Abort_IT>
 80032bc:	4603      	mov	r3, r0
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d016      	beq.n	80032f0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032c8:	687a      	ldr	r2, [r7, #4]
 80032ca:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80032cc:	4610      	mov	r0, r2
 80032ce:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80032d0:	e00e      	b.n	80032f0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80032d2:	6878      	ldr	r0, [r7, #4]
 80032d4:	f000 f9a5 	bl	8003622 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80032d8:	e00a      	b.n	80032f0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80032da:	6878      	ldr	r0, [r7, #4]
 80032dc:	f000 f9a1 	bl	8003622 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80032e0:	e006      	b.n	80032f0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80032e2:	6878      	ldr	r0, [r7, #4]
 80032e4:	f000 f99d 	bl	8003622 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	2200      	movs	r2, #0
 80032ec:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 80032ee:	e175      	b.n	80035dc <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80032f0:	bf00      	nop
    return;
 80032f2:	e173      	b.n	80035dc <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032f8:	2b01      	cmp	r3, #1
 80032fa:	f040 814f 	bne.w	800359c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80032fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003302:	f003 0310 	and.w	r3, r3, #16
 8003306:	2b00      	cmp	r3, #0
 8003308:	f000 8148 	beq.w	800359c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800330c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003310:	f003 0310 	and.w	r3, r3, #16
 8003314:	2b00      	cmp	r3, #0
 8003316:	f000 8141 	beq.w	800359c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800331a:	2300      	movs	r3, #0
 800331c:	60bb      	str	r3, [r7, #8]
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	60bb      	str	r3, [r7, #8]
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	685b      	ldr	r3, [r3, #4]
 800332c:	60bb      	str	r3, [r7, #8]
 800332e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	695b      	ldr	r3, [r3, #20]
 8003336:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800333a:	2b00      	cmp	r3, #0
 800333c:	f000 80b6 	beq.w	80034ac <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	685b      	ldr	r3, [r3, #4]
 8003348:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800334c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003350:	2b00      	cmp	r3, #0
 8003352:	f000 8145 	beq.w	80035e0 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800335a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800335e:	429a      	cmp	r2, r3
 8003360:	f080 813e 	bcs.w	80035e0 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800336a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003370:	699b      	ldr	r3, [r3, #24]
 8003372:	2b20      	cmp	r3, #32
 8003374:	f000 8088 	beq.w	8003488 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	330c      	adds	r3, #12
 800337e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003382:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003386:	e853 3f00 	ldrex	r3, [r3]
 800338a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800338e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003392:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003396:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	330c      	adds	r3, #12
 80033a0:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80033a4:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80033a8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033ac:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80033b0:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80033b4:	e841 2300 	strex	r3, r2, [r1]
 80033b8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80033bc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d1d9      	bne.n	8003378 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	3314      	adds	r3, #20
 80033ca:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033cc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80033ce:	e853 3f00 	ldrex	r3, [r3]
 80033d2:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80033d4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80033d6:	f023 0301 	bic.w	r3, r3, #1
 80033da:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	3314      	adds	r3, #20
 80033e4:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80033e8:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80033ec:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033ee:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80033f0:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80033f4:	e841 2300 	strex	r3, r2, [r1]
 80033f8:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80033fa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d1e1      	bne.n	80033c4 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	3314      	adds	r3, #20
 8003406:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003408:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800340a:	e853 3f00 	ldrex	r3, [r3]
 800340e:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003410:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003412:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003416:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	3314      	adds	r3, #20
 8003420:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003424:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003426:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003428:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800342a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800342c:	e841 2300 	strex	r3, r2, [r1]
 8003430:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003432:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003434:	2b00      	cmp	r3, #0
 8003436:	d1e3      	bne.n	8003400 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	2220      	movs	r2, #32
 800343c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	2200      	movs	r2, #0
 8003444:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	330c      	adds	r3, #12
 800344c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800344e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003450:	e853 3f00 	ldrex	r3, [r3]
 8003454:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003456:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003458:	f023 0310 	bic.w	r3, r3, #16
 800345c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	330c      	adds	r3, #12
 8003466:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800346a:	65ba      	str	r2, [r7, #88]	; 0x58
 800346c:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800346e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003470:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003472:	e841 2300 	strex	r3, r2, [r1]
 8003476:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003478:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800347a:	2b00      	cmp	r3, #0
 800347c:	d1e3      	bne.n	8003446 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003482:	4618      	mov	r0, r3
 8003484:	f7fe f8b2 	bl	80015ec <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	2202      	movs	r2, #2
 800348c:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003496:	b29b      	uxth	r3, r3
 8003498:	1ad3      	subs	r3, r2, r3
 800349a:	b29b      	uxth	r3, r3
 800349c:	4619      	mov	r1, r3
 800349e:	6878      	ldr	r0, [r7, #4]
 80034a0:	f000 f8c8 	bl	8003634 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80034a4:	e09c      	b.n	80035e0 <HAL_UART_IRQHandler+0x518>
 80034a6:	bf00      	nop
 80034a8:	08003983 	.word	0x08003983
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80034b4:	b29b      	uxth	r3, r3
 80034b6:	1ad3      	subs	r3, r2, r3
 80034b8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80034c0:	b29b      	uxth	r3, r3
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	f000 808e 	beq.w	80035e4 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80034c8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	f000 8089 	beq.w	80035e4 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	330c      	adds	r3, #12
 80034d8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034dc:	e853 3f00 	ldrex	r3, [r3]
 80034e0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80034e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80034e4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80034e8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	330c      	adds	r3, #12
 80034f2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80034f6:	647a      	str	r2, [r7, #68]	; 0x44
 80034f8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034fa:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80034fc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80034fe:	e841 2300 	strex	r3, r2, [r1]
 8003502:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003504:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003506:	2b00      	cmp	r3, #0
 8003508:	d1e3      	bne.n	80034d2 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	3314      	adds	r3, #20
 8003510:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003512:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003514:	e853 3f00 	ldrex	r3, [r3]
 8003518:	623b      	str	r3, [r7, #32]
   return(result);
 800351a:	6a3b      	ldr	r3, [r7, #32]
 800351c:	f023 0301 	bic.w	r3, r3, #1
 8003520:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	3314      	adds	r3, #20
 800352a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800352e:	633a      	str	r2, [r7, #48]	; 0x30
 8003530:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003532:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003534:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003536:	e841 2300 	strex	r3, r2, [r1]
 800353a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800353c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800353e:	2b00      	cmp	r3, #0
 8003540:	d1e3      	bne.n	800350a <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	2220      	movs	r2, #32
 8003546:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	2200      	movs	r2, #0
 800354e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	330c      	adds	r3, #12
 8003556:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003558:	693b      	ldr	r3, [r7, #16]
 800355a:	e853 3f00 	ldrex	r3, [r3]
 800355e:	60fb      	str	r3, [r7, #12]
   return(result);
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	f023 0310 	bic.w	r3, r3, #16
 8003566:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	330c      	adds	r3, #12
 8003570:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8003574:	61fa      	str	r2, [r7, #28]
 8003576:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003578:	69b9      	ldr	r1, [r7, #24]
 800357a:	69fa      	ldr	r2, [r7, #28]
 800357c:	e841 2300 	strex	r3, r2, [r1]
 8003580:	617b      	str	r3, [r7, #20]
   return(result);
 8003582:	697b      	ldr	r3, [r7, #20]
 8003584:	2b00      	cmp	r3, #0
 8003586:	d1e3      	bne.n	8003550 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	2202      	movs	r2, #2
 800358c:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800358e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003592:	4619      	mov	r1, r3
 8003594:	6878      	ldr	r0, [r7, #4]
 8003596:	f000 f84d 	bl	8003634 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800359a:	e023      	b.n	80035e4 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800359c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80035a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d009      	beq.n	80035bc <HAL_UART_IRQHandler+0x4f4>
 80035a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80035ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d003      	beq.n	80035bc <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80035b4:	6878      	ldr	r0, [r7, #4]
 80035b6:	f000 f9f8 	bl	80039aa <UART_Transmit_IT>
    return;
 80035ba:	e014      	b.n	80035e6 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80035bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80035c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d00e      	beq.n	80035e6 <HAL_UART_IRQHandler+0x51e>
 80035c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80035cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d008      	beq.n	80035e6 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80035d4:	6878      	ldr	r0, [r7, #4]
 80035d6:	f000 fa37 	bl	8003a48 <UART_EndTransmit_IT>
    return;
 80035da:	e004      	b.n	80035e6 <HAL_UART_IRQHandler+0x51e>
    return;
 80035dc:	bf00      	nop
 80035de:	e002      	b.n	80035e6 <HAL_UART_IRQHandler+0x51e>
      return;
 80035e0:	bf00      	nop
 80035e2:	e000      	b.n	80035e6 <HAL_UART_IRQHandler+0x51e>
      return;
 80035e4:	bf00      	nop
  }
}
 80035e6:	37e8      	adds	r7, #232	; 0xe8
 80035e8:	46bd      	mov	sp, r7
 80035ea:	bd80      	pop	{r7, pc}

080035ec <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80035ec:	b480      	push	{r7}
 80035ee:	b083      	sub	sp, #12
 80035f0:	af00      	add	r7, sp, #0
 80035f2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80035f4:	bf00      	nop
 80035f6:	370c      	adds	r7, #12
 80035f8:	46bd      	mov	sp, r7
 80035fa:	bc80      	pop	{r7}
 80035fc:	4770      	bx	lr

080035fe <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80035fe:	b480      	push	{r7}
 8003600:	b083      	sub	sp, #12
 8003602:	af00      	add	r7, sp, #0
 8003604:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8003606:	bf00      	nop
 8003608:	370c      	adds	r7, #12
 800360a:	46bd      	mov	sp, r7
 800360c:	bc80      	pop	{r7}
 800360e:	4770      	bx	lr

08003610 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003610:	b480      	push	{r7}
 8003612:	b083      	sub	sp, #12
 8003614:	af00      	add	r7, sp, #0
 8003616:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8003618:	bf00      	nop
 800361a:	370c      	adds	r7, #12
 800361c:	46bd      	mov	sp, r7
 800361e:	bc80      	pop	{r7}
 8003620:	4770      	bx	lr

08003622 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003622:	b480      	push	{r7}
 8003624:	b083      	sub	sp, #12
 8003626:	af00      	add	r7, sp, #0
 8003628:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800362a:	bf00      	nop
 800362c:	370c      	adds	r7, #12
 800362e:	46bd      	mov	sp, r7
 8003630:	bc80      	pop	{r7}
 8003632:	4770      	bx	lr

08003634 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003634:	b480      	push	{r7}
 8003636:	b083      	sub	sp, #12
 8003638:	af00      	add	r7, sp, #0
 800363a:	6078      	str	r0, [r7, #4]
 800363c:	460b      	mov	r3, r1
 800363e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003640:	bf00      	nop
 8003642:	370c      	adds	r7, #12
 8003644:	46bd      	mov	sp, r7
 8003646:	bc80      	pop	{r7}
 8003648:	4770      	bx	lr

0800364a <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800364a:	b580      	push	{r7, lr}
 800364c:	b090      	sub	sp, #64	; 0x40
 800364e:	af00      	add	r7, sp, #0
 8003650:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003656:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	f003 0320 	and.w	r3, r3, #32
 8003662:	2b00      	cmp	r3, #0
 8003664:	d137      	bne.n	80036d6 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8003666:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003668:	2200      	movs	r2, #0
 800366a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800366c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	3314      	adds	r3, #20
 8003672:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003674:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003676:	e853 3f00 	ldrex	r3, [r3]
 800367a:	623b      	str	r3, [r7, #32]
   return(result);
 800367c:	6a3b      	ldr	r3, [r7, #32]
 800367e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003682:	63bb      	str	r3, [r7, #56]	; 0x38
 8003684:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	3314      	adds	r3, #20
 800368a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800368c:	633a      	str	r2, [r7, #48]	; 0x30
 800368e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003690:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003692:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003694:	e841 2300 	strex	r3, r2, [r1]
 8003698:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800369a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800369c:	2b00      	cmp	r3, #0
 800369e:	d1e5      	bne.n	800366c <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80036a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	330c      	adds	r3, #12
 80036a6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036a8:	693b      	ldr	r3, [r7, #16]
 80036aa:	e853 3f00 	ldrex	r3, [r3]
 80036ae:	60fb      	str	r3, [r7, #12]
   return(result);
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80036b6:	637b      	str	r3, [r7, #52]	; 0x34
 80036b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	330c      	adds	r3, #12
 80036be:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80036c0:	61fa      	str	r2, [r7, #28]
 80036c2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036c4:	69b9      	ldr	r1, [r7, #24]
 80036c6:	69fa      	ldr	r2, [r7, #28]
 80036c8:	e841 2300 	strex	r3, r2, [r1]
 80036cc:	617b      	str	r3, [r7, #20]
   return(result);
 80036ce:	697b      	ldr	r3, [r7, #20]
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d1e5      	bne.n	80036a0 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80036d4:	e002      	b.n	80036dc <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 80036d6:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80036d8:	f7ff ff88 	bl	80035ec <HAL_UART_TxCpltCallback>
}
 80036dc:	bf00      	nop
 80036de:	3740      	adds	r7, #64	; 0x40
 80036e0:	46bd      	mov	sp, r7
 80036e2:	bd80      	pop	{r7, pc}

080036e4 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80036e4:	b580      	push	{r7, lr}
 80036e6:	b084      	sub	sp, #16
 80036e8:	af00      	add	r7, sp, #0
 80036ea:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036f0:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 80036f2:	68f8      	ldr	r0, [r7, #12]
 80036f4:	f7ff ff83 	bl	80035fe <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80036f8:	bf00      	nop
 80036fa:	3710      	adds	r7, #16
 80036fc:	46bd      	mov	sp, r7
 80036fe:	bd80      	pop	{r7, pc}

08003700 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8003700:	b580      	push	{r7, lr}
 8003702:	b084      	sub	sp, #16
 8003704:	af00      	add	r7, sp, #0
 8003706:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8003708:	2300      	movs	r3, #0
 800370a:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003710:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8003712:	68bb      	ldr	r3, [r7, #8]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	695b      	ldr	r3, [r3, #20]
 8003718:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800371c:	2b00      	cmp	r3, #0
 800371e:	bf14      	ite	ne
 8003720:	2301      	movne	r3, #1
 8003722:	2300      	moveq	r3, #0
 8003724:	b2db      	uxtb	r3, r3
 8003726:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8003728:	68bb      	ldr	r3, [r7, #8]
 800372a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800372e:	b2db      	uxtb	r3, r3
 8003730:	2b21      	cmp	r3, #33	; 0x21
 8003732:	d108      	bne.n	8003746 <UART_DMAError+0x46>
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	2b00      	cmp	r3, #0
 8003738:	d005      	beq.n	8003746 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800373a:	68bb      	ldr	r3, [r7, #8]
 800373c:	2200      	movs	r2, #0
 800373e:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8003740:	68b8      	ldr	r0, [r7, #8]
 8003742:	f000 f895 	bl	8003870 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003746:	68bb      	ldr	r3, [r7, #8]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	695b      	ldr	r3, [r3, #20]
 800374c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003750:	2b00      	cmp	r3, #0
 8003752:	bf14      	ite	ne
 8003754:	2301      	movne	r3, #1
 8003756:	2300      	moveq	r3, #0
 8003758:	b2db      	uxtb	r3, r3
 800375a:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800375c:	68bb      	ldr	r3, [r7, #8]
 800375e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003762:	b2db      	uxtb	r3, r3
 8003764:	2b22      	cmp	r3, #34	; 0x22
 8003766:	d108      	bne.n	800377a <UART_DMAError+0x7a>
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	2b00      	cmp	r3, #0
 800376c:	d005      	beq.n	800377a <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800376e:	68bb      	ldr	r3, [r7, #8]
 8003770:	2200      	movs	r2, #0
 8003772:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8003774:	68b8      	ldr	r0, [r7, #8]
 8003776:	f000 f8a2 	bl	80038be <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800377a:	68bb      	ldr	r3, [r7, #8]
 800377c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800377e:	f043 0210 	orr.w	r2, r3, #16
 8003782:	68bb      	ldr	r3, [r7, #8]
 8003784:	645a      	str	r2, [r3, #68]	; 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003786:	68b8      	ldr	r0, [r7, #8]
 8003788:	f7ff ff4b 	bl	8003622 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800378c:	bf00      	nop
 800378e:	3710      	adds	r7, #16
 8003790:	46bd      	mov	sp, r7
 8003792:	bd80      	pop	{r7, pc}

08003794 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003794:	b580      	push	{r7, lr}
 8003796:	b090      	sub	sp, #64	; 0x40
 8003798:	af00      	add	r7, sp, #0
 800379a:	60f8      	str	r0, [r7, #12]
 800379c:	60b9      	str	r1, [r7, #8]
 800379e:	603b      	str	r3, [r7, #0]
 80037a0:	4613      	mov	r3, r2
 80037a2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80037a4:	e050      	b.n	8003848 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80037a6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80037a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037ac:	d04c      	beq.n	8003848 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80037ae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d007      	beq.n	80037c4 <UART_WaitOnFlagUntilTimeout+0x30>
 80037b4:	f7fd fd52 	bl	800125c <HAL_GetTick>
 80037b8:	4602      	mov	r2, r0
 80037ba:	683b      	ldr	r3, [r7, #0]
 80037bc:	1ad3      	subs	r3, r2, r3
 80037be:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80037c0:	429a      	cmp	r2, r3
 80037c2:	d241      	bcs.n	8003848 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	330c      	adds	r3, #12
 80037ca:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037ce:	e853 3f00 	ldrex	r3, [r3]
 80037d2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80037d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037d6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80037da:	63fb      	str	r3, [r7, #60]	; 0x3c
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	330c      	adds	r3, #12
 80037e2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80037e4:	637a      	str	r2, [r7, #52]	; 0x34
 80037e6:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037e8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80037ea:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80037ec:	e841 2300 	strex	r3, r2, [r1]
 80037f0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80037f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d1e5      	bne.n	80037c4 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	3314      	adds	r3, #20
 80037fe:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003800:	697b      	ldr	r3, [r7, #20]
 8003802:	e853 3f00 	ldrex	r3, [r3]
 8003806:	613b      	str	r3, [r7, #16]
   return(result);
 8003808:	693b      	ldr	r3, [r7, #16]
 800380a:	f023 0301 	bic.w	r3, r3, #1
 800380e:	63bb      	str	r3, [r7, #56]	; 0x38
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	3314      	adds	r3, #20
 8003816:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003818:	623a      	str	r2, [r7, #32]
 800381a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800381c:	69f9      	ldr	r1, [r7, #28]
 800381e:	6a3a      	ldr	r2, [r7, #32]
 8003820:	e841 2300 	strex	r3, r2, [r1]
 8003824:	61bb      	str	r3, [r7, #24]
   return(result);
 8003826:	69bb      	ldr	r3, [r7, #24]
 8003828:	2b00      	cmp	r3, #0
 800382a:	d1e5      	bne.n	80037f8 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	2220      	movs	r2, #32
 8003830:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	2220      	movs	r2, #32
 8003838:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	2200      	movs	r2, #0
 8003840:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8003844:	2303      	movs	r3, #3
 8003846:	e00f      	b.n	8003868 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	681a      	ldr	r2, [r3, #0]
 800384e:	68bb      	ldr	r3, [r7, #8]
 8003850:	4013      	ands	r3, r2
 8003852:	68ba      	ldr	r2, [r7, #8]
 8003854:	429a      	cmp	r2, r3
 8003856:	bf0c      	ite	eq
 8003858:	2301      	moveq	r3, #1
 800385a:	2300      	movne	r3, #0
 800385c:	b2db      	uxtb	r3, r3
 800385e:	461a      	mov	r2, r3
 8003860:	79fb      	ldrb	r3, [r7, #7]
 8003862:	429a      	cmp	r2, r3
 8003864:	d09f      	beq.n	80037a6 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003866:	2300      	movs	r3, #0
}
 8003868:	4618      	mov	r0, r3
 800386a:	3740      	adds	r7, #64	; 0x40
 800386c:	46bd      	mov	sp, r7
 800386e:	bd80      	pop	{r7, pc}

08003870 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8003870:	b480      	push	{r7}
 8003872:	b089      	sub	sp, #36	; 0x24
 8003874:	af00      	add	r7, sp, #0
 8003876:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	330c      	adds	r3, #12
 800387e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	e853 3f00 	ldrex	r3, [r3]
 8003886:	60bb      	str	r3, [r7, #8]
   return(result);
 8003888:	68bb      	ldr	r3, [r7, #8]
 800388a:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800388e:	61fb      	str	r3, [r7, #28]
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	330c      	adds	r3, #12
 8003896:	69fa      	ldr	r2, [r7, #28]
 8003898:	61ba      	str	r2, [r7, #24]
 800389a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800389c:	6979      	ldr	r1, [r7, #20]
 800389e:	69ba      	ldr	r2, [r7, #24]
 80038a0:	e841 2300 	strex	r3, r2, [r1]
 80038a4:	613b      	str	r3, [r7, #16]
   return(result);
 80038a6:	693b      	ldr	r3, [r7, #16]
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d1e5      	bne.n	8003878 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	2220      	movs	r2, #32
 80038b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
}
 80038b4:	bf00      	nop
 80038b6:	3724      	adds	r7, #36	; 0x24
 80038b8:	46bd      	mov	sp, r7
 80038ba:	bc80      	pop	{r7}
 80038bc:	4770      	bx	lr

080038be <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80038be:	b480      	push	{r7}
 80038c0:	b095      	sub	sp, #84	; 0x54
 80038c2:	af00      	add	r7, sp, #0
 80038c4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	330c      	adds	r3, #12
 80038cc:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80038d0:	e853 3f00 	ldrex	r3, [r3]
 80038d4:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80038d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038d8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80038dc:	64fb      	str	r3, [r7, #76]	; 0x4c
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	330c      	adds	r3, #12
 80038e4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80038e6:	643a      	str	r2, [r7, #64]	; 0x40
 80038e8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038ea:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80038ec:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80038ee:	e841 2300 	strex	r3, r2, [r1]
 80038f2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80038f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d1e5      	bne.n	80038c6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	3314      	adds	r3, #20
 8003900:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003902:	6a3b      	ldr	r3, [r7, #32]
 8003904:	e853 3f00 	ldrex	r3, [r3]
 8003908:	61fb      	str	r3, [r7, #28]
   return(result);
 800390a:	69fb      	ldr	r3, [r7, #28]
 800390c:	f023 0301 	bic.w	r3, r3, #1
 8003910:	64bb      	str	r3, [r7, #72]	; 0x48
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	3314      	adds	r3, #20
 8003918:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800391a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800391c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800391e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003920:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003922:	e841 2300 	strex	r3, r2, [r1]
 8003926:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003928:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800392a:	2b00      	cmp	r3, #0
 800392c:	d1e5      	bne.n	80038fa <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003932:	2b01      	cmp	r3, #1
 8003934:	d119      	bne.n	800396a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	330c      	adds	r3, #12
 800393c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	e853 3f00 	ldrex	r3, [r3]
 8003944:	60bb      	str	r3, [r7, #8]
   return(result);
 8003946:	68bb      	ldr	r3, [r7, #8]
 8003948:	f023 0310 	bic.w	r3, r3, #16
 800394c:	647b      	str	r3, [r7, #68]	; 0x44
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	330c      	adds	r3, #12
 8003954:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003956:	61ba      	str	r2, [r7, #24]
 8003958:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800395a:	6979      	ldr	r1, [r7, #20]
 800395c:	69ba      	ldr	r2, [r7, #24]
 800395e:	e841 2300 	strex	r3, r2, [r1]
 8003962:	613b      	str	r3, [r7, #16]
   return(result);
 8003964:	693b      	ldr	r3, [r7, #16]
 8003966:	2b00      	cmp	r3, #0
 8003968:	d1e5      	bne.n	8003936 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	2220      	movs	r2, #32
 800396e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	2200      	movs	r2, #0
 8003976:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003978:	bf00      	nop
 800397a:	3754      	adds	r7, #84	; 0x54
 800397c:	46bd      	mov	sp, r7
 800397e:	bc80      	pop	{r7}
 8003980:	4770      	bx	lr

08003982 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003982:	b580      	push	{r7, lr}
 8003984:	b084      	sub	sp, #16
 8003986:	af00      	add	r7, sp, #0
 8003988:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800398e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	2200      	movs	r2, #0
 8003994:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	2200      	movs	r2, #0
 800399a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800399c:	68f8      	ldr	r0, [r7, #12]
 800399e:	f7ff fe40 	bl	8003622 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80039a2:	bf00      	nop
 80039a4:	3710      	adds	r7, #16
 80039a6:	46bd      	mov	sp, r7
 80039a8:	bd80      	pop	{r7, pc}

080039aa <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80039aa:	b480      	push	{r7}
 80039ac:	b085      	sub	sp, #20
 80039ae:	af00      	add	r7, sp, #0
 80039b0:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80039b8:	b2db      	uxtb	r3, r3
 80039ba:	2b21      	cmp	r3, #33	; 0x21
 80039bc:	d13e      	bne.n	8003a3c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	689b      	ldr	r3, [r3, #8]
 80039c2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80039c6:	d114      	bne.n	80039f2 <UART_Transmit_IT+0x48>
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	691b      	ldr	r3, [r3, #16]
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d110      	bne.n	80039f2 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	6a1b      	ldr	r3, [r3, #32]
 80039d4:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	881b      	ldrh	r3, [r3, #0]
 80039da:	461a      	mov	r2, r3
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80039e4:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	6a1b      	ldr	r3, [r3, #32]
 80039ea:	1c9a      	adds	r2, r3, #2
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	621a      	str	r2, [r3, #32]
 80039f0:	e008      	b.n	8003a04 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	6a1b      	ldr	r3, [r3, #32]
 80039f6:	1c59      	adds	r1, r3, #1
 80039f8:	687a      	ldr	r2, [r7, #4]
 80039fa:	6211      	str	r1, [r2, #32]
 80039fc:	781a      	ldrb	r2, [r3, #0]
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003a08:	b29b      	uxth	r3, r3
 8003a0a:	3b01      	subs	r3, #1
 8003a0c:	b29b      	uxth	r3, r3
 8003a0e:	687a      	ldr	r2, [r7, #4]
 8003a10:	4619      	mov	r1, r3
 8003a12:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d10f      	bne.n	8003a38 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	68da      	ldr	r2, [r3, #12]
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003a26:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	68da      	ldr	r2, [r3, #12]
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003a36:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003a38:	2300      	movs	r3, #0
 8003a3a:	e000      	b.n	8003a3e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003a3c:	2302      	movs	r3, #2
  }
}
 8003a3e:	4618      	mov	r0, r3
 8003a40:	3714      	adds	r7, #20
 8003a42:	46bd      	mov	sp, r7
 8003a44:	bc80      	pop	{r7}
 8003a46:	4770      	bx	lr

08003a48 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003a48:	b580      	push	{r7, lr}
 8003a4a:	b082      	sub	sp, #8
 8003a4c:	af00      	add	r7, sp, #0
 8003a4e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	68da      	ldr	r2, [r3, #12]
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003a5e:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	2220      	movs	r2, #32
 8003a64:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003a68:	6878      	ldr	r0, [r7, #4]
 8003a6a:	f7ff fdbf 	bl	80035ec <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003a6e:	2300      	movs	r3, #0
}
 8003a70:	4618      	mov	r0, r3
 8003a72:	3708      	adds	r7, #8
 8003a74:	46bd      	mov	sp, r7
 8003a76:	bd80      	pop	{r7, pc}

08003a78 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003a78:	b580      	push	{r7, lr}
 8003a7a:	b08c      	sub	sp, #48	; 0x30
 8003a7c:	af00      	add	r7, sp, #0
 8003a7e:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003a86:	b2db      	uxtb	r3, r3
 8003a88:	2b22      	cmp	r3, #34	; 0x22
 8003a8a:	f040 80ae 	bne.w	8003bea <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	689b      	ldr	r3, [r3, #8]
 8003a92:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a96:	d117      	bne.n	8003ac8 <UART_Receive_IT+0x50>
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	691b      	ldr	r3, [r3, #16]
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d113      	bne.n	8003ac8 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003aa0:	2300      	movs	r3, #0
 8003aa2:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003aa8:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	685b      	ldr	r3, [r3, #4]
 8003ab0:	b29b      	uxth	r3, r3
 8003ab2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003ab6:	b29a      	uxth	r2, r3
 8003ab8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003aba:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ac0:	1c9a      	adds	r2, r3, #2
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	629a      	str	r2, [r3, #40]	; 0x28
 8003ac6:	e026      	b.n	8003b16 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003acc:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8003ace:	2300      	movs	r3, #0
 8003ad0:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	689b      	ldr	r3, [r3, #8]
 8003ad6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ada:	d007      	beq.n	8003aec <UART_Receive_IT+0x74>
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	689b      	ldr	r3, [r3, #8]
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d10a      	bne.n	8003afa <UART_Receive_IT+0x82>
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	691b      	ldr	r3, [r3, #16]
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d106      	bne.n	8003afa <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	685b      	ldr	r3, [r3, #4]
 8003af2:	b2da      	uxtb	r2, r3
 8003af4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003af6:	701a      	strb	r2, [r3, #0]
 8003af8:	e008      	b.n	8003b0c <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	685b      	ldr	r3, [r3, #4]
 8003b00:	b2db      	uxtb	r3, r3
 8003b02:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003b06:	b2da      	uxtb	r2, r3
 8003b08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b0a:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b10:	1c5a      	adds	r2, r3, #1
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003b1a:	b29b      	uxth	r3, r3
 8003b1c:	3b01      	subs	r3, #1
 8003b1e:	b29b      	uxth	r3, r3
 8003b20:	687a      	ldr	r2, [r7, #4]
 8003b22:	4619      	mov	r1, r3
 8003b24:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d15d      	bne.n	8003be6 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	68da      	ldr	r2, [r3, #12]
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	f022 0220 	bic.w	r2, r2, #32
 8003b38:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	68da      	ldr	r2, [r3, #12]
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003b48:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	695a      	ldr	r2, [r3, #20]
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	f022 0201 	bic.w	r2, r2, #1
 8003b58:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	2220      	movs	r2, #32
 8003b5e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	2200      	movs	r2, #0
 8003b66:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b6c:	2b01      	cmp	r3, #1
 8003b6e:	d135      	bne.n	8003bdc <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	2200      	movs	r2, #0
 8003b74:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	330c      	adds	r3, #12
 8003b7c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b7e:	697b      	ldr	r3, [r7, #20]
 8003b80:	e853 3f00 	ldrex	r3, [r3]
 8003b84:	613b      	str	r3, [r7, #16]
   return(result);
 8003b86:	693b      	ldr	r3, [r7, #16]
 8003b88:	f023 0310 	bic.w	r3, r3, #16
 8003b8c:	627b      	str	r3, [r7, #36]	; 0x24
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	330c      	adds	r3, #12
 8003b94:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b96:	623a      	str	r2, [r7, #32]
 8003b98:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b9a:	69f9      	ldr	r1, [r7, #28]
 8003b9c:	6a3a      	ldr	r2, [r7, #32]
 8003b9e:	e841 2300 	strex	r3, r2, [r1]
 8003ba2:	61bb      	str	r3, [r7, #24]
   return(result);
 8003ba4:	69bb      	ldr	r3, [r7, #24]
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d1e5      	bne.n	8003b76 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	f003 0310 	and.w	r3, r3, #16
 8003bb4:	2b10      	cmp	r3, #16
 8003bb6:	d10a      	bne.n	8003bce <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003bb8:	2300      	movs	r3, #0
 8003bba:	60fb      	str	r3, [r7, #12]
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	60fb      	str	r3, [r7, #12]
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	685b      	ldr	r3, [r3, #4]
 8003bca:	60fb      	str	r3, [r7, #12]
 8003bcc:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003bd2:	4619      	mov	r1, r3
 8003bd4:	6878      	ldr	r0, [r7, #4]
 8003bd6:	f7ff fd2d 	bl	8003634 <HAL_UARTEx_RxEventCallback>
 8003bda:	e002      	b.n	8003be2 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003bdc:	6878      	ldr	r0, [r7, #4]
 8003bde:	f7ff fd17 	bl	8003610 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003be2:	2300      	movs	r3, #0
 8003be4:	e002      	b.n	8003bec <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8003be6:	2300      	movs	r3, #0
 8003be8:	e000      	b.n	8003bec <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8003bea:	2302      	movs	r3, #2
  }
}
 8003bec:	4618      	mov	r0, r3
 8003bee:	3730      	adds	r7, #48	; 0x30
 8003bf0:	46bd      	mov	sp, r7
 8003bf2:	bd80      	pop	{r7, pc}

08003bf4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003bf4:	b580      	push	{r7, lr}
 8003bf6:	b084      	sub	sp, #16
 8003bf8:	af00      	add	r7, sp, #0
 8003bfa:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	691b      	ldr	r3, [r3, #16]
 8003c02:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	68da      	ldr	r2, [r3, #12]
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	430a      	orrs	r2, r1
 8003c10:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	689a      	ldr	r2, [r3, #8]
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	691b      	ldr	r3, [r3, #16]
 8003c1a:	431a      	orrs	r2, r3
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	695b      	ldr	r3, [r3, #20]
 8003c20:	4313      	orrs	r3, r2
 8003c22:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	68db      	ldr	r3, [r3, #12]
 8003c2a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8003c2e:	f023 030c 	bic.w	r3, r3, #12
 8003c32:	687a      	ldr	r2, [r7, #4]
 8003c34:	6812      	ldr	r2, [r2, #0]
 8003c36:	68b9      	ldr	r1, [r7, #8]
 8003c38:	430b      	orrs	r3, r1
 8003c3a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	695b      	ldr	r3, [r3, #20]
 8003c42:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	699a      	ldr	r2, [r3, #24]
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	430a      	orrs	r2, r1
 8003c50:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	4a2c      	ldr	r2, [pc, #176]	; (8003d08 <UART_SetConfig+0x114>)
 8003c58:	4293      	cmp	r3, r2
 8003c5a:	d103      	bne.n	8003c64 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003c5c:	f7fe fc90 	bl	8002580 <HAL_RCC_GetPCLK2Freq>
 8003c60:	60f8      	str	r0, [r7, #12]
 8003c62:	e002      	b.n	8003c6a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003c64:	f7fe fc78 	bl	8002558 <HAL_RCC_GetPCLK1Freq>
 8003c68:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003c6a:	68fa      	ldr	r2, [r7, #12]
 8003c6c:	4613      	mov	r3, r2
 8003c6e:	009b      	lsls	r3, r3, #2
 8003c70:	4413      	add	r3, r2
 8003c72:	009a      	lsls	r2, r3, #2
 8003c74:	441a      	add	r2, r3
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	685b      	ldr	r3, [r3, #4]
 8003c7a:	009b      	lsls	r3, r3, #2
 8003c7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c80:	4a22      	ldr	r2, [pc, #136]	; (8003d0c <UART_SetConfig+0x118>)
 8003c82:	fba2 2303 	umull	r2, r3, r2, r3
 8003c86:	095b      	lsrs	r3, r3, #5
 8003c88:	0119      	lsls	r1, r3, #4
 8003c8a:	68fa      	ldr	r2, [r7, #12]
 8003c8c:	4613      	mov	r3, r2
 8003c8e:	009b      	lsls	r3, r3, #2
 8003c90:	4413      	add	r3, r2
 8003c92:	009a      	lsls	r2, r3, #2
 8003c94:	441a      	add	r2, r3
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	685b      	ldr	r3, [r3, #4]
 8003c9a:	009b      	lsls	r3, r3, #2
 8003c9c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003ca0:	4b1a      	ldr	r3, [pc, #104]	; (8003d0c <UART_SetConfig+0x118>)
 8003ca2:	fba3 0302 	umull	r0, r3, r3, r2
 8003ca6:	095b      	lsrs	r3, r3, #5
 8003ca8:	2064      	movs	r0, #100	; 0x64
 8003caa:	fb00 f303 	mul.w	r3, r0, r3
 8003cae:	1ad3      	subs	r3, r2, r3
 8003cb0:	011b      	lsls	r3, r3, #4
 8003cb2:	3332      	adds	r3, #50	; 0x32
 8003cb4:	4a15      	ldr	r2, [pc, #84]	; (8003d0c <UART_SetConfig+0x118>)
 8003cb6:	fba2 2303 	umull	r2, r3, r2, r3
 8003cba:	095b      	lsrs	r3, r3, #5
 8003cbc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003cc0:	4419      	add	r1, r3
 8003cc2:	68fa      	ldr	r2, [r7, #12]
 8003cc4:	4613      	mov	r3, r2
 8003cc6:	009b      	lsls	r3, r3, #2
 8003cc8:	4413      	add	r3, r2
 8003cca:	009a      	lsls	r2, r3, #2
 8003ccc:	441a      	add	r2, r3
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	685b      	ldr	r3, [r3, #4]
 8003cd2:	009b      	lsls	r3, r3, #2
 8003cd4:	fbb2 f2f3 	udiv	r2, r2, r3
 8003cd8:	4b0c      	ldr	r3, [pc, #48]	; (8003d0c <UART_SetConfig+0x118>)
 8003cda:	fba3 0302 	umull	r0, r3, r3, r2
 8003cde:	095b      	lsrs	r3, r3, #5
 8003ce0:	2064      	movs	r0, #100	; 0x64
 8003ce2:	fb00 f303 	mul.w	r3, r0, r3
 8003ce6:	1ad3      	subs	r3, r2, r3
 8003ce8:	011b      	lsls	r3, r3, #4
 8003cea:	3332      	adds	r3, #50	; 0x32
 8003cec:	4a07      	ldr	r2, [pc, #28]	; (8003d0c <UART_SetConfig+0x118>)
 8003cee:	fba2 2303 	umull	r2, r3, r2, r3
 8003cf2:	095b      	lsrs	r3, r3, #5
 8003cf4:	f003 020f 	and.w	r2, r3, #15
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	440a      	add	r2, r1
 8003cfe:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003d00:	bf00      	nop
 8003d02:	3710      	adds	r7, #16
 8003d04:	46bd      	mov	sp, r7
 8003d06:	bd80      	pop	{r7, pc}
 8003d08:	40013800 	.word	0x40013800
 8003d0c:	51eb851f 	.word	0x51eb851f

08003d10 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8003d10:	b480      	push	{r7}
 8003d12:	b085      	sub	sp, #20
 8003d14:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003d16:	f3ef 8305 	mrs	r3, IPSR
 8003d1a:	60bb      	str	r3, [r7, #8]
  return(result);
 8003d1c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d10f      	bne.n	8003d42 <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003d22:	f3ef 8310 	mrs	r3, PRIMASK
 8003d26:	607b      	str	r3, [r7, #4]
  return(result);
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d109      	bne.n	8003d42 <osKernelInitialize+0x32>
 8003d2e:	4b10      	ldr	r3, [pc, #64]	; (8003d70 <osKernelInitialize+0x60>)
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	2b02      	cmp	r3, #2
 8003d34:	d109      	bne.n	8003d4a <osKernelInitialize+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003d36:	f3ef 8311 	mrs	r3, BASEPRI
 8003d3a:	603b      	str	r3, [r7, #0]
  return(result);
 8003d3c:	683b      	ldr	r3, [r7, #0]
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d003      	beq.n	8003d4a <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8003d42:	f06f 0305 	mvn.w	r3, #5
 8003d46:	60fb      	str	r3, [r7, #12]
 8003d48:	e00c      	b.n	8003d64 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8003d4a:	4b09      	ldr	r3, [pc, #36]	; (8003d70 <osKernelInitialize+0x60>)
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d105      	bne.n	8003d5e <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 8003d52:	4b07      	ldr	r3, [pc, #28]	; (8003d70 <osKernelInitialize+0x60>)
 8003d54:	2201      	movs	r2, #1
 8003d56:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8003d58:	2300      	movs	r3, #0
 8003d5a:	60fb      	str	r3, [r7, #12]
 8003d5c:	e002      	b.n	8003d64 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8003d5e:	f04f 33ff 	mov.w	r3, #4294967295
 8003d62:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8003d64:	68fb      	ldr	r3, [r7, #12]
}
 8003d66:	4618      	mov	r0, r3
 8003d68:	3714      	adds	r7, #20
 8003d6a:	46bd      	mov	sp, r7
 8003d6c:	bc80      	pop	{r7}
 8003d6e:	4770      	bx	lr
 8003d70:	200002a4 	.word	0x200002a4

08003d74 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8003d74:	b580      	push	{r7, lr}
 8003d76:	b084      	sub	sp, #16
 8003d78:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003d7a:	f3ef 8305 	mrs	r3, IPSR
 8003d7e:	60bb      	str	r3, [r7, #8]
  return(result);
 8003d80:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d10f      	bne.n	8003da6 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003d86:	f3ef 8310 	mrs	r3, PRIMASK
 8003d8a:	607b      	str	r3, [r7, #4]
  return(result);
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d109      	bne.n	8003da6 <osKernelStart+0x32>
 8003d92:	4b11      	ldr	r3, [pc, #68]	; (8003dd8 <osKernelStart+0x64>)
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	2b02      	cmp	r3, #2
 8003d98:	d109      	bne.n	8003dae <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003d9a:	f3ef 8311 	mrs	r3, BASEPRI
 8003d9e:	603b      	str	r3, [r7, #0]
  return(result);
 8003da0:	683b      	ldr	r3, [r7, #0]
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d003      	beq.n	8003dae <osKernelStart+0x3a>
    stat = osErrorISR;
 8003da6:	f06f 0305 	mvn.w	r3, #5
 8003daa:	60fb      	str	r3, [r7, #12]
 8003dac:	e00e      	b.n	8003dcc <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 8003dae:	4b0a      	ldr	r3, [pc, #40]	; (8003dd8 <osKernelStart+0x64>)
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	2b01      	cmp	r3, #1
 8003db4:	d107      	bne.n	8003dc6 <osKernelStart+0x52>
      KernelState = osKernelRunning;
 8003db6:	4b08      	ldr	r3, [pc, #32]	; (8003dd8 <osKernelStart+0x64>)
 8003db8:	2202      	movs	r2, #2
 8003dba:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 8003dbc:	f001 f90e 	bl	8004fdc <vTaskStartScheduler>
      stat = osOK;
 8003dc0:	2300      	movs	r3, #0
 8003dc2:	60fb      	str	r3, [r7, #12]
 8003dc4:	e002      	b.n	8003dcc <osKernelStart+0x58>
    } else {
      stat = osError;
 8003dc6:	f04f 33ff 	mov.w	r3, #4294967295
 8003dca:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8003dcc:	68fb      	ldr	r3, [r7, #12]
}
 8003dce:	4618      	mov	r0, r3
 8003dd0:	3710      	adds	r7, #16
 8003dd2:	46bd      	mov	sp, r7
 8003dd4:	bd80      	pop	{r7, pc}
 8003dd6:	bf00      	nop
 8003dd8:	200002a4 	.word	0x200002a4

08003ddc <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8003ddc:	b580      	push	{r7, lr}
 8003dde:	b092      	sub	sp, #72	; 0x48
 8003de0:	af04      	add	r7, sp, #16
 8003de2:	60f8      	str	r0, [r7, #12]
 8003de4:	60b9      	str	r1, [r7, #8]
 8003de6:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8003de8:	2300      	movs	r3, #0
 8003dea:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003dec:	f3ef 8305 	mrs	r3, IPSR
 8003df0:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8003df2:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	f040 8094 	bne.w	8003f22 <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003dfa:	f3ef 8310 	mrs	r3, PRIMASK
 8003dfe:	623b      	str	r3, [r7, #32]
  return(result);
 8003e00:	6a3b      	ldr	r3, [r7, #32]
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	f040 808d 	bne.w	8003f22 <osThreadNew+0x146>
 8003e08:	4b48      	ldr	r3, [pc, #288]	; (8003f2c <osThreadNew+0x150>)
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	2b02      	cmp	r3, #2
 8003e0e:	d106      	bne.n	8003e1e <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003e10:	f3ef 8311 	mrs	r3, BASEPRI
 8003e14:	61fb      	str	r3, [r7, #28]
  return(result);
 8003e16:	69fb      	ldr	r3, [r7, #28]
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	f040 8082 	bne.w	8003f22 <osThreadNew+0x146>
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d07e      	beq.n	8003f22 <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 8003e24:	2380      	movs	r3, #128	; 0x80
 8003e26:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 8003e28:	2318      	movs	r3, #24
 8003e2a:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 8003e2c:	2300      	movs	r3, #0
 8003e2e:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 8003e30:	f107 031b 	add.w	r3, r7, #27
 8003e34:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 8003e36:	f04f 33ff 	mov.w	r3, #4294967295
 8003e3a:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d045      	beq.n	8003ece <osThreadNew+0xf2>
      if (attr->name != NULL) {
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d002      	beq.n	8003e50 <osThreadNew+0x74>
        name = attr->name;
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	699b      	ldr	r3, [r3, #24]
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d002      	beq.n	8003e5e <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	699b      	ldr	r3, [r3, #24]
 8003e5c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8003e5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d008      	beq.n	8003e76 <osThreadNew+0x9a>
 8003e64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e66:	2b38      	cmp	r3, #56	; 0x38
 8003e68:	d805      	bhi.n	8003e76 <osThreadNew+0x9a>
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	685b      	ldr	r3, [r3, #4]
 8003e6e:	f003 0301 	and.w	r3, r3, #1
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d001      	beq.n	8003e7a <osThreadNew+0x9e>
        return (NULL);
 8003e76:	2300      	movs	r3, #0
 8003e78:	e054      	b.n	8003f24 <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	695b      	ldr	r3, [r3, #20]
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d003      	beq.n	8003e8a <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	695b      	ldr	r3, [r3, #20]
 8003e86:	089b      	lsrs	r3, r3, #2
 8003e88:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	689b      	ldr	r3, [r3, #8]
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d00e      	beq.n	8003eb0 <osThreadNew+0xd4>
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	68db      	ldr	r3, [r3, #12]
 8003e96:	2bbb      	cmp	r3, #187	; 0xbb
 8003e98:	d90a      	bls.n	8003eb0 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d006      	beq.n	8003eb0 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	695b      	ldr	r3, [r3, #20]
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d002      	beq.n	8003eb0 <osThreadNew+0xd4>
        mem = 1;
 8003eaa:	2301      	movs	r3, #1
 8003eac:	62bb      	str	r3, [r7, #40]	; 0x28
 8003eae:	e010      	b.n	8003ed2 <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	689b      	ldr	r3, [r3, #8]
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d10c      	bne.n	8003ed2 <osThreadNew+0xf6>
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	68db      	ldr	r3, [r3, #12]
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d108      	bne.n	8003ed2 <osThreadNew+0xf6>
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	691b      	ldr	r3, [r3, #16]
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d104      	bne.n	8003ed2 <osThreadNew+0xf6>
          mem = 0;
 8003ec8:	2300      	movs	r3, #0
 8003eca:	62bb      	str	r3, [r7, #40]	; 0x28
 8003ecc:	e001      	b.n	8003ed2 <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 8003ece:	2300      	movs	r3, #0
 8003ed0:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 8003ed2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ed4:	2b01      	cmp	r3, #1
 8003ed6:	d110      	bne.n	8003efa <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8003edc:	687a      	ldr	r2, [r7, #4]
 8003ede:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003ee0:	9202      	str	r2, [sp, #8]
 8003ee2:	9301      	str	r3, [sp, #4]
 8003ee4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ee6:	9300      	str	r3, [sp, #0]
 8003ee8:	68bb      	ldr	r3, [r7, #8]
 8003eea:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003eec:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8003eee:	68f8      	ldr	r0, [r7, #12]
 8003ef0:	f000 fe12 	bl	8004b18 <xTaskCreateStatic>
 8003ef4:	4603      	mov	r3, r0
 8003ef6:	617b      	str	r3, [r7, #20]
 8003ef8:	e013      	b.n	8003f22 <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 8003efa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d110      	bne.n	8003f22 <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8003f00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f02:	b29a      	uxth	r2, r3
 8003f04:	f107 0314 	add.w	r3, r7, #20
 8003f08:	9301      	str	r3, [sp, #4]
 8003f0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f0c:	9300      	str	r3, [sp, #0]
 8003f0e:	68bb      	ldr	r3, [r7, #8]
 8003f10:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8003f12:	68f8      	ldr	r0, [r7, #12]
 8003f14:	f000 fe5c 	bl	8004bd0 <xTaskCreate>
 8003f18:	4603      	mov	r3, r0
 8003f1a:	2b01      	cmp	r3, #1
 8003f1c:	d001      	beq.n	8003f22 <osThreadNew+0x146>
          hTask = NULL;
 8003f1e:	2300      	movs	r3, #0
 8003f20:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8003f22:	697b      	ldr	r3, [r7, #20]
}
 8003f24:	4618      	mov	r0, r3
 8003f26:	3738      	adds	r7, #56	; 0x38
 8003f28:	46bd      	mov	sp, r7
 8003f2a:	bd80      	pop	{r7, pc}
 8003f2c:	200002a4 	.word	0x200002a4

08003f30 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8003f30:	b580      	push	{r7, lr}
 8003f32:	b086      	sub	sp, #24
 8003f34:	af00      	add	r7, sp, #0
 8003f36:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003f38:	f3ef 8305 	mrs	r3, IPSR
 8003f3c:	613b      	str	r3, [r7, #16]
  return(result);
 8003f3e:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d10f      	bne.n	8003f64 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003f44:	f3ef 8310 	mrs	r3, PRIMASK
 8003f48:	60fb      	str	r3, [r7, #12]
  return(result);
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d109      	bne.n	8003f64 <osDelay+0x34>
 8003f50:	4b0d      	ldr	r3, [pc, #52]	; (8003f88 <osDelay+0x58>)
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	2b02      	cmp	r3, #2
 8003f56:	d109      	bne.n	8003f6c <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003f58:	f3ef 8311 	mrs	r3, BASEPRI
 8003f5c:	60bb      	str	r3, [r7, #8]
  return(result);
 8003f5e:	68bb      	ldr	r3, [r7, #8]
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d003      	beq.n	8003f6c <osDelay+0x3c>
    stat = osErrorISR;
 8003f64:	f06f 0305 	mvn.w	r3, #5
 8003f68:	617b      	str	r3, [r7, #20]
 8003f6a:	e007      	b.n	8003f7c <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8003f6c:	2300      	movs	r3, #0
 8003f6e:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d002      	beq.n	8003f7c <osDelay+0x4c>
      vTaskDelay(ticks);
 8003f76:	6878      	ldr	r0, [r7, #4]
 8003f78:	f000 fffc 	bl	8004f74 <vTaskDelay>
    }
  }

  return (stat);
 8003f7c:	697b      	ldr	r3, [r7, #20]
}
 8003f7e:	4618      	mov	r0, r3
 8003f80:	3718      	adds	r7, #24
 8003f82:	46bd      	mov	sp, r7
 8003f84:	bd80      	pop	{r7, pc}
 8003f86:	bf00      	nop
 8003f88:	200002a4 	.word	0x200002a4

08003f8c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8003f8c:	b480      	push	{r7}
 8003f8e:	b085      	sub	sp, #20
 8003f90:	af00      	add	r7, sp, #0
 8003f92:	60f8      	str	r0, [r7, #12]
 8003f94:	60b9      	str	r1, [r7, #8]
 8003f96:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	4a06      	ldr	r2, [pc, #24]	; (8003fb4 <vApplicationGetIdleTaskMemory+0x28>)
 8003f9c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8003f9e:	68bb      	ldr	r3, [r7, #8]
 8003fa0:	4a05      	ldr	r2, [pc, #20]	; (8003fb8 <vApplicationGetIdleTaskMemory+0x2c>)
 8003fa2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	2280      	movs	r2, #128	; 0x80
 8003fa8:	601a      	str	r2, [r3, #0]
}
 8003faa:	bf00      	nop
 8003fac:	3714      	adds	r7, #20
 8003fae:	46bd      	mov	sp, r7
 8003fb0:	bc80      	pop	{r7}
 8003fb2:	4770      	bx	lr
 8003fb4:	200002a8 	.word	0x200002a8
 8003fb8:	20000364 	.word	0x20000364

08003fbc <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8003fbc:	b480      	push	{r7}
 8003fbe:	b085      	sub	sp, #20
 8003fc0:	af00      	add	r7, sp, #0
 8003fc2:	60f8      	str	r0, [r7, #12]
 8003fc4:	60b9      	str	r1, [r7, #8]
 8003fc6:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	4a07      	ldr	r2, [pc, #28]	; (8003fe8 <vApplicationGetTimerTaskMemory+0x2c>)
 8003fcc:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8003fce:	68bb      	ldr	r3, [r7, #8]
 8003fd0:	4a06      	ldr	r2, [pc, #24]	; (8003fec <vApplicationGetTimerTaskMemory+0x30>)
 8003fd2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003fda:	601a      	str	r2, [r3, #0]
}
 8003fdc:	bf00      	nop
 8003fde:	3714      	adds	r7, #20
 8003fe0:	46bd      	mov	sp, r7
 8003fe2:	bc80      	pop	{r7}
 8003fe4:	4770      	bx	lr
 8003fe6:	bf00      	nop
 8003fe8:	20000564 	.word	0x20000564
 8003fec:	20000620 	.word	0x20000620

08003ff0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003ff0:	b480      	push	{r7}
 8003ff2:	b083      	sub	sp, #12
 8003ff4:	af00      	add	r7, sp, #0
 8003ff6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	f103 0208 	add.w	r2, r3, #8
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	f04f 32ff 	mov.w	r2, #4294967295
 8004008:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	f103 0208 	add.w	r2, r3, #8
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	f103 0208 	add.w	r2, r3, #8
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	2200      	movs	r2, #0
 8004022:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004024:	bf00      	nop
 8004026:	370c      	adds	r7, #12
 8004028:	46bd      	mov	sp, r7
 800402a:	bc80      	pop	{r7}
 800402c:	4770      	bx	lr

0800402e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800402e:	b480      	push	{r7}
 8004030:	b083      	sub	sp, #12
 8004032:	af00      	add	r7, sp, #0
 8004034:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	2200      	movs	r2, #0
 800403a:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800403c:	bf00      	nop
 800403e:	370c      	adds	r7, #12
 8004040:	46bd      	mov	sp, r7
 8004042:	bc80      	pop	{r7}
 8004044:	4770      	bx	lr

08004046 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004046:	b480      	push	{r7}
 8004048:	b085      	sub	sp, #20
 800404a:	af00      	add	r7, sp, #0
 800404c:	6078      	str	r0, [r7, #4]
 800404e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	685b      	ldr	r3, [r3, #4]
 8004054:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004056:	683b      	ldr	r3, [r7, #0]
 8004058:	68fa      	ldr	r2, [r7, #12]
 800405a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	689a      	ldr	r2, [r3, #8]
 8004060:	683b      	ldr	r3, [r7, #0]
 8004062:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	689b      	ldr	r3, [r3, #8]
 8004068:	683a      	ldr	r2, [r7, #0]
 800406a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	683a      	ldr	r2, [r7, #0]
 8004070:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8004072:	683b      	ldr	r3, [r7, #0]
 8004074:	687a      	ldr	r2, [r7, #4]
 8004076:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	1c5a      	adds	r2, r3, #1
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	601a      	str	r2, [r3, #0]
}
 8004082:	bf00      	nop
 8004084:	3714      	adds	r7, #20
 8004086:	46bd      	mov	sp, r7
 8004088:	bc80      	pop	{r7}
 800408a:	4770      	bx	lr

0800408c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800408c:	b480      	push	{r7}
 800408e:	b085      	sub	sp, #20
 8004090:	af00      	add	r7, sp, #0
 8004092:	6078      	str	r0, [r7, #4]
 8004094:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004096:	683b      	ldr	r3, [r7, #0]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800409c:	68bb      	ldr	r3, [r7, #8]
 800409e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040a2:	d103      	bne.n	80040ac <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	691b      	ldr	r3, [r3, #16]
 80040a8:	60fb      	str	r3, [r7, #12]
 80040aa:	e00c      	b.n	80040c6 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	3308      	adds	r3, #8
 80040b0:	60fb      	str	r3, [r7, #12]
 80040b2:	e002      	b.n	80040ba <vListInsert+0x2e>
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	685b      	ldr	r3, [r3, #4]
 80040b8:	60fb      	str	r3, [r7, #12]
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	685b      	ldr	r3, [r3, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	68ba      	ldr	r2, [r7, #8]
 80040c2:	429a      	cmp	r2, r3
 80040c4:	d2f6      	bcs.n	80040b4 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	685a      	ldr	r2, [r3, #4]
 80040ca:	683b      	ldr	r3, [r7, #0]
 80040cc:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80040ce:	683b      	ldr	r3, [r7, #0]
 80040d0:	685b      	ldr	r3, [r3, #4]
 80040d2:	683a      	ldr	r2, [r7, #0]
 80040d4:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80040d6:	683b      	ldr	r3, [r7, #0]
 80040d8:	68fa      	ldr	r2, [r7, #12]
 80040da:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	683a      	ldr	r2, [r7, #0]
 80040e0:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80040e2:	683b      	ldr	r3, [r7, #0]
 80040e4:	687a      	ldr	r2, [r7, #4]
 80040e6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	1c5a      	adds	r2, r3, #1
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	601a      	str	r2, [r3, #0]
}
 80040f2:	bf00      	nop
 80040f4:	3714      	adds	r7, #20
 80040f6:	46bd      	mov	sp, r7
 80040f8:	bc80      	pop	{r7}
 80040fa:	4770      	bx	lr

080040fc <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80040fc:	b480      	push	{r7}
 80040fe:	b085      	sub	sp, #20
 8004100:	af00      	add	r7, sp, #0
 8004102:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	691b      	ldr	r3, [r3, #16]
 8004108:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	685b      	ldr	r3, [r3, #4]
 800410e:	687a      	ldr	r2, [r7, #4]
 8004110:	6892      	ldr	r2, [r2, #8]
 8004112:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	689b      	ldr	r3, [r3, #8]
 8004118:	687a      	ldr	r2, [r7, #4]
 800411a:	6852      	ldr	r2, [r2, #4]
 800411c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	685b      	ldr	r3, [r3, #4]
 8004122:	687a      	ldr	r2, [r7, #4]
 8004124:	429a      	cmp	r2, r3
 8004126:	d103      	bne.n	8004130 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	689a      	ldr	r2, [r3, #8]
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	2200      	movs	r2, #0
 8004134:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	1e5a      	subs	r2, r3, #1
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	681b      	ldr	r3, [r3, #0]
}
 8004144:	4618      	mov	r0, r3
 8004146:	3714      	adds	r7, #20
 8004148:	46bd      	mov	sp, r7
 800414a:	bc80      	pop	{r7}
 800414c:	4770      	bx	lr
	...

08004150 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8004150:	b580      	push	{r7, lr}
 8004152:	b084      	sub	sp, #16
 8004154:	af00      	add	r7, sp, #0
 8004156:	6078      	str	r0, [r7, #4]
 8004158:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	2b00      	cmp	r3, #0
 8004162:	d10a      	bne.n	800417a <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004164:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004168:	f383 8811 	msr	BASEPRI, r3
 800416c:	f3bf 8f6f 	isb	sy
 8004170:	f3bf 8f4f 	dsb	sy
 8004174:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8004176:	bf00      	nop
 8004178:	e7fe      	b.n	8004178 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800417a:	f002 f877 	bl	800626c <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	681a      	ldr	r2, [r3, #0]
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004186:	68f9      	ldr	r1, [r7, #12]
 8004188:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800418a:	fb01 f303 	mul.w	r3, r1, r3
 800418e:	441a      	add	r2, r3
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	2200      	movs	r2, #0
 8004198:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	681a      	ldr	r2, [r3, #0]
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	681a      	ldr	r2, [r3, #0]
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041aa:	3b01      	subs	r3, #1
 80041ac:	68f9      	ldr	r1, [r7, #12]
 80041ae:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80041b0:	fb01 f303 	mul.w	r3, r1, r3
 80041b4:	441a      	add	r2, r3
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	22ff      	movs	r2, #255	; 0xff
 80041be:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	22ff      	movs	r2, #255	; 0xff
 80041c6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80041ca:	683b      	ldr	r3, [r7, #0]
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d114      	bne.n	80041fa <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	691b      	ldr	r3, [r3, #16]
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d01a      	beq.n	800420e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	3310      	adds	r3, #16
 80041dc:	4618      	mov	r0, r3
 80041de:	f001 f999 	bl	8005514 <xTaskRemoveFromEventList>
 80041e2:	4603      	mov	r3, r0
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d012      	beq.n	800420e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80041e8:	4b0c      	ldr	r3, [pc, #48]	; (800421c <xQueueGenericReset+0xcc>)
 80041ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80041ee:	601a      	str	r2, [r3, #0]
 80041f0:	f3bf 8f4f 	dsb	sy
 80041f4:	f3bf 8f6f 	isb	sy
 80041f8:	e009      	b.n	800420e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	3310      	adds	r3, #16
 80041fe:	4618      	mov	r0, r3
 8004200:	f7ff fef6 	bl	8003ff0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	3324      	adds	r3, #36	; 0x24
 8004208:	4618      	mov	r0, r3
 800420a:	f7ff fef1 	bl	8003ff0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800420e:	f002 f85d 	bl	80062cc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8004212:	2301      	movs	r3, #1
}
 8004214:	4618      	mov	r0, r3
 8004216:	3710      	adds	r7, #16
 8004218:	46bd      	mov	sp, r7
 800421a:	bd80      	pop	{r7, pc}
 800421c:	e000ed04 	.word	0xe000ed04

08004220 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8004220:	b580      	push	{r7, lr}
 8004222:	b08e      	sub	sp, #56	; 0x38
 8004224:	af02      	add	r7, sp, #8
 8004226:	60f8      	str	r0, [r7, #12]
 8004228:	60b9      	str	r1, [r7, #8]
 800422a:	607a      	str	r2, [r7, #4]
 800422c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	2b00      	cmp	r3, #0
 8004232:	d10a      	bne.n	800424a <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8004234:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004238:	f383 8811 	msr	BASEPRI, r3
 800423c:	f3bf 8f6f 	isb	sy
 8004240:	f3bf 8f4f 	dsb	sy
 8004244:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004246:	bf00      	nop
 8004248:	e7fe      	b.n	8004248 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800424a:	683b      	ldr	r3, [r7, #0]
 800424c:	2b00      	cmp	r3, #0
 800424e:	d10a      	bne.n	8004266 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8004250:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004254:	f383 8811 	msr	BASEPRI, r3
 8004258:	f3bf 8f6f 	isb	sy
 800425c:	f3bf 8f4f 	dsb	sy
 8004260:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004262:	bf00      	nop
 8004264:	e7fe      	b.n	8004264 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	2b00      	cmp	r3, #0
 800426a:	d002      	beq.n	8004272 <xQueueGenericCreateStatic+0x52>
 800426c:	68bb      	ldr	r3, [r7, #8]
 800426e:	2b00      	cmp	r3, #0
 8004270:	d001      	beq.n	8004276 <xQueueGenericCreateStatic+0x56>
 8004272:	2301      	movs	r3, #1
 8004274:	e000      	b.n	8004278 <xQueueGenericCreateStatic+0x58>
 8004276:	2300      	movs	r3, #0
 8004278:	2b00      	cmp	r3, #0
 800427a:	d10a      	bne.n	8004292 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800427c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004280:	f383 8811 	msr	BASEPRI, r3
 8004284:	f3bf 8f6f 	isb	sy
 8004288:	f3bf 8f4f 	dsb	sy
 800428c:	623b      	str	r3, [r7, #32]
}
 800428e:	bf00      	nop
 8004290:	e7fe      	b.n	8004290 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	2b00      	cmp	r3, #0
 8004296:	d102      	bne.n	800429e <xQueueGenericCreateStatic+0x7e>
 8004298:	68bb      	ldr	r3, [r7, #8]
 800429a:	2b00      	cmp	r3, #0
 800429c:	d101      	bne.n	80042a2 <xQueueGenericCreateStatic+0x82>
 800429e:	2301      	movs	r3, #1
 80042a0:	e000      	b.n	80042a4 <xQueueGenericCreateStatic+0x84>
 80042a2:	2300      	movs	r3, #0
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d10a      	bne.n	80042be <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80042a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042ac:	f383 8811 	msr	BASEPRI, r3
 80042b0:	f3bf 8f6f 	isb	sy
 80042b4:	f3bf 8f4f 	dsb	sy
 80042b8:	61fb      	str	r3, [r7, #28]
}
 80042ba:	bf00      	nop
 80042bc:	e7fe      	b.n	80042bc <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80042be:	2350      	movs	r3, #80	; 0x50
 80042c0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80042c2:	697b      	ldr	r3, [r7, #20]
 80042c4:	2b50      	cmp	r3, #80	; 0x50
 80042c6:	d00a      	beq.n	80042de <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80042c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042cc:	f383 8811 	msr	BASEPRI, r3
 80042d0:	f3bf 8f6f 	isb	sy
 80042d4:	f3bf 8f4f 	dsb	sy
 80042d8:	61bb      	str	r3, [r7, #24]
}
 80042da:	bf00      	nop
 80042dc:	e7fe      	b.n	80042dc <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80042de:	683b      	ldr	r3, [r7, #0]
 80042e0:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80042e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d00d      	beq.n	8004304 <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80042e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042ea:	2201      	movs	r2, #1
 80042ec:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80042f0:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80042f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042f6:	9300      	str	r3, [sp, #0]
 80042f8:	4613      	mov	r3, r2
 80042fa:	687a      	ldr	r2, [r7, #4]
 80042fc:	68b9      	ldr	r1, [r7, #8]
 80042fe:	68f8      	ldr	r0, [r7, #12]
 8004300:	f000 f805 	bl	800430e <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8004304:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8004306:	4618      	mov	r0, r3
 8004308:	3730      	adds	r7, #48	; 0x30
 800430a:	46bd      	mov	sp, r7
 800430c:	bd80      	pop	{r7, pc}

0800430e <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800430e:	b580      	push	{r7, lr}
 8004310:	b084      	sub	sp, #16
 8004312:	af00      	add	r7, sp, #0
 8004314:	60f8      	str	r0, [r7, #12]
 8004316:	60b9      	str	r1, [r7, #8]
 8004318:	607a      	str	r2, [r7, #4]
 800431a:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800431c:	68bb      	ldr	r3, [r7, #8]
 800431e:	2b00      	cmp	r3, #0
 8004320:	d103      	bne.n	800432a <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004322:	69bb      	ldr	r3, [r7, #24]
 8004324:	69ba      	ldr	r2, [r7, #24]
 8004326:	601a      	str	r2, [r3, #0]
 8004328:	e002      	b.n	8004330 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800432a:	69bb      	ldr	r3, [r7, #24]
 800432c:	687a      	ldr	r2, [r7, #4]
 800432e:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8004330:	69bb      	ldr	r3, [r7, #24]
 8004332:	68fa      	ldr	r2, [r7, #12]
 8004334:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004336:	69bb      	ldr	r3, [r7, #24]
 8004338:	68ba      	ldr	r2, [r7, #8]
 800433a:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800433c:	2101      	movs	r1, #1
 800433e:	69b8      	ldr	r0, [r7, #24]
 8004340:	f7ff ff06 	bl	8004150 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8004344:	69bb      	ldr	r3, [r7, #24]
 8004346:	78fa      	ldrb	r2, [r7, #3]
 8004348:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800434c:	bf00      	nop
 800434e:	3710      	adds	r7, #16
 8004350:	46bd      	mov	sp, r7
 8004352:	bd80      	pop	{r7, pc}

08004354 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8004354:	b580      	push	{r7, lr}
 8004356:	b08e      	sub	sp, #56	; 0x38
 8004358:	af00      	add	r7, sp, #0
 800435a:	60f8      	str	r0, [r7, #12]
 800435c:	60b9      	str	r1, [r7, #8]
 800435e:	607a      	str	r2, [r7, #4]
 8004360:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8004362:	2300      	movs	r3, #0
 8004364:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800436a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800436c:	2b00      	cmp	r3, #0
 800436e:	d10a      	bne.n	8004386 <xQueueGenericSend+0x32>
	__asm volatile
 8004370:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004374:	f383 8811 	msr	BASEPRI, r3
 8004378:	f3bf 8f6f 	isb	sy
 800437c:	f3bf 8f4f 	dsb	sy
 8004380:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004382:	bf00      	nop
 8004384:	e7fe      	b.n	8004384 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004386:	68bb      	ldr	r3, [r7, #8]
 8004388:	2b00      	cmp	r3, #0
 800438a:	d103      	bne.n	8004394 <xQueueGenericSend+0x40>
 800438c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800438e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004390:	2b00      	cmp	r3, #0
 8004392:	d101      	bne.n	8004398 <xQueueGenericSend+0x44>
 8004394:	2301      	movs	r3, #1
 8004396:	e000      	b.n	800439a <xQueueGenericSend+0x46>
 8004398:	2300      	movs	r3, #0
 800439a:	2b00      	cmp	r3, #0
 800439c:	d10a      	bne.n	80043b4 <xQueueGenericSend+0x60>
	__asm volatile
 800439e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043a2:	f383 8811 	msr	BASEPRI, r3
 80043a6:	f3bf 8f6f 	isb	sy
 80043aa:	f3bf 8f4f 	dsb	sy
 80043ae:	627b      	str	r3, [r7, #36]	; 0x24
}
 80043b0:	bf00      	nop
 80043b2:	e7fe      	b.n	80043b2 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80043b4:	683b      	ldr	r3, [r7, #0]
 80043b6:	2b02      	cmp	r3, #2
 80043b8:	d103      	bne.n	80043c2 <xQueueGenericSend+0x6e>
 80043ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043be:	2b01      	cmp	r3, #1
 80043c0:	d101      	bne.n	80043c6 <xQueueGenericSend+0x72>
 80043c2:	2301      	movs	r3, #1
 80043c4:	e000      	b.n	80043c8 <xQueueGenericSend+0x74>
 80043c6:	2300      	movs	r3, #0
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d10a      	bne.n	80043e2 <xQueueGenericSend+0x8e>
	__asm volatile
 80043cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043d0:	f383 8811 	msr	BASEPRI, r3
 80043d4:	f3bf 8f6f 	isb	sy
 80043d8:	f3bf 8f4f 	dsb	sy
 80043dc:	623b      	str	r3, [r7, #32]
}
 80043de:	bf00      	nop
 80043e0:	e7fe      	b.n	80043e0 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80043e2:	f001 fa5d 	bl	80058a0 <xTaskGetSchedulerState>
 80043e6:	4603      	mov	r3, r0
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d102      	bne.n	80043f2 <xQueueGenericSend+0x9e>
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d101      	bne.n	80043f6 <xQueueGenericSend+0xa2>
 80043f2:	2301      	movs	r3, #1
 80043f4:	e000      	b.n	80043f8 <xQueueGenericSend+0xa4>
 80043f6:	2300      	movs	r3, #0
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d10a      	bne.n	8004412 <xQueueGenericSend+0xbe>
	__asm volatile
 80043fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004400:	f383 8811 	msr	BASEPRI, r3
 8004404:	f3bf 8f6f 	isb	sy
 8004408:	f3bf 8f4f 	dsb	sy
 800440c:	61fb      	str	r3, [r7, #28]
}
 800440e:	bf00      	nop
 8004410:	e7fe      	b.n	8004410 <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004412:	f001 ff2b 	bl	800626c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004416:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004418:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800441a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800441c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800441e:	429a      	cmp	r2, r3
 8004420:	d302      	bcc.n	8004428 <xQueueGenericSend+0xd4>
 8004422:	683b      	ldr	r3, [r7, #0]
 8004424:	2b02      	cmp	r3, #2
 8004426:	d129      	bne.n	800447c <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004428:	683a      	ldr	r2, [r7, #0]
 800442a:	68b9      	ldr	r1, [r7, #8]
 800442c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800442e:	f000 fa07 	bl	8004840 <prvCopyDataToQueue>
 8004432:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004434:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004436:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004438:	2b00      	cmp	r3, #0
 800443a:	d010      	beq.n	800445e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800443c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800443e:	3324      	adds	r3, #36	; 0x24
 8004440:	4618      	mov	r0, r3
 8004442:	f001 f867 	bl	8005514 <xTaskRemoveFromEventList>
 8004446:	4603      	mov	r3, r0
 8004448:	2b00      	cmp	r3, #0
 800444a:	d013      	beq.n	8004474 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800444c:	4b3f      	ldr	r3, [pc, #252]	; (800454c <xQueueGenericSend+0x1f8>)
 800444e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004452:	601a      	str	r2, [r3, #0]
 8004454:	f3bf 8f4f 	dsb	sy
 8004458:	f3bf 8f6f 	isb	sy
 800445c:	e00a      	b.n	8004474 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800445e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004460:	2b00      	cmp	r3, #0
 8004462:	d007      	beq.n	8004474 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8004464:	4b39      	ldr	r3, [pc, #228]	; (800454c <xQueueGenericSend+0x1f8>)
 8004466:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800446a:	601a      	str	r2, [r3, #0]
 800446c:	f3bf 8f4f 	dsb	sy
 8004470:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8004474:	f001 ff2a 	bl	80062cc <vPortExitCritical>
				return pdPASS;
 8004478:	2301      	movs	r3, #1
 800447a:	e063      	b.n	8004544 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	2b00      	cmp	r3, #0
 8004480:	d103      	bne.n	800448a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004482:	f001 ff23 	bl	80062cc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8004486:	2300      	movs	r3, #0
 8004488:	e05c      	b.n	8004544 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800448a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800448c:	2b00      	cmp	r3, #0
 800448e:	d106      	bne.n	800449e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004490:	f107 0314 	add.w	r3, r7, #20
 8004494:	4618      	mov	r0, r3
 8004496:	f001 f8a1 	bl	80055dc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800449a:	2301      	movs	r3, #1
 800449c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800449e:	f001 ff15 	bl	80062cc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80044a2:	f000 fe0b 	bl	80050bc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80044a6:	f001 fee1 	bl	800626c <vPortEnterCritical>
 80044aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044ac:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80044b0:	b25b      	sxtb	r3, r3
 80044b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044b6:	d103      	bne.n	80044c0 <xQueueGenericSend+0x16c>
 80044b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044ba:	2200      	movs	r2, #0
 80044bc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80044c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044c2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80044c6:	b25b      	sxtb	r3, r3
 80044c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044cc:	d103      	bne.n	80044d6 <xQueueGenericSend+0x182>
 80044ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044d0:	2200      	movs	r2, #0
 80044d2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80044d6:	f001 fef9 	bl	80062cc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80044da:	1d3a      	adds	r2, r7, #4
 80044dc:	f107 0314 	add.w	r3, r7, #20
 80044e0:	4611      	mov	r1, r2
 80044e2:	4618      	mov	r0, r3
 80044e4:	f001 f890 	bl	8005608 <xTaskCheckForTimeOut>
 80044e8:	4603      	mov	r3, r0
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d124      	bne.n	8004538 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80044ee:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80044f0:	f000 fa9e 	bl	8004a30 <prvIsQueueFull>
 80044f4:	4603      	mov	r3, r0
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d018      	beq.n	800452c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80044fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044fc:	3310      	adds	r3, #16
 80044fe:	687a      	ldr	r2, [r7, #4]
 8004500:	4611      	mov	r1, r2
 8004502:	4618      	mov	r0, r3
 8004504:	f000 ffb6 	bl	8005474 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8004508:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800450a:	f000 fa29 	bl	8004960 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800450e:	f000 fde3 	bl	80050d8 <xTaskResumeAll>
 8004512:	4603      	mov	r3, r0
 8004514:	2b00      	cmp	r3, #0
 8004516:	f47f af7c 	bne.w	8004412 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800451a:	4b0c      	ldr	r3, [pc, #48]	; (800454c <xQueueGenericSend+0x1f8>)
 800451c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004520:	601a      	str	r2, [r3, #0]
 8004522:	f3bf 8f4f 	dsb	sy
 8004526:	f3bf 8f6f 	isb	sy
 800452a:	e772      	b.n	8004412 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800452c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800452e:	f000 fa17 	bl	8004960 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004532:	f000 fdd1 	bl	80050d8 <xTaskResumeAll>
 8004536:	e76c      	b.n	8004412 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8004538:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800453a:	f000 fa11 	bl	8004960 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800453e:	f000 fdcb 	bl	80050d8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8004542:	2300      	movs	r3, #0
		}
	}
}
 8004544:	4618      	mov	r0, r3
 8004546:	3738      	adds	r7, #56	; 0x38
 8004548:	46bd      	mov	sp, r7
 800454a:	bd80      	pop	{r7, pc}
 800454c:	e000ed04 	.word	0xe000ed04

08004550 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8004550:	b580      	push	{r7, lr}
 8004552:	b08e      	sub	sp, #56	; 0x38
 8004554:	af00      	add	r7, sp, #0
 8004556:	60f8      	str	r0, [r7, #12]
 8004558:	60b9      	str	r1, [r7, #8]
 800455a:	607a      	str	r2, [r7, #4]
 800455c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8004562:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004564:	2b00      	cmp	r3, #0
 8004566:	d10a      	bne.n	800457e <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8004568:	f04f 0350 	mov.w	r3, #80	; 0x50
 800456c:	f383 8811 	msr	BASEPRI, r3
 8004570:	f3bf 8f6f 	isb	sy
 8004574:	f3bf 8f4f 	dsb	sy
 8004578:	627b      	str	r3, [r7, #36]	; 0x24
}
 800457a:	bf00      	nop
 800457c:	e7fe      	b.n	800457c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800457e:	68bb      	ldr	r3, [r7, #8]
 8004580:	2b00      	cmp	r3, #0
 8004582:	d103      	bne.n	800458c <xQueueGenericSendFromISR+0x3c>
 8004584:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004586:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004588:	2b00      	cmp	r3, #0
 800458a:	d101      	bne.n	8004590 <xQueueGenericSendFromISR+0x40>
 800458c:	2301      	movs	r3, #1
 800458e:	e000      	b.n	8004592 <xQueueGenericSendFromISR+0x42>
 8004590:	2300      	movs	r3, #0
 8004592:	2b00      	cmp	r3, #0
 8004594:	d10a      	bne.n	80045ac <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8004596:	f04f 0350 	mov.w	r3, #80	; 0x50
 800459a:	f383 8811 	msr	BASEPRI, r3
 800459e:	f3bf 8f6f 	isb	sy
 80045a2:	f3bf 8f4f 	dsb	sy
 80045a6:	623b      	str	r3, [r7, #32]
}
 80045a8:	bf00      	nop
 80045aa:	e7fe      	b.n	80045aa <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80045ac:	683b      	ldr	r3, [r7, #0]
 80045ae:	2b02      	cmp	r3, #2
 80045b0:	d103      	bne.n	80045ba <xQueueGenericSendFromISR+0x6a>
 80045b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045b6:	2b01      	cmp	r3, #1
 80045b8:	d101      	bne.n	80045be <xQueueGenericSendFromISR+0x6e>
 80045ba:	2301      	movs	r3, #1
 80045bc:	e000      	b.n	80045c0 <xQueueGenericSendFromISR+0x70>
 80045be:	2300      	movs	r3, #0
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d10a      	bne.n	80045da <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80045c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045c8:	f383 8811 	msr	BASEPRI, r3
 80045cc:	f3bf 8f6f 	isb	sy
 80045d0:	f3bf 8f4f 	dsb	sy
 80045d4:	61fb      	str	r3, [r7, #28]
}
 80045d6:	bf00      	nop
 80045d8:	e7fe      	b.n	80045d8 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80045da:	f001 ff09 	bl	80063f0 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80045de:	f3ef 8211 	mrs	r2, BASEPRI
 80045e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045e6:	f383 8811 	msr	BASEPRI, r3
 80045ea:	f3bf 8f6f 	isb	sy
 80045ee:	f3bf 8f4f 	dsb	sy
 80045f2:	61ba      	str	r2, [r7, #24]
 80045f4:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80045f6:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80045f8:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80045fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045fc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80045fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004600:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004602:	429a      	cmp	r2, r3
 8004604:	d302      	bcc.n	800460c <xQueueGenericSendFromISR+0xbc>
 8004606:	683b      	ldr	r3, [r7, #0]
 8004608:	2b02      	cmp	r3, #2
 800460a:	d12c      	bne.n	8004666 <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800460c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800460e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004612:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004616:	683a      	ldr	r2, [r7, #0]
 8004618:	68b9      	ldr	r1, [r7, #8]
 800461a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800461c:	f000 f910 	bl	8004840 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8004620:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8004624:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004628:	d112      	bne.n	8004650 <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800462a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800462c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800462e:	2b00      	cmp	r3, #0
 8004630:	d016      	beq.n	8004660 <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004632:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004634:	3324      	adds	r3, #36	; 0x24
 8004636:	4618      	mov	r0, r3
 8004638:	f000 ff6c 	bl	8005514 <xTaskRemoveFromEventList>
 800463c:	4603      	mov	r3, r0
 800463e:	2b00      	cmp	r3, #0
 8004640:	d00e      	beq.n	8004660 <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	2b00      	cmp	r3, #0
 8004646:	d00b      	beq.n	8004660 <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	2201      	movs	r2, #1
 800464c:	601a      	str	r2, [r3, #0]
 800464e:	e007      	b.n	8004660 <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004650:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004654:	3301      	adds	r3, #1
 8004656:	b2db      	uxtb	r3, r3
 8004658:	b25a      	sxtb	r2, r3
 800465a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800465c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8004660:	2301      	movs	r3, #1
 8004662:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8004664:	e001      	b.n	800466a <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8004666:	2300      	movs	r3, #0
 8004668:	637b      	str	r3, [r7, #52]	; 0x34
 800466a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800466c:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800466e:	693b      	ldr	r3, [r7, #16]
 8004670:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8004674:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004676:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8004678:	4618      	mov	r0, r3
 800467a:	3738      	adds	r7, #56	; 0x38
 800467c:	46bd      	mov	sp, r7
 800467e:	bd80      	pop	{r7, pc}

08004680 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8004680:	b580      	push	{r7, lr}
 8004682:	b08c      	sub	sp, #48	; 0x30
 8004684:	af00      	add	r7, sp, #0
 8004686:	60f8      	str	r0, [r7, #12]
 8004688:	60b9      	str	r1, [r7, #8]
 800468a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800468c:	2300      	movs	r3, #0
 800468e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004694:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004696:	2b00      	cmp	r3, #0
 8004698:	d10a      	bne.n	80046b0 <xQueueReceive+0x30>
	__asm volatile
 800469a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800469e:	f383 8811 	msr	BASEPRI, r3
 80046a2:	f3bf 8f6f 	isb	sy
 80046a6:	f3bf 8f4f 	dsb	sy
 80046aa:	623b      	str	r3, [r7, #32]
}
 80046ac:	bf00      	nop
 80046ae:	e7fe      	b.n	80046ae <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80046b0:	68bb      	ldr	r3, [r7, #8]
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d103      	bne.n	80046be <xQueueReceive+0x3e>
 80046b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d101      	bne.n	80046c2 <xQueueReceive+0x42>
 80046be:	2301      	movs	r3, #1
 80046c0:	e000      	b.n	80046c4 <xQueueReceive+0x44>
 80046c2:	2300      	movs	r3, #0
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d10a      	bne.n	80046de <xQueueReceive+0x5e>
	__asm volatile
 80046c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046cc:	f383 8811 	msr	BASEPRI, r3
 80046d0:	f3bf 8f6f 	isb	sy
 80046d4:	f3bf 8f4f 	dsb	sy
 80046d8:	61fb      	str	r3, [r7, #28]
}
 80046da:	bf00      	nop
 80046dc:	e7fe      	b.n	80046dc <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80046de:	f001 f8df 	bl	80058a0 <xTaskGetSchedulerState>
 80046e2:	4603      	mov	r3, r0
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d102      	bne.n	80046ee <xQueueReceive+0x6e>
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d101      	bne.n	80046f2 <xQueueReceive+0x72>
 80046ee:	2301      	movs	r3, #1
 80046f0:	e000      	b.n	80046f4 <xQueueReceive+0x74>
 80046f2:	2300      	movs	r3, #0
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d10a      	bne.n	800470e <xQueueReceive+0x8e>
	__asm volatile
 80046f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046fc:	f383 8811 	msr	BASEPRI, r3
 8004700:	f3bf 8f6f 	isb	sy
 8004704:	f3bf 8f4f 	dsb	sy
 8004708:	61bb      	str	r3, [r7, #24]
}
 800470a:	bf00      	nop
 800470c:	e7fe      	b.n	800470c <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 800470e:	f001 fdad 	bl	800626c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004712:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004714:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004716:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004718:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800471a:	2b00      	cmp	r3, #0
 800471c:	d01f      	beq.n	800475e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800471e:	68b9      	ldr	r1, [r7, #8]
 8004720:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004722:	f000 f8f7 	bl	8004914 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004726:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004728:	1e5a      	subs	r2, r3, #1
 800472a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800472c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800472e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004730:	691b      	ldr	r3, [r3, #16]
 8004732:	2b00      	cmp	r3, #0
 8004734:	d00f      	beq.n	8004756 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004736:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004738:	3310      	adds	r3, #16
 800473a:	4618      	mov	r0, r3
 800473c:	f000 feea 	bl	8005514 <xTaskRemoveFromEventList>
 8004740:	4603      	mov	r3, r0
 8004742:	2b00      	cmp	r3, #0
 8004744:	d007      	beq.n	8004756 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004746:	4b3d      	ldr	r3, [pc, #244]	; (800483c <xQueueReceive+0x1bc>)
 8004748:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800474c:	601a      	str	r2, [r3, #0]
 800474e:	f3bf 8f4f 	dsb	sy
 8004752:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004756:	f001 fdb9 	bl	80062cc <vPortExitCritical>
				return pdPASS;
 800475a:	2301      	movs	r3, #1
 800475c:	e069      	b.n	8004832 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	2b00      	cmp	r3, #0
 8004762:	d103      	bne.n	800476c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004764:	f001 fdb2 	bl	80062cc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004768:	2300      	movs	r3, #0
 800476a:	e062      	b.n	8004832 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800476c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800476e:	2b00      	cmp	r3, #0
 8004770:	d106      	bne.n	8004780 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004772:	f107 0310 	add.w	r3, r7, #16
 8004776:	4618      	mov	r0, r3
 8004778:	f000 ff30 	bl	80055dc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800477c:	2301      	movs	r3, #1
 800477e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004780:	f001 fda4 	bl	80062cc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004784:	f000 fc9a 	bl	80050bc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004788:	f001 fd70 	bl	800626c <vPortEnterCritical>
 800478c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800478e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004792:	b25b      	sxtb	r3, r3
 8004794:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004798:	d103      	bne.n	80047a2 <xQueueReceive+0x122>
 800479a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800479c:	2200      	movs	r2, #0
 800479e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80047a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047a4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80047a8:	b25b      	sxtb	r3, r3
 80047aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047ae:	d103      	bne.n	80047b8 <xQueueReceive+0x138>
 80047b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047b2:	2200      	movs	r2, #0
 80047b4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80047b8:	f001 fd88 	bl	80062cc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80047bc:	1d3a      	adds	r2, r7, #4
 80047be:	f107 0310 	add.w	r3, r7, #16
 80047c2:	4611      	mov	r1, r2
 80047c4:	4618      	mov	r0, r3
 80047c6:	f000 ff1f 	bl	8005608 <xTaskCheckForTimeOut>
 80047ca:	4603      	mov	r3, r0
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d123      	bne.n	8004818 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80047d0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80047d2:	f000 f917 	bl	8004a04 <prvIsQueueEmpty>
 80047d6:	4603      	mov	r3, r0
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d017      	beq.n	800480c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80047dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047de:	3324      	adds	r3, #36	; 0x24
 80047e0:	687a      	ldr	r2, [r7, #4]
 80047e2:	4611      	mov	r1, r2
 80047e4:	4618      	mov	r0, r3
 80047e6:	f000 fe45 	bl	8005474 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80047ea:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80047ec:	f000 f8b8 	bl	8004960 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80047f0:	f000 fc72 	bl	80050d8 <xTaskResumeAll>
 80047f4:	4603      	mov	r3, r0
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d189      	bne.n	800470e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80047fa:	4b10      	ldr	r3, [pc, #64]	; (800483c <xQueueReceive+0x1bc>)
 80047fc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004800:	601a      	str	r2, [r3, #0]
 8004802:	f3bf 8f4f 	dsb	sy
 8004806:	f3bf 8f6f 	isb	sy
 800480a:	e780      	b.n	800470e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800480c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800480e:	f000 f8a7 	bl	8004960 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004812:	f000 fc61 	bl	80050d8 <xTaskResumeAll>
 8004816:	e77a      	b.n	800470e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8004818:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800481a:	f000 f8a1 	bl	8004960 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800481e:	f000 fc5b 	bl	80050d8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004822:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004824:	f000 f8ee 	bl	8004a04 <prvIsQueueEmpty>
 8004828:	4603      	mov	r3, r0
 800482a:	2b00      	cmp	r3, #0
 800482c:	f43f af6f 	beq.w	800470e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004830:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8004832:	4618      	mov	r0, r3
 8004834:	3730      	adds	r7, #48	; 0x30
 8004836:	46bd      	mov	sp, r7
 8004838:	bd80      	pop	{r7, pc}
 800483a:	bf00      	nop
 800483c:	e000ed04 	.word	0xe000ed04

08004840 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8004840:	b580      	push	{r7, lr}
 8004842:	b086      	sub	sp, #24
 8004844:	af00      	add	r7, sp, #0
 8004846:	60f8      	str	r0, [r7, #12]
 8004848:	60b9      	str	r1, [r7, #8]
 800484a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800484c:	2300      	movs	r3, #0
 800484e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004854:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800485a:	2b00      	cmp	r3, #0
 800485c:	d10d      	bne.n	800487a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	2b00      	cmp	r3, #0
 8004864:	d14d      	bne.n	8004902 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	685b      	ldr	r3, [r3, #4]
 800486a:	4618      	mov	r0, r3
 800486c:	f001 f836 	bl	80058dc <xTaskPriorityDisinherit>
 8004870:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	2200      	movs	r2, #0
 8004876:	605a      	str	r2, [r3, #4]
 8004878:	e043      	b.n	8004902 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	2b00      	cmp	r3, #0
 800487e:	d119      	bne.n	80048b4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	6898      	ldr	r0, [r3, #8]
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004888:	461a      	mov	r2, r3
 800488a:	68b9      	ldr	r1, [r7, #8]
 800488c:	f001 fff2 	bl	8006874 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	689a      	ldr	r2, [r3, #8]
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004898:	441a      	add	r2, r3
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	689a      	ldr	r2, [r3, #8]
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	685b      	ldr	r3, [r3, #4]
 80048a6:	429a      	cmp	r2, r3
 80048a8:	d32b      	bcc.n	8004902 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	681a      	ldr	r2, [r3, #0]
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	609a      	str	r2, [r3, #8]
 80048b2:	e026      	b.n	8004902 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	68d8      	ldr	r0, [r3, #12]
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048bc:	461a      	mov	r2, r3
 80048be:	68b9      	ldr	r1, [r7, #8]
 80048c0:	f001 ffd8 	bl	8006874 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	68da      	ldr	r2, [r3, #12]
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048cc:	425b      	negs	r3, r3
 80048ce:	441a      	add	r2, r3
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	68da      	ldr	r2, [r3, #12]
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	429a      	cmp	r2, r3
 80048de:	d207      	bcs.n	80048f0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	685a      	ldr	r2, [r3, #4]
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048e8:	425b      	negs	r3, r3
 80048ea:	441a      	add	r2, r3
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	2b02      	cmp	r3, #2
 80048f4:	d105      	bne.n	8004902 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80048f6:	693b      	ldr	r3, [r7, #16]
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d002      	beq.n	8004902 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80048fc:	693b      	ldr	r3, [r7, #16]
 80048fe:	3b01      	subs	r3, #1
 8004900:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004902:	693b      	ldr	r3, [r7, #16]
 8004904:	1c5a      	adds	r2, r3, #1
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800490a:	697b      	ldr	r3, [r7, #20]
}
 800490c:	4618      	mov	r0, r3
 800490e:	3718      	adds	r7, #24
 8004910:	46bd      	mov	sp, r7
 8004912:	bd80      	pop	{r7, pc}

08004914 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8004914:	b580      	push	{r7, lr}
 8004916:	b082      	sub	sp, #8
 8004918:	af00      	add	r7, sp, #0
 800491a:	6078      	str	r0, [r7, #4]
 800491c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004922:	2b00      	cmp	r3, #0
 8004924:	d018      	beq.n	8004958 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	68da      	ldr	r2, [r3, #12]
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800492e:	441a      	add	r2, r3
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	68da      	ldr	r2, [r3, #12]
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	685b      	ldr	r3, [r3, #4]
 800493c:	429a      	cmp	r2, r3
 800493e:	d303      	bcc.n	8004948 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681a      	ldr	r2, [r3, #0]
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	68d9      	ldr	r1, [r3, #12]
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004950:	461a      	mov	r2, r3
 8004952:	6838      	ldr	r0, [r7, #0]
 8004954:	f001 ff8e 	bl	8006874 <memcpy>
	}
}
 8004958:	bf00      	nop
 800495a:	3708      	adds	r7, #8
 800495c:	46bd      	mov	sp, r7
 800495e:	bd80      	pop	{r7, pc}

08004960 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004960:	b580      	push	{r7, lr}
 8004962:	b084      	sub	sp, #16
 8004964:	af00      	add	r7, sp, #0
 8004966:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004968:	f001 fc80 	bl	800626c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004972:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004974:	e011      	b.n	800499a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800497a:	2b00      	cmp	r3, #0
 800497c:	d012      	beq.n	80049a4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	3324      	adds	r3, #36	; 0x24
 8004982:	4618      	mov	r0, r3
 8004984:	f000 fdc6 	bl	8005514 <xTaskRemoveFromEventList>
 8004988:	4603      	mov	r3, r0
 800498a:	2b00      	cmp	r3, #0
 800498c:	d001      	beq.n	8004992 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800498e:	f000 fe9d 	bl	80056cc <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8004992:	7bfb      	ldrb	r3, [r7, #15]
 8004994:	3b01      	subs	r3, #1
 8004996:	b2db      	uxtb	r3, r3
 8004998:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800499a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800499e:	2b00      	cmp	r3, #0
 80049a0:	dce9      	bgt.n	8004976 <prvUnlockQueue+0x16>
 80049a2:	e000      	b.n	80049a6 <prvUnlockQueue+0x46>
					break;
 80049a4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	22ff      	movs	r2, #255	; 0xff
 80049aa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80049ae:	f001 fc8d 	bl	80062cc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80049b2:	f001 fc5b 	bl	800626c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80049bc:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80049be:	e011      	b.n	80049e4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	691b      	ldr	r3, [r3, #16]
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d012      	beq.n	80049ee <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	3310      	adds	r3, #16
 80049cc:	4618      	mov	r0, r3
 80049ce:	f000 fda1 	bl	8005514 <xTaskRemoveFromEventList>
 80049d2:	4603      	mov	r3, r0
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d001      	beq.n	80049dc <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80049d8:	f000 fe78 	bl	80056cc <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80049dc:	7bbb      	ldrb	r3, [r7, #14]
 80049de:	3b01      	subs	r3, #1
 80049e0:	b2db      	uxtb	r3, r3
 80049e2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80049e4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	dce9      	bgt.n	80049c0 <prvUnlockQueue+0x60>
 80049ec:	e000      	b.n	80049f0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80049ee:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	22ff      	movs	r2, #255	; 0xff
 80049f4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80049f8:	f001 fc68 	bl	80062cc <vPortExitCritical>
}
 80049fc:	bf00      	nop
 80049fe:	3710      	adds	r7, #16
 8004a00:	46bd      	mov	sp, r7
 8004a02:	bd80      	pop	{r7, pc}

08004a04 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8004a04:	b580      	push	{r7, lr}
 8004a06:	b084      	sub	sp, #16
 8004a08:	af00      	add	r7, sp, #0
 8004a0a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004a0c:	f001 fc2e 	bl	800626c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d102      	bne.n	8004a1e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8004a18:	2301      	movs	r3, #1
 8004a1a:	60fb      	str	r3, [r7, #12]
 8004a1c:	e001      	b.n	8004a22 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8004a1e:	2300      	movs	r3, #0
 8004a20:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004a22:	f001 fc53 	bl	80062cc <vPortExitCritical>

	return xReturn;
 8004a26:	68fb      	ldr	r3, [r7, #12]
}
 8004a28:	4618      	mov	r0, r3
 8004a2a:	3710      	adds	r7, #16
 8004a2c:	46bd      	mov	sp, r7
 8004a2e:	bd80      	pop	{r7, pc}

08004a30 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8004a30:	b580      	push	{r7, lr}
 8004a32:	b084      	sub	sp, #16
 8004a34:	af00      	add	r7, sp, #0
 8004a36:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004a38:	f001 fc18 	bl	800626c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a44:	429a      	cmp	r2, r3
 8004a46:	d102      	bne.n	8004a4e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8004a48:	2301      	movs	r3, #1
 8004a4a:	60fb      	str	r3, [r7, #12]
 8004a4c:	e001      	b.n	8004a52 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8004a4e:	2300      	movs	r3, #0
 8004a50:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004a52:	f001 fc3b 	bl	80062cc <vPortExitCritical>

	return xReturn;
 8004a56:	68fb      	ldr	r3, [r7, #12]
}
 8004a58:	4618      	mov	r0, r3
 8004a5a:	3710      	adds	r7, #16
 8004a5c:	46bd      	mov	sp, r7
 8004a5e:	bd80      	pop	{r7, pc}

08004a60 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8004a60:	b480      	push	{r7}
 8004a62:	b085      	sub	sp, #20
 8004a64:	af00      	add	r7, sp, #0
 8004a66:	6078      	str	r0, [r7, #4]
 8004a68:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004a6a:	2300      	movs	r3, #0
 8004a6c:	60fb      	str	r3, [r7, #12]
 8004a6e:	e014      	b.n	8004a9a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8004a70:	4a0e      	ldr	r2, [pc, #56]	; (8004aac <vQueueAddToRegistry+0x4c>)
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d10b      	bne.n	8004a94 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8004a7c:	490b      	ldr	r1, [pc, #44]	; (8004aac <vQueueAddToRegistry+0x4c>)
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	683a      	ldr	r2, [r7, #0]
 8004a82:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8004a86:	4a09      	ldr	r2, [pc, #36]	; (8004aac <vQueueAddToRegistry+0x4c>)
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	00db      	lsls	r3, r3, #3
 8004a8c:	4413      	add	r3, r2
 8004a8e:	687a      	ldr	r2, [r7, #4]
 8004a90:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8004a92:	e006      	b.n	8004aa2 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	3301      	adds	r3, #1
 8004a98:	60fb      	str	r3, [r7, #12]
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	2b07      	cmp	r3, #7
 8004a9e:	d9e7      	bls.n	8004a70 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8004aa0:	bf00      	nop
 8004aa2:	bf00      	nop
 8004aa4:	3714      	adds	r7, #20
 8004aa6:	46bd      	mov	sp, r7
 8004aa8:	bc80      	pop	{r7}
 8004aaa:	4770      	bx	lr
 8004aac:	20000a20 	.word	0x20000a20

08004ab0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004ab0:	b580      	push	{r7, lr}
 8004ab2:	b086      	sub	sp, #24
 8004ab4:	af00      	add	r7, sp, #0
 8004ab6:	60f8      	str	r0, [r7, #12]
 8004ab8:	60b9      	str	r1, [r7, #8]
 8004aba:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8004ac0:	f001 fbd4 	bl	800626c <vPortEnterCritical>
 8004ac4:	697b      	ldr	r3, [r7, #20]
 8004ac6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004aca:	b25b      	sxtb	r3, r3
 8004acc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ad0:	d103      	bne.n	8004ada <vQueueWaitForMessageRestricted+0x2a>
 8004ad2:	697b      	ldr	r3, [r7, #20]
 8004ad4:	2200      	movs	r2, #0
 8004ad6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004ada:	697b      	ldr	r3, [r7, #20]
 8004adc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004ae0:	b25b      	sxtb	r3, r3
 8004ae2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ae6:	d103      	bne.n	8004af0 <vQueueWaitForMessageRestricted+0x40>
 8004ae8:	697b      	ldr	r3, [r7, #20]
 8004aea:	2200      	movs	r2, #0
 8004aec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004af0:	f001 fbec 	bl	80062cc <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8004af4:	697b      	ldr	r3, [r7, #20]
 8004af6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d106      	bne.n	8004b0a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8004afc:	697b      	ldr	r3, [r7, #20]
 8004afe:	3324      	adds	r3, #36	; 0x24
 8004b00:	687a      	ldr	r2, [r7, #4]
 8004b02:	68b9      	ldr	r1, [r7, #8]
 8004b04:	4618      	mov	r0, r3
 8004b06:	f000 fcd9 	bl	80054bc <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8004b0a:	6978      	ldr	r0, [r7, #20]
 8004b0c:	f7ff ff28 	bl	8004960 <prvUnlockQueue>
	}
 8004b10:	bf00      	nop
 8004b12:	3718      	adds	r7, #24
 8004b14:	46bd      	mov	sp, r7
 8004b16:	bd80      	pop	{r7, pc}

08004b18 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004b18:	b580      	push	{r7, lr}
 8004b1a:	b08e      	sub	sp, #56	; 0x38
 8004b1c:	af04      	add	r7, sp, #16
 8004b1e:	60f8      	str	r0, [r7, #12]
 8004b20:	60b9      	str	r1, [r7, #8]
 8004b22:	607a      	str	r2, [r7, #4]
 8004b24:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8004b26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d10a      	bne.n	8004b42 <xTaskCreateStatic+0x2a>
	__asm volatile
 8004b2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b30:	f383 8811 	msr	BASEPRI, r3
 8004b34:	f3bf 8f6f 	isb	sy
 8004b38:	f3bf 8f4f 	dsb	sy
 8004b3c:	623b      	str	r3, [r7, #32]
}
 8004b3e:	bf00      	nop
 8004b40:	e7fe      	b.n	8004b40 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8004b42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d10a      	bne.n	8004b5e <xTaskCreateStatic+0x46>
	__asm volatile
 8004b48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b4c:	f383 8811 	msr	BASEPRI, r3
 8004b50:	f3bf 8f6f 	isb	sy
 8004b54:	f3bf 8f4f 	dsb	sy
 8004b58:	61fb      	str	r3, [r7, #28]
}
 8004b5a:	bf00      	nop
 8004b5c:	e7fe      	b.n	8004b5c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8004b5e:	23bc      	movs	r3, #188	; 0xbc
 8004b60:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004b62:	693b      	ldr	r3, [r7, #16]
 8004b64:	2bbc      	cmp	r3, #188	; 0xbc
 8004b66:	d00a      	beq.n	8004b7e <xTaskCreateStatic+0x66>
	__asm volatile
 8004b68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b6c:	f383 8811 	msr	BASEPRI, r3
 8004b70:	f3bf 8f6f 	isb	sy
 8004b74:	f3bf 8f4f 	dsb	sy
 8004b78:	61bb      	str	r3, [r7, #24]
}
 8004b7a:	bf00      	nop
 8004b7c:	e7fe      	b.n	8004b7c <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004b7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d01e      	beq.n	8004bc2 <xTaskCreateStatic+0xaa>
 8004b84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d01b      	beq.n	8004bc2 <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004b8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b8c:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004b8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b90:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004b92:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004b94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b96:	2202      	movs	r2, #2
 8004b98:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004b9c:	2300      	movs	r3, #0
 8004b9e:	9303      	str	r3, [sp, #12]
 8004ba0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ba2:	9302      	str	r3, [sp, #8]
 8004ba4:	f107 0314 	add.w	r3, r7, #20
 8004ba8:	9301      	str	r3, [sp, #4]
 8004baa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bac:	9300      	str	r3, [sp, #0]
 8004bae:	683b      	ldr	r3, [r7, #0]
 8004bb0:	687a      	ldr	r2, [r7, #4]
 8004bb2:	68b9      	ldr	r1, [r7, #8]
 8004bb4:	68f8      	ldr	r0, [r7, #12]
 8004bb6:	f000 f851 	bl	8004c5c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004bba:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004bbc:	f000 f8ec 	bl	8004d98 <prvAddNewTaskToReadyList>
 8004bc0:	e001      	b.n	8004bc6 <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 8004bc2:	2300      	movs	r3, #0
 8004bc4:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004bc6:	697b      	ldr	r3, [r7, #20]
	}
 8004bc8:	4618      	mov	r0, r3
 8004bca:	3728      	adds	r7, #40	; 0x28
 8004bcc:	46bd      	mov	sp, r7
 8004bce:	bd80      	pop	{r7, pc}

08004bd0 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004bd0:	b580      	push	{r7, lr}
 8004bd2:	b08c      	sub	sp, #48	; 0x30
 8004bd4:	af04      	add	r7, sp, #16
 8004bd6:	60f8      	str	r0, [r7, #12]
 8004bd8:	60b9      	str	r1, [r7, #8]
 8004bda:	603b      	str	r3, [r7, #0]
 8004bdc:	4613      	mov	r3, r2
 8004bde:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004be0:	88fb      	ldrh	r3, [r7, #6]
 8004be2:	009b      	lsls	r3, r3, #2
 8004be4:	4618      	mov	r0, r3
 8004be6:	f001 fc41 	bl	800646c <pvPortMalloc>
 8004bea:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004bec:	697b      	ldr	r3, [r7, #20]
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d00e      	beq.n	8004c10 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8004bf2:	20bc      	movs	r0, #188	; 0xbc
 8004bf4:	f001 fc3a 	bl	800646c <pvPortMalloc>
 8004bf8:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004bfa:	69fb      	ldr	r3, [r7, #28]
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d003      	beq.n	8004c08 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004c00:	69fb      	ldr	r3, [r7, #28]
 8004c02:	697a      	ldr	r2, [r7, #20]
 8004c04:	631a      	str	r2, [r3, #48]	; 0x30
 8004c06:	e005      	b.n	8004c14 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004c08:	6978      	ldr	r0, [r7, #20]
 8004c0a:	f001 fcf3 	bl	80065f4 <vPortFree>
 8004c0e:	e001      	b.n	8004c14 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004c10:	2300      	movs	r3, #0
 8004c12:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004c14:	69fb      	ldr	r3, [r7, #28]
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d017      	beq.n	8004c4a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004c1a:	69fb      	ldr	r3, [r7, #28]
 8004c1c:	2200      	movs	r2, #0
 8004c1e:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004c22:	88fa      	ldrh	r2, [r7, #6]
 8004c24:	2300      	movs	r3, #0
 8004c26:	9303      	str	r3, [sp, #12]
 8004c28:	69fb      	ldr	r3, [r7, #28]
 8004c2a:	9302      	str	r3, [sp, #8]
 8004c2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c2e:	9301      	str	r3, [sp, #4]
 8004c30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c32:	9300      	str	r3, [sp, #0]
 8004c34:	683b      	ldr	r3, [r7, #0]
 8004c36:	68b9      	ldr	r1, [r7, #8]
 8004c38:	68f8      	ldr	r0, [r7, #12]
 8004c3a:	f000 f80f 	bl	8004c5c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004c3e:	69f8      	ldr	r0, [r7, #28]
 8004c40:	f000 f8aa 	bl	8004d98 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004c44:	2301      	movs	r3, #1
 8004c46:	61bb      	str	r3, [r7, #24]
 8004c48:	e002      	b.n	8004c50 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004c4a:	f04f 33ff 	mov.w	r3, #4294967295
 8004c4e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004c50:	69bb      	ldr	r3, [r7, #24]
	}
 8004c52:	4618      	mov	r0, r3
 8004c54:	3720      	adds	r7, #32
 8004c56:	46bd      	mov	sp, r7
 8004c58:	bd80      	pop	{r7, pc}
	...

08004c5c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004c5c:	b580      	push	{r7, lr}
 8004c5e:	b088      	sub	sp, #32
 8004c60:	af00      	add	r7, sp, #0
 8004c62:	60f8      	str	r0, [r7, #12]
 8004c64:	60b9      	str	r1, [r7, #8]
 8004c66:	607a      	str	r2, [r7, #4]
 8004c68:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8004c6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c6c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	009b      	lsls	r3, r3, #2
 8004c72:	461a      	mov	r2, r3
 8004c74:	21a5      	movs	r1, #165	; 0xa5
 8004c76:	f001 fe0b 	bl	8006890 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8004c7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c7c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004c84:	3b01      	subs	r3, #1
 8004c86:	009b      	lsls	r3, r3, #2
 8004c88:	4413      	add	r3, r2
 8004c8a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8004c8c:	69bb      	ldr	r3, [r7, #24]
 8004c8e:	f023 0307 	bic.w	r3, r3, #7
 8004c92:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004c94:	69bb      	ldr	r3, [r7, #24]
 8004c96:	f003 0307 	and.w	r3, r3, #7
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d00a      	beq.n	8004cb4 <prvInitialiseNewTask+0x58>
	__asm volatile
 8004c9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ca2:	f383 8811 	msr	BASEPRI, r3
 8004ca6:	f3bf 8f6f 	isb	sy
 8004caa:	f3bf 8f4f 	dsb	sy
 8004cae:	617b      	str	r3, [r7, #20]
}
 8004cb0:	bf00      	nop
 8004cb2:	e7fe      	b.n	8004cb2 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004cb4:	2300      	movs	r3, #0
 8004cb6:	61fb      	str	r3, [r7, #28]
 8004cb8:	e012      	b.n	8004ce0 <prvInitialiseNewTask+0x84>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004cba:	68ba      	ldr	r2, [r7, #8]
 8004cbc:	69fb      	ldr	r3, [r7, #28]
 8004cbe:	4413      	add	r3, r2
 8004cc0:	7819      	ldrb	r1, [r3, #0]
 8004cc2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004cc4:	69fb      	ldr	r3, [r7, #28]
 8004cc6:	4413      	add	r3, r2
 8004cc8:	3334      	adds	r3, #52	; 0x34
 8004cca:	460a      	mov	r2, r1
 8004ccc:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8004cce:	68ba      	ldr	r2, [r7, #8]
 8004cd0:	69fb      	ldr	r3, [r7, #28]
 8004cd2:	4413      	add	r3, r2
 8004cd4:	781b      	ldrb	r3, [r3, #0]
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d006      	beq.n	8004ce8 <prvInitialiseNewTask+0x8c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004cda:	69fb      	ldr	r3, [r7, #28]
 8004cdc:	3301      	adds	r3, #1
 8004cde:	61fb      	str	r3, [r7, #28]
 8004ce0:	69fb      	ldr	r3, [r7, #28]
 8004ce2:	2b0f      	cmp	r3, #15
 8004ce4:	d9e9      	bls.n	8004cba <prvInitialiseNewTask+0x5e>
 8004ce6:	e000      	b.n	8004cea <prvInitialiseNewTask+0x8e>
		{
			break;
 8004ce8:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004cea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cec:	2200      	movs	r2, #0
 8004cee:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004cf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cf4:	2b37      	cmp	r3, #55	; 0x37
 8004cf6:	d901      	bls.n	8004cfc <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004cf8:	2337      	movs	r3, #55	; 0x37
 8004cfa:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004cfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cfe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004d00:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004d02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d04:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004d06:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8004d08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d0a:	2200      	movs	r2, #0
 8004d0c:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004d0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d10:	3304      	adds	r3, #4
 8004d12:	4618      	mov	r0, r3
 8004d14:	f7ff f98b 	bl	800402e <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004d18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d1a:	3318      	adds	r3, #24
 8004d1c:	4618      	mov	r0, r3
 8004d1e:	f7ff f986 	bl	800402e <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004d22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d24:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004d26:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004d28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d2a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8004d2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d30:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004d32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d34:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004d36:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004d38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d3a:	2200      	movs	r2, #0
 8004d3c:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004d40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d42:	2200      	movs	r2, #0
 8004d44:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8004d48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d4a:	3354      	adds	r3, #84	; 0x54
 8004d4c:	2260      	movs	r2, #96	; 0x60
 8004d4e:	2100      	movs	r1, #0
 8004d50:	4618      	mov	r0, r3
 8004d52:	f001 fd9d 	bl	8006890 <memset>
 8004d56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d58:	4a0c      	ldr	r2, [pc, #48]	; (8004d8c <prvInitialiseNewTask+0x130>)
 8004d5a:	659a      	str	r2, [r3, #88]	; 0x58
 8004d5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d5e:	4a0c      	ldr	r2, [pc, #48]	; (8004d90 <prvInitialiseNewTask+0x134>)
 8004d60:	65da      	str	r2, [r3, #92]	; 0x5c
 8004d62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d64:	4a0b      	ldr	r2, [pc, #44]	; (8004d94 <prvInitialiseNewTask+0x138>)
 8004d66:	661a      	str	r2, [r3, #96]	; 0x60
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004d68:	683a      	ldr	r2, [r7, #0]
 8004d6a:	68f9      	ldr	r1, [r7, #12]
 8004d6c:	69b8      	ldr	r0, [r7, #24]
 8004d6e:	f001 f989 	bl	8006084 <pxPortInitialiseStack>
 8004d72:	4602      	mov	r2, r0
 8004d74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d76:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8004d78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d002      	beq.n	8004d84 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004d7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d80:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004d82:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004d84:	bf00      	nop
 8004d86:	3720      	adds	r7, #32
 8004d88:	46bd      	mov	sp, r7
 8004d8a:	bd80      	pop	{r7, pc}
 8004d8c:	08007438 	.word	0x08007438
 8004d90:	08007458 	.word	0x08007458
 8004d94:	08007418 	.word	0x08007418

08004d98 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004d98:	b580      	push	{r7, lr}
 8004d9a:	b082      	sub	sp, #8
 8004d9c:	af00      	add	r7, sp, #0
 8004d9e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004da0:	f001 fa64 	bl	800626c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004da4:	4b2d      	ldr	r3, [pc, #180]	; (8004e5c <prvAddNewTaskToReadyList+0xc4>)
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	3301      	adds	r3, #1
 8004daa:	4a2c      	ldr	r2, [pc, #176]	; (8004e5c <prvAddNewTaskToReadyList+0xc4>)
 8004dac:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8004dae:	4b2c      	ldr	r3, [pc, #176]	; (8004e60 <prvAddNewTaskToReadyList+0xc8>)
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d109      	bne.n	8004dca <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004db6:	4a2a      	ldr	r2, [pc, #168]	; (8004e60 <prvAddNewTaskToReadyList+0xc8>)
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004dbc:	4b27      	ldr	r3, [pc, #156]	; (8004e5c <prvAddNewTaskToReadyList+0xc4>)
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	2b01      	cmp	r3, #1
 8004dc2:	d110      	bne.n	8004de6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004dc4:	f000 fca6 	bl	8005714 <prvInitialiseTaskLists>
 8004dc8:	e00d      	b.n	8004de6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8004dca:	4b26      	ldr	r3, [pc, #152]	; (8004e64 <prvAddNewTaskToReadyList+0xcc>)
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d109      	bne.n	8004de6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004dd2:	4b23      	ldr	r3, [pc, #140]	; (8004e60 <prvAddNewTaskToReadyList+0xc8>)
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ddc:	429a      	cmp	r2, r3
 8004dde:	d802      	bhi.n	8004de6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004de0:	4a1f      	ldr	r2, [pc, #124]	; (8004e60 <prvAddNewTaskToReadyList+0xc8>)
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8004de6:	4b20      	ldr	r3, [pc, #128]	; (8004e68 <prvAddNewTaskToReadyList+0xd0>)
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	3301      	adds	r3, #1
 8004dec:	4a1e      	ldr	r2, [pc, #120]	; (8004e68 <prvAddNewTaskToReadyList+0xd0>)
 8004dee:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8004df0:	4b1d      	ldr	r3, [pc, #116]	; (8004e68 <prvAddNewTaskToReadyList+0xd0>)
 8004df2:	681a      	ldr	r2, [r3, #0]
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004dfc:	4b1b      	ldr	r3, [pc, #108]	; (8004e6c <prvAddNewTaskToReadyList+0xd4>)
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	429a      	cmp	r2, r3
 8004e02:	d903      	bls.n	8004e0c <prvAddNewTaskToReadyList+0x74>
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e08:	4a18      	ldr	r2, [pc, #96]	; (8004e6c <prvAddNewTaskToReadyList+0xd4>)
 8004e0a:	6013      	str	r3, [r2, #0]
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e10:	4613      	mov	r3, r2
 8004e12:	009b      	lsls	r3, r3, #2
 8004e14:	4413      	add	r3, r2
 8004e16:	009b      	lsls	r3, r3, #2
 8004e18:	4a15      	ldr	r2, [pc, #84]	; (8004e70 <prvAddNewTaskToReadyList+0xd8>)
 8004e1a:	441a      	add	r2, r3
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	3304      	adds	r3, #4
 8004e20:	4619      	mov	r1, r3
 8004e22:	4610      	mov	r0, r2
 8004e24:	f7ff f90f 	bl	8004046 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004e28:	f001 fa50 	bl	80062cc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004e2c:	4b0d      	ldr	r3, [pc, #52]	; (8004e64 <prvAddNewTaskToReadyList+0xcc>)
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d00e      	beq.n	8004e52 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004e34:	4b0a      	ldr	r3, [pc, #40]	; (8004e60 <prvAddNewTaskToReadyList+0xc8>)
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e3e:	429a      	cmp	r2, r3
 8004e40:	d207      	bcs.n	8004e52 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004e42:	4b0c      	ldr	r3, [pc, #48]	; (8004e74 <prvAddNewTaskToReadyList+0xdc>)
 8004e44:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004e48:	601a      	str	r2, [r3, #0]
 8004e4a:	f3bf 8f4f 	dsb	sy
 8004e4e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004e52:	bf00      	nop
 8004e54:	3708      	adds	r7, #8
 8004e56:	46bd      	mov	sp, r7
 8004e58:	bd80      	pop	{r7, pc}
 8004e5a:	bf00      	nop
 8004e5c:	20000f34 	.word	0x20000f34
 8004e60:	20000a60 	.word	0x20000a60
 8004e64:	20000f40 	.word	0x20000f40
 8004e68:	20000f50 	.word	0x20000f50
 8004e6c:	20000f3c 	.word	0x20000f3c
 8004e70:	20000a64 	.word	0x20000a64
 8004e74:	e000ed04 	.word	0xe000ed04

08004e78 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 8004e78:	b580      	push	{r7, lr}
 8004e7a:	b08a      	sub	sp, #40	; 0x28
 8004e7c:	af00      	add	r7, sp, #0
 8004e7e:	6078      	str	r0, [r7, #4]
 8004e80:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 8004e82:	2300      	movs	r3, #0
 8004e84:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d10a      	bne.n	8004ea2 <vTaskDelayUntil+0x2a>
	__asm volatile
 8004e8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e90:	f383 8811 	msr	BASEPRI, r3
 8004e94:	f3bf 8f6f 	isb	sy
 8004e98:	f3bf 8f4f 	dsb	sy
 8004e9c:	617b      	str	r3, [r7, #20]
}
 8004e9e:	bf00      	nop
 8004ea0:	e7fe      	b.n	8004ea0 <vTaskDelayUntil+0x28>
		configASSERT( ( xTimeIncrement > 0U ) );
 8004ea2:	683b      	ldr	r3, [r7, #0]
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d10a      	bne.n	8004ebe <vTaskDelayUntil+0x46>
	__asm volatile
 8004ea8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004eac:	f383 8811 	msr	BASEPRI, r3
 8004eb0:	f3bf 8f6f 	isb	sy
 8004eb4:	f3bf 8f4f 	dsb	sy
 8004eb8:	613b      	str	r3, [r7, #16]
}
 8004eba:	bf00      	nop
 8004ebc:	e7fe      	b.n	8004ebc <vTaskDelayUntil+0x44>
		configASSERT( uxSchedulerSuspended == 0 );
 8004ebe:	4b2a      	ldr	r3, [pc, #168]	; (8004f68 <vTaskDelayUntil+0xf0>)
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d00a      	beq.n	8004edc <vTaskDelayUntil+0x64>
	__asm volatile
 8004ec6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004eca:	f383 8811 	msr	BASEPRI, r3
 8004ece:	f3bf 8f6f 	isb	sy
 8004ed2:	f3bf 8f4f 	dsb	sy
 8004ed6:	60fb      	str	r3, [r7, #12]
}
 8004ed8:	bf00      	nop
 8004eda:	e7fe      	b.n	8004eda <vTaskDelayUntil+0x62>

		vTaskSuspendAll();
 8004edc:	f000 f8ee 	bl	80050bc <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 8004ee0:	4b22      	ldr	r3, [pc, #136]	; (8004f6c <vTaskDelayUntil+0xf4>)
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	683a      	ldr	r2, [r7, #0]
 8004eec:	4413      	add	r3, r2
 8004eee:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	6a3a      	ldr	r2, [r7, #32]
 8004ef6:	429a      	cmp	r2, r3
 8004ef8:	d20b      	bcs.n	8004f12 <vTaskDelayUntil+0x9a>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	69fa      	ldr	r2, [r7, #28]
 8004f00:	429a      	cmp	r2, r3
 8004f02:	d211      	bcs.n	8004f28 <vTaskDelayUntil+0xb0>
 8004f04:	69fa      	ldr	r2, [r7, #28]
 8004f06:	6a3b      	ldr	r3, [r7, #32]
 8004f08:	429a      	cmp	r2, r3
 8004f0a:	d90d      	bls.n	8004f28 <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 8004f0c:	2301      	movs	r3, #1
 8004f0e:	627b      	str	r3, [r7, #36]	; 0x24
 8004f10:	e00a      	b.n	8004f28 <vTaskDelayUntil+0xb0>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	69fa      	ldr	r2, [r7, #28]
 8004f18:	429a      	cmp	r2, r3
 8004f1a:	d303      	bcc.n	8004f24 <vTaskDelayUntil+0xac>
 8004f1c:	69fa      	ldr	r2, [r7, #28]
 8004f1e:	6a3b      	ldr	r3, [r7, #32]
 8004f20:	429a      	cmp	r2, r3
 8004f22:	d901      	bls.n	8004f28 <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 8004f24:	2301      	movs	r3, #1
 8004f26:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	69fa      	ldr	r2, [r7, #28]
 8004f2c:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 8004f2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d006      	beq.n	8004f42 <vTaskDelayUntil+0xca>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 8004f34:	69fa      	ldr	r2, [r7, #28]
 8004f36:	6a3b      	ldr	r3, [r7, #32]
 8004f38:	1ad3      	subs	r3, r2, r3
 8004f3a:	2100      	movs	r1, #0
 8004f3c:	4618      	mov	r0, r3
 8004f3e:	f000 fd3b 	bl	80059b8 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 8004f42:	f000 f8c9 	bl	80050d8 <xTaskResumeAll>
 8004f46:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004f48:	69bb      	ldr	r3, [r7, #24]
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d107      	bne.n	8004f5e <vTaskDelayUntil+0xe6>
		{
			portYIELD_WITHIN_API();
 8004f4e:	4b08      	ldr	r3, [pc, #32]	; (8004f70 <vTaskDelayUntil+0xf8>)
 8004f50:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004f54:	601a      	str	r2, [r3, #0]
 8004f56:	f3bf 8f4f 	dsb	sy
 8004f5a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004f5e:	bf00      	nop
 8004f60:	3728      	adds	r7, #40	; 0x28
 8004f62:	46bd      	mov	sp, r7
 8004f64:	bd80      	pop	{r7, pc}
 8004f66:	bf00      	nop
 8004f68:	20000f5c 	.word	0x20000f5c
 8004f6c:	20000f38 	.word	0x20000f38
 8004f70:	e000ed04 	.word	0xe000ed04

08004f74 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004f74:	b580      	push	{r7, lr}
 8004f76:	b084      	sub	sp, #16
 8004f78:	af00      	add	r7, sp, #0
 8004f7a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004f7c:	2300      	movs	r3, #0
 8004f7e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d017      	beq.n	8004fb6 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8004f86:	4b13      	ldr	r3, [pc, #76]	; (8004fd4 <vTaskDelay+0x60>)
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d00a      	beq.n	8004fa4 <vTaskDelay+0x30>
	__asm volatile
 8004f8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f92:	f383 8811 	msr	BASEPRI, r3
 8004f96:	f3bf 8f6f 	isb	sy
 8004f9a:	f3bf 8f4f 	dsb	sy
 8004f9e:	60bb      	str	r3, [r7, #8]
}
 8004fa0:	bf00      	nop
 8004fa2:	e7fe      	b.n	8004fa2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8004fa4:	f000 f88a 	bl	80050bc <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004fa8:	2100      	movs	r1, #0
 8004faa:	6878      	ldr	r0, [r7, #4]
 8004fac:	f000 fd04 	bl	80059b8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8004fb0:	f000 f892 	bl	80050d8 <xTaskResumeAll>
 8004fb4:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d107      	bne.n	8004fcc <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8004fbc:	4b06      	ldr	r3, [pc, #24]	; (8004fd8 <vTaskDelay+0x64>)
 8004fbe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004fc2:	601a      	str	r2, [r3, #0]
 8004fc4:	f3bf 8f4f 	dsb	sy
 8004fc8:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004fcc:	bf00      	nop
 8004fce:	3710      	adds	r7, #16
 8004fd0:	46bd      	mov	sp, r7
 8004fd2:	bd80      	pop	{r7, pc}
 8004fd4:	20000f5c 	.word	0x20000f5c
 8004fd8:	e000ed04 	.word	0xe000ed04

08004fdc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004fdc:	b580      	push	{r7, lr}
 8004fde:	b08a      	sub	sp, #40	; 0x28
 8004fe0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8004fe2:	2300      	movs	r3, #0
 8004fe4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8004fe6:	2300      	movs	r3, #0
 8004fe8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004fea:	463a      	mov	r2, r7
 8004fec:	1d39      	adds	r1, r7, #4
 8004fee:	f107 0308 	add.w	r3, r7, #8
 8004ff2:	4618      	mov	r0, r3
 8004ff4:	f7fe ffca 	bl	8003f8c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004ff8:	6839      	ldr	r1, [r7, #0]
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	68ba      	ldr	r2, [r7, #8]
 8004ffe:	9202      	str	r2, [sp, #8]
 8005000:	9301      	str	r3, [sp, #4]
 8005002:	2300      	movs	r3, #0
 8005004:	9300      	str	r3, [sp, #0]
 8005006:	2300      	movs	r3, #0
 8005008:	460a      	mov	r2, r1
 800500a:	4924      	ldr	r1, [pc, #144]	; (800509c <vTaskStartScheduler+0xc0>)
 800500c:	4824      	ldr	r0, [pc, #144]	; (80050a0 <vTaskStartScheduler+0xc4>)
 800500e:	f7ff fd83 	bl	8004b18 <xTaskCreateStatic>
 8005012:	4603      	mov	r3, r0
 8005014:	4a23      	ldr	r2, [pc, #140]	; (80050a4 <vTaskStartScheduler+0xc8>)
 8005016:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005018:	4b22      	ldr	r3, [pc, #136]	; (80050a4 <vTaskStartScheduler+0xc8>)
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	2b00      	cmp	r3, #0
 800501e:	d002      	beq.n	8005026 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005020:	2301      	movs	r3, #1
 8005022:	617b      	str	r3, [r7, #20]
 8005024:	e001      	b.n	800502a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005026:	2300      	movs	r3, #0
 8005028:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800502a:	697b      	ldr	r3, [r7, #20]
 800502c:	2b01      	cmp	r3, #1
 800502e:	d102      	bne.n	8005036 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8005030:	f000 fd16 	bl	8005a60 <xTimerCreateTimerTask>
 8005034:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005036:	697b      	ldr	r3, [r7, #20]
 8005038:	2b01      	cmp	r3, #1
 800503a:	d11b      	bne.n	8005074 <vTaskStartScheduler+0x98>
	__asm volatile
 800503c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005040:	f383 8811 	msr	BASEPRI, r3
 8005044:	f3bf 8f6f 	isb	sy
 8005048:	f3bf 8f4f 	dsb	sy
 800504c:	613b      	str	r3, [r7, #16]
}
 800504e:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005050:	4b15      	ldr	r3, [pc, #84]	; (80050a8 <vTaskStartScheduler+0xcc>)
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	3354      	adds	r3, #84	; 0x54
 8005056:	4a15      	ldr	r2, [pc, #84]	; (80050ac <vTaskStartScheduler+0xd0>)
 8005058:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800505a:	4b15      	ldr	r3, [pc, #84]	; (80050b0 <vTaskStartScheduler+0xd4>)
 800505c:	f04f 32ff 	mov.w	r2, #4294967295
 8005060:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005062:	4b14      	ldr	r3, [pc, #80]	; (80050b4 <vTaskStartScheduler+0xd8>)
 8005064:	2201      	movs	r2, #1
 8005066:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8005068:	4b13      	ldr	r3, [pc, #76]	; (80050b8 <vTaskStartScheduler+0xdc>)
 800506a:	2200      	movs	r2, #0
 800506c:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800506e:	f001 f88b 	bl	8006188 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005072:	e00e      	b.n	8005092 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005074:	697b      	ldr	r3, [r7, #20]
 8005076:	f1b3 3fff 	cmp.w	r3, #4294967295
 800507a:	d10a      	bne.n	8005092 <vTaskStartScheduler+0xb6>
	__asm volatile
 800507c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005080:	f383 8811 	msr	BASEPRI, r3
 8005084:	f3bf 8f6f 	isb	sy
 8005088:	f3bf 8f4f 	dsb	sy
 800508c:	60fb      	str	r3, [r7, #12]
}
 800508e:	bf00      	nop
 8005090:	e7fe      	b.n	8005090 <vTaskStartScheduler+0xb4>
}
 8005092:	bf00      	nop
 8005094:	3718      	adds	r7, #24
 8005096:	46bd      	mov	sp, r7
 8005098:	bd80      	pop	{r7, pc}
 800509a:	bf00      	nop
 800509c:	080073a4 	.word	0x080073a4
 80050a0:	080056e5 	.word	0x080056e5
 80050a4:	20000f58 	.word	0x20000f58
 80050a8:	20000a60 	.word	0x20000a60
 80050ac:	2000001c 	.word	0x2000001c
 80050b0:	20000f54 	.word	0x20000f54
 80050b4:	20000f40 	.word	0x20000f40
 80050b8:	20000f38 	.word	0x20000f38

080050bc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80050bc:	b480      	push	{r7}
 80050be:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80050c0:	4b04      	ldr	r3, [pc, #16]	; (80050d4 <vTaskSuspendAll+0x18>)
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	3301      	adds	r3, #1
 80050c6:	4a03      	ldr	r2, [pc, #12]	; (80050d4 <vTaskSuspendAll+0x18>)
 80050c8:	6013      	str	r3, [r2, #0]
}
 80050ca:	bf00      	nop
 80050cc:	46bd      	mov	sp, r7
 80050ce:	bc80      	pop	{r7}
 80050d0:	4770      	bx	lr
 80050d2:	bf00      	nop
 80050d4:	20000f5c 	.word	0x20000f5c

080050d8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80050d8:	b580      	push	{r7, lr}
 80050da:	b084      	sub	sp, #16
 80050dc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80050de:	2300      	movs	r3, #0
 80050e0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80050e2:	2300      	movs	r3, #0
 80050e4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80050e6:	4b42      	ldr	r3, [pc, #264]	; (80051f0 <xTaskResumeAll+0x118>)
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d10a      	bne.n	8005104 <xTaskResumeAll+0x2c>
	__asm volatile
 80050ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050f2:	f383 8811 	msr	BASEPRI, r3
 80050f6:	f3bf 8f6f 	isb	sy
 80050fa:	f3bf 8f4f 	dsb	sy
 80050fe:	603b      	str	r3, [r7, #0]
}
 8005100:	bf00      	nop
 8005102:	e7fe      	b.n	8005102 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005104:	f001 f8b2 	bl	800626c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005108:	4b39      	ldr	r3, [pc, #228]	; (80051f0 <xTaskResumeAll+0x118>)
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	3b01      	subs	r3, #1
 800510e:	4a38      	ldr	r2, [pc, #224]	; (80051f0 <xTaskResumeAll+0x118>)
 8005110:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005112:	4b37      	ldr	r3, [pc, #220]	; (80051f0 <xTaskResumeAll+0x118>)
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	2b00      	cmp	r3, #0
 8005118:	d162      	bne.n	80051e0 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800511a:	4b36      	ldr	r3, [pc, #216]	; (80051f4 <xTaskResumeAll+0x11c>)
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	2b00      	cmp	r3, #0
 8005120:	d05e      	beq.n	80051e0 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005122:	e02f      	b.n	8005184 <xTaskResumeAll+0xac>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8005124:	4b34      	ldr	r3, [pc, #208]	; (80051f8 <xTaskResumeAll+0x120>)
 8005126:	68db      	ldr	r3, [r3, #12]
 8005128:	68db      	ldr	r3, [r3, #12]
 800512a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	3318      	adds	r3, #24
 8005130:	4618      	mov	r0, r3
 8005132:	f7fe ffe3 	bl	80040fc <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	3304      	adds	r3, #4
 800513a:	4618      	mov	r0, r3
 800513c:	f7fe ffde 	bl	80040fc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005144:	4b2d      	ldr	r3, [pc, #180]	; (80051fc <xTaskResumeAll+0x124>)
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	429a      	cmp	r2, r3
 800514a:	d903      	bls.n	8005154 <xTaskResumeAll+0x7c>
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005150:	4a2a      	ldr	r2, [pc, #168]	; (80051fc <xTaskResumeAll+0x124>)
 8005152:	6013      	str	r3, [r2, #0]
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005158:	4613      	mov	r3, r2
 800515a:	009b      	lsls	r3, r3, #2
 800515c:	4413      	add	r3, r2
 800515e:	009b      	lsls	r3, r3, #2
 8005160:	4a27      	ldr	r2, [pc, #156]	; (8005200 <xTaskResumeAll+0x128>)
 8005162:	441a      	add	r2, r3
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	3304      	adds	r3, #4
 8005168:	4619      	mov	r1, r3
 800516a:	4610      	mov	r0, r2
 800516c:	f7fe ff6b 	bl	8004046 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005174:	4b23      	ldr	r3, [pc, #140]	; (8005204 <xTaskResumeAll+0x12c>)
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800517a:	429a      	cmp	r2, r3
 800517c:	d302      	bcc.n	8005184 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800517e:	4b22      	ldr	r3, [pc, #136]	; (8005208 <xTaskResumeAll+0x130>)
 8005180:	2201      	movs	r2, #1
 8005182:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005184:	4b1c      	ldr	r3, [pc, #112]	; (80051f8 <xTaskResumeAll+0x120>)
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	2b00      	cmp	r3, #0
 800518a:	d1cb      	bne.n	8005124 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	2b00      	cmp	r3, #0
 8005190:	d001      	beq.n	8005196 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005192:	f000 fb61 	bl	8005858 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8005196:	4b1d      	ldr	r3, [pc, #116]	; (800520c <xTaskResumeAll+0x134>)
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d010      	beq.n	80051c4 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80051a2:	f000 f845 	bl	8005230 <xTaskIncrementTick>
 80051a6:	4603      	mov	r3, r0
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d002      	beq.n	80051b2 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80051ac:	4b16      	ldr	r3, [pc, #88]	; (8005208 <xTaskResumeAll+0x130>)
 80051ae:	2201      	movs	r2, #1
 80051b0:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	3b01      	subs	r3, #1
 80051b6:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d1f1      	bne.n	80051a2 <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 80051be:	4b13      	ldr	r3, [pc, #76]	; (800520c <xTaskResumeAll+0x134>)
 80051c0:	2200      	movs	r2, #0
 80051c2:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80051c4:	4b10      	ldr	r3, [pc, #64]	; (8005208 <xTaskResumeAll+0x130>)
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d009      	beq.n	80051e0 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80051cc:	2301      	movs	r3, #1
 80051ce:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80051d0:	4b0f      	ldr	r3, [pc, #60]	; (8005210 <xTaskResumeAll+0x138>)
 80051d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80051d6:	601a      	str	r2, [r3, #0]
 80051d8:	f3bf 8f4f 	dsb	sy
 80051dc:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80051e0:	f001 f874 	bl	80062cc <vPortExitCritical>

	return xAlreadyYielded;
 80051e4:	68bb      	ldr	r3, [r7, #8]
}
 80051e6:	4618      	mov	r0, r3
 80051e8:	3710      	adds	r7, #16
 80051ea:	46bd      	mov	sp, r7
 80051ec:	bd80      	pop	{r7, pc}
 80051ee:	bf00      	nop
 80051f0:	20000f5c 	.word	0x20000f5c
 80051f4:	20000f34 	.word	0x20000f34
 80051f8:	20000ef4 	.word	0x20000ef4
 80051fc:	20000f3c 	.word	0x20000f3c
 8005200:	20000a64 	.word	0x20000a64
 8005204:	20000a60 	.word	0x20000a60
 8005208:	20000f48 	.word	0x20000f48
 800520c:	20000f44 	.word	0x20000f44
 8005210:	e000ed04 	.word	0xe000ed04

08005214 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8005214:	b480      	push	{r7}
 8005216:	b083      	sub	sp, #12
 8005218:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800521a:	4b04      	ldr	r3, [pc, #16]	; (800522c <xTaskGetTickCount+0x18>)
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8005220:	687b      	ldr	r3, [r7, #4]
}
 8005222:	4618      	mov	r0, r3
 8005224:	370c      	adds	r7, #12
 8005226:	46bd      	mov	sp, r7
 8005228:	bc80      	pop	{r7}
 800522a:	4770      	bx	lr
 800522c:	20000f38 	.word	0x20000f38

08005230 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005230:	b580      	push	{r7, lr}
 8005232:	b086      	sub	sp, #24
 8005234:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005236:	2300      	movs	r3, #0
 8005238:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800523a:	4b51      	ldr	r3, [pc, #324]	; (8005380 <xTaskIncrementTick+0x150>)
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	2b00      	cmp	r3, #0
 8005240:	f040 808e 	bne.w	8005360 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005244:	4b4f      	ldr	r3, [pc, #316]	; (8005384 <xTaskIncrementTick+0x154>)
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	3301      	adds	r3, #1
 800524a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800524c:	4a4d      	ldr	r2, [pc, #308]	; (8005384 <xTaskIncrementTick+0x154>)
 800524e:	693b      	ldr	r3, [r7, #16]
 8005250:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005252:	693b      	ldr	r3, [r7, #16]
 8005254:	2b00      	cmp	r3, #0
 8005256:	d120      	bne.n	800529a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8005258:	4b4b      	ldr	r3, [pc, #300]	; (8005388 <xTaskIncrementTick+0x158>)
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	2b00      	cmp	r3, #0
 8005260:	d00a      	beq.n	8005278 <xTaskIncrementTick+0x48>
	__asm volatile
 8005262:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005266:	f383 8811 	msr	BASEPRI, r3
 800526a:	f3bf 8f6f 	isb	sy
 800526e:	f3bf 8f4f 	dsb	sy
 8005272:	603b      	str	r3, [r7, #0]
}
 8005274:	bf00      	nop
 8005276:	e7fe      	b.n	8005276 <xTaskIncrementTick+0x46>
 8005278:	4b43      	ldr	r3, [pc, #268]	; (8005388 <xTaskIncrementTick+0x158>)
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	60fb      	str	r3, [r7, #12]
 800527e:	4b43      	ldr	r3, [pc, #268]	; (800538c <xTaskIncrementTick+0x15c>)
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	4a41      	ldr	r2, [pc, #260]	; (8005388 <xTaskIncrementTick+0x158>)
 8005284:	6013      	str	r3, [r2, #0]
 8005286:	4a41      	ldr	r2, [pc, #260]	; (800538c <xTaskIncrementTick+0x15c>)
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	6013      	str	r3, [r2, #0]
 800528c:	4b40      	ldr	r3, [pc, #256]	; (8005390 <xTaskIncrementTick+0x160>)
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	3301      	adds	r3, #1
 8005292:	4a3f      	ldr	r2, [pc, #252]	; (8005390 <xTaskIncrementTick+0x160>)
 8005294:	6013      	str	r3, [r2, #0]
 8005296:	f000 fadf 	bl	8005858 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800529a:	4b3e      	ldr	r3, [pc, #248]	; (8005394 <xTaskIncrementTick+0x164>)
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	693a      	ldr	r2, [r7, #16]
 80052a0:	429a      	cmp	r2, r3
 80052a2:	d34e      	bcc.n	8005342 <xTaskIncrementTick+0x112>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80052a4:	4b38      	ldr	r3, [pc, #224]	; (8005388 <xTaskIncrementTick+0x158>)
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d101      	bne.n	80052b2 <xTaskIncrementTick+0x82>
 80052ae:	2301      	movs	r3, #1
 80052b0:	e000      	b.n	80052b4 <xTaskIncrementTick+0x84>
 80052b2:	2300      	movs	r3, #0
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d004      	beq.n	80052c2 <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80052b8:	4b36      	ldr	r3, [pc, #216]	; (8005394 <xTaskIncrementTick+0x164>)
 80052ba:	f04f 32ff 	mov.w	r2, #4294967295
 80052be:	601a      	str	r2, [r3, #0]
					break;
 80052c0:	e03f      	b.n	8005342 <xTaskIncrementTick+0x112>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80052c2:	4b31      	ldr	r3, [pc, #196]	; (8005388 <xTaskIncrementTick+0x158>)
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	68db      	ldr	r3, [r3, #12]
 80052c8:	68db      	ldr	r3, [r3, #12]
 80052ca:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80052cc:	68bb      	ldr	r3, [r7, #8]
 80052ce:	685b      	ldr	r3, [r3, #4]
 80052d0:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80052d2:	693a      	ldr	r2, [r7, #16]
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	429a      	cmp	r2, r3
 80052d8:	d203      	bcs.n	80052e2 <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80052da:	4a2e      	ldr	r2, [pc, #184]	; (8005394 <xTaskIncrementTick+0x164>)
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	6013      	str	r3, [r2, #0]
						break;
 80052e0:	e02f      	b.n	8005342 <xTaskIncrementTick+0x112>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80052e2:	68bb      	ldr	r3, [r7, #8]
 80052e4:	3304      	adds	r3, #4
 80052e6:	4618      	mov	r0, r3
 80052e8:	f7fe ff08 	bl	80040fc <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80052ec:	68bb      	ldr	r3, [r7, #8]
 80052ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d004      	beq.n	80052fe <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80052f4:	68bb      	ldr	r3, [r7, #8]
 80052f6:	3318      	adds	r3, #24
 80052f8:	4618      	mov	r0, r3
 80052fa:	f7fe feff 	bl	80040fc <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80052fe:	68bb      	ldr	r3, [r7, #8]
 8005300:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005302:	4b25      	ldr	r3, [pc, #148]	; (8005398 <xTaskIncrementTick+0x168>)
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	429a      	cmp	r2, r3
 8005308:	d903      	bls.n	8005312 <xTaskIncrementTick+0xe2>
 800530a:	68bb      	ldr	r3, [r7, #8]
 800530c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800530e:	4a22      	ldr	r2, [pc, #136]	; (8005398 <xTaskIncrementTick+0x168>)
 8005310:	6013      	str	r3, [r2, #0]
 8005312:	68bb      	ldr	r3, [r7, #8]
 8005314:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005316:	4613      	mov	r3, r2
 8005318:	009b      	lsls	r3, r3, #2
 800531a:	4413      	add	r3, r2
 800531c:	009b      	lsls	r3, r3, #2
 800531e:	4a1f      	ldr	r2, [pc, #124]	; (800539c <xTaskIncrementTick+0x16c>)
 8005320:	441a      	add	r2, r3
 8005322:	68bb      	ldr	r3, [r7, #8]
 8005324:	3304      	adds	r3, #4
 8005326:	4619      	mov	r1, r3
 8005328:	4610      	mov	r0, r2
 800532a:	f7fe fe8c 	bl	8004046 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800532e:	68bb      	ldr	r3, [r7, #8]
 8005330:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005332:	4b1b      	ldr	r3, [pc, #108]	; (80053a0 <xTaskIncrementTick+0x170>)
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005338:	429a      	cmp	r2, r3
 800533a:	d3b3      	bcc.n	80052a4 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800533c:	2301      	movs	r3, #1
 800533e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005340:	e7b0      	b.n	80052a4 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005342:	4b17      	ldr	r3, [pc, #92]	; (80053a0 <xTaskIncrementTick+0x170>)
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005348:	4914      	ldr	r1, [pc, #80]	; (800539c <xTaskIncrementTick+0x16c>)
 800534a:	4613      	mov	r3, r2
 800534c:	009b      	lsls	r3, r3, #2
 800534e:	4413      	add	r3, r2
 8005350:	009b      	lsls	r3, r3, #2
 8005352:	440b      	add	r3, r1
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	2b01      	cmp	r3, #1
 8005358:	d907      	bls.n	800536a <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800535a:	2301      	movs	r3, #1
 800535c:	617b      	str	r3, [r7, #20]
 800535e:	e004      	b.n	800536a <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8005360:	4b10      	ldr	r3, [pc, #64]	; (80053a4 <xTaskIncrementTick+0x174>)
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	3301      	adds	r3, #1
 8005366:	4a0f      	ldr	r2, [pc, #60]	; (80053a4 <xTaskIncrementTick+0x174>)
 8005368:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800536a:	4b0f      	ldr	r3, [pc, #60]	; (80053a8 <xTaskIncrementTick+0x178>)
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	2b00      	cmp	r3, #0
 8005370:	d001      	beq.n	8005376 <xTaskIncrementTick+0x146>
		{
			xSwitchRequired = pdTRUE;
 8005372:	2301      	movs	r3, #1
 8005374:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8005376:	697b      	ldr	r3, [r7, #20]
}
 8005378:	4618      	mov	r0, r3
 800537a:	3718      	adds	r7, #24
 800537c:	46bd      	mov	sp, r7
 800537e:	bd80      	pop	{r7, pc}
 8005380:	20000f5c 	.word	0x20000f5c
 8005384:	20000f38 	.word	0x20000f38
 8005388:	20000eec 	.word	0x20000eec
 800538c:	20000ef0 	.word	0x20000ef0
 8005390:	20000f4c 	.word	0x20000f4c
 8005394:	20000f54 	.word	0x20000f54
 8005398:	20000f3c 	.word	0x20000f3c
 800539c:	20000a64 	.word	0x20000a64
 80053a0:	20000a60 	.word	0x20000a60
 80053a4:	20000f44 	.word	0x20000f44
 80053a8:	20000f48 	.word	0x20000f48

080053ac <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80053ac:	b480      	push	{r7}
 80053ae:	b085      	sub	sp, #20
 80053b0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80053b2:	4b2a      	ldr	r3, [pc, #168]	; (800545c <vTaskSwitchContext+0xb0>)
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d003      	beq.n	80053c2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80053ba:	4b29      	ldr	r3, [pc, #164]	; (8005460 <vTaskSwitchContext+0xb4>)
 80053bc:	2201      	movs	r2, #1
 80053be:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80053c0:	e046      	b.n	8005450 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 80053c2:	4b27      	ldr	r3, [pc, #156]	; (8005460 <vTaskSwitchContext+0xb4>)
 80053c4:	2200      	movs	r2, #0
 80053c6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80053c8:	4b26      	ldr	r3, [pc, #152]	; (8005464 <vTaskSwitchContext+0xb8>)
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	60fb      	str	r3, [r7, #12]
 80053ce:	e010      	b.n	80053f2 <vTaskSwitchContext+0x46>
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d10a      	bne.n	80053ec <vTaskSwitchContext+0x40>
	__asm volatile
 80053d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053da:	f383 8811 	msr	BASEPRI, r3
 80053de:	f3bf 8f6f 	isb	sy
 80053e2:	f3bf 8f4f 	dsb	sy
 80053e6:	607b      	str	r3, [r7, #4]
}
 80053e8:	bf00      	nop
 80053ea:	e7fe      	b.n	80053ea <vTaskSwitchContext+0x3e>
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	3b01      	subs	r3, #1
 80053f0:	60fb      	str	r3, [r7, #12]
 80053f2:	491d      	ldr	r1, [pc, #116]	; (8005468 <vTaskSwitchContext+0xbc>)
 80053f4:	68fa      	ldr	r2, [r7, #12]
 80053f6:	4613      	mov	r3, r2
 80053f8:	009b      	lsls	r3, r3, #2
 80053fa:	4413      	add	r3, r2
 80053fc:	009b      	lsls	r3, r3, #2
 80053fe:	440b      	add	r3, r1
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	2b00      	cmp	r3, #0
 8005404:	d0e4      	beq.n	80053d0 <vTaskSwitchContext+0x24>
 8005406:	68fa      	ldr	r2, [r7, #12]
 8005408:	4613      	mov	r3, r2
 800540a:	009b      	lsls	r3, r3, #2
 800540c:	4413      	add	r3, r2
 800540e:	009b      	lsls	r3, r3, #2
 8005410:	4a15      	ldr	r2, [pc, #84]	; (8005468 <vTaskSwitchContext+0xbc>)
 8005412:	4413      	add	r3, r2
 8005414:	60bb      	str	r3, [r7, #8]
 8005416:	68bb      	ldr	r3, [r7, #8]
 8005418:	685b      	ldr	r3, [r3, #4]
 800541a:	685a      	ldr	r2, [r3, #4]
 800541c:	68bb      	ldr	r3, [r7, #8]
 800541e:	605a      	str	r2, [r3, #4]
 8005420:	68bb      	ldr	r3, [r7, #8]
 8005422:	685a      	ldr	r2, [r3, #4]
 8005424:	68bb      	ldr	r3, [r7, #8]
 8005426:	3308      	adds	r3, #8
 8005428:	429a      	cmp	r2, r3
 800542a:	d104      	bne.n	8005436 <vTaskSwitchContext+0x8a>
 800542c:	68bb      	ldr	r3, [r7, #8]
 800542e:	685b      	ldr	r3, [r3, #4]
 8005430:	685a      	ldr	r2, [r3, #4]
 8005432:	68bb      	ldr	r3, [r7, #8]
 8005434:	605a      	str	r2, [r3, #4]
 8005436:	68bb      	ldr	r3, [r7, #8]
 8005438:	685b      	ldr	r3, [r3, #4]
 800543a:	68db      	ldr	r3, [r3, #12]
 800543c:	4a0b      	ldr	r2, [pc, #44]	; (800546c <vTaskSwitchContext+0xc0>)
 800543e:	6013      	str	r3, [r2, #0]
 8005440:	4a08      	ldr	r2, [pc, #32]	; (8005464 <vTaskSwitchContext+0xb8>)
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005446:	4b09      	ldr	r3, [pc, #36]	; (800546c <vTaskSwitchContext+0xc0>)
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	3354      	adds	r3, #84	; 0x54
 800544c:	4a08      	ldr	r2, [pc, #32]	; (8005470 <vTaskSwitchContext+0xc4>)
 800544e:	6013      	str	r3, [r2, #0]
}
 8005450:	bf00      	nop
 8005452:	3714      	adds	r7, #20
 8005454:	46bd      	mov	sp, r7
 8005456:	bc80      	pop	{r7}
 8005458:	4770      	bx	lr
 800545a:	bf00      	nop
 800545c:	20000f5c 	.word	0x20000f5c
 8005460:	20000f48 	.word	0x20000f48
 8005464:	20000f3c 	.word	0x20000f3c
 8005468:	20000a64 	.word	0x20000a64
 800546c:	20000a60 	.word	0x20000a60
 8005470:	2000001c 	.word	0x2000001c

08005474 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8005474:	b580      	push	{r7, lr}
 8005476:	b084      	sub	sp, #16
 8005478:	af00      	add	r7, sp, #0
 800547a:	6078      	str	r0, [r7, #4]
 800547c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	2b00      	cmp	r3, #0
 8005482:	d10a      	bne.n	800549a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8005484:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005488:	f383 8811 	msr	BASEPRI, r3
 800548c:	f3bf 8f6f 	isb	sy
 8005490:	f3bf 8f4f 	dsb	sy
 8005494:	60fb      	str	r3, [r7, #12]
}
 8005496:	bf00      	nop
 8005498:	e7fe      	b.n	8005498 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800549a:	4b07      	ldr	r3, [pc, #28]	; (80054b8 <vTaskPlaceOnEventList+0x44>)
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	3318      	adds	r3, #24
 80054a0:	4619      	mov	r1, r3
 80054a2:	6878      	ldr	r0, [r7, #4]
 80054a4:	f7fe fdf2 	bl	800408c <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80054a8:	2101      	movs	r1, #1
 80054aa:	6838      	ldr	r0, [r7, #0]
 80054ac:	f000 fa84 	bl	80059b8 <prvAddCurrentTaskToDelayedList>
}
 80054b0:	bf00      	nop
 80054b2:	3710      	adds	r7, #16
 80054b4:	46bd      	mov	sp, r7
 80054b6:	bd80      	pop	{r7, pc}
 80054b8:	20000a60 	.word	0x20000a60

080054bc <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80054bc:	b580      	push	{r7, lr}
 80054be:	b086      	sub	sp, #24
 80054c0:	af00      	add	r7, sp, #0
 80054c2:	60f8      	str	r0, [r7, #12]
 80054c4:	60b9      	str	r1, [r7, #8]
 80054c6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d10a      	bne.n	80054e4 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 80054ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054d2:	f383 8811 	msr	BASEPRI, r3
 80054d6:	f3bf 8f6f 	isb	sy
 80054da:	f3bf 8f4f 	dsb	sy
 80054de:	617b      	str	r3, [r7, #20]
}
 80054e0:	bf00      	nop
 80054e2:	e7fe      	b.n	80054e2 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80054e4:	4b0a      	ldr	r3, [pc, #40]	; (8005510 <vTaskPlaceOnEventListRestricted+0x54>)
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	3318      	adds	r3, #24
 80054ea:	4619      	mov	r1, r3
 80054ec:	68f8      	ldr	r0, [r7, #12]
 80054ee:	f7fe fdaa 	bl	8004046 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d002      	beq.n	80054fe <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 80054f8:	f04f 33ff 	mov.w	r3, #4294967295
 80054fc:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80054fe:	6879      	ldr	r1, [r7, #4]
 8005500:	68b8      	ldr	r0, [r7, #8]
 8005502:	f000 fa59 	bl	80059b8 <prvAddCurrentTaskToDelayedList>
	}
 8005506:	bf00      	nop
 8005508:	3718      	adds	r7, #24
 800550a:	46bd      	mov	sp, r7
 800550c:	bd80      	pop	{r7, pc}
 800550e:	bf00      	nop
 8005510:	20000a60 	.word	0x20000a60

08005514 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005514:	b580      	push	{r7, lr}
 8005516:	b086      	sub	sp, #24
 8005518:	af00      	add	r7, sp, #0
 800551a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	68db      	ldr	r3, [r3, #12]
 8005520:	68db      	ldr	r3, [r3, #12]
 8005522:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8005524:	693b      	ldr	r3, [r7, #16]
 8005526:	2b00      	cmp	r3, #0
 8005528:	d10a      	bne.n	8005540 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800552a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800552e:	f383 8811 	msr	BASEPRI, r3
 8005532:	f3bf 8f6f 	isb	sy
 8005536:	f3bf 8f4f 	dsb	sy
 800553a:	60fb      	str	r3, [r7, #12]
}
 800553c:	bf00      	nop
 800553e:	e7fe      	b.n	800553e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005540:	693b      	ldr	r3, [r7, #16]
 8005542:	3318      	adds	r3, #24
 8005544:	4618      	mov	r0, r3
 8005546:	f7fe fdd9 	bl	80040fc <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800554a:	4b1e      	ldr	r3, [pc, #120]	; (80055c4 <xTaskRemoveFromEventList+0xb0>)
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	2b00      	cmp	r3, #0
 8005550:	d11d      	bne.n	800558e <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005552:	693b      	ldr	r3, [r7, #16]
 8005554:	3304      	adds	r3, #4
 8005556:	4618      	mov	r0, r3
 8005558:	f7fe fdd0 	bl	80040fc <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800555c:	693b      	ldr	r3, [r7, #16]
 800555e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005560:	4b19      	ldr	r3, [pc, #100]	; (80055c8 <xTaskRemoveFromEventList+0xb4>)
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	429a      	cmp	r2, r3
 8005566:	d903      	bls.n	8005570 <xTaskRemoveFromEventList+0x5c>
 8005568:	693b      	ldr	r3, [r7, #16]
 800556a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800556c:	4a16      	ldr	r2, [pc, #88]	; (80055c8 <xTaskRemoveFromEventList+0xb4>)
 800556e:	6013      	str	r3, [r2, #0]
 8005570:	693b      	ldr	r3, [r7, #16]
 8005572:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005574:	4613      	mov	r3, r2
 8005576:	009b      	lsls	r3, r3, #2
 8005578:	4413      	add	r3, r2
 800557a:	009b      	lsls	r3, r3, #2
 800557c:	4a13      	ldr	r2, [pc, #76]	; (80055cc <xTaskRemoveFromEventList+0xb8>)
 800557e:	441a      	add	r2, r3
 8005580:	693b      	ldr	r3, [r7, #16]
 8005582:	3304      	adds	r3, #4
 8005584:	4619      	mov	r1, r3
 8005586:	4610      	mov	r0, r2
 8005588:	f7fe fd5d 	bl	8004046 <vListInsertEnd>
 800558c:	e005      	b.n	800559a <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800558e:	693b      	ldr	r3, [r7, #16]
 8005590:	3318      	adds	r3, #24
 8005592:	4619      	mov	r1, r3
 8005594:	480e      	ldr	r0, [pc, #56]	; (80055d0 <xTaskRemoveFromEventList+0xbc>)
 8005596:	f7fe fd56 	bl	8004046 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800559a:	693b      	ldr	r3, [r7, #16]
 800559c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800559e:	4b0d      	ldr	r3, [pc, #52]	; (80055d4 <xTaskRemoveFromEventList+0xc0>)
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055a4:	429a      	cmp	r2, r3
 80055a6:	d905      	bls.n	80055b4 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80055a8:	2301      	movs	r3, #1
 80055aa:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80055ac:	4b0a      	ldr	r3, [pc, #40]	; (80055d8 <xTaskRemoveFromEventList+0xc4>)
 80055ae:	2201      	movs	r2, #1
 80055b0:	601a      	str	r2, [r3, #0]
 80055b2:	e001      	b.n	80055b8 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80055b4:	2300      	movs	r3, #0
 80055b6:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 80055b8:	697b      	ldr	r3, [r7, #20]
}
 80055ba:	4618      	mov	r0, r3
 80055bc:	3718      	adds	r7, #24
 80055be:	46bd      	mov	sp, r7
 80055c0:	bd80      	pop	{r7, pc}
 80055c2:	bf00      	nop
 80055c4:	20000f5c 	.word	0x20000f5c
 80055c8:	20000f3c 	.word	0x20000f3c
 80055cc:	20000a64 	.word	0x20000a64
 80055d0:	20000ef4 	.word	0x20000ef4
 80055d4:	20000a60 	.word	0x20000a60
 80055d8:	20000f48 	.word	0x20000f48

080055dc <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80055dc:	b480      	push	{r7}
 80055de:	b083      	sub	sp, #12
 80055e0:	af00      	add	r7, sp, #0
 80055e2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80055e4:	4b06      	ldr	r3, [pc, #24]	; (8005600 <vTaskInternalSetTimeOutState+0x24>)
 80055e6:	681a      	ldr	r2, [r3, #0]
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80055ec:	4b05      	ldr	r3, [pc, #20]	; (8005604 <vTaskInternalSetTimeOutState+0x28>)
 80055ee:	681a      	ldr	r2, [r3, #0]
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	605a      	str	r2, [r3, #4]
}
 80055f4:	bf00      	nop
 80055f6:	370c      	adds	r7, #12
 80055f8:	46bd      	mov	sp, r7
 80055fa:	bc80      	pop	{r7}
 80055fc:	4770      	bx	lr
 80055fe:	bf00      	nop
 8005600:	20000f4c 	.word	0x20000f4c
 8005604:	20000f38 	.word	0x20000f38

08005608 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8005608:	b580      	push	{r7, lr}
 800560a:	b088      	sub	sp, #32
 800560c:	af00      	add	r7, sp, #0
 800560e:	6078      	str	r0, [r7, #4]
 8005610:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	2b00      	cmp	r3, #0
 8005616:	d10a      	bne.n	800562e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8005618:	f04f 0350 	mov.w	r3, #80	; 0x50
 800561c:	f383 8811 	msr	BASEPRI, r3
 8005620:	f3bf 8f6f 	isb	sy
 8005624:	f3bf 8f4f 	dsb	sy
 8005628:	613b      	str	r3, [r7, #16]
}
 800562a:	bf00      	nop
 800562c:	e7fe      	b.n	800562c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800562e:	683b      	ldr	r3, [r7, #0]
 8005630:	2b00      	cmp	r3, #0
 8005632:	d10a      	bne.n	800564a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8005634:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005638:	f383 8811 	msr	BASEPRI, r3
 800563c:	f3bf 8f6f 	isb	sy
 8005640:	f3bf 8f4f 	dsb	sy
 8005644:	60fb      	str	r3, [r7, #12]
}
 8005646:	bf00      	nop
 8005648:	e7fe      	b.n	8005648 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800564a:	f000 fe0f 	bl	800626c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800564e:	4b1d      	ldr	r3, [pc, #116]	; (80056c4 <xTaskCheckForTimeOut+0xbc>)
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	685b      	ldr	r3, [r3, #4]
 8005658:	69ba      	ldr	r2, [r7, #24]
 800565a:	1ad3      	subs	r3, r2, r3
 800565c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800565e:	683b      	ldr	r3, [r7, #0]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005666:	d102      	bne.n	800566e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005668:	2300      	movs	r3, #0
 800566a:	61fb      	str	r3, [r7, #28]
 800566c:	e023      	b.n	80056b6 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	681a      	ldr	r2, [r3, #0]
 8005672:	4b15      	ldr	r3, [pc, #84]	; (80056c8 <xTaskCheckForTimeOut+0xc0>)
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	429a      	cmp	r2, r3
 8005678:	d007      	beq.n	800568a <xTaskCheckForTimeOut+0x82>
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	685b      	ldr	r3, [r3, #4]
 800567e:	69ba      	ldr	r2, [r7, #24]
 8005680:	429a      	cmp	r2, r3
 8005682:	d302      	bcc.n	800568a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005684:	2301      	movs	r3, #1
 8005686:	61fb      	str	r3, [r7, #28]
 8005688:	e015      	b.n	80056b6 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800568a:	683b      	ldr	r3, [r7, #0]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	697a      	ldr	r2, [r7, #20]
 8005690:	429a      	cmp	r2, r3
 8005692:	d20b      	bcs.n	80056ac <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005694:	683b      	ldr	r3, [r7, #0]
 8005696:	681a      	ldr	r2, [r3, #0]
 8005698:	697b      	ldr	r3, [r7, #20]
 800569a:	1ad2      	subs	r2, r2, r3
 800569c:	683b      	ldr	r3, [r7, #0]
 800569e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80056a0:	6878      	ldr	r0, [r7, #4]
 80056a2:	f7ff ff9b 	bl	80055dc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80056a6:	2300      	movs	r3, #0
 80056a8:	61fb      	str	r3, [r7, #28]
 80056aa:	e004      	b.n	80056b6 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80056ac:	683b      	ldr	r3, [r7, #0]
 80056ae:	2200      	movs	r2, #0
 80056b0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80056b2:	2301      	movs	r3, #1
 80056b4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80056b6:	f000 fe09 	bl	80062cc <vPortExitCritical>

	return xReturn;
 80056ba:	69fb      	ldr	r3, [r7, #28]
}
 80056bc:	4618      	mov	r0, r3
 80056be:	3720      	adds	r7, #32
 80056c0:	46bd      	mov	sp, r7
 80056c2:	bd80      	pop	{r7, pc}
 80056c4:	20000f38 	.word	0x20000f38
 80056c8:	20000f4c 	.word	0x20000f4c

080056cc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80056cc:	b480      	push	{r7}
 80056ce:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80056d0:	4b03      	ldr	r3, [pc, #12]	; (80056e0 <vTaskMissedYield+0x14>)
 80056d2:	2201      	movs	r2, #1
 80056d4:	601a      	str	r2, [r3, #0]
}
 80056d6:	bf00      	nop
 80056d8:	46bd      	mov	sp, r7
 80056da:	bc80      	pop	{r7}
 80056dc:	4770      	bx	lr
 80056de:	bf00      	nop
 80056e0:	20000f48 	.word	0x20000f48

080056e4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80056e4:	b580      	push	{r7, lr}
 80056e6:	b082      	sub	sp, #8
 80056e8:	af00      	add	r7, sp, #0
 80056ea:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80056ec:	f000 f852 	bl	8005794 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80056f0:	4b06      	ldr	r3, [pc, #24]	; (800570c <prvIdleTask+0x28>)
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	2b01      	cmp	r3, #1
 80056f6:	d9f9      	bls.n	80056ec <prvIdleTask+0x8>
			{
				taskYIELD();
 80056f8:	4b05      	ldr	r3, [pc, #20]	; (8005710 <prvIdleTask+0x2c>)
 80056fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80056fe:	601a      	str	r2, [r3, #0]
 8005700:	f3bf 8f4f 	dsb	sy
 8005704:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005708:	e7f0      	b.n	80056ec <prvIdleTask+0x8>
 800570a:	bf00      	nop
 800570c:	20000a64 	.word	0x20000a64
 8005710:	e000ed04 	.word	0xe000ed04

08005714 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005714:	b580      	push	{r7, lr}
 8005716:	b082      	sub	sp, #8
 8005718:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800571a:	2300      	movs	r3, #0
 800571c:	607b      	str	r3, [r7, #4]
 800571e:	e00c      	b.n	800573a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005720:	687a      	ldr	r2, [r7, #4]
 8005722:	4613      	mov	r3, r2
 8005724:	009b      	lsls	r3, r3, #2
 8005726:	4413      	add	r3, r2
 8005728:	009b      	lsls	r3, r3, #2
 800572a:	4a12      	ldr	r2, [pc, #72]	; (8005774 <prvInitialiseTaskLists+0x60>)
 800572c:	4413      	add	r3, r2
 800572e:	4618      	mov	r0, r3
 8005730:	f7fe fc5e 	bl	8003ff0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	3301      	adds	r3, #1
 8005738:	607b      	str	r3, [r7, #4]
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	2b37      	cmp	r3, #55	; 0x37
 800573e:	d9ef      	bls.n	8005720 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005740:	480d      	ldr	r0, [pc, #52]	; (8005778 <prvInitialiseTaskLists+0x64>)
 8005742:	f7fe fc55 	bl	8003ff0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005746:	480d      	ldr	r0, [pc, #52]	; (800577c <prvInitialiseTaskLists+0x68>)
 8005748:	f7fe fc52 	bl	8003ff0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800574c:	480c      	ldr	r0, [pc, #48]	; (8005780 <prvInitialiseTaskLists+0x6c>)
 800574e:	f7fe fc4f 	bl	8003ff0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005752:	480c      	ldr	r0, [pc, #48]	; (8005784 <prvInitialiseTaskLists+0x70>)
 8005754:	f7fe fc4c 	bl	8003ff0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005758:	480b      	ldr	r0, [pc, #44]	; (8005788 <prvInitialiseTaskLists+0x74>)
 800575a:	f7fe fc49 	bl	8003ff0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800575e:	4b0b      	ldr	r3, [pc, #44]	; (800578c <prvInitialiseTaskLists+0x78>)
 8005760:	4a05      	ldr	r2, [pc, #20]	; (8005778 <prvInitialiseTaskLists+0x64>)
 8005762:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005764:	4b0a      	ldr	r3, [pc, #40]	; (8005790 <prvInitialiseTaskLists+0x7c>)
 8005766:	4a05      	ldr	r2, [pc, #20]	; (800577c <prvInitialiseTaskLists+0x68>)
 8005768:	601a      	str	r2, [r3, #0]
}
 800576a:	bf00      	nop
 800576c:	3708      	adds	r7, #8
 800576e:	46bd      	mov	sp, r7
 8005770:	bd80      	pop	{r7, pc}
 8005772:	bf00      	nop
 8005774:	20000a64 	.word	0x20000a64
 8005778:	20000ec4 	.word	0x20000ec4
 800577c:	20000ed8 	.word	0x20000ed8
 8005780:	20000ef4 	.word	0x20000ef4
 8005784:	20000f08 	.word	0x20000f08
 8005788:	20000f20 	.word	0x20000f20
 800578c:	20000eec 	.word	0x20000eec
 8005790:	20000ef0 	.word	0x20000ef0

08005794 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005794:	b580      	push	{r7, lr}
 8005796:	b082      	sub	sp, #8
 8005798:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800579a:	e019      	b.n	80057d0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800579c:	f000 fd66 	bl	800626c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 80057a0:	4b10      	ldr	r3, [pc, #64]	; (80057e4 <prvCheckTasksWaitingTermination+0x50>)
 80057a2:	68db      	ldr	r3, [r3, #12]
 80057a4:	68db      	ldr	r3, [r3, #12]
 80057a6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	3304      	adds	r3, #4
 80057ac:	4618      	mov	r0, r3
 80057ae:	f7fe fca5 	bl	80040fc <uxListRemove>
				--uxCurrentNumberOfTasks;
 80057b2:	4b0d      	ldr	r3, [pc, #52]	; (80057e8 <prvCheckTasksWaitingTermination+0x54>)
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	3b01      	subs	r3, #1
 80057b8:	4a0b      	ldr	r2, [pc, #44]	; (80057e8 <prvCheckTasksWaitingTermination+0x54>)
 80057ba:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80057bc:	4b0b      	ldr	r3, [pc, #44]	; (80057ec <prvCheckTasksWaitingTermination+0x58>)
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	3b01      	subs	r3, #1
 80057c2:	4a0a      	ldr	r2, [pc, #40]	; (80057ec <prvCheckTasksWaitingTermination+0x58>)
 80057c4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80057c6:	f000 fd81 	bl	80062cc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80057ca:	6878      	ldr	r0, [r7, #4]
 80057cc:	f000 f810 	bl	80057f0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80057d0:	4b06      	ldr	r3, [pc, #24]	; (80057ec <prvCheckTasksWaitingTermination+0x58>)
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d1e1      	bne.n	800579c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80057d8:	bf00      	nop
 80057da:	bf00      	nop
 80057dc:	3708      	adds	r7, #8
 80057de:	46bd      	mov	sp, r7
 80057e0:	bd80      	pop	{r7, pc}
 80057e2:	bf00      	nop
 80057e4:	20000f08 	.word	0x20000f08
 80057e8:	20000f34 	.word	0x20000f34
 80057ec:	20000f1c 	.word	0x20000f1c

080057f0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80057f0:	b580      	push	{r7, lr}
 80057f2:	b084      	sub	sp, #16
 80057f4:	af00      	add	r7, sp, #0
 80057f6:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	3354      	adds	r3, #84	; 0x54
 80057fc:	4618      	mov	r0, r3
 80057fe:	f001 f8f1 	bl	80069e4 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8005808:	2b00      	cmp	r3, #0
 800580a:	d108      	bne.n	800581e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005810:	4618      	mov	r0, r3
 8005812:	f000 feef 	bl	80065f4 <vPortFree>
				vPortFree( pxTCB );
 8005816:	6878      	ldr	r0, [r7, #4]
 8005818:	f000 feec 	bl	80065f4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800581c:	e018      	b.n	8005850 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8005824:	2b01      	cmp	r3, #1
 8005826:	d103      	bne.n	8005830 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8005828:	6878      	ldr	r0, [r7, #4]
 800582a:	f000 fee3 	bl	80065f4 <vPortFree>
	}
 800582e:	e00f      	b.n	8005850 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8005836:	2b02      	cmp	r3, #2
 8005838:	d00a      	beq.n	8005850 <prvDeleteTCB+0x60>
	__asm volatile
 800583a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800583e:	f383 8811 	msr	BASEPRI, r3
 8005842:	f3bf 8f6f 	isb	sy
 8005846:	f3bf 8f4f 	dsb	sy
 800584a:	60fb      	str	r3, [r7, #12]
}
 800584c:	bf00      	nop
 800584e:	e7fe      	b.n	800584e <prvDeleteTCB+0x5e>
	}
 8005850:	bf00      	nop
 8005852:	3710      	adds	r7, #16
 8005854:	46bd      	mov	sp, r7
 8005856:	bd80      	pop	{r7, pc}

08005858 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005858:	b480      	push	{r7}
 800585a:	b083      	sub	sp, #12
 800585c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800585e:	4b0e      	ldr	r3, [pc, #56]	; (8005898 <prvResetNextTaskUnblockTime+0x40>)
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	2b00      	cmp	r3, #0
 8005866:	d101      	bne.n	800586c <prvResetNextTaskUnblockTime+0x14>
 8005868:	2301      	movs	r3, #1
 800586a:	e000      	b.n	800586e <prvResetNextTaskUnblockTime+0x16>
 800586c:	2300      	movs	r3, #0
 800586e:	2b00      	cmp	r3, #0
 8005870:	d004      	beq.n	800587c <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005872:	4b0a      	ldr	r3, [pc, #40]	; (800589c <prvResetNextTaskUnblockTime+0x44>)
 8005874:	f04f 32ff 	mov.w	r2, #4294967295
 8005878:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800587a:	e008      	b.n	800588e <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800587c:	4b06      	ldr	r3, [pc, #24]	; (8005898 <prvResetNextTaskUnblockTime+0x40>)
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	68db      	ldr	r3, [r3, #12]
 8005882:	68db      	ldr	r3, [r3, #12]
 8005884:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	685b      	ldr	r3, [r3, #4]
 800588a:	4a04      	ldr	r2, [pc, #16]	; (800589c <prvResetNextTaskUnblockTime+0x44>)
 800588c:	6013      	str	r3, [r2, #0]
}
 800588e:	bf00      	nop
 8005890:	370c      	adds	r7, #12
 8005892:	46bd      	mov	sp, r7
 8005894:	bc80      	pop	{r7}
 8005896:	4770      	bx	lr
 8005898:	20000eec 	.word	0x20000eec
 800589c:	20000f54 	.word	0x20000f54

080058a0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80058a0:	b480      	push	{r7}
 80058a2:	b083      	sub	sp, #12
 80058a4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80058a6:	4b0b      	ldr	r3, [pc, #44]	; (80058d4 <xTaskGetSchedulerState+0x34>)
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d102      	bne.n	80058b4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80058ae:	2301      	movs	r3, #1
 80058b0:	607b      	str	r3, [r7, #4]
 80058b2:	e008      	b.n	80058c6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80058b4:	4b08      	ldr	r3, [pc, #32]	; (80058d8 <xTaskGetSchedulerState+0x38>)
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d102      	bne.n	80058c2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80058bc:	2302      	movs	r3, #2
 80058be:	607b      	str	r3, [r7, #4]
 80058c0:	e001      	b.n	80058c6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80058c2:	2300      	movs	r3, #0
 80058c4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80058c6:	687b      	ldr	r3, [r7, #4]
	}
 80058c8:	4618      	mov	r0, r3
 80058ca:	370c      	adds	r7, #12
 80058cc:	46bd      	mov	sp, r7
 80058ce:	bc80      	pop	{r7}
 80058d0:	4770      	bx	lr
 80058d2:	bf00      	nop
 80058d4:	20000f40 	.word	0x20000f40
 80058d8:	20000f5c 	.word	0x20000f5c

080058dc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80058dc:	b580      	push	{r7, lr}
 80058de:	b086      	sub	sp, #24
 80058e0:	af00      	add	r7, sp, #0
 80058e2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80058e8:	2300      	movs	r3, #0
 80058ea:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d056      	beq.n	80059a0 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80058f2:	4b2e      	ldr	r3, [pc, #184]	; (80059ac <xTaskPriorityDisinherit+0xd0>)
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	693a      	ldr	r2, [r7, #16]
 80058f8:	429a      	cmp	r2, r3
 80058fa:	d00a      	beq.n	8005912 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80058fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005900:	f383 8811 	msr	BASEPRI, r3
 8005904:	f3bf 8f6f 	isb	sy
 8005908:	f3bf 8f4f 	dsb	sy
 800590c:	60fb      	str	r3, [r7, #12]
}
 800590e:	bf00      	nop
 8005910:	e7fe      	b.n	8005910 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8005912:	693b      	ldr	r3, [r7, #16]
 8005914:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005916:	2b00      	cmp	r3, #0
 8005918:	d10a      	bne.n	8005930 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800591a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800591e:	f383 8811 	msr	BASEPRI, r3
 8005922:	f3bf 8f6f 	isb	sy
 8005926:	f3bf 8f4f 	dsb	sy
 800592a:	60bb      	str	r3, [r7, #8]
}
 800592c:	bf00      	nop
 800592e:	e7fe      	b.n	800592e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8005930:	693b      	ldr	r3, [r7, #16]
 8005932:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005934:	1e5a      	subs	r2, r3, #1
 8005936:	693b      	ldr	r3, [r7, #16]
 8005938:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800593a:	693b      	ldr	r3, [r7, #16]
 800593c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800593e:	693b      	ldr	r3, [r7, #16]
 8005940:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005942:	429a      	cmp	r2, r3
 8005944:	d02c      	beq.n	80059a0 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8005946:	693b      	ldr	r3, [r7, #16]
 8005948:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800594a:	2b00      	cmp	r3, #0
 800594c:	d128      	bne.n	80059a0 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800594e:	693b      	ldr	r3, [r7, #16]
 8005950:	3304      	adds	r3, #4
 8005952:	4618      	mov	r0, r3
 8005954:	f7fe fbd2 	bl	80040fc <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005958:	693b      	ldr	r3, [r7, #16]
 800595a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800595c:	693b      	ldr	r3, [r7, #16]
 800595e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005960:	693b      	ldr	r3, [r7, #16]
 8005962:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005964:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005968:	693b      	ldr	r3, [r7, #16]
 800596a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800596c:	693b      	ldr	r3, [r7, #16]
 800596e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005970:	4b0f      	ldr	r3, [pc, #60]	; (80059b0 <xTaskPriorityDisinherit+0xd4>)
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	429a      	cmp	r2, r3
 8005976:	d903      	bls.n	8005980 <xTaskPriorityDisinherit+0xa4>
 8005978:	693b      	ldr	r3, [r7, #16]
 800597a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800597c:	4a0c      	ldr	r2, [pc, #48]	; (80059b0 <xTaskPriorityDisinherit+0xd4>)
 800597e:	6013      	str	r3, [r2, #0]
 8005980:	693b      	ldr	r3, [r7, #16]
 8005982:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005984:	4613      	mov	r3, r2
 8005986:	009b      	lsls	r3, r3, #2
 8005988:	4413      	add	r3, r2
 800598a:	009b      	lsls	r3, r3, #2
 800598c:	4a09      	ldr	r2, [pc, #36]	; (80059b4 <xTaskPriorityDisinherit+0xd8>)
 800598e:	441a      	add	r2, r3
 8005990:	693b      	ldr	r3, [r7, #16]
 8005992:	3304      	adds	r3, #4
 8005994:	4619      	mov	r1, r3
 8005996:	4610      	mov	r0, r2
 8005998:	f7fe fb55 	bl	8004046 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800599c:	2301      	movs	r3, #1
 800599e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80059a0:	697b      	ldr	r3, [r7, #20]
	}
 80059a2:	4618      	mov	r0, r3
 80059a4:	3718      	adds	r7, #24
 80059a6:	46bd      	mov	sp, r7
 80059a8:	bd80      	pop	{r7, pc}
 80059aa:	bf00      	nop
 80059ac:	20000a60 	.word	0x20000a60
 80059b0:	20000f3c 	.word	0x20000f3c
 80059b4:	20000a64 	.word	0x20000a64

080059b8 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80059b8:	b580      	push	{r7, lr}
 80059ba:	b084      	sub	sp, #16
 80059bc:	af00      	add	r7, sp, #0
 80059be:	6078      	str	r0, [r7, #4]
 80059c0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80059c2:	4b21      	ldr	r3, [pc, #132]	; (8005a48 <prvAddCurrentTaskToDelayedList+0x90>)
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80059c8:	4b20      	ldr	r3, [pc, #128]	; (8005a4c <prvAddCurrentTaskToDelayedList+0x94>)
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	3304      	adds	r3, #4
 80059ce:	4618      	mov	r0, r3
 80059d0:	f7fe fb94 	bl	80040fc <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059da:	d10a      	bne.n	80059f2 <prvAddCurrentTaskToDelayedList+0x3a>
 80059dc:	683b      	ldr	r3, [r7, #0]
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d007      	beq.n	80059f2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80059e2:	4b1a      	ldr	r3, [pc, #104]	; (8005a4c <prvAddCurrentTaskToDelayedList+0x94>)
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	3304      	adds	r3, #4
 80059e8:	4619      	mov	r1, r3
 80059ea:	4819      	ldr	r0, [pc, #100]	; (8005a50 <prvAddCurrentTaskToDelayedList+0x98>)
 80059ec:	f7fe fb2b 	bl	8004046 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80059f0:	e026      	b.n	8005a40 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80059f2:	68fa      	ldr	r2, [r7, #12]
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	4413      	add	r3, r2
 80059f8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80059fa:	4b14      	ldr	r3, [pc, #80]	; (8005a4c <prvAddCurrentTaskToDelayedList+0x94>)
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	68ba      	ldr	r2, [r7, #8]
 8005a00:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005a02:	68ba      	ldr	r2, [r7, #8]
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	429a      	cmp	r2, r3
 8005a08:	d209      	bcs.n	8005a1e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005a0a:	4b12      	ldr	r3, [pc, #72]	; (8005a54 <prvAddCurrentTaskToDelayedList+0x9c>)
 8005a0c:	681a      	ldr	r2, [r3, #0]
 8005a0e:	4b0f      	ldr	r3, [pc, #60]	; (8005a4c <prvAddCurrentTaskToDelayedList+0x94>)
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	3304      	adds	r3, #4
 8005a14:	4619      	mov	r1, r3
 8005a16:	4610      	mov	r0, r2
 8005a18:	f7fe fb38 	bl	800408c <vListInsert>
}
 8005a1c:	e010      	b.n	8005a40 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005a1e:	4b0e      	ldr	r3, [pc, #56]	; (8005a58 <prvAddCurrentTaskToDelayedList+0xa0>)
 8005a20:	681a      	ldr	r2, [r3, #0]
 8005a22:	4b0a      	ldr	r3, [pc, #40]	; (8005a4c <prvAddCurrentTaskToDelayedList+0x94>)
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	3304      	adds	r3, #4
 8005a28:	4619      	mov	r1, r3
 8005a2a:	4610      	mov	r0, r2
 8005a2c:	f7fe fb2e 	bl	800408c <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005a30:	4b0a      	ldr	r3, [pc, #40]	; (8005a5c <prvAddCurrentTaskToDelayedList+0xa4>)
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	68ba      	ldr	r2, [r7, #8]
 8005a36:	429a      	cmp	r2, r3
 8005a38:	d202      	bcs.n	8005a40 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8005a3a:	4a08      	ldr	r2, [pc, #32]	; (8005a5c <prvAddCurrentTaskToDelayedList+0xa4>)
 8005a3c:	68bb      	ldr	r3, [r7, #8]
 8005a3e:	6013      	str	r3, [r2, #0]
}
 8005a40:	bf00      	nop
 8005a42:	3710      	adds	r7, #16
 8005a44:	46bd      	mov	sp, r7
 8005a46:	bd80      	pop	{r7, pc}
 8005a48:	20000f38 	.word	0x20000f38
 8005a4c:	20000a60 	.word	0x20000a60
 8005a50:	20000f20 	.word	0x20000f20
 8005a54:	20000ef0 	.word	0x20000ef0
 8005a58:	20000eec 	.word	0x20000eec
 8005a5c:	20000f54 	.word	0x20000f54

08005a60 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8005a60:	b580      	push	{r7, lr}
 8005a62:	b08a      	sub	sp, #40	; 0x28
 8005a64:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8005a66:	2300      	movs	r3, #0
 8005a68:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8005a6a:	f000 facb 	bl	8006004 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8005a6e:	4b1c      	ldr	r3, [pc, #112]	; (8005ae0 <xTimerCreateTimerTask+0x80>)
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d021      	beq.n	8005aba <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8005a76:	2300      	movs	r3, #0
 8005a78:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8005a7a:	2300      	movs	r3, #0
 8005a7c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8005a7e:	1d3a      	adds	r2, r7, #4
 8005a80:	f107 0108 	add.w	r1, r7, #8
 8005a84:	f107 030c 	add.w	r3, r7, #12
 8005a88:	4618      	mov	r0, r3
 8005a8a:	f7fe fa97 	bl	8003fbc <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8005a8e:	6879      	ldr	r1, [r7, #4]
 8005a90:	68bb      	ldr	r3, [r7, #8]
 8005a92:	68fa      	ldr	r2, [r7, #12]
 8005a94:	9202      	str	r2, [sp, #8]
 8005a96:	9301      	str	r3, [sp, #4]
 8005a98:	2302      	movs	r3, #2
 8005a9a:	9300      	str	r3, [sp, #0]
 8005a9c:	2300      	movs	r3, #0
 8005a9e:	460a      	mov	r2, r1
 8005aa0:	4910      	ldr	r1, [pc, #64]	; (8005ae4 <xTimerCreateTimerTask+0x84>)
 8005aa2:	4811      	ldr	r0, [pc, #68]	; (8005ae8 <xTimerCreateTimerTask+0x88>)
 8005aa4:	f7ff f838 	bl	8004b18 <xTaskCreateStatic>
 8005aa8:	4603      	mov	r3, r0
 8005aaa:	4a10      	ldr	r2, [pc, #64]	; (8005aec <xTimerCreateTimerTask+0x8c>)
 8005aac:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8005aae:	4b0f      	ldr	r3, [pc, #60]	; (8005aec <xTimerCreateTimerTask+0x8c>)
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d001      	beq.n	8005aba <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8005ab6:	2301      	movs	r3, #1
 8005ab8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8005aba:	697b      	ldr	r3, [r7, #20]
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d10a      	bne.n	8005ad6 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8005ac0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ac4:	f383 8811 	msr	BASEPRI, r3
 8005ac8:	f3bf 8f6f 	isb	sy
 8005acc:	f3bf 8f4f 	dsb	sy
 8005ad0:	613b      	str	r3, [r7, #16]
}
 8005ad2:	bf00      	nop
 8005ad4:	e7fe      	b.n	8005ad4 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8005ad6:	697b      	ldr	r3, [r7, #20]
}
 8005ad8:	4618      	mov	r0, r3
 8005ada:	3718      	adds	r7, #24
 8005adc:	46bd      	mov	sp, r7
 8005ade:	bd80      	pop	{r7, pc}
 8005ae0:	20000f90 	.word	0x20000f90
 8005ae4:	080073ac 	.word	0x080073ac
 8005ae8:	08005c0d 	.word	0x08005c0d
 8005aec:	20000f94 	.word	0x20000f94

08005af0 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8005af0:	b580      	push	{r7, lr}
 8005af2:	b08a      	sub	sp, #40	; 0x28
 8005af4:	af00      	add	r7, sp, #0
 8005af6:	60f8      	str	r0, [r7, #12]
 8005af8:	60b9      	str	r1, [r7, #8]
 8005afa:	607a      	str	r2, [r7, #4]
 8005afc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8005afe:	2300      	movs	r3, #0
 8005b00:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d10a      	bne.n	8005b1e <xTimerGenericCommand+0x2e>
	__asm volatile
 8005b08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b0c:	f383 8811 	msr	BASEPRI, r3
 8005b10:	f3bf 8f6f 	isb	sy
 8005b14:	f3bf 8f4f 	dsb	sy
 8005b18:	623b      	str	r3, [r7, #32]
}
 8005b1a:	bf00      	nop
 8005b1c:	e7fe      	b.n	8005b1c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8005b1e:	4b1a      	ldr	r3, [pc, #104]	; (8005b88 <xTimerGenericCommand+0x98>)
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d02a      	beq.n	8005b7c <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8005b26:	68bb      	ldr	r3, [r7, #8]
 8005b28:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8005b32:	68bb      	ldr	r3, [r7, #8]
 8005b34:	2b05      	cmp	r3, #5
 8005b36:	dc18      	bgt.n	8005b6a <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8005b38:	f7ff feb2 	bl	80058a0 <xTaskGetSchedulerState>
 8005b3c:	4603      	mov	r3, r0
 8005b3e:	2b02      	cmp	r3, #2
 8005b40:	d109      	bne.n	8005b56 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8005b42:	4b11      	ldr	r3, [pc, #68]	; (8005b88 <xTimerGenericCommand+0x98>)
 8005b44:	6818      	ldr	r0, [r3, #0]
 8005b46:	f107 0110 	add.w	r1, r7, #16
 8005b4a:	2300      	movs	r3, #0
 8005b4c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005b4e:	f7fe fc01 	bl	8004354 <xQueueGenericSend>
 8005b52:	6278      	str	r0, [r7, #36]	; 0x24
 8005b54:	e012      	b.n	8005b7c <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8005b56:	4b0c      	ldr	r3, [pc, #48]	; (8005b88 <xTimerGenericCommand+0x98>)
 8005b58:	6818      	ldr	r0, [r3, #0]
 8005b5a:	f107 0110 	add.w	r1, r7, #16
 8005b5e:	2300      	movs	r3, #0
 8005b60:	2200      	movs	r2, #0
 8005b62:	f7fe fbf7 	bl	8004354 <xQueueGenericSend>
 8005b66:	6278      	str	r0, [r7, #36]	; 0x24
 8005b68:	e008      	b.n	8005b7c <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8005b6a:	4b07      	ldr	r3, [pc, #28]	; (8005b88 <xTimerGenericCommand+0x98>)
 8005b6c:	6818      	ldr	r0, [r3, #0]
 8005b6e:	f107 0110 	add.w	r1, r7, #16
 8005b72:	2300      	movs	r3, #0
 8005b74:	683a      	ldr	r2, [r7, #0]
 8005b76:	f7fe fceb 	bl	8004550 <xQueueGenericSendFromISR>
 8005b7a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8005b7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005b7e:	4618      	mov	r0, r3
 8005b80:	3728      	adds	r7, #40	; 0x28
 8005b82:	46bd      	mov	sp, r7
 8005b84:	bd80      	pop	{r7, pc}
 8005b86:	bf00      	nop
 8005b88:	20000f90 	.word	0x20000f90

08005b8c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8005b8c:	b580      	push	{r7, lr}
 8005b8e:	b088      	sub	sp, #32
 8005b90:	af02      	add	r7, sp, #8
 8005b92:	6078      	str	r0, [r7, #4]
 8005b94:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005b96:	4b1c      	ldr	r3, [pc, #112]	; (8005c08 <prvProcessExpiredTimer+0x7c>)
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	68db      	ldr	r3, [r3, #12]
 8005b9c:	68db      	ldr	r3, [r3, #12]
 8005b9e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005ba0:	697b      	ldr	r3, [r7, #20]
 8005ba2:	3304      	adds	r3, #4
 8005ba4:	4618      	mov	r0, r3
 8005ba6:	f7fe faa9 	bl	80040fc <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8005baa:	697b      	ldr	r3, [r7, #20]
 8005bac:	69db      	ldr	r3, [r3, #28]
 8005bae:	2b01      	cmp	r3, #1
 8005bb0:	d122      	bne.n	8005bf8 <prvProcessExpiredTimer+0x6c>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8005bb2:	697b      	ldr	r3, [r7, #20]
 8005bb4:	699a      	ldr	r2, [r3, #24]
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	18d1      	adds	r1, r2, r3
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	683a      	ldr	r2, [r7, #0]
 8005bbe:	6978      	ldr	r0, [r7, #20]
 8005bc0:	f000 f8c8 	bl	8005d54 <prvInsertTimerInActiveList>
 8005bc4:	4603      	mov	r3, r0
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d016      	beq.n	8005bf8 <prvProcessExpiredTimer+0x6c>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005bca:	2300      	movs	r3, #0
 8005bcc:	9300      	str	r3, [sp, #0]
 8005bce:	2300      	movs	r3, #0
 8005bd0:	687a      	ldr	r2, [r7, #4]
 8005bd2:	2100      	movs	r1, #0
 8005bd4:	6978      	ldr	r0, [r7, #20]
 8005bd6:	f7ff ff8b 	bl	8005af0 <xTimerGenericCommand>
 8005bda:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8005bdc:	693b      	ldr	r3, [r7, #16]
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d10a      	bne.n	8005bf8 <prvProcessExpiredTimer+0x6c>
	__asm volatile
 8005be2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005be6:	f383 8811 	msr	BASEPRI, r3
 8005bea:	f3bf 8f6f 	isb	sy
 8005bee:	f3bf 8f4f 	dsb	sy
 8005bf2:	60fb      	str	r3, [r7, #12]
}
 8005bf4:	bf00      	nop
 8005bf6:	e7fe      	b.n	8005bf6 <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005bf8:	697b      	ldr	r3, [r7, #20]
 8005bfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bfc:	6978      	ldr	r0, [r7, #20]
 8005bfe:	4798      	blx	r3
}
 8005c00:	bf00      	nop
 8005c02:	3718      	adds	r7, #24
 8005c04:	46bd      	mov	sp, r7
 8005c06:	bd80      	pop	{r7, pc}
 8005c08:	20000f88 	.word	0x20000f88

08005c0c <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8005c0c:	b580      	push	{r7, lr}
 8005c0e:	b084      	sub	sp, #16
 8005c10:	af00      	add	r7, sp, #0
 8005c12:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005c14:	f107 0308 	add.w	r3, r7, #8
 8005c18:	4618      	mov	r0, r3
 8005c1a:	f000 f857 	bl	8005ccc <prvGetNextExpireTime>
 8005c1e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8005c20:	68bb      	ldr	r3, [r7, #8]
 8005c22:	4619      	mov	r1, r3
 8005c24:	68f8      	ldr	r0, [r7, #12]
 8005c26:	f000 f803 	bl	8005c30 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8005c2a:	f000 f8d5 	bl	8005dd8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005c2e:	e7f1      	b.n	8005c14 <prvTimerTask+0x8>

08005c30 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8005c30:	b580      	push	{r7, lr}
 8005c32:	b084      	sub	sp, #16
 8005c34:	af00      	add	r7, sp, #0
 8005c36:	6078      	str	r0, [r7, #4]
 8005c38:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8005c3a:	f7ff fa3f 	bl	80050bc <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005c3e:	f107 0308 	add.w	r3, r7, #8
 8005c42:	4618      	mov	r0, r3
 8005c44:	f000 f866 	bl	8005d14 <prvSampleTimeNow>
 8005c48:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8005c4a:	68bb      	ldr	r3, [r7, #8]
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d130      	bne.n	8005cb2 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8005c50:	683b      	ldr	r3, [r7, #0]
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d10a      	bne.n	8005c6c <prvProcessTimerOrBlockTask+0x3c>
 8005c56:	687a      	ldr	r2, [r7, #4]
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	429a      	cmp	r2, r3
 8005c5c:	d806      	bhi.n	8005c6c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8005c5e:	f7ff fa3b 	bl	80050d8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8005c62:	68f9      	ldr	r1, [r7, #12]
 8005c64:	6878      	ldr	r0, [r7, #4]
 8005c66:	f7ff ff91 	bl	8005b8c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8005c6a:	e024      	b.n	8005cb6 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8005c6c:	683b      	ldr	r3, [r7, #0]
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d008      	beq.n	8005c84 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8005c72:	4b13      	ldr	r3, [pc, #76]	; (8005cc0 <prvProcessTimerOrBlockTask+0x90>)
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	bf0c      	ite	eq
 8005c7c:	2301      	moveq	r3, #1
 8005c7e:	2300      	movne	r3, #0
 8005c80:	b2db      	uxtb	r3, r3
 8005c82:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8005c84:	4b0f      	ldr	r3, [pc, #60]	; (8005cc4 <prvProcessTimerOrBlockTask+0x94>)
 8005c86:	6818      	ldr	r0, [r3, #0]
 8005c88:	687a      	ldr	r2, [r7, #4]
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	1ad3      	subs	r3, r2, r3
 8005c8e:	683a      	ldr	r2, [r7, #0]
 8005c90:	4619      	mov	r1, r3
 8005c92:	f7fe ff0d 	bl	8004ab0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8005c96:	f7ff fa1f 	bl	80050d8 <xTaskResumeAll>
 8005c9a:	4603      	mov	r3, r0
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d10a      	bne.n	8005cb6 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8005ca0:	4b09      	ldr	r3, [pc, #36]	; (8005cc8 <prvProcessTimerOrBlockTask+0x98>)
 8005ca2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005ca6:	601a      	str	r2, [r3, #0]
 8005ca8:	f3bf 8f4f 	dsb	sy
 8005cac:	f3bf 8f6f 	isb	sy
}
 8005cb0:	e001      	b.n	8005cb6 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8005cb2:	f7ff fa11 	bl	80050d8 <xTaskResumeAll>
}
 8005cb6:	bf00      	nop
 8005cb8:	3710      	adds	r7, #16
 8005cba:	46bd      	mov	sp, r7
 8005cbc:	bd80      	pop	{r7, pc}
 8005cbe:	bf00      	nop
 8005cc0:	20000f8c 	.word	0x20000f8c
 8005cc4:	20000f90 	.word	0x20000f90
 8005cc8:	e000ed04 	.word	0xe000ed04

08005ccc <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8005ccc:	b480      	push	{r7}
 8005cce:	b085      	sub	sp, #20
 8005cd0:	af00      	add	r7, sp, #0
 8005cd2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8005cd4:	4b0e      	ldr	r3, [pc, #56]	; (8005d10 <prvGetNextExpireTime+0x44>)
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	bf0c      	ite	eq
 8005cde:	2301      	moveq	r3, #1
 8005ce0:	2300      	movne	r3, #0
 8005ce2:	b2db      	uxtb	r3, r3
 8005ce4:	461a      	mov	r2, r3
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d105      	bne.n	8005cfe <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005cf2:	4b07      	ldr	r3, [pc, #28]	; (8005d10 <prvGetNextExpireTime+0x44>)
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	68db      	ldr	r3, [r3, #12]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	60fb      	str	r3, [r7, #12]
 8005cfc:	e001      	b.n	8005d02 <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8005cfe:	2300      	movs	r3, #0
 8005d00:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8005d02:	68fb      	ldr	r3, [r7, #12]
}
 8005d04:	4618      	mov	r0, r3
 8005d06:	3714      	adds	r7, #20
 8005d08:	46bd      	mov	sp, r7
 8005d0a:	bc80      	pop	{r7}
 8005d0c:	4770      	bx	lr
 8005d0e:	bf00      	nop
 8005d10:	20000f88 	.word	0x20000f88

08005d14 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8005d14:	b580      	push	{r7, lr}
 8005d16:	b084      	sub	sp, #16
 8005d18:	af00      	add	r7, sp, #0
 8005d1a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8005d1c:	f7ff fa7a 	bl	8005214 <xTaskGetTickCount>
 8005d20:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8005d22:	4b0b      	ldr	r3, [pc, #44]	; (8005d50 <prvSampleTimeNow+0x3c>)
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	68fa      	ldr	r2, [r7, #12]
 8005d28:	429a      	cmp	r2, r3
 8005d2a:	d205      	bcs.n	8005d38 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8005d2c:	f000 f908 	bl	8005f40 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	2201      	movs	r2, #1
 8005d34:	601a      	str	r2, [r3, #0]
 8005d36:	e002      	b.n	8005d3e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	2200      	movs	r2, #0
 8005d3c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8005d3e:	4a04      	ldr	r2, [pc, #16]	; (8005d50 <prvSampleTimeNow+0x3c>)
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8005d44:	68fb      	ldr	r3, [r7, #12]
}
 8005d46:	4618      	mov	r0, r3
 8005d48:	3710      	adds	r7, #16
 8005d4a:	46bd      	mov	sp, r7
 8005d4c:	bd80      	pop	{r7, pc}
 8005d4e:	bf00      	nop
 8005d50:	20000f98 	.word	0x20000f98

08005d54 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8005d54:	b580      	push	{r7, lr}
 8005d56:	b086      	sub	sp, #24
 8005d58:	af00      	add	r7, sp, #0
 8005d5a:	60f8      	str	r0, [r7, #12]
 8005d5c:	60b9      	str	r1, [r7, #8]
 8005d5e:	607a      	str	r2, [r7, #4]
 8005d60:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8005d62:	2300      	movs	r3, #0
 8005d64:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	68ba      	ldr	r2, [r7, #8]
 8005d6a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	68fa      	ldr	r2, [r7, #12]
 8005d70:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8005d72:	68ba      	ldr	r2, [r7, #8]
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	429a      	cmp	r2, r3
 8005d78:	d812      	bhi.n	8005da0 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005d7a:	687a      	ldr	r2, [r7, #4]
 8005d7c:	683b      	ldr	r3, [r7, #0]
 8005d7e:	1ad2      	subs	r2, r2, r3
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	699b      	ldr	r3, [r3, #24]
 8005d84:	429a      	cmp	r2, r3
 8005d86:	d302      	bcc.n	8005d8e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8005d88:	2301      	movs	r3, #1
 8005d8a:	617b      	str	r3, [r7, #20]
 8005d8c:	e01b      	b.n	8005dc6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8005d8e:	4b10      	ldr	r3, [pc, #64]	; (8005dd0 <prvInsertTimerInActiveList+0x7c>)
 8005d90:	681a      	ldr	r2, [r3, #0]
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	3304      	adds	r3, #4
 8005d96:	4619      	mov	r1, r3
 8005d98:	4610      	mov	r0, r2
 8005d9a:	f7fe f977 	bl	800408c <vListInsert>
 8005d9e:	e012      	b.n	8005dc6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8005da0:	687a      	ldr	r2, [r7, #4]
 8005da2:	683b      	ldr	r3, [r7, #0]
 8005da4:	429a      	cmp	r2, r3
 8005da6:	d206      	bcs.n	8005db6 <prvInsertTimerInActiveList+0x62>
 8005da8:	68ba      	ldr	r2, [r7, #8]
 8005daa:	683b      	ldr	r3, [r7, #0]
 8005dac:	429a      	cmp	r2, r3
 8005dae:	d302      	bcc.n	8005db6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8005db0:	2301      	movs	r3, #1
 8005db2:	617b      	str	r3, [r7, #20]
 8005db4:	e007      	b.n	8005dc6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005db6:	4b07      	ldr	r3, [pc, #28]	; (8005dd4 <prvInsertTimerInActiveList+0x80>)
 8005db8:	681a      	ldr	r2, [r3, #0]
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	3304      	adds	r3, #4
 8005dbe:	4619      	mov	r1, r3
 8005dc0:	4610      	mov	r0, r2
 8005dc2:	f7fe f963 	bl	800408c <vListInsert>
		}
	}

	return xProcessTimerNow;
 8005dc6:	697b      	ldr	r3, [r7, #20]
}
 8005dc8:	4618      	mov	r0, r3
 8005dca:	3718      	adds	r7, #24
 8005dcc:	46bd      	mov	sp, r7
 8005dce:	bd80      	pop	{r7, pc}
 8005dd0:	20000f8c 	.word	0x20000f8c
 8005dd4:	20000f88 	.word	0x20000f88

08005dd8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8005dd8:	b580      	push	{r7, lr}
 8005dda:	b08e      	sub	sp, #56	; 0x38
 8005ddc:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005dde:	e09d      	b.n	8005f1c <prvProcessReceivedCommands+0x144>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	da18      	bge.n	8005e18 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8005de6:	1d3b      	adds	r3, r7, #4
 8005de8:	3304      	adds	r3, #4
 8005dea:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8005dec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d10a      	bne.n	8005e08 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8005df2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005df6:	f383 8811 	msr	BASEPRI, r3
 8005dfa:	f3bf 8f6f 	isb	sy
 8005dfe:	f3bf 8f4f 	dsb	sy
 8005e02:	61fb      	str	r3, [r7, #28]
}
 8005e04:	bf00      	nop
 8005e06:	e7fe      	b.n	8005e06 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8005e08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005e0e:	6850      	ldr	r0, [r2, #4]
 8005e10:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005e12:	6892      	ldr	r2, [r2, #8]
 8005e14:	4611      	mov	r1, r2
 8005e16:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	db7d      	blt.n	8005f1a <prvProcessReceivedCommands+0x142>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8005e22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e24:	695b      	ldr	r3, [r3, #20]
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d004      	beq.n	8005e34 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005e2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e2c:	3304      	adds	r3, #4
 8005e2e:	4618      	mov	r0, r3
 8005e30:	f7fe f964 	bl	80040fc <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005e34:	463b      	mov	r3, r7
 8005e36:	4618      	mov	r0, r3
 8005e38:	f7ff ff6c 	bl	8005d14 <prvSampleTimeNow>
 8005e3c:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	2b09      	cmp	r3, #9
 8005e42:	d86b      	bhi.n	8005f1c <prvProcessReceivedCommands+0x144>
 8005e44:	a201      	add	r2, pc, #4	; (adr r2, 8005e4c <prvProcessReceivedCommands+0x74>)
 8005e46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e4a:	bf00      	nop
 8005e4c:	08005e75 	.word	0x08005e75
 8005e50:	08005e75 	.word	0x08005e75
 8005e54:	08005e75 	.word	0x08005e75
 8005e58:	08005f1d 	.word	0x08005f1d
 8005e5c:	08005ed1 	.word	0x08005ed1
 8005e60:	08005f09 	.word	0x08005f09
 8005e64:	08005e75 	.word	0x08005e75
 8005e68:	08005e75 	.word	0x08005e75
 8005e6c:	08005f1d 	.word	0x08005f1d
 8005e70:	08005ed1 	.word	0x08005ed1
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8005e74:	68ba      	ldr	r2, [r7, #8]
 8005e76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e78:	699b      	ldr	r3, [r3, #24]
 8005e7a:	18d1      	adds	r1, r2, r3
 8005e7c:	68bb      	ldr	r3, [r7, #8]
 8005e7e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005e80:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005e82:	f7ff ff67 	bl	8005d54 <prvInsertTimerInActiveList>
 8005e86:	4603      	mov	r3, r0
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d047      	beq.n	8005f1c <prvProcessReceivedCommands+0x144>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005e8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e90:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005e92:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8005e94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e96:	69db      	ldr	r3, [r3, #28]
 8005e98:	2b01      	cmp	r3, #1
 8005e9a:	d13f      	bne.n	8005f1c <prvProcessReceivedCommands+0x144>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8005e9c:	68ba      	ldr	r2, [r7, #8]
 8005e9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ea0:	699b      	ldr	r3, [r3, #24]
 8005ea2:	441a      	add	r2, r3
 8005ea4:	2300      	movs	r3, #0
 8005ea6:	9300      	str	r3, [sp, #0]
 8005ea8:	2300      	movs	r3, #0
 8005eaa:	2100      	movs	r1, #0
 8005eac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005eae:	f7ff fe1f 	bl	8005af0 <xTimerGenericCommand>
 8005eb2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8005eb4:	6a3b      	ldr	r3, [r7, #32]
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d130      	bne.n	8005f1c <prvProcessReceivedCommands+0x144>
	__asm volatile
 8005eba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ebe:	f383 8811 	msr	BASEPRI, r3
 8005ec2:	f3bf 8f6f 	isb	sy
 8005ec6:	f3bf 8f4f 	dsb	sy
 8005eca:	61bb      	str	r3, [r7, #24]
}
 8005ecc:	bf00      	nop
 8005ece:	e7fe      	b.n	8005ece <prvProcessReceivedCommands+0xf6>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8005ed0:	68ba      	ldr	r2, [r7, #8]
 8005ed2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ed4:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8005ed6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ed8:	699b      	ldr	r3, [r3, #24]
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d10a      	bne.n	8005ef4 <prvProcessReceivedCommands+0x11c>
	__asm volatile
 8005ede:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ee2:	f383 8811 	msr	BASEPRI, r3
 8005ee6:	f3bf 8f6f 	isb	sy
 8005eea:	f3bf 8f4f 	dsb	sy
 8005eee:	617b      	str	r3, [r7, #20]
}
 8005ef0:	bf00      	nop
 8005ef2:	e7fe      	b.n	8005ef2 <prvProcessReceivedCommands+0x11a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8005ef4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ef6:	699a      	ldr	r2, [r3, #24]
 8005ef8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005efa:	18d1      	adds	r1, r2, r3
 8005efc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005efe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005f00:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005f02:	f7ff ff27 	bl	8005d54 <prvInsertTimerInActiveList>
					break;
 8005f06:	e009      	b.n	8005f1c <prvProcessReceivedCommands+0x144>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8005f08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f0a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d104      	bne.n	8005f1c <prvProcessReceivedCommands+0x144>
						{
							vPortFree( pxTimer );
 8005f12:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005f14:	f000 fb6e 	bl	80065f4 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8005f18:	e000      	b.n	8005f1c <prvProcessReceivedCommands+0x144>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8005f1a:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005f1c:	4b07      	ldr	r3, [pc, #28]	; (8005f3c <prvProcessReceivedCommands+0x164>)
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	1d39      	adds	r1, r7, #4
 8005f22:	2200      	movs	r2, #0
 8005f24:	4618      	mov	r0, r3
 8005f26:	f7fe fbab 	bl	8004680 <xQueueReceive>
 8005f2a:	4603      	mov	r3, r0
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	f47f af57 	bne.w	8005de0 <prvProcessReceivedCommands+0x8>
	}
}
 8005f32:	bf00      	nop
 8005f34:	bf00      	nop
 8005f36:	3730      	adds	r7, #48	; 0x30
 8005f38:	46bd      	mov	sp, r7
 8005f3a:	bd80      	pop	{r7, pc}
 8005f3c:	20000f90 	.word	0x20000f90

08005f40 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8005f40:	b580      	push	{r7, lr}
 8005f42:	b088      	sub	sp, #32
 8005f44:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005f46:	e045      	b.n	8005fd4 <prvSwitchTimerLists+0x94>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005f48:	4b2c      	ldr	r3, [pc, #176]	; (8005ffc <prvSwitchTimerLists+0xbc>)
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	68db      	ldr	r3, [r3, #12]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005f52:	4b2a      	ldr	r3, [pc, #168]	; (8005ffc <prvSwitchTimerLists+0xbc>)
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	68db      	ldr	r3, [r3, #12]
 8005f58:	68db      	ldr	r3, [r3, #12]
 8005f5a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	3304      	adds	r3, #4
 8005f60:	4618      	mov	r0, r3
 8005f62:	f7fe f8cb 	bl	80040fc <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f6a:	68f8      	ldr	r0, [r7, #12]
 8005f6c:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	69db      	ldr	r3, [r3, #28]
 8005f72:	2b01      	cmp	r3, #1
 8005f74:	d12e      	bne.n	8005fd4 <prvSwitchTimerLists+0x94>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	699b      	ldr	r3, [r3, #24]
 8005f7a:	693a      	ldr	r2, [r7, #16]
 8005f7c:	4413      	add	r3, r2
 8005f7e:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8005f80:	68ba      	ldr	r2, [r7, #8]
 8005f82:	693b      	ldr	r3, [r7, #16]
 8005f84:	429a      	cmp	r2, r3
 8005f86:	d90e      	bls.n	8005fa6 <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	68ba      	ldr	r2, [r7, #8]
 8005f8c:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	68fa      	ldr	r2, [r7, #12]
 8005f92:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005f94:	4b19      	ldr	r3, [pc, #100]	; (8005ffc <prvSwitchTimerLists+0xbc>)
 8005f96:	681a      	ldr	r2, [r3, #0]
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	3304      	adds	r3, #4
 8005f9c:	4619      	mov	r1, r3
 8005f9e:	4610      	mov	r0, r2
 8005fa0:	f7fe f874 	bl	800408c <vListInsert>
 8005fa4:	e016      	b.n	8005fd4 <prvSwitchTimerLists+0x94>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005fa6:	2300      	movs	r3, #0
 8005fa8:	9300      	str	r3, [sp, #0]
 8005faa:	2300      	movs	r3, #0
 8005fac:	693a      	ldr	r2, [r7, #16]
 8005fae:	2100      	movs	r1, #0
 8005fb0:	68f8      	ldr	r0, [r7, #12]
 8005fb2:	f7ff fd9d 	bl	8005af0 <xTimerGenericCommand>
 8005fb6:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d10a      	bne.n	8005fd4 <prvSwitchTimerLists+0x94>
	__asm volatile
 8005fbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fc2:	f383 8811 	msr	BASEPRI, r3
 8005fc6:	f3bf 8f6f 	isb	sy
 8005fca:	f3bf 8f4f 	dsb	sy
 8005fce:	603b      	str	r3, [r7, #0]
}
 8005fd0:	bf00      	nop
 8005fd2:	e7fe      	b.n	8005fd2 <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005fd4:	4b09      	ldr	r3, [pc, #36]	; (8005ffc <prvSwitchTimerLists+0xbc>)
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d1b4      	bne.n	8005f48 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8005fde:	4b07      	ldr	r3, [pc, #28]	; (8005ffc <prvSwitchTimerLists+0xbc>)
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8005fe4:	4b06      	ldr	r3, [pc, #24]	; (8006000 <prvSwitchTimerLists+0xc0>)
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	4a04      	ldr	r2, [pc, #16]	; (8005ffc <prvSwitchTimerLists+0xbc>)
 8005fea:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8005fec:	4a04      	ldr	r2, [pc, #16]	; (8006000 <prvSwitchTimerLists+0xc0>)
 8005fee:	697b      	ldr	r3, [r7, #20]
 8005ff0:	6013      	str	r3, [r2, #0]
}
 8005ff2:	bf00      	nop
 8005ff4:	3718      	adds	r7, #24
 8005ff6:	46bd      	mov	sp, r7
 8005ff8:	bd80      	pop	{r7, pc}
 8005ffa:	bf00      	nop
 8005ffc:	20000f88 	.word	0x20000f88
 8006000:	20000f8c 	.word	0x20000f8c

08006004 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8006004:	b580      	push	{r7, lr}
 8006006:	b082      	sub	sp, #8
 8006008:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800600a:	f000 f92f 	bl	800626c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800600e:	4b15      	ldr	r3, [pc, #84]	; (8006064 <prvCheckForValidListAndQueue+0x60>)
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	2b00      	cmp	r3, #0
 8006014:	d120      	bne.n	8006058 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8006016:	4814      	ldr	r0, [pc, #80]	; (8006068 <prvCheckForValidListAndQueue+0x64>)
 8006018:	f7fd ffea 	bl	8003ff0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800601c:	4813      	ldr	r0, [pc, #76]	; (800606c <prvCheckForValidListAndQueue+0x68>)
 800601e:	f7fd ffe7 	bl	8003ff0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8006022:	4b13      	ldr	r3, [pc, #76]	; (8006070 <prvCheckForValidListAndQueue+0x6c>)
 8006024:	4a10      	ldr	r2, [pc, #64]	; (8006068 <prvCheckForValidListAndQueue+0x64>)
 8006026:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8006028:	4b12      	ldr	r3, [pc, #72]	; (8006074 <prvCheckForValidListAndQueue+0x70>)
 800602a:	4a10      	ldr	r2, [pc, #64]	; (800606c <prvCheckForValidListAndQueue+0x68>)
 800602c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800602e:	2300      	movs	r3, #0
 8006030:	9300      	str	r3, [sp, #0]
 8006032:	4b11      	ldr	r3, [pc, #68]	; (8006078 <prvCheckForValidListAndQueue+0x74>)
 8006034:	4a11      	ldr	r2, [pc, #68]	; (800607c <prvCheckForValidListAndQueue+0x78>)
 8006036:	2110      	movs	r1, #16
 8006038:	200a      	movs	r0, #10
 800603a:	f7fe f8f1 	bl	8004220 <xQueueGenericCreateStatic>
 800603e:	4603      	mov	r3, r0
 8006040:	4a08      	ldr	r2, [pc, #32]	; (8006064 <prvCheckForValidListAndQueue+0x60>)
 8006042:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8006044:	4b07      	ldr	r3, [pc, #28]	; (8006064 <prvCheckForValidListAndQueue+0x60>)
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	2b00      	cmp	r3, #0
 800604a:	d005      	beq.n	8006058 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800604c:	4b05      	ldr	r3, [pc, #20]	; (8006064 <prvCheckForValidListAndQueue+0x60>)
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	490b      	ldr	r1, [pc, #44]	; (8006080 <prvCheckForValidListAndQueue+0x7c>)
 8006052:	4618      	mov	r0, r3
 8006054:	f7fe fd04 	bl	8004a60 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006058:	f000 f938 	bl	80062cc <vPortExitCritical>
}
 800605c:	bf00      	nop
 800605e:	46bd      	mov	sp, r7
 8006060:	bd80      	pop	{r7, pc}
 8006062:	bf00      	nop
 8006064:	20000f90 	.word	0x20000f90
 8006068:	20000f60 	.word	0x20000f60
 800606c:	20000f74 	.word	0x20000f74
 8006070:	20000f88 	.word	0x20000f88
 8006074:	20000f8c 	.word	0x20000f8c
 8006078:	2000103c 	.word	0x2000103c
 800607c:	20000f9c 	.word	0x20000f9c
 8006080:	080073b4 	.word	0x080073b4

08006084 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006084:	b480      	push	{r7}
 8006086:	b085      	sub	sp, #20
 8006088:	af00      	add	r7, sp, #0
 800608a:	60f8      	str	r0, [r7, #12]
 800608c:	60b9      	str	r1, [r7, #8]
 800608e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	3b04      	subs	r3, #4
 8006094:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800609c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	3b04      	subs	r3, #4
 80060a2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80060a4:	68bb      	ldr	r3, [r7, #8]
 80060a6:	f023 0201 	bic.w	r2, r3, #1
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	3b04      	subs	r3, #4
 80060b2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80060b4:	4a08      	ldr	r2, [pc, #32]	; (80060d8 <pxPortInitialiseStack+0x54>)
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	3b14      	subs	r3, #20
 80060be:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80060c0:	687a      	ldr	r2, [r7, #4]
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	3b20      	subs	r3, #32
 80060ca:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80060cc:	68fb      	ldr	r3, [r7, #12]
}
 80060ce:	4618      	mov	r0, r3
 80060d0:	3714      	adds	r7, #20
 80060d2:	46bd      	mov	sp, r7
 80060d4:	bc80      	pop	{r7}
 80060d6:	4770      	bx	lr
 80060d8:	080060dd 	.word	0x080060dd

080060dc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80060dc:	b480      	push	{r7}
 80060de:	b085      	sub	sp, #20
 80060e0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 80060e2:	2300      	movs	r3, #0
 80060e4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80060e6:	4b12      	ldr	r3, [pc, #72]	; (8006130 <prvTaskExitError+0x54>)
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060ee:	d00a      	beq.n	8006106 <prvTaskExitError+0x2a>
	__asm volatile
 80060f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060f4:	f383 8811 	msr	BASEPRI, r3
 80060f8:	f3bf 8f6f 	isb	sy
 80060fc:	f3bf 8f4f 	dsb	sy
 8006100:	60fb      	str	r3, [r7, #12]
}
 8006102:	bf00      	nop
 8006104:	e7fe      	b.n	8006104 <prvTaskExitError+0x28>
	__asm volatile
 8006106:	f04f 0350 	mov.w	r3, #80	; 0x50
 800610a:	f383 8811 	msr	BASEPRI, r3
 800610e:	f3bf 8f6f 	isb	sy
 8006112:	f3bf 8f4f 	dsb	sy
 8006116:	60bb      	str	r3, [r7, #8]
}
 8006118:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800611a:	bf00      	nop
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	2b00      	cmp	r3, #0
 8006120:	d0fc      	beq.n	800611c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006122:	bf00      	nop
 8006124:	bf00      	nop
 8006126:	3714      	adds	r7, #20
 8006128:	46bd      	mov	sp, r7
 800612a:	bc80      	pop	{r7}
 800612c:	4770      	bx	lr
 800612e:	bf00      	nop
 8006130:	20000018 	.word	0x20000018
	...

08006140 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006140:	4b07      	ldr	r3, [pc, #28]	; (8006160 <pxCurrentTCBConst2>)
 8006142:	6819      	ldr	r1, [r3, #0]
 8006144:	6808      	ldr	r0, [r1, #0]
 8006146:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800614a:	f380 8809 	msr	PSP, r0
 800614e:	f3bf 8f6f 	isb	sy
 8006152:	f04f 0000 	mov.w	r0, #0
 8006156:	f380 8811 	msr	BASEPRI, r0
 800615a:	f04e 0e0d 	orr.w	lr, lr, #13
 800615e:	4770      	bx	lr

08006160 <pxCurrentTCBConst2>:
 8006160:	20000a60 	.word	0x20000a60
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006164:	bf00      	nop
 8006166:	bf00      	nop

08006168 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8006168:	4806      	ldr	r0, [pc, #24]	; (8006184 <prvPortStartFirstTask+0x1c>)
 800616a:	6800      	ldr	r0, [r0, #0]
 800616c:	6800      	ldr	r0, [r0, #0]
 800616e:	f380 8808 	msr	MSP, r0
 8006172:	b662      	cpsie	i
 8006174:	b661      	cpsie	f
 8006176:	f3bf 8f4f 	dsb	sy
 800617a:	f3bf 8f6f 	isb	sy
 800617e:	df00      	svc	0
 8006180:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8006182:	bf00      	nop
 8006184:	e000ed08 	.word	0xe000ed08

08006188 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006188:	b580      	push	{r7, lr}
 800618a:	b084      	sub	sp, #16
 800618c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800618e:	4b32      	ldr	r3, [pc, #200]	; (8006258 <xPortStartScheduler+0xd0>)
 8006190:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	781b      	ldrb	r3, [r3, #0]
 8006196:	b2db      	uxtb	r3, r3
 8006198:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	22ff      	movs	r2, #255	; 0xff
 800619e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	781b      	ldrb	r3, [r3, #0]
 80061a4:	b2db      	uxtb	r3, r3
 80061a6:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80061a8:	78fb      	ldrb	r3, [r7, #3]
 80061aa:	b2db      	uxtb	r3, r3
 80061ac:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80061b0:	b2da      	uxtb	r2, r3
 80061b2:	4b2a      	ldr	r3, [pc, #168]	; (800625c <xPortStartScheduler+0xd4>)
 80061b4:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80061b6:	4b2a      	ldr	r3, [pc, #168]	; (8006260 <xPortStartScheduler+0xd8>)
 80061b8:	2207      	movs	r2, #7
 80061ba:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80061bc:	e009      	b.n	80061d2 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 80061be:	4b28      	ldr	r3, [pc, #160]	; (8006260 <xPortStartScheduler+0xd8>)
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	3b01      	subs	r3, #1
 80061c4:	4a26      	ldr	r2, [pc, #152]	; (8006260 <xPortStartScheduler+0xd8>)
 80061c6:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80061c8:	78fb      	ldrb	r3, [r7, #3]
 80061ca:	b2db      	uxtb	r3, r3
 80061cc:	005b      	lsls	r3, r3, #1
 80061ce:	b2db      	uxtb	r3, r3
 80061d0:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80061d2:	78fb      	ldrb	r3, [r7, #3]
 80061d4:	b2db      	uxtb	r3, r3
 80061d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80061da:	2b80      	cmp	r3, #128	; 0x80
 80061dc:	d0ef      	beq.n	80061be <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80061de:	4b20      	ldr	r3, [pc, #128]	; (8006260 <xPortStartScheduler+0xd8>)
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	f1c3 0307 	rsb	r3, r3, #7
 80061e6:	2b04      	cmp	r3, #4
 80061e8:	d00a      	beq.n	8006200 <xPortStartScheduler+0x78>
	__asm volatile
 80061ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061ee:	f383 8811 	msr	BASEPRI, r3
 80061f2:	f3bf 8f6f 	isb	sy
 80061f6:	f3bf 8f4f 	dsb	sy
 80061fa:	60bb      	str	r3, [r7, #8]
}
 80061fc:	bf00      	nop
 80061fe:	e7fe      	b.n	80061fe <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006200:	4b17      	ldr	r3, [pc, #92]	; (8006260 <xPortStartScheduler+0xd8>)
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	021b      	lsls	r3, r3, #8
 8006206:	4a16      	ldr	r2, [pc, #88]	; (8006260 <xPortStartScheduler+0xd8>)
 8006208:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800620a:	4b15      	ldr	r3, [pc, #84]	; (8006260 <xPortStartScheduler+0xd8>)
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006212:	4a13      	ldr	r2, [pc, #76]	; (8006260 <xPortStartScheduler+0xd8>)
 8006214:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	b2da      	uxtb	r2, r3
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800621e:	4b11      	ldr	r3, [pc, #68]	; (8006264 <xPortStartScheduler+0xdc>)
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	4a10      	ldr	r2, [pc, #64]	; (8006264 <xPortStartScheduler+0xdc>)
 8006224:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006228:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800622a:	4b0e      	ldr	r3, [pc, #56]	; (8006264 <xPortStartScheduler+0xdc>)
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	4a0d      	ldr	r2, [pc, #52]	; (8006264 <xPortStartScheduler+0xdc>)
 8006230:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8006234:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8006236:	f000 f8b9 	bl	80063ac <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800623a:	4b0b      	ldr	r3, [pc, #44]	; (8006268 <xPortStartScheduler+0xe0>)
 800623c:	2200      	movs	r2, #0
 800623e:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006240:	f7ff ff92 	bl	8006168 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8006244:	f7ff f8b2 	bl	80053ac <vTaskSwitchContext>
	prvTaskExitError();
 8006248:	f7ff ff48 	bl	80060dc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800624c:	2300      	movs	r3, #0
}
 800624e:	4618      	mov	r0, r3
 8006250:	3710      	adds	r7, #16
 8006252:	46bd      	mov	sp, r7
 8006254:	bd80      	pop	{r7, pc}
 8006256:	bf00      	nop
 8006258:	e000e400 	.word	0xe000e400
 800625c:	2000108c 	.word	0x2000108c
 8006260:	20001090 	.word	0x20001090
 8006264:	e000ed20 	.word	0xe000ed20
 8006268:	20000018 	.word	0x20000018

0800626c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800626c:	b480      	push	{r7}
 800626e:	b083      	sub	sp, #12
 8006270:	af00      	add	r7, sp, #0
	__asm volatile
 8006272:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006276:	f383 8811 	msr	BASEPRI, r3
 800627a:	f3bf 8f6f 	isb	sy
 800627e:	f3bf 8f4f 	dsb	sy
 8006282:	607b      	str	r3, [r7, #4]
}
 8006284:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8006286:	4b0f      	ldr	r3, [pc, #60]	; (80062c4 <vPortEnterCritical+0x58>)
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	3301      	adds	r3, #1
 800628c:	4a0d      	ldr	r2, [pc, #52]	; (80062c4 <vPortEnterCritical+0x58>)
 800628e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006290:	4b0c      	ldr	r3, [pc, #48]	; (80062c4 <vPortEnterCritical+0x58>)
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	2b01      	cmp	r3, #1
 8006296:	d10f      	bne.n	80062b8 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006298:	4b0b      	ldr	r3, [pc, #44]	; (80062c8 <vPortEnterCritical+0x5c>)
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	b2db      	uxtb	r3, r3
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d00a      	beq.n	80062b8 <vPortEnterCritical+0x4c>
	__asm volatile
 80062a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062a6:	f383 8811 	msr	BASEPRI, r3
 80062aa:	f3bf 8f6f 	isb	sy
 80062ae:	f3bf 8f4f 	dsb	sy
 80062b2:	603b      	str	r3, [r7, #0]
}
 80062b4:	bf00      	nop
 80062b6:	e7fe      	b.n	80062b6 <vPortEnterCritical+0x4a>
	}
}
 80062b8:	bf00      	nop
 80062ba:	370c      	adds	r7, #12
 80062bc:	46bd      	mov	sp, r7
 80062be:	bc80      	pop	{r7}
 80062c0:	4770      	bx	lr
 80062c2:	bf00      	nop
 80062c4:	20000018 	.word	0x20000018
 80062c8:	e000ed04 	.word	0xe000ed04

080062cc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80062cc:	b480      	push	{r7}
 80062ce:	b083      	sub	sp, #12
 80062d0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80062d2:	4b11      	ldr	r3, [pc, #68]	; (8006318 <vPortExitCritical+0x4c>)
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d10a      	bne.n	80062f0 <vPortExitCritical+0x24>
	__asm volatile
 80062da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062de:	f383 8811 	msr	BASEPRI, r3
 80062e2:	f3bf 8f6f 	isb	sy
 80062e6:	f3bf 8f4f 	dsb	sy
 80062ea:	607b      	str	r3, [r7, #4]
}
 80062ec:	bf00      	nop
 80062ee:	e7fe      	b.n	80062ee <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80062f0:	4b09      	ldr	r3, [pc, #36]	; (8006318 <vPortExitCritical+0x4c>)
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	3b01      	subs	r3, #1
 80062f6:	4a08      	ldr	r2, [pc, #32]	; (8006318 <vPortExitCritical+0x4c>)
 80062f8:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80062fa:	4b07      	ldr	r3, [pc, #28]	; (8006318 <vPortExitCritical+0x4c>)
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d105      	bne.n	800630e <vPortExitCritical+0x42>
 8006302:	2300      	movs	r3, #0
 8006304:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006306:	683b      	ldr	r3, [r7, #0]
 8006308:	f383 8811 	msr	BASEPRI, r3
}
 800630c:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800630e:	bf00      	nop
 8006310:	370c      	adds	r7, #12
 8006312:	46bd      	mov	sp, r7
 8006314:	bc80      	pop	{r7}
 8006316:	4770      	bx	lr
 8006318:	20000018 	.word	0x20000018
 800631c:	00000000 	.word	0x00000000

08006320 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006320:	f3ef 8009 	mrs	r0, PSP
 8006324:	f3bf 8f6f 	isb	sy
 8006328:	4b0d      	ldr	r3, [pc, #52]	; (8006360 <pxCurrentTCBConst>)
 800632a:	681a      	ldr	r2, [r3, #0]
 800632c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8006330:	6010      	str	r0, [r2, #0]
 8006332:	e92d 4008 	stmdb	sp!, {r3, lr}
 8006336:	f04f 0050 	mov.w	r0, #80	; 0x50
 800633a:	f380 8811 	msr	BASEPRI, r0
 800633e:	f7ff f835 	bl	80053ac <vTaskSwitchContext>
 8006342:	f04f 0000 	mov.w	r0, #0
 8006346:	f380 8811 	msr	BASEPRI, r0
 800634a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800634e:	6819      	ldr	r1, [r3, #0]
 8006350:	6808      	ldr	r0, [r1, #0]
 8006352:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8006356:	f380 8809 	msr	PSP, r0
 800635a:	f3bf 8f6f 	isb	sy
 800635e:	4770      	bx	lr

08006360 <pxCurrentTCBConst>:
 8006360:	20000a60 	.word	0x20000a60
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006364:	bf00      	nop
 8006366:	bf00      	nop

08006368 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006368:	b580      	push	{r7, lr}
 800636a:	b082      	sub	sp, #8
 800636c:	af00      	add	r7, sp, #0
	__asm volatile
 800636e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006372:	f383 8811 	msr	BASEPRI, r3
 8006376:	f3bf 8f6f 	isb	sy
 800637a:	f3bf 8f4f 	dsb	sy
 800637e:	607b      	str	r3, [r7, #4]
}
 8006380:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006382:	f7fe ff55 	bl	8005230 <xTaskIncrementTick>
 8006386:	4603      	mov	r3, r0
 8006388:	2b00      	cmp	r3, #0
 800638a:	d003      	beq.n	8006394 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800638c:	4b06      	ldr	r3, [pc, #24]	; (80063a8 <SysTick_Handler+0x40>)
 800638e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006392:	601a      	str	r2, [r3, #0]
 8006394:	2300      	movs	r3, #0
 8006396:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006398:	683b      	ldr	r3, [r7, #0]
 800639a:	f383 8811 	msr	BASEPRI, r3
}
 800639e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80063a0:	bf00      	nop
 80063a2:	3708      	adds	r7, #8
 80063a4:	46bd      	mov	sp, r7
 80063a6:	bd80      	pop	{r7, pc}
 80063a8:	e000ed04 	.word	0xe000ed04

080063ac <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80063ac:	b480      	push	{r7}
 80063ae:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80063b0:	4b0a      	ldr	r3, [pc, #40]	; (80063dc <vPortSetupTimerInterrupt+0x30>)
 80063b2:	2200      	movs	r2, #0
 80063b4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80063b6:	4b0a      	ldr	r3, [pc, #40]	; (80063e0 <vPortSetupTimerInterrupt+0x34>)
 80063b8:	2200      	movs	r2, #0
 80063ba:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80063bc:	4b09      	ldr	r3, [pc, #36]	; (80063e4 <vPortSetupTimerInterrupt+0x38>)
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	4a09      	ldr	r2, [pc, #36]	; (80063e8 <vPortSetupTimerInterrupt+0x3c>)
 80063c2:	fba2 2303 	umull	r2, r3, r2, r3
 80063c6:	099b      	lsrs	r3, r3, #6
 80063c8:	4a08      	ldr	r2, [pc, #32]	; (80063ec <vPortSetupTimerInterrupt+0x40>)
 80063ca:	3b01      	subs	r3, #1
 80063cc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80063ce:	4b03      	ldr	r3, [pc, #12]	; (80063dc <vPortSetupTimerInterrupt+0x30>)
 80063d0:	2207      	movs	r2, #7
 80063d2:	601a      	str	r2, [r3, #0]
}
 80063d4:	bf00      	nop
 80063d6:	46bd      	mov	sp, r7
 80063d8:	bc80      	pop	{r7}
 80063da:	4770      	bx	lr
 80063dc:	e000e010 	.word	0xe000e010
 80063e0:	e000e018 	.word	0xe000e018
 80063e4:	2000000c 	.word	0x2000000c
 80063e8:	10624dd3 	.word	0x10624dd3
 80063ec:	e000e014 	.word	0xe000e014

080063f0 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80063f0:	b480      	push	{r7}
 80063f2:	b085      	sub	sp, #20
 80063f4:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80063f6:	f3ef 8305 	mrs	r3, IPSR
 80063fa:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	2b0f      	cmp	r3, #15
 8006400:	d914      	bls.n	800642c <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8006402:	4a16      	ldr	r2, [pc, #88]	; (800645c <vPortValidateInterruptPriority+0x6c>)
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	4413      	add	r3, r2
 8006408:	781b      	ldrb	r3, [r3, #0]
 800640a:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800640c:	4b14      	ldr	r3, [pc, #80]	; (8006460 <vPortValidateInterruptPriority+0x70>)
 800640e:	781b      	ldrb	r3, [r3, #0]
 8006410:	7afa      	ldrb	r2, [r7, #11]
 8006412:	429a      	cmp	r2, r3
 8006414:	d20a      	bcs.n	800642c <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8006416:	f04f 0350 	mov.w	r3, #80	; 0x50
 800641a:	f383 8811 	msr	BASEPRI, r3
 800641e:	f3bf 8f6f 	isb	sy
 8006422:	f3bf 8f4f 	dsb	sy
 8006426:	607b      	str	r3, [r7, #4]
}
 8006428:	bf00      	nop
 800642a:	e7fe      	b.n	800642a <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800642c:	4b0d      	ldr	r3, [pc, #52]	; (8006464 <vPortValidateInterruptPriority+0x74>)
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8006434:	4b0c      	ldr	r3, [pc, #48]	; (8006468 <vPortValidateInterruptPriority+0x78>)
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	429a      	cmp	r2, r3
 800643a:	d90a      	bls.n	8006452 <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800643c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006440:	f383 8811 	msr	BASEPRI, r3
 8006444:	f3bf 8f6f 	isb	sy
 8006448:	f3bf 8f4f 	dsb	sy
 800644c:	603b      	str	r3, [r7, #0]
}
 800644e:	bf00      	nop
 8006450:	e7fe      	b.n	8006450 <vPortValidateInterruptPriority+0x60>
	}
 8006452:	bf00      	nop
 8006454:	3714      	adds	r7, #20
 8006456:	46bd      	mov	sp, r7
 8006458:	bc80      	pop	{r7}
 800645a:	4770      	bx	lr
 800645c:	e000e3f0 	.word	0xe000e3f0
 8006460:	2000108c 	.word	0x2000108c
 8006464:	e000ed0c 	.word	0xe000ed0c
 8006468:	20001090 	.word	0x20001090

0800646c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800646c:	b580      	push	{r7, lr}
 800646e:	b08a      	sub	sp, #40	; 0x28
 8006470:	af00      	add	r7, sp, #0
 8006472:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006474:	2300      	movs	r3, #0
 8006476:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006478:	f7fe fe20 	bl	80050bc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800647c:	4b58      	ldr	r3, [pc, #352]	; (80065e0 <pvPortMalloc+0x174>)
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	2b00      	cmp	r3, #0
 8006482:	d101      	bne.n	8006488 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006484:	f000 f910 	bl	80066a8 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006488:	4b56      	ldr	r3, [pc, #344]	; (80065e4 <pvPortMalloc+0x178>)
 800648a:	681a      	ldr	r2, [r3, #0]
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	4013      	ands	r3, r2
 8006490:	2b00      	cmp	r3, #0
 8006492:	f040 808e 	bne.w	80065b2 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	2b00      	cmp	r3, #0
 800649a:	d01d      	beq.n	80064d8 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800649c:	2208      	movs	r2, #8
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	4413      	add	r3, r2
 80064a2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	f003 0307 	and.w	r3, r3, #7
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d014      	beq.n	80064d8 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	f023 0307 	bic.w	r3, r3, #7
 80064b4:	3308      	adds	r3, #8
 80064b6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	f003 0307 	and.w	r3, r3, #7
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d00a      	beq.n	80064d8 <pvPortMalloc+0x6c>
	__asm volatile
 80064c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064c6:	f383 8811 	msr	BASEPRI, r3
 80064ca:	f3bf 8f6f 	isb	sy
 80064ce:	f3bf 8f4f 	dsb	sy
 80064d2:	617b      	str	r3, [r7, #20]
}
 80064d4:	bf00      	nop
 80064d6:	e7fe      	b.n	80064d6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d069      	beq.n	80065b2 <pvPortMalloc+0x146>
 80064de:	4b42      	ldr	r3, [pc, #264]	; (80065e8 <pvPortMalloc+0x17c>)
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	687a      	ldr	r2, [r7, #4]
 80064e4:	429a      	cmp	r2, r3
 80064e6:	d864      	bhi.n	80065b2 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80064e8:	4b40      	ldr	r3, [pc, #256]	; (80065ec <pvPortMalloc+0x180>)
 80064ea:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80064ec:	4b3f      	ldr	r3, [pc, #252]	; (80065ec <pvPortMalloc+0x180>)
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80064f2:	e004      	b.n	80064fe <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80064f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064f6:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80064f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80064fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006500:	685b      	ldr	r3, [r3, #4]
 8006502:	687a      	ldr	r2, [r7, #4]
 8006504:	429a      	cmp	r2, r3
 8006506:	d903      	bls.n	8006510 <pvPortMalloc+0xa4>
 8006508:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	2b00      	cmp	r3, #0
 800650e:	d1f1      	bne.n	80064f4 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8006510:	4b33      	ldr	r3, [pc, #204]	; (80065e0 <pvPortMalloc+0x174>)
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006516:	429a      	cmp	r2, r3
 8006518:	d04b      	beq.n	80065b2 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800651a:	6a3b      	ldr	r3, [r7, #32]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	2208      	movs	r2, #8
 8006520:	4413      	add	r3, r2
 8006522:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006524:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006526:	681a      	ldr	r2, [r3, #0]
 8006528:	6a3b      	ldr	r3, [r7, #32]
 800652a:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800652c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800652e:	685a      	ldr	r2, [r3, #4]
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	1ad2      	subs	r2, r2, r3
 8006534:	2308      	movs	r3, #8
 8006536:	005b      	lsls	r3, r3, #1
 8006538:	429a      	cmp	r2, r3
 800653a:	d91f      	bls.n	800657c <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800653c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	4413      	add	r3, r2
 8006542:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006544:	69bb      	ldr	r3, [r7, #24]
 8006546:	f003 0307 	and.w	r3, r3, #7
 800654a:	2b00      	cmp	r3, #0
 800654c:	d00a      	beq.n	8006564 <pvPortMalloc+0xf8>
	__asm volatile
 800654e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006552:	f383 8811 	msr	BASEPRI, r3
 8006556:	f3bf 8f6f 	isb	sy
 800655a:	f3bf 8f4f 	dsb	sy
 800655e:	613b      	str	r3, [r7, #16]
}
 8006560:	bf00      	nop
 8006562:	e7fe      	b.n	8006562 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006564:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006566:	685a      	ldr	r2, [r3, #4]
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	1ad2      	subs	r2, r2, r3
 800656c:	69bb      	ldr	r3, [r7, #24]
 800656e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006570:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006572:	687a      	ldr	r2, [r7, #4]
 8006574:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006576:	69b8      	ldr	r0, [r7, #24]
 8006578:	f000 f8f8 	bl	800676c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800657c:	4b1a      	ldr	r3, [pc, #104]	; (80065e8 <pvPortMalloc+0x17c>)
 800657e:	681a      	ldr	r2, [r3, #0]
 8006580:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006582:	685b      	ldr	r3, [r3, #4]
 8006584:	1ad3      	subs	r3, r2, r3
 8006586:	4a18      	ldr	r2, [pc, #96]	; (80065e8 <pvPortMalloc+0x17c>)
 8006588:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800658a:	4b17      	ldr	r3, [pc, #92]	; (80065e8 <pvPortMalloc+0x17c>)
 800658c:	681a      	ldr	r2, [r3, #0]
 800658e:	4b18      	ldr	r3, [pc, #96]	; (80065f0 <pvPortMalloc+0x184>)
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	429a      	cmp	r2, r3
 8006594:	d203      	bcs.n	800659e <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006596:	4b14      	ldr	r3, [pc, #80]	; (80065e8 <pvPortMalloc+0x17c>)
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	4a15      	ldr	r2, [pc, #84]	; (80065f0 <pvPortMalloc+0x184>)
 800659c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800659e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065a0:	685a      	ldr	r2, [r3, #4]
 80065a2:	4b10      	ldr	r3, [pc, #64]	; (80065e4 <pvPortMalloc+0x178>)
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	431a      	orrs	r2, r3
 80065a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065aa:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80065ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065ae:	2200      	movs	r2, #0
 80065b0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80065b2:	f7fe fd91 	bl	80050d8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80065b6:	69fb      	ldr	r3, [r7, #28]
 80065b8:	f003 0307 	and.w	r3, r3, #7
 80065bc:	2b00      	cmp	r3, #0
 80065be:	d00a      	beq.n	80065d6 <pvPortMalloc+0x16a>
	__asm volatile
 80065c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065c4:	f383 8811 	msr	BASEPRI, r3
 80065c8:	f3bf 8f6f 	isb	sy
 80065cc:	f3bf 8f4f 	dsb	sy
 80065d0:	60fb      	str	r3, [r7, #12]
}
 80065d2:	bf00      	nop
 80065d4:	e7fe      	b.n	80065d4 <pvPortMalloc+0x168>
	return pvReturn;
 80065d6:	69fb      	ldr	r3, [r7, #28]
}
 80065d8:	4618      	mov	r0, r3
 80065da:	3728      	adds	r7, #40	; 0x28
 80065dc:	46bd      	mov	sp, r7
 80065de:	bd80      	pop	{r7, pc}
 80065e0:	20001c9c 	.word	0x20001c9c
 80065e4:	20001ca8 	.word	0x20001ca8
 80065e8:	20001ca0 	.word	0x20001ca0
 80065ec:	20001c94 	.word	0x20001c94
 80065f0:	20001ca4 	.word	0x20001ca4

080065f4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80065f4:	b580      	push	{r7, lr}
 80065f6:	b086      	sub	sp, #24
 80065f8:	af00      	add	r7, sp, #0
 80065fa:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	2b00      	cmp	r3, #0
 8006604:	d048      	beq.n	8006698 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006606:	2308      	movs	r3, #8
 8006608:	425b      	negs	r3, r3
 800660a:	697a      	ldr	r2, [r7, #20]
 800660c:	4413      	add	r3, r2
 800660e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006610:	697b      	ldr	r3, [r7, #20]
 8006612:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006614:	693b      	ldr	r3, [r7, #16]
 8006616:	685a      	ldr	r2, [r3, #4]
 8006618:	4b21      	ldr	r3, [pc, #132]	; (80066a0 <vPortFree+0xac>)
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	4013      	ands	r3, r2
 800661e:	2b00      	cmp	r3, #0
 8006620:	d10a      	bne.n	8006638 <vPortFree+0x44>
	__asm volatile
 8006622:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006626:	f383 8811 	msr	BASEPRI, r3
 800662a:	f3bf 8f6f 	isb	sy
 800662e:	f3bf 8f4f 	dsb	sy
 8006632:	60fb      	str	r3, [r7, #12]
}
 8006634:	bf00      	nop
 8006636:	e7fe      	b.n	8006636 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006638:	693b      	ldr	r3, [r7, #16]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	2b00      	cmp	r3, #0
 800663e:	d00a      	beq.n	8006656 <vPortFree+0x62>
	__asm volatile
 8006640:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006644:	f383 8811 	msr	BASEPRI, r3
 8006648:	f3bf 8f6f 	isb	sy
 800664c:	f3bf 8f4f 	dsb	sy
 8006650:	60bb      	str	r3, [r7, #8]
}
 8006652:	bf00      	nop
 8006654:	e7fe      	b.n	8006654 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006656:	693b      	ldr	r3, [r7, #16]
 8006658:	685a      	ldr	r2, [r3, #4]
 800665a:	4b11      	ldr	r3, [pc, #68]	; (80066a0 <vPortFree+0xac>)
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	4013      	ands	r3, r2
 8006660:	2b00      	cmp	r3, #0
 8006662:	d019      	beq.n	8006698 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006664:	693b      	ldr	r3, [r7, #16]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	2b00      	cmp	r3, #0
 800666a:	d115      	bne.n	8006698 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800666c:	693b      	ldr	r3, [r7, #16]
 800666e:	685a      	ldr	r2, [r3, #4]
 8006670:	4b0b      	ldr	r3, [pc, #44]	; (80066a0 <vPortFree+0xac>)
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	43db      	mvns	r3, r3
 8006676:	401a      	ands	r2, r3
 8006678:	693b      	ldr	r3, [r7, #16]
 800667a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800667c:	f7fe fd1e 	bl	80050bc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006680:	693b      	ldr	r3, [r7, #16]
 8006682:	685a      	ldr	r2, [r3, #4]
 8006684:	4b07      	ldr	r3, [pc, #28]	; (80066a4 <vPortFree+0xb0>)
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	4413      	add	r3, r2
 800668a:	4a06      	ldr	r2, [pc, #24]	; (80066a4 <vPortFree+0xb0>)
 800668c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800668e:	6938      	ldr	r0, [r7, #16]
 8006690:	f000 f86c 	bl	800676c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8006694:	f7fe fd20 	bl	80050d8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8006698:	bf00      	nop
 800669a:	3718      	adds	r7, #24
 800669c:	46bd      	mov	sp, r7
 800669e:	bd80      	pop	{r7, pc}
 80066a0:	20001ca8 	.word	0x20001ca8
 80066a4:	20001ca0 	.word	0x20001ca0

080066a8 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80066a8:	b480      	push	{r7}
 80066aa:	b085      	sub	sp, #20
 80066ac:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80066ae:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80066b2:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80066b4:	4b27      	ldr	r3, [pc, #156]	; (8006754 <prvHeapInit+0xac>)
 80066b6:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	f003 0307 	and.w	r3, r3, #7
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d00c      	beq.n	80066dc <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	3307      	adds	r3, #7
 80066c6:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	f023 0307 	bic.w	r3, r3, #7
 80066ce:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80066d0:	68ba      	ldr	r2, [r7, #8]
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	1ad3      	subs	r3, r2, r3
 80066d6:	4a1f      	ldr	r2, [pc, #124]	; (8006754 <prvHeapInit+0xac>)
 80066d8:	4413      	add	r3, r2
 80066da:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80066e0:	4a1d      	ldr	r2, [pc, #116]	; (8006758 <prvHeapInit+0xb0>)
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80066e6:	4b1c      	ldr	r3, [pc, #112]	; (8006758 <prvHeapInit+0xb0>)
 80066e8:	2200      	movs	r2, #0
 80066ea:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	68ba      	ldr	r2, [r7, #8]
 80066f0:	4413      	add	r3, r2
 80066f2:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80066f4:	2208      	movs	r2, #8
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	1a9b      	subs	r3, r3, r2
 80066fa:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	f023 0307 	bic.w	r3, r3, #7
 8006702:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	4a15      	ldr	r2, [pc, #84]	; (800675c <prvHeapInit+0xb4>)
 8006708:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800670a:	4b14      	ldr	r3, [pc, #80]	; (800675c <prvHeapInit+0xb4>)
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	2200      	movs	r2, #0
 8006710:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8006712:	4b12      	ldr	r3, [pc, #72]	; (800675c <prvHeapInit+0xb4>)
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	2200      	movs	r2, #0
 8006718:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800671e:	683b      	ldr	r3, [r7, #0]
 8006720:	68fa      	ldr	r2, [r7, #12]
 8006722:	1ad2      	subs	r2, r2, r3
 8006724:	683b      	ldr	r3, [r7, #0]
 8006726:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006728:	4b0c      	ldr	r3, [pc, #48]	; (800675c <prvHeapInit+0xb4>)
 800672a:	681a      	ldr	r2, [r3, #0]
 800672c:	683b      	ldr	r3, [r7, #0]
 800672e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006730:	683b      	ldr	r3, [r7, #0]
 8006732:	685b      	ldr	r3, [r3, #4]
 8006734:	4a0a      	ldr	r2, [pc, #40]	; (8006760 <prvHeapInit+0xb8>)
 8006736:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006738:	683b      	ldr	r3, [r7, #0]
 800673a:	685b      	ldr	r3, [r3, #4]
 800673c:	4a09      	ldr	r2, [pc, #36]	; (8006764 <prvHeapInit+0xbc>)
 800673e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006740:	4b09      	ldr	r3, [pc, #36]	; (8006768 <prvHeapInit+0xc0>)
 8006742:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006746:	601a      	str	r2, [r3, #0]
}
 8006748:	bf00      	nop
 800674a:	3714      	adds	r7, #20
 800674c:	46bd      	mov	sp, r7
 800674e:	bc80      	pop	{r7}
 8006750:	4770      	bx	lr
 8006752:	bf00      	nop
 8006754:	20001094 	.word	0x20001094
 8006758:	20001c94 	.word	0x20001c94
 800675c:	20001c9c 	.word	0x20001c9c
 8006760:	20001ca4 	.word	0x20001ca4
 8006764:	20001ca0 	.word	0x20001ca0
 8006768:	20001ca8 	.word	0x20001ca8

0800676c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800676c:	b480      	push	{r7}
 800676e:	b085      	sub	sp, #20
 8006770:	af00      	add	r7, sp, #0
 8006772:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006774:	4b27      	ldr	r3, [pc, #156]	; (8006814 <prvInsertBlockIntoFreeList+0xa8>)
 8006776:	60fb      	str	r3, [r7, #12]
 8006778:	e002      	b.n	8006780 <prvInsertBlockIntoFreeList+0x14>
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	60fb      	str	r3, [r7, #12]
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	687a      	ldr	r2, [r7, #4]
 8006786:	429a      	cmp	r2, r3
 8006788:	d8f7      	bhi.n	800677a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	685b      	ldr	r3, [r3, #4]
 8006792:	68ba      	ldr	r2, [r7, #8]
 8006794:	4413      	add	r3, r2
 8006796:	687a      	ldr	r2, [r7, #4]
 8006798:	429a      	cmp	r2, r3
 800679a:	d108      	bne.n	80067ae <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	685a      	ldr	r2, [r3, #4]
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	685b      	ldr	r3, [r3, #4]
 80067a4:	441a      	add	r2, r3
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	685b      	ldr	r3, [r3, #4]
 80067b6:	68ba      	ldr	r2, [r7, #8]
 80067b8:	441a      	add	r2, r3
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	429a      	cmp	r2, r3
 80067c0:	d118      	bne.n	80067f4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	681a      	ldr	r2, [r3, #0]
 80067c6:	4b14      	ldr	r3, [pc, #80]	; (8006818 <prvInsertBlockIntoFreeList+0xac>)
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	429a      	cmp	r2, r3
 80067cc:	d00d      	beq.n	80067ea <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	685a      	ldr	r2, [r3, #4]
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	685b      	ldr	r3, [r3, #4]
 80067d8:	441a      	add	r2, r3
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	681a      	ldr	r2, [r3, #0]
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	601a      	str	r2, [r3, #0]
 80067e8:	e008      	b.n	80067fc <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80067ea:	4b0b      	ldr	r3, [pc, #44]	; (8006818 <prvInsertBlockIntoFreeList+0xac>)
 80067ec:	681a      	ldr	r2, [r3, #0]
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	601a      	str	r2, [r3, #0]
 80067f2:	e003      	b.n	80067fc <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	681a      	ldr	r2, [r3, #0]
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80067fc:	68fa      	ldr	r2, [r7, #12]
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	429a      	cmp	r2, r3
 8006802:	d002      	beq.n	800680a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	687a      	ldr	r2, [r7, #4]
 8006808:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800680a:	bf00      	nop
 800680c:	3714      	adds	r7, #20
 800680e:	46bd      	mov	sp, r7
 8006810:	bc80      	pop	{r7}
 8006812:	4770      	bx	lr
 8006814:	20001c94 	.word	0x20001c94
 8006818:	20001c9c 	.word	0x20001c9c

0800681c <__errno>:
 800681c:	4b01      	ldr	r3, [pc, #4]	; (8006824 <__errno+0x8>)
 800681e:	6818      	ldr	r0, [r3, #0]
 8006820:	4770      	bx	lr
 8006822:	bf00      	nop
 8006824:	2000001c 	.word	0x2000001c

08006828 <__libc_init_array>:
 8006828:	b570      	push	{r4, r5, r6, lr}
 800682a:	2600      	movs	r6, #0
 800682c:	4d0c      	ldr	r5, [pc, #48]	; (8006860 <__libc_init_array+0x38>)
 800682e:	4c0d      	ldr	r4, [pc, #52]	; (8006864 <__libc_init_array+0x3c>)
 8006830:	1b64      	subs	r4, r4, r5
 8006832:	10a4      	asrs	r4, r4, #2
 8006834:	42a6      	cmp	r6, r4
 8006836:	d109      	bne.n	800684c <__libc_init_array+0x24>
 8006838:	f000 fd06 	bl	8007248 <_init>
 800683c:	2600      	movs	r6, #0
 800683e:	4d0a      	ldr	r5, [pc, #40]	; (8006868 <__libc_init_array+0x40>)
 8006840:	4c0a      	ldr	r4, [pc, #40]	; (800686c <__libc_init_array+0x44>)
 8006842:	1b64      	subs	r4, r4, r5
 8006844:	10a4      	asrs	r4, r4, #2
 8006846:	42a6      	cmp	r6, r4
 8006848:	d105      	bne.n	8006856 <__libc_init_array+0x2e>
 800684a:	bd70      	pop	{r4, r5, r6, pc}
 800684c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006850:	4798      	blx	r3
 8006852:	3601      	adds	r6, #1
 8006854:	e7ee      	b.n	8006834 <__libc_init_array+0xc>
 8006856:	f855 3b04 	ldr.w	r3, [r5], #4
 800685a:	4798      	blx	r3
 800685c:	3601      	adds	r6, #1
 800685e:	e7f2      	b.n	8006846 <__libc_init_array+0x1e>
 8006860:	080074ac 	.word	0x080074ac
 8006864:	080074ac 	.word	0x080074ac
 8006868:	080074ac 	.word	0x080074ac
 800686c:	080074b0 	.word	0x080074b0

08006870 <__retarget_lock_acquire_recursive>:
 8006870:	4770      	bx	lr

08006872 <__retarget_lock_release_recursive>:
 8006872:	4770      	bx	lr

08006874 <memcpy>:
 8006874:	440a      	add	r2, r1
 8006876:	4291      	cmp	r1, r2
 8006878:	f100 33ff 	add.w	r3, r0, #4294967295
 800687c:	d100      	bne.n	8006880 <memcpy+0xc>
 800687e:	4770      	bx	lr
 8006880:	b510      	push	{r4, lr}
 8006882:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006886:	4291      	cmp	r1, r2
 8006888:	f803 4f01 	strb.w	r4, [r3, #1]!
 800688c:	d1f9      	bne.n	8006882 <memcpy+0xe>
 800688e:	bd10      	pop	{r4, pc}

08006890 <memset>:
 8006890:	4603      	mov	r3, r0
 8006892:	4402      	add	r2, r0
 8006894:	4293      	cmp	r3, r2
 8006896:	d100      	bne.n	800689a <memset+0xa>
 8006898:	4770      	bx	lr
 800689a:	f803 1b01 	strb.w	r1, [r3], #1
 800689e:	e7f9      	b.n	8006894 <memset+0x4>

080068a0 <sbrk_aligned>:
 80068a0:	b570      	push	{r4, r5, r6, lr}
 80068a2:	4e0e      	ldr	r6, [pc, #56]	; (80068dc <sbrk_aligned+0x3c>)
 80068a4:	460c      	mov	r4, r1
 80068a6:	6831      	ldr	r1, [r6, #0]
 80068a8:	4605      	mov	r5, r0
 80068aa:	b911      	cbnz	r1, 80068b2 <sbrk_aligned+0x12>
 80068ac:	f000 f8f6 	bl	8006a9c <_sbrk_r>
 80068b0:	6030      	str	r0, [r6, #0]
 80068b2:	4621      	mov	r1, r4
 80068b4:	4628      	mov	r0, r5
 80068b6:	f000 f8f1 	bl	8006a9c <_sbrk_r>
 80068ba:	1c43      	adds	r3, r0, #1
 80068bc:	d00a      	beq.n	80068d4 <sbrk_aligned+0x34>
 80068be:	1cc4      	adds	r4, r0, #3
 80068c0:	f024 0403 	bic.w	r4, r4, #3
 80068c4:	42a0      	cmp	r0, r4
 80068c6:	d007      	beq.n	80068d8 <sbrk_aligned+0x38>
 80068c8:	1a21      	subs	r1, r4, r0
 80068ca:	4628      	mov	r0, r5
 80068cc:	f000 f8e6 	bl	8006a9c <_sbrk_r>
 80068d0:	3001      	adds	r0, #1
 80068d2:	d101      	bne.n	80068d8 <sbrk_aligned+0x38>
 80068d4:	f04f 34ff 	mov.w	r4, #4294967295
 80068d8:	4620      	mov	r0, r4
 80068da:	bd70      	pop	{r4, r5, r6, pc}
 80068dc:	20001cb4 	.word	0x20001cb4

080068e0 <_malloc_r>:
 80068e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80068e4:	1ccd      	adds	r5, r1, #3
 80068e6:	f025 0503 	bic.w	r5, r5, #3
 80068ea:	3508      	adds	r5, #8
 80068ec:	2d0c      	cmp	r5, #12
 80068ee:	bf38      	it	cc
 80068f0:	250c      	movcc	r5, #12
 80068f2:	2d00      	cmp	r5, #0
 80068f4:	4607      	mov	r7, r0
 80068f6:	db01      	blt.n	80068fc <_malloc_r+0x1c>
 80068f8:	42a9      	cmp	r1, r5
 80068fa:	d905      	bls.n	8006908 <_malloc_r+0x28>
 80068fc:	230c      	movs	r3, #12
 80068fe:	2600      	movs	r6, #0
 8006900:	603b      	str	r3, [r7, #0]
 8006902:	4630      	mov	r0, r6
 8006904:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006908:	4e2e      	ldr	r6, [pc, #184]	; (80069c4 <_malloc_r+0xe4>)
 800690a:	f000 f8f7 	bl	8006afc <__malloc_lock>
 800690e:	6833      	ldr	r3, [r6, #0]
 8006910:	461c      	mov	r4, r3
 8006912:	bb34      	cbnz	r4, 8006962 <_malloc_r+0x82>
 8006914:	4629      	mov	r1, r5
 8006916:	4638      	mov	r0, r7
 8006918:	f7ff ffc2 	bl	80068a0 <sbrk_aligned>
 800691c:	1c43      	adds	r3, r0, #1
 800691e:	4604      	mov	r4, r0
 8006920:	d14d      	bne.n	80069be <_malloc_r+0xde>
 8006922:	6834      	ldr	r4, [r6, #0]
 8006924:	4626      	mov	r6, r4
 8006926:	2e00      	cmp	r6, #0
 8006928:	d140      	bne.n	80069ac <_malloc_r+0xcc>
 800692a:	6823      	ldr	r3, [r4, #0]
 800692c:	4631      	mov	r1, r6
 800692e:	4638      	mov	r0, r7
 8006930:	eb04 0803 	add.w	r8, r4, r3
 8006934:	f000 f8b2 	bl	8006a9c <_sbrk_r>
 8006938:	4580      	cmp	r8, r0
 800693a:	d13a      	bne.n	80069b2 <_malloc_r+0xd2>
 800693c:	6821      	ldr	r1, [r4, #0]
 800693e:	3503      	adds	r5, #3
 8006940:	1a6d      	subs	r5, r5, r1
 8006942:	f025 0503 	bic.w	r5, r5, #3
 8006946:	3508      	adds	r5, #8
 8006948:	2d0c      	cmp	r5, #12
 800694a:	bf38      	it	cc
 800694c:	250c      	movcc	r5, #12
 800694e:	4638      	mov	r0, r7
 8006950:	4629      	mov	r1, r5
 8006952:	f7ff ffa5 	bl	80068a0 <sbrk_aligned>
 8006956:	3001      	adds	r0, #1
 8006958:	d02b      	beq.n	80069b2 <_malloc_r+0xd2>
 800695a:	6823      	ldr	r3, [r4, #0]
 800695c:	442b      	add	r3, r5
 800695e:	6023      	str	r3, [r4, #0]
 8006960:	e00e      	b.n	8006980 <_malloc_r+0xa0>
 8006962:	6822      	ldr	r2, [r4, #0]
 8006964:	1b52      	subs	r2, r2, r5
 8006966:	d41e      	bmi.n	80069a6 <_malloc_r+0xc6>
 8006968:	2a0b      	cmp	r2, #11
 800696a:	d916      	bls.n	800699a <_malloc_r+0xba>
 800696c:	1961      	adds	r1, r4, r5
 800696e:	42a3      	cmp	r3, r4
 8006970:	6025      	str	r5, [r4, #0]
 8006972:	bf18      	it	ne
 8006974:	6059      	strne	r1, [r3, #4]
 8006976:	6863      	ldr	r3, [r4, #4]
 8006978:	bf08      	it	eq
 800697a:	6031      	streq	r1, [r6, #0]
 800697c:	5162      	str	r2, [r4, r5]
 800697e:	604b      	str	r3, [r1, #4]
 8006980:	4638      	mov	r0, r7
 8006982:	f104 060b 	add.w	r6, r4, #11
 8006986:	f000 f8bf 	bl	8006b08 <__malloc_unlock>
 800698a:	f026 0607 	bic.w	r6, r6, #7
 800698e:	1d23      	adds	r3, r4, #4
 8006990:	1af2      	subs	r2, r6, r3
 8006992:	d0b6      	beq.n	8006902 <_malloc_r+0x22>
 8006994:	1b9b      	subs	r3, r3, r6
 8006996:	50a3      	str	r3, [r4, r2]
 8006998:	e7b3      	b.n	8006902 <_malloc_r+0x22>
 800699a:	6862      	ldr	r2, [r4, #4]
 800699c:	42a3      	cmp	r3, r4
 800699e:	bf0c      	ite	eq
 80069a0:	6032      	streq	r2, [r6, #0]
 80069a2:	605a      	strne	r2, [r3, #4]
 80069a4:	e7ec      	b.n	8006980 <_malloc_r+0xa0>
 80069a6:	4623      	mov	r3, r4
 80069a8:	6864      	ldr	r4, [r4, #4]
 80069aa:	e7b2      	b.n	8006912 <_malloc_r+0x32>
 80069ac:	4634      	mov	r4, r6
 80069ae:	6876      	ldr	r6, [r6, #4]
 80069b0:	e7b9      	b.n	8006926 <_malloc_r+0x46>
 80069b2:	230c      	movs	r3, #12
 80069b4:	4638      	mov	r0, r7
 80069b6:	603b      	str	r3, [r7, #0]
 80069b8:	f000 f8a6 	bl	8006b08 <__malloc_unlock>
 80069bc:	e7a1      	b.n	8006902 <_malloc_r+0x22>
 80069be:	6025      	str	r5, [r4, #0]
 80069c0:	e7de      	b.n	8006980 <_malloc_r+0xa0>
 80069c2:	bf00      	nop
 80069c4:	20001cb0 	.word	0x20001cb0

080069c8 <cleanup_glue>:
 80069c8:	b538      	push	{r3, r4, r5, lr}
 80069ca:	460c      	mov	r4, r1
 80069cc:	6809      	ldr	r1, [r1, #0]
 80069ce:	4605      	mov	r5, r0
 80069d0:	b109      	cbz	r1, 80069d6 <cleanup_glue+0xe>
 80069d2:	f7ff fff9 	bl	80069c8 <cleanup_glue>
 80069d6:	4621      	mov	r1, r4
 80069d8:	4628      	mov	r0, r5
 80069da:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80069de:	f000 b899 	b.w	8006b14 <_free_r>
	...

080069e4 <_reclaim_reent>:
 80069e4:	4b2c      	ldr	r3, [pc, #176]	; (8006a98 <_reclaim_reent+0xb4>)
 80069e6:	b570      	push	{r4, r5, r6, lr}
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	4604      	mov	r4, r0
 80069ec:	4283      	cmp	r3, r0
 80069ee:	d051      	beq.n	8006a94 <_reclaim_reent+0xb0>
 80069f0:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80069f2:	b143      	cbz	r3, 8006a06 <_reclaim_reent+0x22>
 80069f4:	68db      	ldr	r3, [r3, #12]
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d14a      	bne.n	8006a90 <_reclaim_reent+0xac>
 80069fa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80069fc:	6819      	ldr	r1, [r3, #0]
 80069fe:	b111      	cbz	r1, 8006a06 <_reclaim_reent+0x22>
 8006a00:	4620      	mov	r0, r4
 8006a02:	f000 f887 	bl	8006b14 <_free_r>
 8006a06:	6961      	ldr	r1, [r4, #20]
 8006a08:	b111      	cbz	r1, 8006a10 <_reclaim_reent+0x2c>
 8006a0a:	4620      	mov	r0, r4
 8006a0c:	f000 f882 	bl	8006b14 <_free_r>
 8006a10:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8006a12:	b111      	cbz	r1, 8006a1a <_reclaim_reent+0x36>
 8006a14:	4620      	mov	r0, r4
 8006a16:	f000 f87d 	bl	8006b14 <_free_r>
 8006a1a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8006a1c:	b111      	cbz	r1, 8006a24 <_reclaim_reent+0x40>
 8006a1e:	4620      	mov	r0, r4
 8006a20:	f000 f878 	bl	8006b14 <_free_r>
 8006a24:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8006a26:	b111      	cbz	r1, 8006a2e <_reclaim_reent+0x4a>
 8006a28:	4620      	mov	r0, r4
 8006a2a:	f000 f873 	bl	8006b14 <_free_r>
 8006a2e:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8006a30:	b111      	cbz	r1, 8006a38 <_reclaim_reent+0x54>
 8006a32:	4620      	mov	r0, r4
 8006a34:	f000 f86e 	bl	8006b14 <_free_r>
 8006a38:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8006a3a:	b111      	cbz	r1, 8006a42 <_reclaim_reent+0x5e>
 8006a3c:	4620      	mov	r0, r4
 8006a3e:	f000 f869 	bl	8006b14 <_free_r>
 8006a42:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8006a44:	b111      	cbz	r1, 8006a4c <_reclaim_reent+0x68>
 8006a46:	4620      	mov	r0, r4
 8006a48:	f000 f864 	bl	8006b14 <_free_r>
 8006a4c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006a4e:	b111      	cbz	r1, 8006a56 <_reclaim_reent+0x72>
 8006a50:	4620      	mov	r0, r4
 8006a52:	f000 f85f 	bl	8006b14 <_free_r>
 8006a56:	69a3      	ldr	r3, [r4, #24]
 8006a58:	b1e3      	cbz	r3, 8006a94 <_reclaim_reent+0xb0>
 8006a5a:	4620      	mov	r0, r4
 8006a5c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8006a5e:	4798      	blx	r3
 8006a60:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8006a62:	b1b9      	cbz	r1, 8006a94 <_reclaim_reent+0xb0>
 8006a64:	4620      	mov	r0, r4
 8006a66:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8006a6a:	f7ff bfad 	b.w	80069c8 <cleanup_glue>
 8006a6e:	5949      	ldr	r1, [r1, r5]
 8006a70:	b941      	cbnz	r1, 8006a84 <_reclaim_reent+0xa0>
 8006a72:	3504      	adds	r5, #4
 8006a74:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006a76:	2d80      	cmp	r5, #128	; 0x80
 8006a78:	68d9      	ldr	r1, [r3, #12]
 8006a7a:	d1f8      	bne.n	8006a6e <_reclaim_reent+0x8a>
 8006a7c:	4620      	mov	r0, r4
 8006a7e:	f000 f849 	bl	8006b14 <_free_r>
 8006a82:	e7ba      	b.n	80069fa <_reclaim_reent+0x16>
 8006a84:	680e      	ldr	r6, [r1, #0]
 8006a86:	4620      	mov	r0, r4
 8006a88:	f000 f844 	bl	8006b14 <_free_r>
 8006a8c:	4631      	mov	r1, r6
 8006a8e:	e7ef      	b.n	8006a70 <_reclaim_reent+0x8c>
 8006a90:	2500      	movs	r5, #0
 8006a92:	e7ef      	b.n	8006a74 <_reclaim_reent+0x90>
 8006a94:	bd70      	pop	{r4, r5, r6, pc}
 8006a96:	bf00      	nop
 8006a98:	2000001c 	.word	0x2000001c

08006a9c <_sbrk_r>:
 8006a9c:	b538      	push	{r3, r4, r5, lr}
 8006a9e:	2300      	movs	r3, #0
 8006aa0:	4d05      	ldr	r5, [pc, #20]	; (8006ab8 <_sbrk_r+0x1c>)
 8006aa2:	4604      	mov	r4, r0
 8006aa4:	4608      	mov	r0, r1
 8006aa6:	602b      	str	r3, [r5, #0]
 8006aa8:	f7fa f9d2 	bl	8000e50 <_sbrk>
 8006aac:	1c43      	adds	r3, r0, #1
 8006aae:	d102      	bne.n	8006ab6 <_sbrk_r+0x1a>
 8006ab0:	682b      	ldr	r3, [r5, #0]
 8006ab2:	b103      	cbz	r3, 8006ab6 <_sbrk_r+0x1a>
 8006ab4:	6023      	str	r3, [r4, #0]
 8006ab6:	bd38      	pop	{r3, r4, r5, pc}
 8006ab8:	20001cb8 	.word	0x20001cb8

08006abc <siprintf>:
 8006abc:	b40e      	push	{r1, r2, r3}
 8006abe:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006ac2:	b500      	push	{lr}
 8006ac4:	b09c      	sub	sp, #112	; 0x70
 8006ac6:	ab1d      	add	r3, sp, #116	; 0x74
 8006ac8:	9002      	str	r0, [sp, #8]
 8006aca:	9006      	str	r0, [sp, #24]
 8006acc:	9107      	str	r1, [sp, #28]
 8006ace:	9104      	str	r1, [sp, #16]
 8006ad0:	4808      	ldr	r0, [pc, #32]	; (8006af4 <siprintf+0x38>)
 8006ad2:	4909      	ldr	r1, [pc, #36]	; (8006af8 <siprintf+0x3c>)
 8006ad4:	f853 2b04 	ldr.w	r2, [r3], #4
 8006ad8:	9105      	str	r1, [sp, #20]
 8006ada:	6800      	ldr	r0, [r0, #0]
 8006adc:	a902      	add	r1, sp, #8
 8006ade:	9301      	str	r3, [sp, #4]
 8006ae0:	f000 f8bc 	bl	8006c5c <_svfiprintf_r>
 8006ae4:	2200      	movs	r2, #0
 8006ae6:	9b02      	ldr	r3, [sp, #8]
 8006ae8:	701a      	strb	r2, [r3, #0]
 8006aea:	b01c      	add	sp, #112	; 0x70
 8006aec:	f85d eb04 	ldr.w	lr, [sp], #4
 8006af0:	b003      	add	sp, #12
 8006af2:	4770      	bx	lr
 8006af4:	2000001c 	.word	0x2000001c
 8006af8:	ffff0208 	.word	0xffff0208

08006afc <__malloc_lock>:
 8006afc:	4801      	ldr	r0, [pc, #4]	; (8006b04 <__malloc_lock+0x8>)
 8006afe:	f7ff beb7 	b.w	8006870 <__retarget_lock_acquire_recursive>
 8006b02:	bf00      	nop
 8006b04:	20001cac 	.word	0x20001cac

08006b08 <__malloc_unlock>:
 8006b08:	4801      	ldr	r0, [pc, #4]	; (8006b10 <__malloc_unlock+0x8>)
 8006b0a:	f7ff beb2 	b.w	8006872 <__retarget_lock_release_recursive>
 8006b0e:	bf00      	nop
 8006b10:	20001cac 	.word	0x20001cac

08006b14 <_free_r>:
 8006b14:	b538      	push	{r3, r4, r5, lr}
 8006b16:	4605      	mov	r5, r0
 8006b18:	2900      	cmp	r1, #0
 8006b1a:	d040      	beq.n	8006b9e <_free_r+0x8a>
 8006b1c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006b20:	1f0c      	subs	r4, r1, #4
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	bfb8      	it	lt
 8006b26:	18e4      	addlt	r4, r4, r3
 8006b28:	f7ff ffe8 	bl	8006afc <__malloc_lock>
 8006b2c:	4a1c      	ldr	r2, [pc, #112]	; (8006ba0 <_free_r+0x8c>)
 8006b2e:	6813      	ldr	r3, [r2, #0]
 8006b30:	b933      	cbnz	r3, 8006b40 <_free_r+0x2c>
 8006b32:	6063      	str	r3, [r4, #4]
 8006b34:	6014      	str	r4, [r2, #0]
 8006b36:	4628      	mov	r0, r5
 8006b38:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006b3c:	f7ff bfe4 	b.w	8006b08 <__malloc_unlock>
 8006b40:	42a3      	cmp	r3, r4
 8006b42:	d908      	bls.n	8006b56 <_free_r+0x42>
 8006b44:	6820      	ldr	r0, [r4, #0]
 8006b46:	1821      	adds	r1, r4, r0
 8006b48:	428b      	cmp	r3, r1
 8006b4a:	bf01      	itttt	eq
 8006b4c:	6819      	ldreq	r1, [r3, #0]
 8006b4e:	685b      	ldreq	r3, [r3, #4]
 8006b50:	1809      	addeq	r1, r1, r0
 8006b52:	6021      	streq	r1, [r4, #0]
 8006b54:	e7ed      	b.n	8006b32 <_free_r+0x1e>
 8006b56:	461a      	mov	r2, r3
 8006b58:	685b      	ldr	r3, [r3, #4]
 8006b5a:	b10b      	cbz	r3, 8006b60 <_free_r+0x4c>
 8006b5c:	42a3      	cmp	r3, r4
 8006b5e:	d9fa      	bls.n	8006b56 <_free_r+0x42>
 8006b60:	6811      	ldr	r1, [r2, #0]
 8006b62:	1850      	adds	r0, r2, r1
 8006b64:	42a0      	cmp	r0, r4
 8006b66:	d10b      	bne.n	8006b80 <_free_r+0x6c>
 8006b68:	6820      	ldr	r0, [r4, #0]
 8006b6a:	4401      	add	r1, r0
 8006b6c:	1850      	adds	r0, r2, r1
 8006b6e:	4283      	cmp	r3, r0
 8006b70:	6011      	str	r1, [r2, #0]
 8006b72:	d1e0      	bne.n	8006b36 <_free_r+0x22>
 8006b74:	6818      	ldr	r0, [r3, #0]
 8006b76:	685b      	ldr	r3, [r3, #4]
 8006b78:	4401      	add	r1, r0
 8006b7a:	6011      	str	r1, [r2, #0]
 8006b7c:	6053      	str	r3, [r2, #4]
 8006b7e:	e7da      	b.n	8006b36 <_free_r+0x22>
 8006b80:	d902      	bls.n	8006b88 <_free_r+0x74>
 8006b82:	230c      	movs	r3, #12
 8006b84:	602b      	str	r3, [r5, #0]
 8006b86:	e7d6      	b.n	8006b36 <_free_r+0x22>
 8006b88:	6820      	ldr	r0, [r4, #0]
 8006b8a:	1821      	adds	r1, r4, r0
 8006b8c:	428b      	cmp	r3, r1
 8006b8e:	bf01      	itttt	eq
 8006b90:	6819      	ldreq	r1, [r3, #0]
 8006b92:	685b      	ldreq	r3, [r3, #4]
 8006b94:	1809      	addeq	r1, r1, r0
 8006b96:	6021      	streq	r1, [r4, #0]
 8006b98:	6063      	str	r3, [r4, #4]
 8006b9a:	6054      	str	r4, [r2, #4]
 8006b9c:	e7cb      	b.n	8006b36 <_free_r+0x22>
 8006b9e:	bd38      	pop	{r3, r4, r5, pc}
 8006ba0:	20001cb0 	.word	0x20001cb0

08006ba4 <__ssputs_r>:
 8006ba4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006ba8:	688e      	ldr	r6, [r1, #8]
 8006baa:	4682      	mov	sl, r0
 8006bac:	429e      	cmp	r6, r3
 8006bae:	460c      	mov	r4, r1
 8006bb0:	4690      	mov	r8, r2
 8006bb2:	461f      	mov	r7, r3
 8006bb4:	d838      	bhi.n	8006c28 <__ssputs_r+0x84>
 8006bb6:	898a      	ldrh	r2, [r1, #12]
 8006bb8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006bbc:	d032      	beq.n	8006c24 <__ssputs_r+0x80>
 8006bbe:	6825      	ldr	r5, [r4, #0]
 8006bc0:	6909      	ldr	r1, [r1, #16]
 8006bc2:	3301      	adds	r3, #1
 8006bc4:	eba5 0901 	sub.w	r9, r5, r1
 8006bc8:	6965      	ldr	r5, [r4, #20]
 8006bca:	444b      	add	r3, r9
 8006bcc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006bd0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006bd4:	106d      	asrs	r5, r5, #1
 8006bd6:	429d      	cmp	r5, r3
 8006bd8:	bf38      	it	cc
 8006bda:	461d      	movcc	r5, r3
 8006bdc:	0553      	lsls	r3, r2, #21
 8006bde:	d531      	bpl.n	8006c44 <__ssputs_r+0xa0>
 8006be0:	4629      	mov	r1, r5
 8006be2:	f7ff fe7d 	bl	80068e0 <_malloc_r>
 8006be6:	4606      	mov	r6, r0
 8006be8:	b950      	cbnz	r0, 8006c00 <__ssputs_r+0x5c>
 8006bea:	230c      	movs	r3, #12
 8006bec:	f04f 30ff 	mov.w	r0, #4294967295
 8006bf0:	f8ca 3000 	str.w	r3, [sl]
 8006bf4:	89a3      	ldrh	r3, [r4, #12]
 8006bf6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006bfa:	81a3      	strh	r3, [r4, #12]
 8006bfc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006c00:	464a      	mov	r2, r9
 8006c02:	6921      	ldr	r1, [r4, #16]
 8006c04:	f7ff fe36 	bl	8006874 <memcpy>
 8006c08:	89a3      	ldrh	r3, [r4, #12]
 8006c0a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006c0e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006c12:	81a3      	strh	r3, [r4, #12]
 8006c14:	6126      	str	r6, [r4, #16]
 8006c16:	444e      	add	r6, r9
 8006c18:	6026      	str	r6, [r4, #0]
 8006c1a:	463e      	mov	r6, r7
 8006c1c:	6165      	str	r5, [r4, #20]
 8006c1e:	eba5 0509 	sub.w	r5, r5, r9
 8006c22:	60a5      	str	r5, [r4, #8]
 8006c24:	42be      	cmp	r6, r7
 8006c26:	d900      	bls.n	8006c2a <__ssputs_r+0x86>
 8006c28:	463e      	mov	r6, r7
 8006c2a:	4632      	mov	r2, r6
 8006c2c:	4641      	mov	r1, r8
 8006c2e:	6820      	ldr	r0, [r4, #0]
 8006c30:	f000 fab8 	bl	80071a4 <memmove>
 8006c34:	68a3      	ldr	r3, [r4, #8]
 8006c36:	2000      	movs	r0, #0
 8006c38:	1b9b      	subs	r3, r3, r6
 8006c3a:	60a3      	str	r3, [r4, #8]
 8006c3c:	6823      	ldr	r3, [r4, #0]
 8006c3e:	4433      	add	r3, r6
 8006c40:	6023      	str	r3, [r4, #0]
 8006c42:	e7db      	b.n	8006bfc <__ssputs_r+0x58>
 8006c44:	462a      	mov	r2, r5
 8006c46:	f000 fac7 	bl	80071d8 <_realloc_r>
 8006c4a:	4606      	mov	r6, r0
 8006c4c:	2800      	cmp	r0, #0
 8006c4e:	d1e1      	bne.n	8006c14 <__ssputs_r+0x70>
 8006c50:	4650      	mov	r0, sl
 8006c52:	6921      	ldr	r1, [r4, #16]
 8006c54:	f7ff ff5e 	bl	8006b14 <_free_r>
 8006c58:	e7c7      	b.n	8006bea <__ssputs_r+0x46>
	...

08006c5c <_svfiprintf_r>:
 8006c5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c60:	4698      	mov	r8, r3
 8006c62:	898b      	ldrh	r3, [r1, #12]
 8006c64:	4607      	mov	r7, r0
 8006c66:	061b      	lsls	r3, r3, #24
 8006c68:	460d      	mov	r5, r1
 8006c6a:	4614      	mov	r4, r2
 8006c6c:	b09d      	sub	sp, #116	; 0x74
 8006c6e:	d50e      	bpl.n	8006c8e <_svfiprintf_r+0x32>
 8006c70:	690b      	ldr	r3, [r1, #16]
 8006c72:	b963      	cbnz	r3, 8006c8e <_svfiprintf_r+0x32>
 8006c74:	2140      	movs	r1, #64	; 0x40
 8006c76:	f7ff fe33 	bl	80068e0 <_malloc_r>
 8006c7a:	6028      	str	r0, [r5, #0]
 8006c7c:	6128      	str	r0, [r5, #16]
 8006c7e:	b920      	cbnz	r0, 8006c8a <_svfiprintf_r+0x2e>
 8006c80:	230c      	movs	r3, #12
 8006c82:	603b      	str	r3, [r7, #0]
 8006c84:	f04f 30ff 	mov.w	r0, #4294967295
 8006c88:	e0d1      	b.n	8006e2e <_svfiprintf_r+0x1d2>
 8006c8a:	2340      	movs	r3, #64	; 0x40
 8006c8c:	616b      	str	r3, [r5, #20]
 8006c8e:	2300      	movs	r3, #0
 8006c90:	9309      	str	r3, [sp, #36]	; 0x24
 8006c92:	2320      	movs	r3, #32
 8006c94:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006c98:	2330      	movs	r3, #48	; 0x30
 8006c9a:	f04f 0901 	mov.w	r9, #1
 8006c9e:	f8cd 800c 	str.w	r8, [sp, #12]
 8006ca2:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8006e48 <_svfiprintf_r+0x1ec>
 8006ca6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006caa:	4623      	mov	r3, r4
 8006cac:	469a      	mov	sl, r3
 8006cae:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006cb2:	b10a      	cbz	r2, 8006cb8 <_svfiprintf_r+0x5c>
 8006cb4:	2a25      	cmp	r2, #37	; 0x25
 8006cb6:	d1f9      	bne.n	8006cac <_svfiprintf_r+0x50>
 8006cb8:	ebba 0b04 	subs.w	fp, sl, r4
 8006cbc:	d00b      	beq.n	8006cd6 <_svfiprintf_r+0x7a>
 8006cbe:	465b      	mov	r3, fp
 8006cc0:	4622      	mov	r2, r4
 8006cc2:	4629      	mov	r1, r5
 8006cc4:	4638      	mov	r0, r7
 8006cc6:	f7ff ff6d 	bl	8006ba4 <__ssputs_r>
 8006cca:	3001      	adds	r0, #1
 8006ccc:	f000 80aa 	beq.w	8006e24 <_svfiprintf_r+0x1c8>
 8006cd0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006cd2:	445a      	add	r2, fp
 8006cd4:	9209      	str	r2, [sp, #36]	; 0x24
 8006cd6:	f89a 3000 	ldrb.w	r3, [sl]
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	f000 80a2 	beq.w	8006e24 <_svfiprintf_r+0x1c8>
 8006ce0:	2300      	movs	r3, #0
 8006ce2:	f04f 32ff 	mov.w	r2, #4294967295
 8006ce6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006cea:	f10a 0a01 	add.w	sl, sl, #1
 8006cee:	9304      	str	r3, [sp, #16]
 8006cf0:	9307      	str	r3, [sp, #28]
 8006cf2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006cf6:	931a      	str	r3, [sp, #104]	; 0x68
 8006cf8:	4654      	mov	r4, sl
 8006cfa:	2205      	movs	r2, #5
 8006cfc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006d00:	4851      	ldr	r0, [pc, #324]	; (8006e48 <_svfiprintf_r+0x1ec>)
 8006d02:	f000 fa41 	bl	8007188 <memchr>
 8006d06:	9a04      	ldr	r2, [sp, #16]
 8006d08:	b9d8      	cbnz	r0, 8006d42 <_svfiprintf_r+0xe6>
 8006d0a:	06d0      	lsls	r0, r2, #27
 8006d0c:	bf44      	itt	mi
 8006d0e:	2320      	movmi	r3, #32
 8006d10:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006d14:	0711      	lsls	r1, r2, #28
 8006d16:	bf44      	itt	mi
 8006d18:	232b      	movmi	r3, #43	; 0x2b
 8006d1a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006d1e:	f89a 3000 	ldrb.w	r3, [sl]
 8006d22:	2b2a      	cmp	r3, #42	; 0x2a
 8006d24:	d015      	beq.n	8006d52 <_svfiprintf_r+0xf6>
 8006d26:	4654      	mov	r4, sl
 8006d28:	2000      	movs	r0, #0
 8006d2a:	f04f 0c0a 	mov.w	ip, #10
 8006d2e:	9a07      	ldr	r2, [sp, #28]
 8006d30:	4621      	mov	r1, r4
 8006d32:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006d36:	3b30      	subs	r3, #48	; 0x30
 8006d38:	2b09      	cmp	r3, #9
 8006d3a:	d94e      	bls.n	8006dda <_svfiprintf_r+0x17e>
 8006d3c:	b1b0      	cbz	r0, 8006d6c <_svfiprintf_r+0x110>
 8006d3e:	9207      	str	r2, [sp, #28]
 8006d40:	e014      	b.n	8006d6c <_svfiprintf_r+0x110>
 8006d42:	eba0 0308 	sub.w	r3, r0, r8
 8006d46:	fa09 f303 	lsl.w	r3, r9, r3
 8006d4a:	4313      	orrs	r3, r2
 8006d4c:	46a2      	mov	sl, r4
 8006d4e:	9304      	str	r3, [sp, #16]
 8006d50:	e7d2      	b.n	8006cf8 <_svfiprintf_r+0x9c>
 8006d52:	9b03      	ldr	r3, [sp, #12]
 8006d54:	1d19      	adds	r1, r3, #4
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	9103      	str	r1, [sp, #12]
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	bfbb      	ittet	lt
 8006d5e:	425b      	neglt	r3, r3
 8006d60:	f042 0202 	orrlt.w	r2, r2, #2
 8006d64:	9307      	strge	r3, [sp, #28]
 8006d66:	9307      	strlt	r3, [sp, #28]
 8006d68:	bfb8      	it	lt
 8006d6a:	9204      	strlt	r2, [sp, #16]
 8006d6c:	7823      	ldrb	r3, [r4, #0]
 8006d6e:	2b2e      	cmp	r3, #46	; 0x2e
 8006d70:	d10c      	bne.n	8006d8c <_svfiprintf_r+0x130>
 8006d72:	7863      	ldrb	r3, [r4, #1]
 8006d74:	2b2a      	cmp	r3, #42	; 0x2a
 8006d76:	d135      	bne.n	8006de4 <_svfiprintf_r+0x188>
 8006d78:	9b03      	ldr	r3, [sp, #12]
 8006d7a:	3402      	adds	r4, #2
 8006d7c:	1d1a      	adds	r2, r3, #4
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	9203      	str	r2, [sp, #12]
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	bfb8      	it	lt
 8006d86:	f04f 33ff 	movlt.w	r3, #4294967295
 8006d8a:	9305      	str	r3, [sp, #20]
 8006d8c:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8006e4c <_svfiprintf_r+0x1f0>
 8006d90:	2203      	movs	r2, #3
 8006d92:	4650      	mov	r0, sl
 8006d94:	7821      	ldrb	r1, [r4, #0]
 8006d96:	f000 f9f7 	bl	8007188 <memchr>
 8006d9a:	b140      	cbz	r0, 8006dae <_svfiprintf_r+0x152>
 8006d9c:	2340      	movs	r3, #64	; 0x40
 8006d9e:	eba0 000a 	sub.w	r0, r0, sl
 8006da2:	fa03 f000 	lsl.w	r0, r3, r0
 8006da6:	9b04      	ldr	r3, [sp, #16]
 8006da8:	3401      	adds	r4, #1
 8006daa:	4303      	orrs	r3, r0
 8006dac:	9304      	str	r3, [sp, #16]
 8006dae:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006db2:	2206      	movs	r2, #6
 8006db4:	4826      	ldr	r0, [pc, #152]	; (8006e50 <_svfiprintf_r+0x1f4>)
 8006db6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006dba:	f000 f9e5 	bl	8007188 <memchr>
 8006dbe:	2800      	cmp	r0, #0
 8006dc0:	d038      	beq.n	8006e34 <_svfiprintf_r+0x1d8>
 8006dc2:	4b24      	ldr	r3, [pc, #144]	; (8006e54 <_svfiprintf_r+0x1f8>)
 8006dc4:	bb1b      	cbnz	r3, 8006e0e <_svfiprintf_r+0x1b2>
 8006dc6:	9b03      	ldr	r3, [sp, #12]
 8006dc8:	3307      	adds	r3, #7
 8006dca:	f023 0307 	bic.w	r3, r3, #7
 8006dce:	3308      	adds	r3, #8
 8006dd0:	9303      	str	r3, [sp, #12]
 8006dd2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006dd4:	4433      	add	r3, r6
 8006dd6:	9309      	str	r3, [sp, #36]	; 0x24
 8006dd8:	e767      	b.n	8006caa <_svfiprintf_r+0x4e>
 8006dda:	460c      	mov	r4, r1
 8006ddc:	2001      	movs	r0, #1
 8006dde:	fb0c 3202 	mla	r2, ip, r2, r3
 8006de2:	e7a5      	b.n	8006d30 <_svfiprintf_r+0xd4>
 8006de4:	2300      	movs	r3, #0
 8006de6:	f04f 0c0a 	mov.w	ip, #10
 8006dea:	4619      	mov	r1, r3
 8006dec:	3401      	adds	r4, #1
 8006dee:	9305      	str	r3, [sp, #20]
 8006df0:	4620      	mov	r0, r4
 8006df2:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006df6:	3a30      	subs	r2, #48	; 0x30
 8006df8:	2a09      	cmp	r2, #9
 8006dfa:	d903      	bls.n	8006e04 <_svfiprintf_r+0x1a8>
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	d0c5      	beq.n	8006d8c <_svfiprintf_r+0x130>
 8006e00:	9105      	str	r1, [sp, #20]
 8006e02:	e7c3      	b.n	8006d8c <_svfiprintf_r+0x130>
 8006e04:	4604      	mov	r4, r0
 8006e06:	2301      	movs	r3, #1
 8006e08:	fb0c 2101 	mla	r1, ip, r1, r2
 8006e0c:	e7f0      	b.n	8006df0 <_svfiprintf_r+0x194>
 8006e0e:	ab03      	add	r3, sp, #12
 8006e10:	9300      	str	r3, [sp, #0]
 8006e12:	462a      	mov	r2, r5
 8006e14:	4638      	mov	r0, r7
 8006e16:	4b10      	ldr	r3, [pc, #64]	; (8006e58 <_svfiprintf_r+0x1fc>)
 8006e18:	a904      	add	r1, sp, #16
 8006e1a:	f3af 8000 	nop.w
 8006e1e:	1c42      	adds	r2, r0, #1
 8006e20:	4606      	mov	r6, r0
 8006e22:	d1d6      	bne.n	8006dd2 <_svfiprintf_r+0x176>
 8006e24:	89ab      	ldrh	r3, [r5, #12]
 8006e26:	065b      	lsls	r3, r3, #25
 8006e28:	f53f af2c 	bmi.w	8006c84 <_svfiprintf_r+0x28>
 8006e2c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006e2e:	b01d      	add	sp, #116	; 0x74
 8006e30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006e34:	ab03      	add	r3, sp, #12
 8006e36:	9300      	str	r3, [sp, #0]
 8006e38:	462a      	mov	r2, r5
 8006e3a:	4638      	mov	r0, r7
 8006e3c:	4b06      	ldr	r3, [pc, #24]	; (8006e58 <_svfiprintf_r+0x1fc>)
 8006e3e:	a904      	add	r1, sp, #16
 8006e40:	f000 f87c 	bl	8006f3c <_printf_i>
 8006e44:	e7eb      	b.n	8006e1e <_svfiprintf_r+0x1c2>
 8006e46:	bf00      	nop
 8006e48:	08007478 	.word	0x08007478
 8006e4c:	0800747e 	.word	0x0800747e
 8006e50:	08007482 	.word	0x08007482
 8006e54:	00000000 	.word	0x00000000
 8006e58:	08006ba5 	.word	0x08006ba5

08006e5c <_printf_common>:
 8006e5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006e60:	4616      	mov	r6, r2
 8006e62:	4699      	mov	r9, r3
 8006e64:	688a      	ldr	r2, [r1, #8]
 8006e66:	690b      	ldr	r3, [r1, #16]
 8006e68:	4607      	mov	r7, r0
 8006e6a:	4293      	cmp	r3, r2
 8006e6c:	bfb8      	it	lt
 8006e6e:	4613      	movlt	r3, r2
 8006e70:	6033      	str	r3, [r6, #0]
 8006e72:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006e76:	460c      	mov	r4, r1
 8006e78:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006e7c:	b10a      	cbz	r2, 8006e82 <_printf_common+0x26>
 8006e7e:	3301      	adds	r3, #1
 8006e80:	6033      	str	r3, [r6, #0]
 8006e82:	6823      	ldr	r3, [r4, #0]
 8006e84:	0699      	lsls	r1, r3, #26
 8006e86:	bf42      	ittt	mi
 8006e88:	6833      	ldrmi	r3, [r6, #0]
 8006e8a:	3302      	addmi	r3, #2
 8006e8c:	6033      	strmi	r3, [r6, #0]
 8006e8e:	6825      	ldr	r5, [r4, #0]
 8006e90:	f015 0506 	ands.w	r5, r5, #6
 8006e94:	d106      	bne.n	8006ea4 <_printf_common+0x48>
 8006e96:	f104 0a19 	add.w	sl, r4, #25
 8006e9a:	68e3      	ldr	r3, [r4, #12]
 8006e9c:	6832      	ldr	r2, [r6, #0]
 8006e9e:	1a9b      	subs	r3, r3, r2
 8006ea0:	42ab      	cmp	r3, r5
 8006ea2:	dc28      	bgt.n	8006ef6 <_printf_common+0x9a>
 8006ea4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006ea8:	1e13      	subs	r3, r2, #0
 8006eaa:	6822      	ldr	r2, [r4, #0]
 8006eac:	bf18      	it	ne
 8006eae:	2301      	movne	r3, #1
 8006eb0:	0692      	lsls	r2, r2, #26
 8006eb2:	d42d      	bmi.n	8006f10 <_printf_common+0xb4>
 8006eb4:	4649      	mov	r1, r9
 8006eb6:	4638      	mov	r0, r7
 8006eb8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006ebc:	47c0      	blx	r8
 8006ebe:	3001      	adds	r0, #1
 8006ec0:	d020      	beq.n	8006f04 <_printf_common+0xa8>
 8006ec2:	6823      	ldr	r3, [r4, #0]
 8006ec4:	68e5      	ldr	r5, [r4, #12]
 8006ec6:	f003 0306 	and.w	r3, r3, #6
 8006eca:	2b04      	cmp	r3, #4
 8006ecc:	bf18      	it	ne
 8006ece:	2500      	movne	r5, #0
 8006ed0:	6832      	ldr	r2, [r6, #0]
 8006ed2:	f04f 0600 	mov.w	r6, #0
 8006ed6:	68a3      	ldr	r3, [r4, #8]
 8006ed8:	bf08      	it	eq
 8006eda:	1aad      	subeq	r5, r5, r2
 8006edc:	6922      	ldr	r2, [r4, #16]
 8006ede:	bf08      	it	eq
 8006ee0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006ee4:	4293      	cmp	r3, r2
 8006ee6:	bfc4      	itt	gt
 8006ee8:	1a9b      	subgt	r3, r3, r2
 8006eea:	18ed      	addgt	r5, r5, r3
 8006eec:	341a      	adds	r4, #26
 8006eee:	42b5      	cmp	r5, r6
 8006ef0:	d11a      	bne.n	8006f28 <_printf_common+0xcc>
 8006ef2:	2000      	movs	r0, #0
 8006ef4:	e008      	b.n	8006f08 <_printf_common+0xac>
 8006ef6:	2301      	movs	r3, #1
 8006ef8:	4652      	mov	r2, sl
 8006efa:	4649      	mov	r1, r9
 8006efc:	4638      	mov	r0, r7
 8006efe:	47c0      	blx	r8
 8006f00:	3001      	adds	r0, #1
 8006f02:	d103      	bne.n	8006f0c <_printf_common+0xb0>
 8006f04:	f04f 30ff 	mov.w	r0, #4294967295
 8006f08:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006f0c:	3501      	adds	r5, #1
 8006f0e:	e7c4      	b.n	8006e9a <_printf_common+0x3e>
 8006f10:	2030      	movs	r0, #48	; 0x30
 8006f12:	18e1      	adds	r1, r4, r3
 8006f14:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006f18:	1c5a      	adds	r2, r3, #1
 8006f1a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006f1e:	4422      	add	r2, r4
 8006f20:	3302      	adds	r3, #2
 8006f22:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006f26:	e7c5      	b.n	8006eb4 <_printf_common+0x58>
 8006f28:	2301      	movs	r3, #1
 8006f2a:	4622      	mov	r2, r4
 8006f2c:	4649      	mov	r1, r9
 8006f2e:	4638      	mov	r0, r7
 8006f30:	47c0      	blx	r8
 8006f32:	3001      	adds	r0, #1
 8006f34:	d0e6      	beq.n	8006f04 <_printf_common+0xa8>
 8006f36:	3601      	adds	r6, #1
 8006f38:	e7d9      	b.n	8006eee <_printf_common+0x92>
	...

08006f3c <_printf_i>:
 8006f3c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006f40:	7e0f      	ldrb	r7, [r1, #24]
 8006f42:	4691      	mov	r9, r2
 8006f44:	2f78      	cmp	r7, #120	; 0x78
 8006f46:	4680      	mov	r8, r0
 8006f48:	460c      	mov	r4, r1
 8006f4a:	469a      	mov	sl, r3
 8006f4c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006f4e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006f52:	d807      	bhi.n	8006f64 <_printf_i+0x28>
 8006f54:	2f62      	cmp	r7, #98	; 0x62
 8006f56:	d80a      	bhi.n	8006f6e <_printf_i+0x32>
 8006f58:	2f00      	cmp	r7, #0
 8006f5a:	f000 80d9 	beq.w	8007110 <_printf_i+0x1d4>
 8006f5e:	2f58      	cmp	r7, #88	; 0x58
 8006f60:	f000 80a4 	beq.w	80070ac <_printf_i+0x170>
 8006f64:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006f68:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006f6c:	e03a      	b.n	8006fe4 <_printf_i+0xa8>
 8006f6e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006f72:	2b15      	cmp	r3, #21
 8006f74:	d8f6      	bhi.n	8006f64 <_printf_i+0x28>
 8006f76:	a101      	add	r1, pc, #4	; (adr r1, 8006f7c <_printf_i+0x40>)
 8006f78:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006f7c:	08006fd5 	.word	0x08006fd5
 8006f80:	08006fe9 	.word	0x08006fe9
 8006f84:	08006f65 	.word	0x08006f65
 8006f88:	08006f65 	.word	0x08006f65
 8006f8c:	08006f65 	.word	0x08006f65
 8006f90:	08006f65 	.word	0x08006f65
 8006f94:	08006fe9 	.word	0x08006fe9
 8006f98:	08006f65 	.word	0x08006f65
 8006f9c:	08006f65 	.word	0x08006f65
 8006fa0:	08006f65 	.word	0x08006f65
 8006fa4:	08006f65 	.word	0x08006f65
 8006fa8:	080070f7 	.word	0x080070f7
 8006fac:	08007019 	.word	0x08007019
 8006fb0:	080070d9 	.word	0x080070d9
 8006fb4:	08006f65 	.word	0x08006f65
 8006fb8:	08006f65 	.word	0x08006f65
 8006fbc:	08007119 	.word	0x08007119
 8006fc0:	08006f65 	.word	0x08006f65
 8006fc4:	08007019 	.word	0x08007019
 8006fc8:	08006f65 	.word	0x08006f65
 8006fcc:	08006f65 	.word	0x08006f65
 8006fd0:	080070e1 	.word	0x080070e1
 8006fd4:	682b      	ldr	r3, [r5, #0]
 8006fd6:	1d1a      	adds	r2, r3, #4
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	602a      	str	r2, [r5, #0]
 8006fdc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006fe0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006fe4:	2301      	movs	r3, #1
 8006fe6:	e0a4      	b.n	8007132 <_printf_i+0x1f6>
 8006fe8:	6820      	ldr	r0, [r4, #0]
 8006fea:	6829      	ldr	r1, [r5, #0]
 8006fec:	0606      	lsls	r6, r0, #24
 8006fee:	f101 0304 	add.w	r3, r1, #4
 8006ff2:	d50a      	bpl.n	800700a <_printf_i+0xce>
 8006ff4:	680e      	ldr	r6, [r1, #0]
 8006ff6:	602b      	str	r3, [r5, #0]
 8006ff8:	2e00      	cmp	r6, #0
 8006ffa:	da03      	bge.n	8007004 <_printf_i+0xc8>
 8006ffc:	232d      	movs	r3, #45	; 0x2d
 8006ffe:	4276      	negs	r6, r6
 8007000:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007004:	230a      	movs	r3, #10
 8007006:	485e      	ldr	r0, [pc, #376]	; (8007180 <_printf_i+0x244>)
 8007008:	e019      	b.n	800703e <_printf_i+0x102>
 800700a:	680e      	ldr	r6, [r1, #0]
 800700c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007010:	602b      	str	r3, [r5, #0]
 8007012:	bf18      	it	ne
 8007014:	b236      	sxthne	r6, r6
 8007016:	e7ef      	b.n	8006ff8 <_printf_i+0xbc>
 8007018:	682b      	ldr	r3, [r5, #0]
 800701a:	6820      	ldr	r0, [r4, #0]
 800701c:	1d19      	adds	r1, r3, #4
 800701e:	6029      	str	r1, [r5, #0]
 8007020:	0601      	lsls	r1, r0, #24
 8007022:	d501      	bpl.n	8007028 <_printf_i+0xec>
 8007024:	681e      	ldr	r6, [r3, #0]
 8007026:	e002      	b.n	800702e <_printf_i+0xf2>
 8007028:	0646      	lsls	r6, r0, #25
 800702a:	d5fb      	bpl.n	8007024 <_printf_i+0xe8>
 800702c:	881e      	ldrh	r6, [r3, #0]
 800702e:	2f6f      	cmp	r7, #111	; 0x6f
 8007030:	bf0c      	ite	eq
 8007032:	2308      	moveq	r3, #8
 8007034:	230a      	movne	r3, #10
 8007036:	4852      	ldr	r0, [pc, #328]	; (8007180 <_printf_i+0x244>)
 8007038:	2100      	movs	r1, #0
 800703a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800703e:	6865      	ldr	r5, [r4, #4]
 8007040:	2d00      	cmp	r5, #0
 8007042:	bfa8      	it	ge
 8007044:	6821      	ldrge	r1, [r4, #0]
 8007046:	60a5      	str	r5, [r4, #8]
 8007048:	bfa4      	itt	ge
 800704a:	f021 0104 	bicge.w	r1, r1, #4
 800704e:	6021      	strge	r1, [r4, #0]
 8007050:	b90e      	cbnz	r6, 8007056 <_printf_i+0x11a>
 8007052:	2d00      	cmp	r5, #0
 8007054:	d04d      	beq.n	80070f2 <_printf_i+0x1b6>
 8007056:	4615      	mov	r5, r2
 8007058:	fbb6 f1f3 	udiv	r1, r6, r3
 800705c:	fb03 6711 	mls	r7, r3, r1, r6
 8007060:	5dc7      	ldrb	r7, [r0, r7]
 8007062:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007066:	4637      	mov	r7, r6
 8007068:	42bb      	cmp	r3, r7
 800706a:	460e      	mov	r6, r1
 800706c:	d9f4      	bls.n	8007058 <_printf_i+0x11c>
 800706e:	2b08      	cmp	r3, #8
 8007070:	d10b      	bne.n	800708a <_printf_i+0x14e>
 8007072:	6823      	ldr	r3, [r4, #0]
 8007074:	07de      	lsls	r6, r3, #31
 8007076:	d508      	bpl.n	800708a <_printf_i+0x14e>
 8007078:	6923      	ldr	r3, [r4, #16]
 800707a:	6861      	ldr	r1, [r4, #4]
 800707c:	4299      	cmp	r1, r3
 800707e:	bfde      	ittt	le
 8007080:	2330      	movle	r3, #48	; 0x30
 8007082:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007086:	f105 35ff 	addle.w	r5, r5, #4294967295
 800708a:	1b52      	subs	r2, r2, r5
 800708c:	6122      	str	r2, [r4, #16]
 800708e:	464b      	mov	r3, r9
 8007090:	4621      	mov	r1, r4
 8007092:	4640      	mov	r0, r8
 8007094:	f8cd a000 	str.w	sl, [sp]
 8007098:	aa03      	add	r2, sp, #12
 800709a:	f7ff fedf 	bl	8006e5c <_printf_common>
 800709e:	3001      	adds	r0, #1
 80070a0:	d14c      	bne.n	800713c <_printf_i+0x200>
 80070a2:	f04f 30ff 	mov.w	r0, #4294967295
 80070a6:	b004      	add	sp, #16
 80070a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80070ac:	4834      	ldr	r0, [pc, #208]	; (8007180 <_printf_i+0x244>)
 80070ae:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80070b2:	6829      	ldr	r1, [r5, #0]
 80070b4:	6823      	ldr	r3, [r4, #0]
 80070b6:	f851 6b04 	ldr.w	r6, [r1], #4
 80070ba:	6029      	str	r1, [r5, #0]
 80070bc:	061d      	lsls	r5, r3, #24
 80070be:	d514      	bpl.n	80070ea <_printf_i+0x1ae>
 80070c0:	07df      	lsls	r7, r3, #31
 80070c2:	bf44      	itt	mi
 80070c4:	f043 0320 	orrmi.w	r3, r3, #32
 80070c8:	6023      	strmi	r3, [r4, #0]
 80070ca:	b91e      	cbnz	r6, 80070d4 <_printf_i+0x198>
 80070cc:	6823      	ldr	r3, [r4, #0]
 80070ce:	f023 0320 	bic.w	r3, r3, #32
 80070d2:	6023      	str	r3, [r4, #0]
 80070d4:	2310      	movs	r3, #16
 80070d6:	e7af      	b.n	8007038 <_printf_i+0xfc>
 80070d8:	6823      	ldr	r3, [r4, #0]
 80070da:	f043 0320 	orr.w	r3, r3, #32
 80070de:	6023      	str	r3, [r4, #0]
 80070e0:	2378      	movs	r3, #120	; 0x78
 80070e2:	4828      	ldr	r0, [pc, #160]	; (8007184 <_printf_i+0x248>)
 80070e4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80070e8:	e7e3      	b.n	80070b2 <_printf_i+0x176>
 80070ea:	0659      	lsls	r1, r3, #25
 80070ec:	bf48      	it	mi
 80070ee:	b2b6      	uxthmi	r6, r6
 80070f0:	e7e6      	b.n	80070c0 <_printf_i+0x184>
 80070f2:	4615      	mov	r5, r2
 80070f4:	e7bb      	b.n	800706e <_printf_i+0x132>
 80070f6:	682b      	ldr	r3, [r5, #0]
 80070f8:	6826      	ldr	r6, [r4, #0]
 80070fa:	1d18      	adds	r0, r3, #4
 80070fc:	6961      	ldr	r1, [r4, #20]
 80070fe:	6028      	str	r0, [r5, #0]
 8007100:	0635      	lsls	r5, r6, #24
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	d501      	bpl.n	800710a <_printf_i+0x1ce>
 8007106:	6019      	str	r1, [r3, #0]
 8007108:	e002      	b.n	8007110 <_printf_i+0x1d4>
 800710a:	0670      	lsls	r0, r6, #25
 800710c:	d5fb      	bpl.n	8007106 <_printf_i+0x1ca>
 800710e:	8019      	strh	r1, [r3, #0]
 8007110:	2300      	movs	r3, #0
 8007112:	4615      	mov	r5, r2
 8007114:	6123      	str	r3, [r4, #16]
 8007116:	e7ba      	b.n	800708e <_printf_i+0x152>
 8007118:	682b      	ldr	r3, [r5, #0]
 800711a:	2100      	movs	r1, #0
 800711c:	1d1a      	adds	r2, r3, #4
 800711e:	602a      	str	r2, [r5, #0]
 8007120:	681d      	ldr	r5, [r3, #0]
 8007122:	6862      	ldr	r2, [r4, #4]
 8007124:	4628      	mov	r0, r5
 8007126:	f000 f82f 	bl	8007188 <memchr>
 800712a:	b108      	cbz	r0, 8007130 <_printf_i+0x1f4>
 800712c:	1b40      	subs	r0, r0, r5
 800712e:	6060      	str	r0, [r4, #4]
 8007130:	6863      	ldr	r3, [r4, #4]
 8007132:	6123      	str	r3, [r4, #16]
 8007134:	2300      	movs	r3, #0
 8007136:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800713a:	e7a8      	b.n	800708e <_printf_i+0x152>
 800713c:	462a      	mov	r2, r5
 800713e:	4649      	mov	r1, r9
 8007140:	4640      	mov	r0, r8
 8007142:	6923      	ldr	r3, [r4, #16]
 8007144:	47d0      	blx	sl
 8007146:	3001      	adds	r0, #1
 8007148:	d0ab      	beq.n	80070a2 <_printf_i+0x166>
 800714a:	6823      	ldr	r3, [r4, #0]
 800714c:	079b      	lsls	r3, r3, #30
 800714e:	d413      	bmi.n	8007178 <_printf_i+0x23c>
 8007150:	68e0      	ldr	r0, [r4, #12]
 8007152:	9b03      	ldr	r3, [sp, #12]
 8007154:	4298      	cmp	r0, r3
 8007156:	bfb8      	it	lt
 8007158:	4618      	movlt	r0, r3
 800715a:	e7a4      	b.n	80070a6 <_printf_i+0x16a>
 800715c:	2301      	movs	r3, #1
 800715e:	4632      	mov	r2, r6
 8007160:	4649      	mov	r1, r9
 8007162:	4640      	mov	r0, r8
 8007164:	47d0      	blx	sl
 8007166:	3001      	adds	r0, #1
 8007168:	d09b      	beq.n	80070a2 <_printf_i+0x166>
 800716a:	3501      	adds	r5, #1
 800716c:	68e3      	ldr	r3, [r4, #12]
 800716e:	9903      	ldr	r1, [sp, #12]
 8007170:	1a5b      	subs	r3, r3, r1
 8007172:	42ab      	cmp	r3, r5
 8007174:	dcf2      	bgt.n	800715c <_printf_i+0x220>
 8007176:	e7eb      	b.n	8007150 <_printf_i+0x214>
 8007178:	2500      	movs	r5, #0
 800717a:	f104 0619 	add.w	r6, r4, #25
 800717e:	e7f5      	b.n	800716c <_printf_i+0x230>
 8007180:	08007489 	.word	0x08007489
 8007184:	0800749a 	.word	0x0800749a

08007188 <memchr>:
 8007188:	4603      	mov	r3, r0
 800718a:	b510      	push	{r4, lr}
 800718c:	b2c9      	uxtb	r1, r1
 800718e:	4402      	add	r2, r0
 8007190:	4293      	cmp	r3, r2
 8007192:	4618      	mov	r0, r3
 8007194:	d101      	bne.n	800719a <memchr+0x12>
 8007196:	2000      	movs	r0, #0
 8007198:	e003      	b.n	80071a2 <memchr+0x1a>
 800719a:	7804      	ldrb	r4, [r0, #0]
 800719c:	3301      	adds	r3, #1
 800719e:	428c      	cmp	r4, r1
 80071a0:	d1f6      	bne.n	8007190 <memchr+0x8>
 80071a2:	bd10      	pop	{r4, pc}

080071a4 <memmove>:
 80071a4:	4288      	cmp	r0, r1
 80071a6:	b510      	push	{r4, lr}
 80071a8:	eb01 0402 	add.w	r4, r1, r2
 80071ac:	d902      	bls.n	80071b4 <memmove+0x10>
 80071ae:	4284      	cmp	r4, r0
 80071b0:	4623      	mov	r3, r4
 80071b2:	d807      	bhi.n	80071c4 <memmove+0x20>
 80071b4:	1e43      	subs	r3, r0, #1
 80071b6:	42a1      	cmp	r1, r4
 80071b8:	d008      	beq.n	80071cc <memmove+0x28>
 80071ba:	f811 2b01 	ldrb.w	r2, [r1], #1
 80071be:	f803 2f01 	strb.w	r2, [r3, #1]!
 80071c2:	e7f8      	b.n	80071b6 <memmove+0x12>
 80071c4:	4601      	mov	r1, r0
 80071c6:	4402      	add	r2, r0
 80071c8:	428a      	cmp	r2, r1
 80071ca:	d100      	bne.n	80071ce <memmove+0x2a>
 80071cc:	bd10      	pop	{r4, pc}
 80071ce:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80071d2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80071d6:	e7f7      	b.n	80071c8 <memmove+0x24>

080071d8 <_realloc_r>:
 80071d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80071dc:	4680      	mov	r8, r0
 80071de:	4614      	mov	r4, r2
 80071e0:	460e      	mov	r6, r1
 80071e2:	b921      	cbnz	r1, 80071ee <_realloc_r+0x16>
 80071e4:	4611      	mov	r1, r2
 80071e6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80071ea:	f7ff bb79 	b.w	80068e0 <_malloc_r>
 80071ee:	b92a      	cbnz	r2, 80071fc <_realloc_r+0x24>
 80071f0:	f7ff fc90 	bl	8006b14 <_free_r>
 80071f4:	4625      	mov	r5, r4
 80071f6:	4628      	mov	r0, r5
 80071f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80071fc:	f000 f81b 	bl	8007236 <_malloc_usable_size_r>
 8007200:	4284      	cmp	r4, r0
 8007202:	4607      	mov	r7, r0
 8007204:	d802      	bhi.n	800720c <_realloc_r+0x34>
 8007206:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800720a:	d812      	bhi.n	8007232 <_realloc_r+0x5a>
 800720c:	4621      	mov	r1, r4
 800720e:	4640      	mov	r0, r8
 8007210:	f7ff fb66 	bl	80068e0 <_malloc_r>
 8007214:	4605      	mov	r5, r0
 8007216:	2800      	cmp	r0, #0
 8007218:	d0ed      	beq.n	80071f6 <_realloc_r+0x1e>
 800721a:	42bc      	cmp	r4, r7
 800721c:	4622      	mov	r2, r4
 800721e:	4631      	mov	r1, r6
 8007220:	bf28      	it	cs
 8007222:	463a      	movcs	r2, r7
 8007224:	f7ff fb26 	bl	8006874 <memcpy>
 8007228:	4631      	mov	r1, r6
 800722a:	4640      	mov	r0, r8
 800722c:	f7ff fc72 	bl	8006b14 <_free_r>
 8007230:	e7e1      	b.n	80071f6 <_realloc_r+0x1e>
 8007232:	4635      	mov	r5, r6
 8007234:	e7df      	b.n	80071f6 <_realloc_r+0x1e>

08007236 <_malloc_usable_size_r>:
 8007236:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800723a:	1f18      	subs	r0, r3, #4
 800723c:	2b00      	cmp	r3, #0
 800723e:	bfbc      	itt	lt
 8007240:	580b      	ldrlt	r3, [r1, r0]
 8007242:	18c0      	addlt	r0, r0, r3
 8007244:	4770      	bx	lr
	...

08007248 <_init>:
 8007248:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800724a:	bf00      	nop
 800724c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800724e:	bc08      	pop	{r3}
 8007250:	469e      	mov	lr, r3
 8007252:	4770      	bx	lr

08007254 <_fini>:
 8007254:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007256:	bf00      	nop
 8007258:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800725a:	bc08      	pop	{r3}
 800725c:	469e      	mov	lr, r3
 800725e:	4770      	bx	lr
