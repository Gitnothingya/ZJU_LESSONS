
serial.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004b70  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d8  08004c7c  08004c7c  00014c7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004d54  08004d54  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08004d54  08004d54  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004d54  08004d54  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004d54  08004d54  00014d54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004d58  08004d58  00014d58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08004d5c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000118  20000070  08004dcc  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000188  08004dcc  00020188  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000bb41  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002085  00000000  00000000  0002bbda  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d00  00000000  00000000  0002dc60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c18  00000000  00000000  0002e960  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018aa3  00000000  00000000  0002f578  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000dfb3  00000000  00000000  0004801b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008b9a6  00000000  00000000  00055fce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e1974  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003d10  00000000  00000000  000e19c4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	08004c64 	.word	0x08004c64

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	08004c64 	.word	0x08004c64

0800014c <MX_GPIO_Init>:
        * EVENT_OUT
        * EXTI
     PA8   ------> RCC_MCO
*/
void MX_GPIO_Init(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b088      	sub	sp, #32
 8000150:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000152:	f107 0310 	add.w	r3, r7, #16
 8000156:	2200      	movs	r2, #0
 8000158:	601a      	str	r2, [r3, #0]
 800015a:	605a      	str	r2, [r3, #4]
 800015c:	609a      	str	r2, [r3, #8]
 800015e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000160:	4b30      	ldr	r3, [pc, #192]	; (8000224 <MX_GPIO_Init+0xd8>)
 8000162:	699b      	ldr	r3, [r3, #24]
 8000164:	4a2f      	ldr	r2, [pc, #188]	; (8000224 <MX_GPIO_Init+0xd8>)
 8000166:	f043 0310 	orr.w	r3, r3, #16
 800016a:	6193      	str	r3, [r2, #24]
 800016c:	4b2d      	ldr	r3, [pc, #180]	; (8000224 <MX_GPIO_Init+0xd8>)
 800016e:	699b      	ldr	r3, [r3, #24]
 8000170:	f003 0310 	and.w	r3, r3, #16
 8000174:	60fb      	str	r3, [r7, #12]
 8000176:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000178:	4b2a      	ldr	r3, [pc, #168]	; (8000224 <MX_GPIO_Init+0xd8>)
 800017a:	699b      	ldr	r3, [r3, #24]
 800017c:	4a29      	ldr	r2, [pc, #164]	; (8000224 <MX_GPIO_Init+0xd8>)
 800017e:	f043 0320 	orr.w	r3, r3, #32
 8000182:	6193      	str	r3, [r2, #24]
 8000184:	4b27      	ldr	r3, [pc, #156]	; (8000224 <MX_GPIO_Init+0xd8>)
 8000186:	699b      	ldr	r3, [r3, #24]
 8000188:	f003 0320 	and.w	r3, r3, #32
 800018c:	60bb      	str	r3, [r7, #8]
 800018e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000190:	4b24      	ldr	r3, [pc, #144]	; (8000224 <MX_GPIO_Init+0xd8>)
 8000192:	699b      	ldr	r3, [r3, #24]
 8000194:	4a23      	ldr	r2, [pc, #140]	; (8000224 <MX_GPIO_Init+0xd8>)
 8000196:	f043 0304 	orr.w	r3, r3, #4
 800019a:	6193      	str	r3, [r2, #24]
 800019c:	4b21      	ldr	r3, [pc, #132]	; (8000224 <MX_GPIO_Init+0xd8>)
 800019e:	699b      	ldr	r3, [r3, #24]
 80001a0:	f003 0304 	and.w	r3, r3, #4
 80001a4:	607b      	str	r3, [r7, #4]
 80001a6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80001a8:	4b1e      	ldr	r3, [pc, #120]	; (8000224 <MX_GPIO_Init+0xd8>)
 80001aa:	699b      	ldr	r3, [r3, #24]
 80001ac:	4a1d      	ldr	r2, [pc, #116]	; (8000224 <MX_GPIO_Init+0xd8>)
 80001ae:	f043 0308 	orr.w	r3, r3, #8
 80001b2:	6193      	str	r3, [r2, #24]
 80001b4:	4b1b      	ldr	r3, [pc, #108]	; (8000224 <MX_GPIO_Init+0xd8>)
 80001b6:	699b      	ldr	r3, [r3, #24]
 80001b8:	f003 0308 	and.w	r3, r3, #8
 80001bc:	603b      	str	r3, [r7, #0]
 80001be:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80001c0:	2200      	movs	r2, #0
 80001c2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80001c6:	4818      	ldr	r0, [pc, #96]	; (8000228 <MX_GPIO_Init+0xdc>)
 80001c8:	f001 f88a 	bl	80012e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_Pin;
 80001cc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80001d0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80001d2:	2301      	movs	r3, #1
 80001d4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80001d6:	2300      	movs	r3, #0
 80001d8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80001da:	2302      	movs	r3, #2
 80001dc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80001de:	f107 0310 	add.w	r3, r7, #16
 80001e2:	4619      	mov	r1, r3
 80001e4:	4810      	ldr	r0, [pc, #64]	; (8000228 <MX_GPIO_Init+0xdc>)
 80001e6:	f000 fef7 	bl	8000fd8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BTN_Pin;
 80001ea:	2340      	movs	r3, #64	; 0x40
 80001ec:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80001ee:	2300      	movs	r3, #0
 80001f0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80001f2:	2301      	movs	r3, #1
 80001f4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(BTN_GPIO_Port, &GPIO_InitStruct);
 80001f6:	f107 0310 	add.w	r3, r7, #16
 80001fa:	4619      	mov	r1, r3
 80001fc:	480b      	ldr	r0, [pc, #44]	; (800022c <MX_GPIO_Init+0xe0>)
 80001fe:	f000 feeb 	bl	8000fd8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000202:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000206:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000208:	2302      	movs	r3, #2
 800020a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800020c:	2302      	movs	r3, #2
 800020e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000210:	f107 0310 	add.w	r3, r7, #16
 8000214:	4619      	mov	r1, r3
 8000216:	4805      	ldr	r0, [pc, #20]	; (800022c <MX_GPIO_Init+0xe0>)
 8000218:	f000 fede 	bl	8000fd8 <HAL_GPIO_Init>

}
 800021c:	bf00      	nop
 800021e:	3720      	adds	r7, #32
 8000220:	46bd      	mov	sp, r7
 8000222:	bd80      	pop	{r7, pc}
 8000224:	40021000 	.word	0x40021000
 8000228:	40011000 	.word	0x40011000
 800022c:	40010800 	.word	0x40010800

08000230 <__io_putchar>:
#define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif
PUTCHAR_PROTOTYPE
{
 8000230:	b580      	push	{r7, lr}
 8000232:	b082      	sub	sp, #8
 8000234:	af00      	add	r7, sp, #0
 8000236:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart1 , (uint8_t *)&ch, 1, 0xFFFF);
 8000238:	1d39      	adds	r1, r7, #4
 800023a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800023e:	2201      	movs	r2, #1
 8000240:	4803      	ldr	r0, [pc, #12]	; (8000250 <__io_putchar+0x20>)
 8000242:	f003 f8bf 	bl	80033c4 <HAL_UART_Transmit>
    return ch;
 8000246:	687b      	ldr	r3, [r7, #4]
}
 8000248:	4618      	mov	r0, r3
 800024a:	3708      	adds	r7, #8
 800024c:	46bd      	mov	sp, r7
 800024e:	bd80      	pop	{r7, pc}
 8000250:	20000130 	.word	0x20000130

08000254 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000254:	b580      	push	{r7, lr}
 8000256:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000258:	f000 fc7a 	bl	8000b50 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800025c:	f000 f82e 	bl	80002bc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000260:	f7ff ff74 	bl	800014c <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000264:	f000 fbc2 	bl	80009ec <MX_USART1_UART_Init>
  MX_TIM2_Init();
 8000268:	f000 fa98 	bl	800079c <MX_TIM2_Init>
  MX_TIM1_Init();
 800026c:	f000 f9f6 	bl	800065c <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  /*4.2.2*/
//  HAL_TIM_Base_Start_IT(&htim2);

  /*5.1 5.2*/
	HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_2);
 8000270:	2104      	movs	r1, #4
 8000272:	480e      	ldr	r0, [pc, #56]	; (80002ac <main+0x58>)
 8000274:	f001 fd98 	bl	8001da8 <HAL_TIM_PWM_Start>
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 50);//修改脉冲宽度
 8000278:	4b0c      	ldr	r3, [pc, #48]	; (80002ac <main+0x58>)
 800027a:	681b      	ldr	r3, [r3, #0]
 800027c:	2232      	movs	r2, #50	; 0x32
 800027e:	639a      	str	r2, [r3, #56]	; 0x38

	/* 5.2.1*/
	HAL_TIM_Base_Start_IT(&htim2);
 8000280:	480b      	ldr	r0, [pc, #44]	; (80002b0 <main+0x5c>)
 8000282:	f001 fce7 	bl	8001c54 <HAL_TIM_Base_Start_IT>
	HAL_TIM_IC_Start_IT(&htim2,TIM_CHANNEL_1);
 8000286:	2100      	movs	r1, #0
 8000288:	4809      	ldr	r0, [pc, #36]	; (80002b0 <main+0x5c>)
 800028a:	f001 fe87 	bl	8001f9c <HAL_TIM_IC_Start_IT>
	HAL_TIM_IC_Start_IT(&htim2,TIM_CHANNEL_2);
 800028e:	2104      	movs	r1, #4
 8000290:	4807      	ldr	r0, [pc, #28]	; (80002b0 <main+0x5c>)
 8000292:	f001 fe83 	bl	8001f9c <HAL_TIM_IC_Start_IT>
//			  time = 0;
//		  }
//	  }

	  /* 5  CODE2/Start  */
	  HAL_Delay(1000);
 8000296:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800029a:	f000 fcbb 	bl	8000c14 <HAL_Delay>
	  printf("pulse width: %d us\r\n ",Capture_mid_time); //修改了Capture_mid_time
 800029e:	4b05      	ldr	r3, [pc, #20]	; (80002b4 <main+0x60>)
 80002a0:	681b      	ldr	r3, [r3, #0]
 80002a2:	4619      	mov	r1, r3
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <main+0x64>)
 80002a6:	f003 fd49 	bl	8003d3c <iprintf>
	  HAL_Delay(1000);
 80002aa:	e7f4      	b.n	8000296 <main+0x42>
 80002ac:	200000a0 	.word	0x200000a0
 80002b0:	200000e8 	.word	0x200000e8
 80002b4:	2000008c 	.word	0x2000008c
 80002b8:	08004c7c 	.word	0x08004c7c

080002bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002bc:	b580      	push	{r7, lr}
 80002be:	b090      	sub	sp, #64	; 0x40
 80002c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002c2:	f107 0318 	add.w	r3, r7, #24
 80002c6:	2228      	movs	r2, #40	; 0x28
 80002c8:	2100      	movs	r1, #0
 80002ca:	4618      	mov	r0, r3
 80002cc:	f003 fd2e 	bl	8003d2c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002d0:	1d3b      	adds	r3, r7, #4
 80002d2:	2200      	movs	r2, #0
 80002d4:	601a      	str	r2, [r3, #0]
 80002d6:	605a      	str	r2, [r3, #4]
 80002d8:	609a      	str	r2, [r3, #8]
 80002da:	60da      	str	r2, [r3, #12]
 80002dc:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80002de:	2301      	movs	r3, #1
 80002e0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80002e2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80002e6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80002e8:	2300      	movs	r3, #0
 80002ea:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002ec:	2301      	movs	r3, #1
 80002ee:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002f0:	2302      	movs	r3, #2
 80002f2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80002f4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80002f8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80002fa:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80002fe:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000300:	f107 0318 	add.w	r3, r7, #24
 8000304:	4618      	mov	r0, r3
 8000306:	f001 f803 	bl	8001310 <HAL_RCC_OscConfig>
 800030a:	4603      	mov	r3, r0
 800030c:	2b00      	cmp	r3, #0
 800030e:	d001      	beq.n	8000314 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000310:	f000 f88a 	bl	8000428 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000314:	230f      	movs	r3, #15
 8000316:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000318:	2302      	movs	r3, #2
 800031a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800031c:	2300      	movs	r3, #0
 800031e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000320:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000324:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000326:	2300      	movs	r3, #0
 8000328:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800032a:	1d3b      	adds	r3, r7, #4
 800032c:	2102      	movs	r1, #2
 800032e:	4618      	mov	r0, r3
 8000330:	f001 fa70 	bl	8001814 <HAL_RCC_ClockConfig>
 8000334:	4603      	mov	r3, r0
 8000336:	2b00      	cmp	r3, #0
 8000338:	d001      	beq.n	800033e <SystemClock_Config+0x82>
  {
    Error_Handler();
 800033a:	f000 f875 	bl	8000428 <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO, RCC_MCO1SOURCE_PLLCLK, RCC_MCODIV_1);
 800033e:	2200      	movs	r2, #0
 8000340:	f04f 61e0 	mov.w	r1, #117440512	; 0x7000000
 8000344:	2000      	movs	r0, #0
 8000346:	f001 fb4f 	bl	80019e8 <HAL_RCC_MCOConfig>
}
 800034a:	bf00      	nop
 800034c:	3740      	adds	r7, #64	; 0x40
 800034e:	46bd      	mov	sp, r7
 8000350:	bd80      	pop	{r7, pc}
	...

08000354 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */

/*4.2.2*/
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000354:	b480      	push	{r7}
 8000356:	b083      	sub	sp, #12
 8000358:	af00      	add	r7, sp, #0
 800035a:	6078      	str	r0, [r7, #4]
	if(htim == &htim2){
 800035c:	687b      	ldr	r3, [r7, #4]
 800035e:	4a06      	ldr	r2, [pc, #24]	; (8000378 <HAL_TIM_PeriodElapsedCallback+0x24>)
 8000360:	4293      	cmp	r3, r2
 8000362:	d104      	bne.n	800036e <HAL_TIM_PeriodElapsedCallback+0x1a>
		/* 4.2.2*/
//		if(HAL_GPIO_ReadPin(BTN_GPIO_Port, BTN_Pin) == GPIO_PIN_RESET)
//			time++;

		/* 5.2.1*/
		Capture_mid_time++;
 8000364:	4b05      	ldr	r3, [pc, #20]	; (800037c <HAL_TIM_PeriodElapsedCallback+0x28>)
 8000366:	681b      	ldr	r3, [r3, #0]
 8000368:	3301      	adds	r3, #1
 800036a:	4a04      	ldr	r2, [pc, #16]	; (800037c <HAL_TIM_PeriodElapsedCallback+0x28>)
 800036c:	6013      	str	r3, [r2, #0]

	}

}
 800036e:	bf00      	nop
 8000370:	370c      	adds	r7, #12
 8000372:	46bd      	mov	sp, r7
 8000374:	bc80      	pop	{r7}
 8000376:	4770      	bx	lr
 8000378:	200000e8 	.word	0x200000e8
 800037c:	2000008c 	.word	0x2000008c

08000380 <HAL_TIM_IC_CaptureCallback>:

/*5.2.1*/
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8000380:	b580      	push	{r7, lr}
 8000382:	b082      	sub	sp, #8
 8000384:	af00      	add	r7, sp, #0
 8000386:	6078      	str	r0, [r7, #4]
	static int PWM_RisingCount=0,PWM_FallingCount=0;
	if(htim == &htim2)
 8000388:	687b      	ldr	r3, [r7, #4]
 800038a:	4a22      	ldr	r2, [pc, #136]	; (8000414 <HAL_TIM_IC_CaptureCallback+0x94>)
 800038c:	4293      	cmp	r3, r2
 800038e:	d13d      	bne.n	800040c <HAL_TIM_IC_CaptureCallback+0x8c>
	{
		if(htim2.Channel == HAL_TIM_ACTIVE_CHANNEL_1)
 8000390:	4b20      	ldr	r3, [pc, #128]	; (8000414 <HAL_TIM_IC_CaptureCallback+0x94>)
 8000392:	7f1b      	ldrb	r3, [r3, #28]
 8000394:	2b01      	cmp	r3, #1
 8000396:	d10b      	bne.n	80003b0 <HAL_TIM_IC_CaptureCallback+0x30>
		{
			PWM_RisingCount = HAL_TIM_ReadCapturedValue(&htim2,TIM_CHANNEL_1);
 8000398:	2100      	movs	r1, #0
 800039a:	481e      	ldr	r0, [pc, #120]	; (8000414 <HAL_TIM_IC_CaptureCallback+0x94>)
 800039c:	f002 fa64 	bl	8002868 <HAL_TIM_ReadCapturedValue>
 80003a0:	4603      	mov	r3, r0
 80003a2:	461a      	mov	r2, r3
 80003a4:	4b1c      	ldr	r3, [pc, #112]	; (8000418 <HAL_TIM_IC_CaptureCallback+0x98>)
 80003a6:	601a      	str	r2, [r3, #0]
			Capture_mid_time = 0;
 80003a8:	4b1c      	ldr	r3, [pc, #112]	; (800041c <HAL_TIM_IC_CaptureCallback+0x9c>)
 80003aa:	2200      	movs	r2, #0
 80003ac:	601a      	str	r2, [r3, #0]
				PWM_RisingCount = 0;
				PWM_FallingCount = 0;
			}
		}
	}
}
 80003ae:	e02d      	b.n	800040c <HAL_TIM_IC_CaptureCallback+0x8c>
		else if(htim2.Channel == HAL_TIM_ACTIVE_CHANNEL_2)
 80003b0:	4b18      	ldr	r3, [pc, #96]	; (8000414 <HAL_TIM_IC_CaptureCallback+0x94>)
 80003b2:	7f1b      	ldrb	r3, [r3, #28]
 80003b4:	2b02      	cmp	r3, #2
 80003b6:	d129      	bne.n	800040c <HAL_TIM_IC_CaptureCallback+0x8c>
			PWM_FallingCount = HAL_TIM_ReadCapturedValue(&htim2,TIM_CHANNEL_2);
 80003b8:	2104      	movs	r1, #4
 80003ba:	4816      	ldr	r0, [pc, #88]	; (8000414 <HAL_TIM_IC_CaptureCallback+0x94>)
 80003bc:	f002 fa54 	bl	8002868 <HAL_TIM_ReadCapturedValue>
 80003c0:	4603      	mov	r3, r0
 80003c2:	461a      	mov	r2, r3
 80003c4:	4b16      	ldr	r3, [pc, #88]	; (8000420 <HAL_TIM_IC_CaptureCallback+0xa0>)
 80003c6:	601a      	str	r2, [r3, #0]
			if(PWM_RisingCount != 0 && PWM_FallingCount!= 0)
 80003c8:	4b13      	ldr	r3, [pc, #76]	; (8000418 <HAL_TIM_IC_CaptureCallback+0x98>)
 80003ca:	681b      	ldr	r3, [r3, #0]
 80003cc:	2b00      	cmp	r3, #0
 80003ce:	d01d      	beq.n	800040c <HAL_TIM_IC_CaptureCallback+0x8c>
 80003d0:	4b13      	ldr	r3, [pc, #76]	; (8000420 <HAL_TIM_IC_CaptureCallback+0xa0>)
 80003d2:	681b      	ldr	r3, [r3, #0]
 80003d4:	2b00      	cmp	r3, #0
 80003d6:	d019      	beq.n	800040c <HAL_TIM_IC_CaptureCallback+0x8c>
				PWM_width      = (10-PWM_RisingCount+PWM_FallingCount)*1+(Capture_mid_time-1)*10;
 80003d8:	4b0f      	ldr	r3, [pc, #60]	; (8000418 <HAL_TIM_IC_CaptureCallback+0x98>)
 80003da:	681b      	ldr	r3, [r3, #0]
 80003dc:	f1c3 020a 	rsb	r2, r3, #10
 80003e0:	4b0f      	ldr	r3, [pc, #60]	; (8000420 <HAL_TIM_IC_CaptureCallback+0xa0>)
 80003e2:	681b      	ldr	r3, [r3, #0]
 80003e4:	18d1      	adds	r1, r2, r3
 80003e6:	4b0d      	ldr	r3, [pc, #52]	; (800041c <HAL_TIM_IC_CaptureCallback+0x9c>)
 80003e8:	681b      	ldr	r3, [r3, #0]
 80003ea:	1e5a      	subs	r2, r3, #1
 80003ec:	4613      	mov	r3, r2
 80003ee:	009b      	lsls	r3, r3, #2
 80003f0:	4413      	add	r3, r2
 80003f2:	005b      	lsls	r3, r3, #1
 80003f4:	440b      	add	r3, r1
 80003f6:	4a0b      	ldr	r2, [pc, #44]	; (8000424 <HAL_TIM_IC_CaptureCallback+0xa4>)
 80003f8:	6013      	str	r3, [r2, #0]
				Capture_mid_time = 0;
 80003fa:	4b08      	ldr	r3, [pc, #32]	; (800041c <HAL_TIM_IC_CaptureCallback+0x9c>)
 80003fc:	2200      	movs	r2, #0
 80003fe:	601a      	str	r2, [r3, #0]
				PWM_RisingCount = 0;
 8000400:	4b05      	ldr	r3, [pc, #20]	; (8000418 <HAL_TIM_IC_CaptureCallback+0x98>)
 8000402:	2200      	movs	r2, #0
 8000404:	601a      	str	r2, [r3, #0]
				PWM_FallingCount = 0;
 8000406:	4b06      	ldr	r3, [pc, #24]	; (8000420 <HAL_TIM_IC_CaptureCallback+0xa0>)
 8000408:	2200      	movs	r2, #0
 800040a:	601a      	str	r2, [r3, #0]
}
 800040c:	bf00      	nop
 800040e:	3708      	adds	r7, #8
 8000410:	46bd      	mov	sp, r7
 8000412:	bd80      	pop	{r7, pc}
 8000414:	200000e8 	.word	0x200000e8
 8000418:	20000094 	.word	0x20000094
 800041c:	2000008c 	.word	0x2000008c
 8000420:	20000098 	.word	0x20000098
 8000424:	20000090 	.word	0x20000090

08000428 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000428:	b480      	push	{r7}
 800042a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800042c:	b672      	cpsid	i
}
 800042e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000430:	e7fe      	b.n	8000430 <Error_Handler+0x8>
	...

08000434 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000434:	b480      	push	{r7}
 8000436:	b085      	sub	sp, #20
 8000438:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800043a:	4b15      	ldr	r3, [pc, #84]	; (8000490 <HAL_MspInit+0x5c>)
 800043c:	699b      	ldr	r3, [r3, #24]
 800043e:	4a14      	ldr	r2, [pc, #80]	; (8000490 <HAL_MspInit+0x5c>)
 8000440:	f043 0301 	orr.w	r3, r3, #1
 8000444:	6193      	str	r3, [r2, #24]
 8000446:	4b12      	ldr	r3, [pc, #72]	; (8000490 <HAL_MspInit+0x5c>)
 8000448:	699b      	ldr	r3, [r3, #24]
 800044a:	f003 0301 	and.w	r3, r3, #1
 800044e:	60bb      	str	r3, [r7, #8]
 8000450:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000452:	4b0f      	ldr	r3, [pc, #60]	; (8000490 <HAL_MspInit+0x5c>)
 8000454:	69db      	ldr	r3, [r3, #28]
 8000456:	4a0e      	ldr	r2, [pc, #56]	; (8000490 <HAL_MspInit+0x5c>)
 8000458:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800045c:	61d3      	str	r3, [r2, #28]
 800045e:	4b0c      	ldr	r3, [pc, #48]	; (8000490 <HAL_MspInit+0x5c>)
 8000460:	69db      	ldr	r3, [r3, #28]
 8000462:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000466:	607b      	str	r3, [r7, #4]
 8000468:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800046a:	4b0a      	ldr	r3, [pc, #40]	; (8000494 <HAL_MspInit+0x60>)
 800046c:	685b      	ldr	r3, [r3, #4]
 800046e:	60fb      	str	r3, [r7, #12]
 8000470:	68fb      	ldr	r3, [r7, #12]
 8000472:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000476:	60fb      	str	r3, [r7, #12]
 8000478:	68fb      	ldr	r3, [r7, #12]
 800047a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800047e:	60fb      	str	r3, [r7, #12]
 8000480:	4a04      	ldr	r2, [pc, #16]	; (8000494 <HAL_MspInit+0x60>)
 8000482:	68fb      	ldr	r3, [r7, #12]
 8000484:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000486:	bf00      	nop
 8000488:	3714      	adds	r7, #20
 800048a:	46bd      	mov	sp, r7
 800048c:	bc80      	pop	{r7}
 800048e:	4770      	bx	lr
 8000490:	40021000 	.word	0x40021000
 8000494:	40010000 	.word	0x40010000

08000498 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000498:	b480      	push	{r7}
 800049a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800049c:	e7fe      	b.n	800049c <NMI_Handler+0x4>

0800049e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800049e:	b480      	push	{r7}
 80004a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80004a2:	e7fe      	b.n	80004a2 <HardFault_Handler+0x4>

080004a4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80004a4:	b480      	push	{r7}
 80004a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80004a8:	e7fe      	b.n	80004a8 <MemManage_Handler+0x4>

080004aa <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80004aa:	b480      	push	{r7}
 80004ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80004ae:	e7fe      	b.n	80004ae <BusFault_Handler+0x4>

080004b0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80004b0:	b480      	push	{r7}
 80004b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80004b4:	e7fe      	b.n	80004b4 <UsageFault_Handler+0x4>

080004b6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80004b6:	b480      	push	{r7}
 80004b8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80004ba:	bf00      	nop
 80004bc:	46bd      	mov	sp, r7
 80004be:	bc80      	pop	{r7}
 80004c0:	4770      	bx	lr

080004c2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80004c2:	b480      	push	{r7}
 80004c4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80004c6:	bf00      	nop
 80004c8:	46bd      	mov	sp, r7
 80004ca:	bc80      	pop	{r7}
 80004cc:	4770      	bx	lr

080004ce <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80004ce:	b480      	push	{r7}
 80004d0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80004d2:	bf00      	nop
 80004d4:	46bd      	mov	sp, r7
 80004d6:	bc80      	pop	{r7}
 80004d8:	4770      	bx	lr

080004da <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80004da:	b580      	push	{r7, lr}
 80004dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80004de:	f000 fb7d 	bl	8000bdc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80004e2:	bf00      	nop
 80004e4:	bd80      	pop	{r7, pc}
	...

080004e8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80004e8:	b580      	push	{r7, lr}
 80004ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80004ec:	4802      	ldr	r0, [pc, #8]	; (80004f8 <TIM2_IRQHandler+0x10>)
 80004ee:	f001 fe5b 	bl	80021a8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80004f2:	bf00      	nop
 80004f4:	bd80      	pop	{r7, pc}
 80004f6:	bf00      	nop
 80004f8:	200000e8 	.word	0x200000e8

080004fc <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80004fc:	b580      	push	{r7, lr}
 80004fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000500:	4802      	ldr	r0, [pc, #8]	; (800050c <USART1_IRQHandler+0x10>)
 8000502:	f002 fff1 	bl	80034e8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000506:	bf00      	nop
 8000508:	bd80      	pop	{r7, pc}
 800050a:	bf00      	nop
 800050c:	20000130 	.word	0x20000130

08000510 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000510:	b580      	push	{r7, lr}
 8000512:	b086      	sub	sp, #24
 8000514:	af00      	add	r7, sp, #0
 8000516:	60f8      	str	r0, [r7, #12]
 8000518:	60b9      	str	r1, [r7, #8]
 800051a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800051c:	2300      	movs	r3, #0
 800051e:	617b      	str	r3, [r7, #20]
 8000520:	e00a      	b.n	8000538 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000522:	f3af 8000 	nop.w
 8000526:	4601      	mov	r1, r0
 8000528:	68bb      	ldr	r3, [r7, #8]
 800052a:	1c5a      	adds	r2, r3, #1
 800052c:	60ba      	str	r2, [r7, #8]
 800052e:	b2ca      	uxtb	r2, r1
 8000530:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000532:	697b      	ldr	r3, [r7, #20]
 8000534:	3301      	adds	r3, #1
 8000536:	617b      	str	r3, [r7, #20]
 8000538:	697a      	ldr	r2, [r7, #20]
 800053a:	687b      	ldr	r3, [r7, #4]
 800053c:	429a      	cmp	r2, r3
 800053e:	dbf0      	blt.n	8000522 <_read+0x12>
  }

  return len;
 8000540:	687b      	ldr	r3, [r7, #4]
}
 8000542:	4618      	mov	r0, r3
 8000544:	3718      	adds	r7, #24
 8000546:	46bd      	mov	sp, r7
 8000548:	bd80      	pop	{r7, pc}

0800054a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800054a:	b580      	push	{r7, lr}
 800054c:	b086      	sub	sp, #24
 800054e:	af00      	add	r7, sp, #0
 8000550:	60f8      	str	r0, [r7, #12]
 8000552:	60b9      	str	r1, [r7, #8]
 8000554:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000556:	2300      	movs	r3, #0
 8000558:	617b      	str	r3, [r7, #20]
 800055a:	e009      	b.n	8000570 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800055c:	68bb      	ldr	r3, [r7, #8]
 800055e:	1c5a      	adds	r2, r3, #1
 8000560:	60ba      	str	r2, [r7, #8]
 8000562:	781b      	ldrb	r3, [r3, #0]
 8000564:	4618      	mov	r0, r3
 8000566:	f7ff fe63 	bl	8000230 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800056a:	697b      	ldr	r3, [r7, #20]
 800056c:	3301      	adds	r3, #1
 800056e:	617b      	str	r3, [r7, #20]
 8000570:	697a      	ldr	r2, [r7, #20]
 8000572:	687b      	ldr	r3, [r7, #4]
 8000574:	429a      	cmp	r2, r3
 8000576:	dbf1      	blt.n	800055c <_write+0x12>
  }
  return len;
 8000578:	687b      	ldr	r3, [r7, #4]
}
 800057a:	4618      	mov	r0, r3
 800057c:	3718      	adds	r7, #24
 800057e:	46bd      	mov	sp, r7
 8000580:	bd80      	pop	{r7, pc}

08000582 <_close>:

int _close(int file)
{
 8000582:	b480      	push	{r7}
 8000584:	b083      	sub	sp, #12
 8000586:	af00      	add	r7, sp, #0
 8000588:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800058a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800058e:	4618      	mov	r0, r3
 8000590:	370c      	adds	r7, #12
 8000592:	46bd      	mov	sp, r7
 8000594:	bc80      	pop	{r7}
 8000596:	4770      	bx	lr

08000598 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000598:	b480      	push	{r7}
 800059a:	b083      	sub	sp, #12
 800059c:	af00      	add	r7, sp, #0
 800059e:	6078      	str	r0, [r7, #4]
 80005a0:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80005a2:	683b      	ldr	r3, [r7, #0]
 80005a4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80005a8:	605a      	str	r2, [r3, #4]
  return 0;
 80005aa:	2300      	movs	r3, #0
}
 80005ac:	4618      	mov	r0, r3
 80005ae:	370c      	adds	r7, #12
 80005b0:	46bd      	mov	sp, r7
 80005b2:	bc80      	pop	{r7}
 80005b4:	4770      	bx	lr

080005b6 <_isatty>:

int _isatty(int file)
{
 80005b6:	b480      	push	{r7}
 80005b8:	b083      	sub	sp, #12
 80005ba:	af00      	add	r7, sp, #0
 80005bc:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80005be:	2301      	movs	r3, #1
}
 80005c0:	4618      	mov	r0, r3
 80005c2:	370c      	adds	r7, #12
 80005c4:	46bd      	mov	sp, r7
 80005c6:	bc80      	pop	{r7}
 80005c8:	4770      	bx	lr

080005ca <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80005ca:	b480      	push	{r7}
 80005cc:	b085      	sub	sp, #20
 80005ce:	af00      	add	r7, sp, #0
 80005d0:	60f8      	str	r0, [r7, #12]
 80005d2:	60b9      	str	r1, [r7, #8]
 80005d4:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80005d6:	2300      	movs	r3, #0
}
 80005d8:	4618      	mov	r0, r3
 80005da:	3714      	adds	r7, #20
 80005dc:	46bd      	mov	sp, r7
 80005de:	bc80      	pop	{r7}
 80005e0:	4770      	bx	lr
	...

080005e4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b086      	sub	sp, #24
 80005e8:	af00      	add	r7, sp, #0
 80005ea:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80005ec:	4a14      	ldr	r2, [pc, #80]	; (8000640 <_sbrk+0x5c>)
 80005ee:	4b15      	ldr	r3, [pc, #84]	; (8000644 <_sbrk+0x60>)
 80005f0:	1ad3      	subs	r3, r2, r3
 80005f2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80005f4:	697b      	ldr	r3, [r7, #20]
 80005f6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80005f8:	4b13      	ldr	r3, [pc, #76]	; (8000648 <_sbrk+0x64>)
 80005fa:	681b      	ldr	r3, [r3, #0]
 80005fc:	2b00      	cmp	r3, #0
 80005fe:	d102      	bne.n	8000606 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000600:	4b11      	ldr	r3, [pc, #68]	; (8000648 <_sbrk+0x64>)
 8000602:	4a12      	ldr	r2, [pc, #72]	; (800064c <_sbrk+0x68>)
 8000604:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000606:	4b10      	ldr	r3, [pc, #64]	; (8000648 <_sbrk+0x64>)
 8000608:	681a      	ldr	r2, [r3, #0]
 800060a:	687b      	ldr	r3, [r7, #4]
 800060c:	4413      	add	r3, r2
 800060e:	693a      	ldr	r2, [r7, #16]
 8000610:	429a      	cmp	r2, r3
 8000612:	d207      	bcs.n	8000624 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000614:	f003 fb60 	bl	8003cd8 <__errno>
 8000618:	4603      	mov	r3, r0
 800061a:	220c      	movs	r2, #12
 800061c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800061e:	f04f 33ff 	mov.w	r3, #4294967295
 8000622:	e009      	b.n	8000638 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000624:	4b08      	ldr	r3, [pc, #32]	; (8000648 <_sbrk+0x64>)
 8000626:	681b      	ldr	r3, [r3, #0]
 8000628:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800062a:	4b07      	ldr	r3, [pc, #28]	; (8000648 <_sbrk+0x64>)
 800062c:	681a      	ldr	r2, [r3, #0]
 800062e:	687b      	ldr	r3, [r7, #4]
 8000630:	4413      	add	r3, r2
 8000632:	4a05      	ldr	r2, [pc, #20]	; (8000648 <_sbrk+0x64>)
 8000634:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000636:	68fb      	ldr	r3, [r7, #12]
}
 8000638:	4618      	mov	r0, r3
 800063a:	3718      	adds	r7, #24
 800063c:	46bd      	mov	sp, r7
 800063e:	bd80      	pop	{r7, pc}
 8000640:	20005000 	.word	0x20005000
 8000644:	00000400 	.word	0x00000400
 8000648:	2000009c 	.word	0x2000009c
 800064c:	20000188 	.word	0x20000188

08000650 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000650:	b480      	push	{r7}
 8000652:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000654:	bf00      	nop
 8000656:	46bd      	mov	sp, r7
 8000658:	bc80      	pop	{r7}
 800065a:	4770      	bx	lr

0800065c <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim2;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 800065c:	b580      	push	{r7, lr}
 800065e:	b096      	sub	sp, #88	; 0x58
 8000660:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000662:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000666:	2200      	movs	r2, #0
 8000668:	601a      	str	r2, [r3, #0]
 800066a:	605a      	str	r2, [r3, #4]
 800066c:	609a      	str	r2, [r3, #8]
 800066e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000670:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000674:	2200      	movs	r2, #0
 8000676:	601a      	str	r2, [r3, #0]
 8000678:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800067a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800067e:	2200      	movs	r2, #0
 8000680:	601a      	str	r2, [r3, #0]
 8000682:	605a      	str	r2, [r3, #4]
 8000684:	609a      	str	r2, [r3, #8]
 8000686:	60da      	str	r2, [r3, #12]
 8000688:	611a      	str	r2, [r3, #16]
 800068a:	615a      	str	r2, [r3, #20]
 800068c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800068e:	1d3b      	adds	r3, r7, #4
 8000690:	2220      	movs	r2, #32
 8000692:	2100      	movs	r1, #0
 8000694:	4618      	mov	r0, r3
 8000696:	f003 fb49 	bl	8003d2c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800069a:	4b3e      	ldr	r3, [pc, #248]	; (8000794 <MX_TIM1_Init+0x138>)
 800069c:	4a3e      	ldr	r2, [pc, #248]	; (8000798 <MX_TIM1_Init+0x13c>)
 800069e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 72-1;
 80006a0:	4b3c      	ldr	r3, [pc, #240]	; (8000794 <MX_TIM1_Init+0x138>)
 80006a2:	2247      	movs	r2, #71	; 0x47
 80006a4:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006a6:	4b3b      	ldr	r3, [pc, #236]	; (8000794 <MX_TIM1_Init+0x138>)
 80006a8:	2200      	movs	r2, #0
 80006aa:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000-1;
 80006ac:	4b39      	ldr	r3, [pc, #228]	; (8000794 <MX_TIM1_Init+0x138>)
 80006ae:	f240 32e7 	movw	r2, #999	; 0x3e7
 80006b2:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80006b4:	4b37      	ldr	r3, [pc, #220]	; (8000794 <MX_TIM1_Init+0x138>)
 80006b6:	2200      	movs	r2, #0
 80006b8:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80006ba:	4b36      	ldr	r3, [pc, #216]	; (8000794 <MX_TIM1_Init+0x138>)
 80006bc:	2200      	movs	r2, #0
 80006be:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80006c0:	4b34      	ldr	r3, [pc, #208]	; (8000794 <MX_TIM1_Init+0x138>)
 80006c2:	2200      	movs	r2, #0
 80006c4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80006c6:	4833      	ldr	r0, [pc, #204]	; (8000794 <MX_TIM1_Init+0x138>)
 80006c8:	f001 fa74 	bl	8001bb4 <HAL_TIM_Base_Init>
 80006cc:	4603      	mov	r3, r0
 80006ce:	2b00      	cmp	r3, #0
 80006d0:	d001      	beq.n	80006d6 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 80006d2:	f7ff fea9 	bl	8000428 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80006d6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006da:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80006dc:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80006e0:	4619      	mov	r1, r3
 80006e2:	482c      	ldr	r0, [pc, #176]	; (8000794 <MX_TIM1_Init+0x138>)
 80006e4:	f001 ffba 	bl	800265c <HAL_TIM_ConfigClockSource>
 80006e8:	4603      	mov	r3, r0
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	d001      	beq.n	80006f2 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 80006ee:	f7ff fe9b 	bl	8000428 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80006f2:	4828      	ldr	r0, [pc, #160]	; (8000794 <MX_TIM1_Init+0x138>)
 80006f4:	f001 fb00 	bl	8001cf8 <HAL_TIM_PWM_Init>
 80006f8:	4603      	mov	r3, r0
 80006fa:	2b00      	cmp	r3, #0
 80006fc:	d001      	beq.n	8000702 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 80006fe:	f7ff fe93 	bl	8000428 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000702:	2300      	movs	r3, #0
 8000704:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000706:	2300      	movs	r3, #0
 8000708:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800070a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800070e:	4619      	mov	r1, r3
 8000710:	4820      	ldr	r0, [pc, #128]	; (8000794 <MX_TIM1_Init+0x138>)
 8000712:	f002 fd49 	bl	80031a8 <HAL_TIMEx_MasterConfigSynchronization>
 8000716:	4603      	mov	r3, r0
 8000718:	2b00      	cmp	r3, #0
 800071a:	d001      	beq.n	8000720 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 800071c:	f7ff fe84 	bl	8000428 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000720:	2360      	movs	r3, #96	; 0x60
 8000722:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8000724:	2300      	movs	r3, #0
 8000726:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000728:	2300      	movs	r3, #0
 800072a:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800072c:	2300      	movs	r3, #0
 800072e:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000730:	2300      	movs	r3, #0
 8000732:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000734:	2300      	movs	r3, #0
 8000736:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000738:	2300      	movs	r3, #0
 800073a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800073c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000740:	2204      	movs	r2, #4
 8000742:	4619      	mov	r1, r3
 8000744:	4813      	ldr	r0, [pc, #76]	; (8000794 <MX_TIM1_Init+0x138>)
 8000746:	f001 fecb 	bl	80024e0 <HAL_TIM_PWM_ConfigChannel>
 800074a:	4603      	mov	r3, r0
 800074c:	2b00      	cmp	r3, #0
 800074e:	d001      	beq.n	8000754 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8000750:	f7ff fe6a 	bl	8000428 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000754:	2300      	movs	r3, #0
 8000756:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000758:	2300      	movs	r3, #0
 800075a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800075c:	2300      	movs	r3, #0
 800075e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000760:	2300      	movs	r3, #0
 8000762:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000764:	2300      	movs	r3, #0
 8000766:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000768:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800076c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800076e:	2300      	movs	r3, #0
 8000770:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000772:	1d3b      	adds	r3, r7, #4
 8000774:	4619      	mov	r1, r3
 8000776:	4807      	ldr	r0, [pc, #28]	; (8000794 <MX_TIM1_Init+0x138>)
 8000778:	f002 fd74 	bl	8003264 <HAL_TIMEx_ConfigBreakDeadTime>
 800077c:	4603      	mov	r3, r0
 800077e:	2b00      	cmp	r3, #0
 8000780:	d001      	beq.n	8000786 <MX_TIM1_Init+0x12a>
  {
    Error_Handler();
 8000782:	f7ff fe51 	bl	8000428 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000786:	4803      	ldr	r0, [pc, #12]	; (8000794 <MX_TIM1_Init+0x138>)
 8000788:	f000 f8fc 	bl	8000984 <HAL_TIM_MspPostInit>

}
 800078c:	bf00      	nop
 800078e:	3758      	adds	r7, #88	; 0x58
 8000790:	46bd      	mov	sp, r7
 8000792:	bd80      	pop	{r7, pc}
 8000794:	200000a0 	.word	0x200000a0
 8000798:	40012c00 	.word	0x40012c00

0800079c <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	b090      	sub	sp, #64	; 0x40
 80007a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80007a2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80007a6:	2200      	movs	r2, #0
 80007a8:	601a      	str	r2, [r3, #0]
 80007aa:	605a      	str	r2, [r3, #4]
 80007ac:	609a      	str	r2, [r3, #8]
 80007ae:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 80007b0:	f107 031c 	add.w	r3, r7, #28
 80007b4:	2200      	movs	r2, #0
 80007b6:	601a      	str	r2, [r3, #0]
 80007b8:	605a      	str	r2, [r3, #4]
 80007ba:	609a      	str	r2, [r3, #8]
 80007bc:	60da      	str	r2, [r3, #12]
 80007be:	611a      	str	r2, [r3, #16]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80007c0:	f107 030c 	add.w	r3, r7, #12
 80007c4:	2200      	movs	r2, #0
 80007c6:	601a      	str	r2, [r3, #0]
 80007c8:	605a      	str	r2, [r3, #4]
 80007ca:	609a      	str	r2, [r3, #8]
 80007cc:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007ce:	1d3b      	adds	r3, r7, #4
 80007d0:	2200      	movs	r2, #0
 80007d2:	601a      	str	r2, [r3, #0]
 80007d4:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80007d6:	4b3e      	ldr	r3, [pc, #248]	; (80008d0 <MX_TIM2_Init+0x134>)
 80007d8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80007dc:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 72-1;
 80007de:	4b3c      	ldr	r3, [pc, #240]	; (80008d0 <MX_TIM2_Init+0x134>)
 80007e0:	2247      	movs	r2, #71	; 0x47
 80007e2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007e4:	4b3a      	ldr	r3, [pc, #232]	; (80008d0 <MX_TIM2_Init+0x134>)
 80007e6:	2200      	movs	r2, #0
 80007e8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10-1;
 80007ea:	4b39      	ldr	r3, [pc, #228]	; (80008d0 <MX_TIM2_Init+0x134>)
 80007ec:	2209      	movs	r2, #9
 80007ee:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007f0:	4b37      	ldr	r3, [pc, #220]	; (80008d0 <MX_TIM2_Init+0x134>)
 80007f2:	2200      	movs	r2, #0
 80007f4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80007f6:	4b36      	ldr	r3, [pc, #216]	; (80008d0 <MX_TIM2_Init+0x134>)
 80007f8:	2280      	movs	r2, #128	; 0x80
 80007fa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80007fc:	4834      	ldr	r0, [pc, #208]	; (80008d0 <MX_TIM2_Init+0x134>)
 80007fe:	f001 f9d9 	bl	8001bb4 <HAL_TIM_Base_Init>
 8000802:	4603      	mov	r3, r0
 8000804:	2b00      	cmp	r3, #0
 8000806:	d001      	beq.n	800080c <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000808:	f7ff fe0e 	bl	8000428 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800080c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000810:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000812:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000816:	4619      	mov	r1, r3
 8000818:	482d      	ldr	r0, [pc, #180]	; (80008d0 <MX_TIM2_Init+0x134>)
 800081a:	f001 ff1f 	bl	800265c <HAL_TIM_ConfigClockSource>
 800081e:	4603      	mov	r3, r0
 8000820:	2b00      	cmp	r3, #0
 8000822:	d001      	beq.n	8000828 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000824:	f7ff fe00 	bl	8000428 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8000828:	4829      	ldr	r0, [pc, #164]	; (80008d0 <MX_TIM2_Init+0x134>)
 800082a:	f001 fb5f 	bl	8001eec <HAL_TIM_IC_Init>
 800082e:	4603      	mov	r3, r0
 8000830:	2b00      	cmp	r3, #0
 8000832:	d001      	beq.n	8000838 <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 8000834:	f7ff fdf8 	bl	8000428 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8000838:	2304      	movs	r3, #4
 800083a:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 800083c:	2350      	movs	r3, #80	; 0x50
 800083e:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000840:	2300      	movs	r3, #0
 8000842:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.TriggerPrescaler = TIM_ICPSC_DIV1;
 8000844:	2300      	movs	r3, #0
 8000846:	62bb      	str	r3, [r7, #40]	; 0x28
  sSlaveConfig.TriggerFilter = 0;
 8000848:	2300      	movs	r3, #0
 800084a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 800084c:	f107 031c 	add.w	r3, r7, #28
 8000850:	4619      	mov	r1, r3
 8000852:	481f      	ldr	r0, [pc, #124]	; (80008d0 <MX_TIM2_Init+0x134>)
 8000854:	f001 ffc6 	bl	80027e4 <HAL_TIM_SlaveConfigSynchro>
 8000858:	4603      	mov	r3, r0
 800085a:	2b00      	cmp	r3, #0
 800085c:	d001      	beq.n	8000862 <MX_TIM2_Init+0xc6>
  {
    Error_Handler();
 800085e:	f7ff fde3 	bl	8000428 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000862:	2300      	movs	r3, #0
 8000864:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000866:	2301      	movs	r3, #1
 8000868:	613b      	str	r3, [r7, #16]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800086a:	2300      	movs	r3, #0
 800086c:	617b      	str	r3, [r7, #20]
  sConfigIC.ICFilter = 0;
 800086e:	2300      	movs	r3, #0
 8000870:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000872:	f107 030c 	add.w	r3, r7, #12
 8000876:	2200      	movs	r2, #0
 8000878:	4619      	mov	r1, r3
 800087a:	4815      	ldr	r0, [pc, #84]	; (80008d0 <MX_TIM2_Init+0x134>)
 800087c:	f001 fd9c 	bl	80023b8 <HAL_TIM_IC_ConfigChannel>
 8000880:	4603      	mov	r3, r0
 8000882:	2b00      	cmp	r3, #0
 8000884:	d001      	beq.n	800088a <MX_TIM2_Init+0xee>
  {
    Error_Handler();
 8000886:	f7ff fdcf 	bl	8000428 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 800088a:	2302      	movs	r3, #2
 800088c:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 800088e:	2302      	movs	r3, #2
 8000890:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8000892:	f107 030c 	add.w	r3, r7, #12
 8000896:	2204      	movs	r2, #4
 8000898:	4619      	mov	r1, r3
 800089a:	480d      	ldr	r0, [pc, #52]	; (80008d0 <MX_TIM2_Init+0x134>)
 800089c:	f001 fd8c 	bl	80023b8 <HAL_TIM_IC_ConfigChannel>
 80008a0:	4603      	mov	r3, r0
 80008a2:	2b00      	cmp	r3, #0
 80008a4:	d001      	beq.n	80008aa <MX_TIM2_Init+0x10e>
  {
    Error_Handler();
 80008a6:	f7ff fdbf 	bl	8000428 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008aa:	2300      	movs	r3, #0
 80008ac:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008ae:	2300      	movs	r3, #0
 80008b0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80008b2:	1d3b      	adds	r3, r7, #4
 80008b4:	4619      	mov	r1, r3
 80008b6:	4806      	ldr	r0, [pc, #24]	; (80008d0 <MX_TIM2_Init+0x134>)
 80008b8:	f002 fc76 	bl	80031a8 <HAL_TIMEx_MasterConfigSynchronization>
 80008bc:	4603      	mov	r3, r0
 80008be:	2b00      	cmp	r3, #0
 80008c0:	d001      	beq.n	80008c6 <MX_TIM2_Init+0x12a>
  {
    Error_Handler();
 80008c2:	f7ff fdb1 	bl	8000428 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80008c6:	bf00      	nop
 80008c8:	3740      	adds	r7, #64	; 0x40
 80008ca:	46bd      	mov	sp, r7
 80008cc:	bd80      	pop	{r7, pc}
 80008ce:	bf00      	nop
 80008d0:	200000e8 	.word	0x200000e8

080008d4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	b08a      	sub	sp, #40	; 0x28
 80008d8:	af00      	add	r7, sp, #0
 80008da:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008dc:	f107 0318 	add.w	r3, r7, #24
 80008e0:	2200      	movs	r2, #0
 80008e2:	601a      	str	r2, [r3, #0]
 80008e4:	605a      	str	r2, [r3, #4]
 80008e6:	609a      	str	r2, [r3, #8]
 80008e8:	60da      	str	r2, [r3, #12]
  if(tim_baseHandle->Instance==TIM1)
 80008ea:	687b      	ldr	r3, [r7, #4]
 80008ec:	681b      	ldr	r3, [r3, #0]
 80008ee:	4a22      	ldr	r2, [pc, #136]	; (8000978 <HAL_TIM_Base_MspInit+0xa4>)
 80008f0:	4293      	cmp	r3, r2
 80008f2:	d10c      	bne.n	800090e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80008f4:	4b21      	ldr	r3, [pc, #132]	; (800097c <HAL_TIM_Base_MspInit+0xa8>)
 80008f6:	699b      	ldr	r3, [r3, #24]
 80008f8:	4a20      	ldr	r2, [pc, #128]	; (800097c <HAL_TIM_Base_MspInit+0xa8>)
 80008fa:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80008fe:	6193      	str	r3, [r2, #24]
 8000900:	4b1e      	ldr	r3, [pc, #120]	; (800097c <HAL_TIM_Base_MspInit+0xa8>)
 8000902:	699b      	ldr	r3, [r3, #24]
 8000904:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000908:	617b      	str	r3, [r7, #20]
 800090a:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 800090c:	e030      	b.n	8000970 <HAL_TIM_Base_MspInit+0x9c>
  else if(tim_baseHandle->Instance==TIM2)
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	681b      	ldr	r3, [r3, #0]
 8000912:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000916:	d12b      	bne.n	8000970 <HAL_TIM_Base_MspInit+0x9c>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000918:	4b18      	ldr	r3, [pc, #96]	; (800097c <HAL_TIM_Base_MspInit+0xa8>)
 800091a:	69db      	ldr	r3, [r3, #28]
 800091c:	4a17      	ldr	r2, [pc, #92]	; (800097c <HAL_TIM_Base_MspInit+0xa8>)
 800091e:	f043 0301 	orr.w	r3, r3, #1
 8000922:	61d3      	str	r3, [r2, #28]
 8000924:	4b15      	ldr	r3, [pc, #84]	; (800097c <HAL_TIM_Base_MspInit+0xa8>)
 8000926:	69db      	ldr	r3, [r3, #28]
 8000928:	f003 0301 	and.w	r3, r3, #1
 800092c:	613b      	str	r3, [r7, #16]
 800092e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000930:	4b12      	ldr	r3, [pc, #72]	; (800097c <HAL_TIM_Base_MspInit+0xa8>)
 8000932:	699b      	ldr	r3, [r3, #24]
 8000934:	4a11      	ldr	r2, [pc, #68]	; (800097c <HAL_TIM_Base_MspInit+0xa8>)
 8000936:	f043 0304 	orr.w	r3, r3, #4
 800093a:	6193      	str	r3, [r2, #24]
 800093c:	4b0f      	ldr	r3, [pc, #60]	; (800097c <HAL_TIM_Base_MspInit+0xa8>)
 800093e:	699b      	ldr	r3, [r3, #24]
 8000940:	f003 0304 	and.w	r3, r3, #4
 8000944:	60fb      	str	r3, [r7, #12]
 8000946:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000948:	2301      	movs	r3, #1
 800094a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800094c:	2300      	movs	r3, #0
 800094e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000950:	2300      	movs	r3, #0
 8000952:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000954:	f107 0318 	add.w	r3, r7, #24
 8000958:	4619      	mov	r1, r3
 800095a:	4809      	ldr	r0, [pc, #36]	; (8000980 <HAL_TIM_Base_MspInit+0xac>)
 800095c:	f000 fb3c 	bl	8000fd8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000960:	2200      	movs	r2, #0
 8000962:	2100      	movs	r1, #0
 8000964:	201c      	movs	r0, #28
 8000966:	f000 fa50 	bl	8000e0a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800096a:	201c      	movs	r0, #28
 800096c:	f000 fa69 	bl	8000e42 <HAL_NVIC_EnableIRQ>
}
 8000970:	bf00      	nop
 8000972:	3728      	adds	r7, #40	; 0x28
 8000974:	46bd      	mov	sp, r7
 8000976:	bd80      	pop	{r7, pc}
 8000978:	40012c00 	.word	0x40012c00
 800097c:	40021000 	.word	0x40021000
 8000980:	40010800 	.word	0x40010800

08000984 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	b088      	sub	sp, #32
 8000988:	af00      	add	r7, sp, #0
 800098a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800098c:	f107 0310 	add.w	r3, r7, #16
 8000990:	2200      	movs	r2, #0
 8000992:	601a      	str	r2, [r3, #0]
 8000994:	605a      	str	r2, [r3, #4]
 8000996:	609a      	str	r2, [r3, #8]
 8000998:	60da      	str	r2, [r3, #12]
  if(timHandle->Instance==TIM1)
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	681b      	ldr	r3, [r3, #0]
 800099e:	4a10      	ldr	r2, [pc, #64]	; (80009e0 <HAL_TIM_MspPostInit+0x5c>)
 80009a0:	4293      	cmp	r3, r2
 80009a2:	d118      	bne.n	80009d6 <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009a4:	4b0f      	ldr	r3, [pc, #60]	; (80009e4 <HAL_TIM_MspPostInit+0x60>)
 80009a6:	699b      	ldr	r3, [r3, #24]
 80009a8:	4a0e      	ldr	r2, [pc, #56]	; (80009e4 <HAL_TIM_MspPostInit+0x60>)
 80009aa:	f043 0304 	orr.w	r3, r3, #4
 80009ae:	6193      	str	r3, [r2, #24]
 80009b0:	4b0c      	ldr	r3, [pc, #48]	; (80009e4 <HAL_TIM_MspPostInit+0x60>)
 80009b2:	699b      	ldr	r3, [r3, #24]
 80009b4:	f003 0304 	and.w	r3, r3, #4
 80009b8:	60fb      	str	r3, [r7, #12]
 80009ba:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80009bc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80009c0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009c2:	2302      	movs	r3, #2
 80009c4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009c6:	2302      	movs	r3, #2
 80009c8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009ca:	f107 0310 	add.w	r3, r7, #16
 80009ce:	4619      	mov	r1, r3
 80009d0:	4805      	ldr	r0, [pc, #20]	; (80009e8 <HAL_TIM_MspPostInit+0x64>)
 80009d2:	f000 fb01 	bl	8000fd8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80009d6:	bf00      	nop
 80009d8:	3720      	adds	r7, #32
 80009da:	46bd      	mov	sp, r7
 80009dc:	bd80      	pop	{r7, pc}
 80009de:	bf00      	nop
 80009e0:	40012c00 	.word	0x40012c00
 80009e4:	40021000 	.word	0x40021000
 80009e8:	40010800 	.word	0x40010800

080009ec <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80009f0:	4b11      	ldr	r3, [pc, #68]	; (8000a38 <MX_USART1_UART_Init+0x4c>)
 80009f2:	4a12      	ldr	r2, [pc, #72]	; (8000a3c <MX_USART1_UART_Init+0x50>)
 80009f4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80009f6:	4b10      	ldr	r3, [pc, #64]	; (8000a38 <MX_USART1_UART_Init+0x4c>)
 80009f8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80009fc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80009fe:	4b0e      	ldr	r3, [pc, #56]	; (8000a38 <MX_USART1_UART_Init+0x4c>)
 8000a00:	2200      	movs	r2, #0
 8000a02:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000a04:	4b0c      	ldr	r3, [pc, #48]	; (8000a38 <MX_USART1_UART_Init+0x4c>)
 8000a06:	2200      	movs	r2, #0
 8000a08:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000a0a:	4b0b      	ldr	r3, [pc, #44]	; (8000a38 <MX_USART1_UART_Init+0x4c>)
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000a10:	4b09      	ldr	r3, [pc, #36]	; (8000a38 <MX_USART1_UART_Init+0x4c>)
 8000a12:	220c      	movs	r2, #12
 8000a14:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a16:	4b08      	ldr	r3, [pc, #32]	; (8000a38 <MX_USART1_UART_Init+0x4c>)
 8000a18:	2200      	movs	r2, #0
 8000a1a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a1c:	4b06      	ldr	r3, [pc, #24]	; (8000a38 <MX_USART1_UART_Init+0x4c>)
 8000a1e:	2200      	movs	r2, #0
 8000a20:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000a22:	4805      	ldr	r0, [pc, #20]	; (8000a38 <MX_USART1_UART_Init+0x4c>)
 8000a24:	f002 fc81 	bl	800332a <HAL_UART_Init>
 8000a28:	4603      	mov	r3, r0
 8000a2a:	2b00      	cmp	r3, #0
 8000a2c:	d001      	beq.n	8000a32 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000a2e:	f7ff fcfb 	bl	8000428 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000a32:	bf00      	nop
 8000a34:	bd80      	pop	{r7, pc}
 8000a36:	bf00      	nop
 8000a38:	20000130 	.word	0x20000130
 8000a3c:	40013800 	.word	0x40013800

08000a40 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	b08a      	sub	sp, #40	; 0x28
 8000a44:	af00      	add	r7, sp, #0
 8000a46:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a48:	f107 0314 	add.w	r3, r7, #20
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	601a      	str	r2, [r3, #0]
 8000a50:	605a      	str	r2, [r3, #4]
 8000a52:	609a      	str	r2, [r3, #8]
 8000a54:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	681b      	ldr	r3, [r3, #0]
 8000a5a:	4a26      	ldr	r2, [pc, #152]	; (8000af4 <HAL_UART_MspInit+0xb4>)
 8000a5c:	4293      	cmp	r3, r2
 8000a5e:	d145      	bne.n	8000aec <HAL_UART_MspInit+0xac>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000a60:	4b25      	ldr	r3, [pc, #148]	; (8000af8 <HAL_UART_MspInit+0xb8>)
 8000a62:	699b      	ldr	r3, [r3, #24]
 8000a64:	4a24      	ldr	r2, [pc, #144]	; (8000af8 <HAL_UART_MspInit+0xb8>)
 8000a66:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a6a:	6193      	str	r3, [r2, #24]
 8000a6c:	4b22      	ldr	r3, [pc, #136]	; (8000af8 <HAL_UART_MspInit+0xb8>)
 8000a6e:	699b      	ldr	r3, [r3, #24]
 8000a70:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a74:	613b      	str	r3, [r7, #16]
 8000a76:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a78:	4b1f      	ldr	r3, [pc, #124]	; (8000af8 <HAL_UART_MspInit+0xb8>)
 8000a7a:	699b      	ldr	r3, [r3, #24]
 8000a7c:	4a1e      	ldr	r2, [pc, #120]	; (8000af8 <HAL_UART_MspInit+0xb8>)
 8000a7e:	f043 0308 	orr.w	r3, r3, #8
 8000a82:	6193      	str	r3, [r2, #24]
 8000a84:	4b1c      	ldr	r3, [pc, #112]	; (8000af8 <HAL_UART_MspInit+0xb8>)
 8000a86:	699b      	ldr	r3, [r3, #24]
 8000a88:	f003 0308 	and.w	r3, r3, #8
 8000a8c:	60fb      	str	r3, [r7, #12]
 8000a8e:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000a90:	2340      	movs	r3, #64	; 0x40
 8000a92:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a94:	2302      	movs	r3, #2
 8000a96:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a98:	2303      	movs	r3, #3
 8000a9a:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a9c:	f107 0314 	add.w	r3, r7, #20
 8000aa0:	4619      	mov	r1, r3
 8000aa2:	4816      	ldr	r0, [pc, #88]	; (8000afc <HAL_UART_MspInit+0xbc>)
 8000aa4:	f000 fa98 	bl	8000fd8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000aa8:	2380      	movs	r3, #128	; 0x80
 8000aaa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000aac:	2300      	movs	r3, #0
 8000aae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ab4:	f107 0314 	add.w	r3, r7, #20
 8000ab8:	4619      	mov	r1, r3
 8000aba:	4810      	ldr	r0, [pc, #64]	; (8000afc <HAL_UART_MspInit+0xbc>)
 8000abc:	f000 fa8c 	bl	8000fd8 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_USART1_ENABLE();
 8000ac0:	4b0f      	ldr	r3, [pc, #60]	; (8000b00 <HAL_UART_MspInit+0xc0>)
 8000ac2:	685b      	ldr	r3, [r3, #4]
 8000ac4:	627b      	str	r3, [r7, #36]	; 0x24
 8000ac6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ac8:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8000acc:	627b      	str	r3, [r7, #36]	; 0x24
 8000ace:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ad0:	f043 0304 	orr.w	r3, r3, #4
 8000ad4:	627b      	str	r3, [r7, #36]	; 0x24
 8000ad6:	4a0a      	ldr	r2, [pc, #40]	; (8000b00 <HAL_UART_MspInit+0xc0>)
 8000ad8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ada:	6053      	str	r3, [r2, #4]

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000adc:	2200      	movs	r2, #0
 8000ade:	2100      	movs	r1, #0
 8000ae0:	2025      	movs	r0, #37	; 0x25
 8000ae2:	f000 f992 	bl	8000e0a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000ae6:	2025      	movs	r0, #37	; 0x25
 8000ae8:	f000 f9ab 	bl	8000e42 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8000aec:	bf00      	nop
 8000aee:	3728      	adds	r7, #40	; 0x28
 8000af0:	46bd      	mov	sp, r7
 8000af2:	bd80      	pop	{r7, pc}
 8000af4:	40013800 	.word	0x40013800
 8000af8:	40021000 	.word	0x40021000
 8000afc:	40010c00 	.word	0x40010c00
 8000b00:	40010000 	.word	0x40010000

08000b04 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b04:	480c      	ldr	r0, [pc, #48]	; (8000b38 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000b06:	490d      	ldr	r1, [pc, #52]	; (8000b3c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000b08:	4a0d      	ldr	r2, [pc, #52]	; (8000b40 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000b0a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b0c:	e002      	b.n	8000b14 <LoopCopyDataInit>

08000b0e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b0e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b10:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b12:	3304      	adds	r3, #4

08000b14 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b14:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b16:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b18:	d3f9      	bcc.n	8000b0e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b1a:	4a0a      	ldr	r2, [pc, #40]	; (8000b44 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000b1c:	4c0a      	ldr	r4, [pc, #40]	; (8000b48 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000b1e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b20:	e001      	b.n	8000b26 <LoopFillZerobss>

08000b22 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b22:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b24:	3204      	adds	r2, #4

08000b26 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b26:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b28:	d3fb      	bcc.n	8000b22 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000b2a:	f7ff fd91 	bl	8000650 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000b2e:	f003 f8d9 	bl	8003ce4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000b32:	f7ff fb8f 	bl	8000254 <main>
  bx lr
 8000b36:	4770      	bx	lr
  ldr r0, =_sdata
 8000b38:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b3c:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000b40:	08004d5c 	.word	0x08004d5c
  ldr r2, =_sbss
 8000b44:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000b48:	20000188 	.word	0x20000188

08000b4c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000b4c:	e7fe      	b.n	8000b4c <ADC1_2_IRQHandler>
	...

08000b50 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b54:	4b08      	ldr	r3, [pc, #32]	; (8000b78 <HAL_Init+0x28>)
 8000b56:	681b      	ldr	r3, [r3, #0]
 8000b58:	4a07      	ldr	r2, [pc, #28]	; (8000b78 <HAL_Init+0x28>)
 8000b5a:	f043 0310 	orr.w	r3, r3, #16
 8000b5e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b60:	2003      	movs	r0, #3
 8000b62:	f000 f947 	bl	8000df4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b66:	200f      	movs	r0, #15
 8000b68:	f000 f808 	bl	8000b7c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b6c:	f7ff fc62 	bl	8000434 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b70:	2300      	movs	r3, #0
}
 8000b72:	4618      	mov	r0, r3
 8000b74:	bd80      	pop	{r7, pc}
 8000b76:	bf00      	nop
 8000b78:	40022000 	.word	0x40022000

08000b7c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	b082      	sub	sp, #8
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b84:	4b12      	ldr	r3, [pc, #72]	; (8000bd0 <HAL_InitTick+0x54>)
 8000b86:	681a      	ldr	r2, [r3, #0]
 8000b88:	4b12      	ldr	r3, [pc, #72]	; (8000bd4 <HAL_InitTick+0x58>)
 8000b8a:	781b      	ldrb	r3, [r3, #0]
 8000b8c:	4619      	mov	r1, r3
 8000b8e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b92:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b96:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b9a:	4618      	mov	r0, r3
 8000b9c:	f000 f95f 	bl	8000e5e <HAL_SYSTICK_Config>
 8000ba0:	4603      	mov	r3, r0
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	d001      	beq.n	8000baa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000ba6:	2301      	movs	r3, #1
 8000ba8:	e00e      	b.n	8000bc8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	2b0f      	cmp	r3, #15
 8000bae:	d80a      	bhi.n	8000bc6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	6879      	ldr	r1, [r7, #4]
 8000bb4:	f04f 30ff 	mov.w	r0, #4294967295
 8000bb8:	f000 f927 	bl	8000e0a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000bbc:	4a06      	ldr	r2, [pc, #24]	; (8000bd8 <HAL_InitTick+0x5c>)
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	e000      	b.n	8000bc8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000bc6:	2301      	movs	r3, #1
}
 8000bc8:	4618      	mov	r0, r3
 8000bca:	3708      	adds	r7, #8
 8000bcc:	46bd      	mov	sp, r7
 8000bce:	bd80      	pop	{r7, pc}
 8000bd0:	20000000 	.word	0x20000000
 8000bd4:	20000008 	.word	0x20000008
 8000bd8:	20000004 	.word	0x20000004

08000bdc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000bdc:	b480      	push	{r7}
 8000bde:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000be0:	4b05      	ldr	r3, [pc, #20]	; (8000bf8 <HAL_IncTick+0x1c>)
 8000be2:	781b      	ldrb	r3, [r3, #0]
 8000be4:	461a      	mov	r2, r3
 8000be6:	4b05      	ldr	r3, [pc, #20]	; (8000bfc <HAL_IncTick+0x20>)
 8000be8:	681b      	ldr	r3, [r3, #0]
 8000bea:	4413      	add	r3, r2
 8000bec:	4a03      	ldr	r2, [pc, #12]	; (8000bfc <HAL_IncTick+0x20>)
 8000bee:	6013      	str	r3, [r2, #0]
}
 8000bf0:	bf00      	nop
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	bc80      	pop	{r7}
 8000bf6:	4770      	bx	lr
 8000bf8:	20000008 	.word	0x20000008
 8000bfc:	20000174 	.word	0x20000174

08000c00 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c00:	b480      	push	{r7}
 8000c02:	af00      	add	r7, sp, #0
  return uwTick;
 8000c04:	4b02      	ldr	r3, [pc, #8]	; (8000c10 <HAL_GetTick+0x10>)
 8000c06:	681b      	ldr	r3, [r3, #0]
}
 8000c08:	4618      	mov	r0, r3
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	bc80      	pop	{r7}
 8000c0e:	4770      	bx	lr
 8000c10:	20000174 	.word	0x20000174

08000c14 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	b084      	sub	sp, #16
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000c1c:	f7ff fff0 	bl	8000c00 <HAL_GetTick>
 8000c20:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000c26:	68fb      	ldr	r3, [r7, #12]
 8000c28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000c2c:	d005      	beq.n	8000c3a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000c2e:	4b0a      	ldr	r3, [pc, #40]	; (8000c58 <HAL_Delay+0x44>)
 8000c30:	781b      	ldrb	r3, [r3, #0]
 8000c32:	461a      	mov	r2, r3
 8000c34:	68fb      	ldr	r3, [r7, #12]
 8000c36:	4413      	add	r3, r2
 8000c38:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000c3a:	bf00      	nop
 8000c3c:	f7ff ffe0 	bl	8000c00 <HAL_GetTick>
 8000c40:	4602      	mov	r2, r0
 8000c42:	68bb      	ldr	r3, [r7, #8]
 8000c44:	1ad3      	subs	r3, r2, r3
 8000c46:	68fa      	ldr	r2, [r7, #12]
 8000c48:	429a      	cmp	r2, r3
 8000c4a:	d8f7      	bhi.n	8000c3c <HAL_Delay+0x28>
  {
  }
}
 8000c4c:	bf00      	nop
 8000c4e:	bf00      	nop
 8000c50:	3710      	adds	r7, #16
 8000c52:	46bd      	mov	sp, r7
 8000c54:	bd80      	pop	{r7, pc}
 8000c56:	bf00      	nop
 8000c58:	20000008 	.word	0x20000008

08000c5c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c5c:	b480      	push	{r7}
 8000c5e:	b085      	sub	sp, #20
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	f003 0307 	and.w	r3, r3, #7
 8000c6a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c6c:	4b0c      	ldr	r3, [pc, #48]	; (8000ca0 <__NVIC_SetPriorityGrouping+0x44>)
 8000c6e:	68db      	ldr	r3, [r3, #12]
 8000c70:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c72:	68ba      	ldr	r2, [r7, #8]
 8000c74:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c78:	4013      	ands	r3, r2
 8000c7a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000c7c:	68fb      	ldr	r3, [r7, #12]
 8000c7e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c80:	68bb      	ldr	r3, [r7, #8]
 8000c82:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c84:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000c88:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c8c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c8e:	4a04      	ldr	r2, [pc, #16]	; (8000ca0 <__NVIC_SetPriorityGrouping+0x44>)
 8000c90:	68bb      	ldr	r3, [r7, #8]
 8000c92:	60d3      	str	r3, [r2, #12]
}
 8000c94:	bf00      	nop
 8000c96:	3714      	adds	r7, #20
 8000c98:	46bd      	mov	sp, r7
 8000c9a:	bc80      	pop	{r7}
 8000c9c:	4770      	bx	lr
 8000c9e:	bf00      	nop
 8000ca0:	e000ed00 	.word	0xe000ed00

08000ca4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ca4:	b480      	push	{r7}
 8000ca6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ca8:	4b04      	ldr	r3, [pc, #16]	; (8000cbc <__NVIC_GetPriorityGrouping+0x18>)
 8000caa:	68db      	ldr	r3, [r3, #12]
 8000cac:	0a1b      	lsrs	r3, r3, #8
 8000cae:	f003 0307 	and.w	r3, r3, #7
}
 8000cb2:	4618      	mov	r0, r3
 8000cb4:	46bd      	mov	sp, r7
 8000cb6:	bc80      	pop	{r7}
 8000cb8:	4770      	bx	lr
 8000cba:	bf00      	nop
 8000cbc:	e000ed00 	.word	0xe000ed00

08000cc0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000cc0:	b480      	push	{r7}
 8000cc2:	b083      	sub	sp, #12
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	4603      	mov	r3, r0
 8000cc8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	db0b      	blt.n	8000cea <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000cd2:	79fb      	ldrb	r3, [r7, #7]
 8000cd4:	f003 021f 	and.w	r2, r3, #31
 8000cd8:	4906      	ldr	r1, [pc, #24]	; (8000cf4 <__NVIC_EnableIRQ+0x34>)
 8000cda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cde:	095b      	lsrs	r3, r3, #5
 8000ce0:	2001      	movs	r0, #1
 8000ce2:	fa00 f202 	lsl.w	r2, r0, r2
 8000ce6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000cea:	bf00      	nop
 8000cec:	370c      	adds	r7, #12
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	bc80      	pop	{r7}
 8000cf2:	4770      	bx	lr
 8000cf4:	e000e100 	.word	0xe000e100

08000cf8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000cf8:	b480      	push	{r7}
 8000cfa:	b083      	sub	sp, #12
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	4603      	mov	r3, r0
 8000d00:	6039      	str	r1, [r7, #0]
 8000d02:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d08:	2b00      	cmp	r3, #0
 8000d0a:	db0a      	blt.n	8000d22 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d0c:	683b      	ldr	r3, [r7, #0]
 8000d0e:	b2da      	uxtb	r2, r3
 8000d10:	490c      	ldr	r1, [pc, #48]	; (8000d44 <__NVIC_SetPriority+0x4c>)
 8000d12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d16:	0112      	lsls	r2, r2, #4
 8000d18:	b2d2      	uxtb	r2, r2
 8000d1a:	440b      	add	r3, r1
 8000d1c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d20:	e00a      	b.n	8000d38 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d22:	683b      	ldr	r3, [r7, #0]
 8000d24:	b2da      	uxtb	r2, r3
 8000d26:	4908      	ldr	r1, [pc, #32]	; (8000d48 <__NVIC_SetPriority+0x50>)
 8000d28:	79fb      	ldrb	r3, [r7, #7]
 8000d2a:	f003 030f 	and.w	r3, r3, #15
 8000d2e:	3b04      	subs	r3, #4
 8000d30:	0112      	lsls	r2, r2, #4
 8000d32:	b2d2      	uxtb	r2, r2
 8000d34:	440b      	add	r3, r1
 8000d36:	761a      	strb	r2, [r3, #24]
}
 8000d38:	bf00      	nop
 8000d3a:	370c      	adds	r7, #12
 8000d3c:	46bd      	mov	sp, r7
 8000d3e:	bc80      	pop	{r7}
 8000d40:	4770      	bx	lr
 8000d42:	bf00      	nop
 8000d44:	e000e100 	.word	0xe000e100
 8000d48:	e000ed00 	.word	0xe000ed00

08000d4c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d4c:	b480      	push	{r7}
 8000d4e:	b089      	sub	sp, #36	; 0x24
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	60f8      	str	r0, [r7, #12]
 8000d54:	60b9      	str	r1, [r7, #8]
 8000d56:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d58:	68fb      	ldr	r3, [r7, #12]
 8000d5a:	f003 0307 	and.w	r3, r3, #7
 8000d5e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d60:	69fb      	ldr	r3, [r7, #28]
 8000d62:	f1c3 0307 	rsb	r3, r3, #7
 8000d66:	2b04      	cmp	r3, #4
 8000d68:	bf28      	it	cs
 8000d6a:	2304      	movcs	r3, #4
 8000d6c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d6e:	69fb      	ldr	r3, [r7, #28]
 8000d70:	3304      	adds	r3, #4
 8000d72:	2b06      	cmp	r3, #6
 8000d74:	d902      	bls.n	8000d7c <NVIC_EncodePriority+0x30>
 8000d76:	69fb      	ldr	r3, [r7, #28]
 8000d78:	3b03      	subs	r3, #3
 8000d7a:	e000      	b.n	8000d7e <NVIC_EncodePriority+0x32>
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d80:	f04f 32ff 	mov.w	r2, #4294967295
 8000d84:	69bb      	ldr	r3, [r7, #24]
 8000d86:	fa02 f303 	lsl.w	r3, r2, r3
 8000d8a:	43da      	mvns	r2, r3
 8000d8c:	68bb      	ldr	r3, [r7, #8]
 8000d8e:	401a      	ands	r2, r3
 8000d90:	697b      	ldr	r3, [r7, #20]
 8000d92:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d94:	f04f 31ff 	mov.w	r1, #4294967295
 8000d98:	697b      	ldr	r3, [r7, #20]
 8000d9a:	fa01 f303 	lsl.w	r3, r1, r3
 8000d9e:	43d9      	mvns	r1, r3
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000da4:	4313      	orrs	r3, r2
         );
}
 8000da6:	4618      	mov	r0, r3
 8000da8:	3724      	adds	r7, #36	; 0x24
 8000daa:	46bd      	mov	sp, r7
 8000dac:	bc80      	pop	{r7}
 8000dae:	4770      	bx	lr

08000db0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	b082      	sub	sp, #8
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	3b01      	subs	r3, #1
 8000dbc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000dc0:	d301      	bcc.n	8000dc6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000dc2:	2301      	movs	r3, #1
 8000dc4:	e00f      	b.n	8000de6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000dc6:	4a0a      	ldr	r2, [pc, #40]	; (8000df0 <SysTick_Config+0x40>)
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	3b01      	subs	r3, #1
 8000dcc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000dce:	210f      	movs	r1, #15
 8000dd0:	f04f 30ff 	mov.w	r0, #4294967295
 8000dd4:	f7ff ff90 	bl	8000cf8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000dd8:	4b05      	ldr	r3, [pc, #20]	; (8000df0 <SysTick_Config+0x40>)
 8000dda:	2200      	movs	r2, #0
 8000ddc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000dde:	4b04      	ldr	r3, [pc, #16]	; (8000df0 <SysTick_Config+0x40>)
 8000de0:	2207      	movs	r2, #7
 8000de2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000de4:	2300      	movs	r3, #0
}
 8000de6:	4618      	mov	r0, r3
 8000de8:	3708      	adds	r7, #8
 8000dea:	46bd      	mov	sp, r7
 8000dec:	bd80      	pop	{r7, pc}
 8000dee:	bf00      	nop
 8000df0:	e000e010 	.word	0xe000e010

08000df4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b082      	sub	sp, #8
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000dfc:	6878      	ldr	r0, [r7, #4]
 8000dfe:	f7ff ff2d 	bl	8000c5c <__NVIC_SetPriorityGrouping>
}
 8000e02:	bf00      	nop
 8000e04:	3708      	adds	r7, #8
 8000e06:	46bd      	mov	sp, r7
 8000e08:	bd80      	pop	{r7, pc}

08000e0a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e0a:	b580      	push	{r7, lr}
 8000e0c:	b086      	sub	sp, #24
 8000e0e:	af00      	add	r7, sp, #0
 8000e10:	4603      	mov	r3, r0
 8000e12:	60b9      	str	r1, [r7, #8]
 8000e14:	607a      	str	r2, [r7, #4]
 8000e16:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000e18:	2300      	movs	r3, #0
 8000e1a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e1c:	f7ff ff42 	bl	8000ca4 <__NVIC_GetPriorityGrouping>
 8000e20:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e22:	687a      	ldr	r2, [r7, #4]
 8000e24:	68b9      	ldr	r1, [r7, #8]
 8000e26:	6978      	ldr	r0, [r7, #20]
 8000e28:	f7ff ff90 	bl	8000d4c <NVIC_EncodePriority>
 8000e2c:	4602      	mov	r2, r0
 8000e2e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e32:	4611      	mov	r1, r2
 8000e34:	4618      	mov	r0, r3
 8000e36:	f7ff ff5f 	bl	8000cf8 <__NVIC_SetPriority>
}
 8000e3a:	bf00      	nop
 8000e3c:	3718      	adds	r7, #24
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	bd80      	pop	{r7, pc}

08000e42 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e42:	b580      	push	{r7, lr}
 8000e44:	b082      	sub	sp, #8
 8000e46:	af00      	add	r7, sp, #0
 8000e48:	4603      	mov	r3, r0
 8000e4a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e50:	4618      	mov	r0, r3
 8000e52:	f7ff ff35 	bl	8000cc0 <__NVIC_EnableIRQ>
}
 8000e56:	bf00      	nop
 8000e58:	3708      	adds	r7, #8
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	bd80      	pop	{r7, pc}

08000e5e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e5e:	b580      	push	{r7, lr}
 8000e60:	b082      	sub	sp, #8
 8000e62:	af00      	add	r7, sp, #0
 8000e64:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e66:	6878      	ldr	r0, [r7, #4]
 8000e68:	f7ff ffa2 	bl	8000db0 <SysTick_Config>
 8000e6c:	4603      	mov	r3, r0
}
 8000e6e:	4618      	mov	r0, r3
 8000e70:	3708      	adds	r7, #8
 8000e72:	46bd      	mov	sp, r7
 8000e74:	bd80      	pop	{r7, pc}

08000e76 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000e76:	b480      	push	{r7}
 8000e78:	b085      	sub	sp, #20
 8000e7a:	af00      	add	r7, sp, #0
 8000e7c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000e7e:	2300      	movs	r3, #0
 8000e80:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000e88:	2b02      	cmp	r3, #2
 8000e8a:	d008      	beq.n	8000e9e <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	2204      	movs	r2, #4
 8000e90:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	2200      	movs	r2, #0
 8000e96:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8000e9a:	2301      	movs	r3, #1
 8000e9c:	e020      	b.n	8000ee0 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	681a      	ldr	r2, [r3, #0]
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	f022 020e 	bic.w	r2, r2, #14
 8000eac:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	681a      	ldr	r2, [r3, #0]
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	f022 0201 	bic.w	r2, r2, #1
 8000ebc:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000ec6:	2101      	movs	r1, #1
 8000ec8:	fa01 f202 	lsl.w	r2, r1, r2
 8000ecc:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	2201      	movs	r2, #1
 8000ed2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	2200      	movs	r2, #0
 8000eda:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8000ede:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ee0:	4618      	mov	r0, r3
 8000ee2:	3714      	adds	r7, #20
 8000ee4:	46bd      	mov	sp, r7
 8000ee6:	bc80      	pop	{r7}
 8000ee8:	4770      	bx	lr
	...

08000eec <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b084      	sub	sp, #16
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000efe:	2b02      	cmp	r3, #2
 8000f00:	d005      	beq.n	8000f0e <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	2204      	movs	r2, #4
 8000f06:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8000f08:	2301      	movs	r3, #1
 8000f0a:	73fb      	strb	r3, [r7, #15]
 8000f0c:	e051      	b.n	8000fb2 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	681a      	ldr	r2, [r3, #0]
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	f022 020e 	bic.w	r2, r2, #14
 8000f1c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	681a      	ldr	r2, [r3, #0]
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	f022 0201 	bic.w	r2, r2, #1
 8000f2c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	4a22      	ldr	r2, [pc, #136]	; (8000fbc <HAL_DMA_Abort_IT+0xd0>)
 8000f34:	4293      	cmp	r3, r2
 8000f36:	d029      	beq.n	8000f8c <HAL_DMA_Abort_IT+0xa0>
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	4a20      	ldr	r2, [pc, #128]	; (8000fc0 <HAL_DMA_Abort_IT+0xd4>)
 8000f3e:	4293      	cmp	r3, r2
 8000f40:	d022      	beq.n	8000f88 <HAL_DMA_Abort_IT+0x9c>
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	4a1f      	ldr	r2, [pc, #124]	; (8000fc4 <HAL_DMA_Abort_IT+0xd8>)
 8000f48:	4293      	cmp	r3, r2
 8000f4a:	d01a      	beq.n	8000f82 <HAL_DMA_Abort_IT+0x96>
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	4a1d      	ldr	r2, [pc, #116]	; (8000fc8 <HAL_DMA_Abort_IT+0xdc>)
 8000f52:	4293      	cmp	r3, r2
 8000f54:	d012      	beq.n	8000f7c <HAL_DMA_Abort_IT+0x90>
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	4a1c      	ldr	r2, [pc, #112]	; (8000fcc <HAL_DMA_Abort_IT+0xe0>)
 8000f5c:	4293      	cmp	r3, r2
 8000f5e:	d00a      	beq.n	8000f76 <HAL_DMA_Abort_IT+0x8a>
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	4a1a      	ldr	r2, [pc, #104]	; (8000fd0 <HAL_DMA_Abort_IT+0xe4>)
 8000f66:	4293      	cmp	r3, r2
 8000f68:	d102      	bne.n	8000f70 <HAL_DMA_Abort_IT+0x84>
 8000f6a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000f6e:	e00e      	b.n	8000f8e <HAL_DMA_Abort_IT+0xa2>
 8000f70:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000f74:	e00b      	b.n	8000f8e <HAL_DMA_Abort_IT+0xa2>
 8000f76:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000f7a:	e008      	b.n	8000f8e <HAL_DMA_Abort_IT+0xa2>
 8000f7c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f80:	e005      	b.n	8000f8e <HAL_DMA_Abort_IT+0xa2>
 8000f82:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000f86:	e002      	b.n	8000f8e <HAL_DMA_Abort_IT+0xa2>
 8000f88:	2310      	movs	r3, #16
 8000f8a:	e000      	b.n	8000f8e <HAL_DMA_Abort_IT+0xa2>
 8000f8c:	2301      	movs	r3, #1
 8000f8e:	4a11      	ldr	r2, [pc, #68]	; (8000fd4 <HAL_DMA_Abort_IT+0xe8>)
 8000f90:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	2201      	movs	r2, #1
 8000f96:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d003      	beq.n	8000fb2 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000fae:	6878      	ldr	r0, [r7, #4]
 8000fb0:	4798      	blx	r3
    } 
  }
  return status;
 8000fb2:	7bfb      	ldrb	r3, [r7, #15]
}
 8000fb4:	4618      	mov	r0, r3
 8000fb6:	3710      	adds	r7, #16
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	bd80      	pop	{r7, pc}
 8000fbc:	40020008 	.word	0x40020008
 8000fc0:	4002001c 	.word	0x4002001c
 8000fc4:	40020030 	.word	0x40020030
 8000fc8:	40020044 	.word	0x40020044
 8000fcc:	40020058 	.word	0x40020058
 8000fd0:	4002006c 	.word	0x4002006c
 8000fd4:	40020000 	.word	0x40020000

08000fd8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000fd8:	b480      	push	{r7}
 8000fda:	b08b      	sub	sp, #44	; 0x2c
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	6078      	str	r0, [r7, #4]
 8000fe0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000fea:	e169      	b.n	80012c0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000fec:	2201      	movs	r2, #1
 8000fee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ff0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ff4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000ff6:	683b      	ldr	r3, [r7, #0]
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	69fa      	ldr	r2, [r7, #28]
 8000ffc:	4013      	ands	r3, r2
 8000ffe:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001000:	69ba      	ldr	r2, [r7, #24]
 8001002:	69fb      	ldr	r3, [r7, #28]
 8001004:	429a      	cmp	r2, r3
 8001006:	f040 8158 	bne.w	80012ba <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800100a:	683b      	ldr	r3, [r7, #0]
 800100c:	685b      	ldr	r3, [r3, #4]
 800100e:	4a9a      	ldr	r2, [pc, #616]	; (8001278 <HAL_GPIO_Init+0x2a0>)
 8001010:	4293      	cmp	r3, r2
 8001012:	d05e      	beq.n	80010d2 <HAL_GPIO_Init+0xfa>
 8001014:	4a98      	ldr	r2, [pc, #608]	; (8001278 <HAL_GPIO_Init+0x2a0>)
 8001016:	4293      	cmp	r3, r2
 8001018:	d875      	bhi.n	8001106 <HAL_GPIO_Init+0x12e>
 800101a:	4a98      	ldr	r2, [pc, #608]	; (800127c <HAL_GPIO_Init+0x2a4>)
 800101c:	4293      	cmp	r3, r2
 800101e:	d058      	beq.n	80010d2 <HAL_GPIO_Init+0xfa>
 8001020:	4a96      	ldr	r2, [pc, #600]	; (800127c <HAL_GPIO_Init+0x2a4>)
 8001022:	4293      	cmp	r3, r2
 8001024:	d86f      	bhi.n	8001106 <HAL_GPIO_Init+0x12e>
 8001026:	4a96      	ldr	r2, [pc, #600]	; (8001280 <HAL_GPIO_Init+0x2a8>)
 8001028:	4293      	cmp	r3, r2
 800102a:	d052      	beq.n	80010d2 <HAL_GPIO_Init+0xfa>
 800102c:	4a94      	ldr	r2, [pc, #592]	; (8001280 <HAL_GPIO_Init+0x2a8>)
 800102e:	4293      	cmp	r3, r2
 8001030:	d869      	bhi.n	8001106 <HAL_GPIO_Init+0x12e>
 8001032:	4a94      	ldr	r2, [pc, #592]	; (8001284 <HAL_GPIO_Init+0x2ac>)
 8001034:	4293      	cmp	r3, r2
 8001036:	d04c      	beq.n	80010d2 <HAL_GPIO_Init+0xfa>
 8001038:	4a92      	ldr	r2, [pc, #584]	; (8001284 <HAL_GPIO_Init+0x2ac>)
 800103a:	4293      	cmp	r3, r2
 800103c:	d863      	bhi.n	8001106 <HAL_GPIO_Init+0x12e>
 800103e:	4a92      	ldr	r2, [pc, #584]	; (8001288 <HAL_GPIO_Init+0x2b0>)
 8001040:	4293      	cmp	r3, r2
 8001042:	d046      	beq.n	80010d2 <HAL_GPIO_Init+0xfa>
 8001044:	4a90      	ldr	r2, [pc, #576]	; (8001288 <HAL_GPIO_Init+0x2b0>)
 8001046:	4293      	cmp	r3, r2
 8001048:	d85d      	bhi.n	8001106 <HAL_GPIO_Init+0x12e>
 800104a:	2b12      	cmp	r3, #18
 800104c:	d82a      	bhi.n	80010a4 <HAL_GPIO_Init+0xcc>
 800104e:	2b12      	cmp	r3, #18
 8001050:	d859      	bhi.n	8001106 <HAL_GPIO_Init+0x12e>
 8001052:	a201      	add	r2, pc, #4	; (adr r2, 8001058 <HAL_GPIO_Init+0x80>)
 8001054:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001058:	080010d3 	.word	0x080010d3
 800105c:	080010ad 	.word	0x080010ad
 8001060:	080010bf 	.word	0x080010bf
 8001064:	08001101 	.word	0x08001101
 8001068:	08001107 	.word	0x08001107
 800106c:	08001107 	.word	0x08001107
 8001070:	08001107 	.word	0x08001107
 8001074:	08001107 	.word	0x08001107
 8001078:	08001107 	.word	0x08001107
 800107c:	08001107 	.word	0x08001107
 8001080:	08001107 	.word	0x08001107
 8001084:	08001107 	.word	0x08001107
 8001088:	08001107 	.word	0x08001107
 800108c:	08001107 	.word	0x08001107
 8001090:	08001107 	.word	0x08001107
 8001094:	08001107 	.word	0x08001107
 8001098:	08001107 	.word	0x08001107
 800109c:	080010b5 	.word	0x080010b5
 80010a0:	080010c9 	.word	0x080010c9
 80010a4:	4a79      	ldr	r2, [pc, #484]	; (800128c <HAL_GPIO_Init+0x2b4>)
 80010a6:	4293      	cmp	r3, r2
 80010a8:	d013      	beq.n	80010d2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80010aa:	e02c      	b.n	8001106 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80010ac:	683b      	ldr	r3, [r7, #0]
 80010ae:	68db      	ldr	r3, [r3, #12]
 80010b0:	623b      	str	r3, [r7, #32]
          break;
 80010b2:	e029      	b.n	8001108 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80010b4:	683b      	ldr	r3, [r7, #0]
 80010b6:	68db      	ldr	r3, [r3, #12]
 80010b8:	3304      	adds	r3, #4
 80010ba:	623b      	str	r3, [r7, #32]
          break;
 80010bc:	e024      	b.n	8001108 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80010be:	683b      	ldr	r3, [r7, #0]
 80010c0:	68db      	ldr	r3, [r3, #12]
 80010c2:	3308      	adds	r3, #8
 80010c4:	623b      	str	r3, [r7, #32]
          break;
 80010c6:	e01f      	b.n	8001108 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80010c8:	683b      	ldr	r3, [r7, #0]
 80010ca:	68db      	ldr	r3, [r3, #12]
 80010cc:	330c      	adds	r3, #12
 80010ce:	623b      	str	r3, [r7, #32]
          break;
 80010d0:	e01a      	b.n	8001108 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80010d2:	683b      	ldr	r3, [r7, #0]
 80010d4:	689b      	ldr	r3, [r3, #8]
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d102      	bne.n	80010e0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80010da:	2304      	movs	r3, #4
 80010dc:	623b      	str	r3, [r7, #32]
          break;
 80010de:	e013      	b.n	8001108 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80010e0:	683b      	ldr	r3, [r7, #0]
 80010e2:	689b      	ldr	r3, [r3, #8]
 80010e4:	2b01      	cmp	r3, #1
 80010e6:	d105      	bne.n	80010f4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80010e8:	2308      	movs	r3, #8
 80010ea:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	69fa      	ldr	r2, [r7, #28]
 80010f0:	611a      	str	r2, [r3, #16]
          break;
 80010f2:	e009      	b.n	8001108 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80010f4:	2308      	movs	r3, #8
 80010f6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	69fa      	ldr	r2, [r7, #28]
 80010fc:	615a      	str	r2, [r3, #20]
          break;
 80010fe:	e003      	b.n	8001108 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001100:	2300      	movs	r3, #0
 8001102:	623b      	str	r3, [r7, #32]
          break;
 8001104:	e000      	b.n	8001108 <HAL_GPIO_Init+0x130>
          break;
 8001106:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001108:	69bb      	ldr	r3, [r7, #24]
 800110a:	2bff      	cmp	r3, #255	; 0xff
 800110c:	d801      	bhi.n	8001112 <HAL_GPIO_Init+0x13a>
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	e001      	b.n	8001116 <HAL_GPIO_Init+0x13e>
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	3304      	adds	r3, #4
 8001116:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001118:	69bb      	ldr	r3, [r7, #24]
 800111a:	2bff      	cmp	r3, #255	; 0xff
 800111c:	d802      	bhi.n	8001124 <HAL_GPIO_Init+0x14c>
 800111e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001120:	009b      	lsls	r3, r3, #2
 8001122:	e002      	b.n	800112a <HAL_GPIO_Init+0x152>
 8001124:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001126:	3b08      	subs	r3, #8
 8001128:	009b      	lsls	r3, r3, #2
 800112a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800112c:	697b      	ldr	r3, [r7, #20]
 800112e:	681a      	ldr	r2, [r3, #0]
 8001130:	210f      	movs	r1, #15
 8001132:	693b      	ldr	r3, [r7, #16]
 8001134:	fa01 f303 	lsl.w	r3, r1, r3
 8001138:	43db      	mvns	r3, r3
 800113a:	401a      	ands	r2, r3
 800113c:	6a39      	ldr	r1, [r7, #32]
 800113e:	693b      	ldr	r3, [r7, #16]
 8001140:	fa01 f303 	lsl.w	r3, r1, r3
 8001144:	431a      	orrs	r2, r3
 8001146:	697b      	ldr	r3, [r7, #20]
 8001148:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800114a:	683b      	ldr	r3, [r7, #0]
 800114c:	685b      	ldr	r3, [r3, #4]
 800114e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001152:	2b00      	cmp	r3, #0
 8001154:	f000 80b1 	beq.w	80012ba <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001158:	4b4d      	ldr	r3, [pc, #308]	; (8001290 <HAL_GPIO_Init+0x2b8>)
 800115a:	699b      	ldr	r3, [r3, #24]
 800115c:	4a4c      	ldr	r2, [pc, #304]	; (8001290 <HAL_GPIO_Init+0x2b8>)
 800115e:	f043 0301 	orr.w	r3, r3, #1
 8001162:	6193      	str	r3, [r2, #24]
 8001164:	4b4a      	ldr	r3, [pc, #296]	; (8001290 <HAL_GPIO_Init+0x2b8>)
 8001166:	699b      	ldr	r3, [r3, #24]
 8001168:	f003 0301 	and.w	r3, r3, #1
 800116c:	60bb      	str	r3, [r7, #8]
 800116e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001170:	4a48      	ldr	r2, [pc, #288]	; (8001294 <HAL_GPIO_Init+0x2bc>)
 8001172:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001174:	089b      	lsrs	r3, r3, #2
 8001176:	3302      	adds	r3, #2
 8001178:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800117c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800117e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001180:	f003 0303 	and.w	r3, r3, #3
 8001184:	009b      	lsls	r3, r3, #2
 8001186:	220f      	movs	r2, #15
 8001188:	fa02 f303 	lsl.w	r3, r2, r3
 800118c:	43db      	mvns	r3, r3
 800118e:	68fa      	ldr	r2, [r7, #12]
 8001190:	4013      	ands	r3, r2
 8001192:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	4a40      	ldr	r2, [pc, #256]	; (8001298 <HAL_GPIO_Init+0x2c0>)
 8001198:	4293      	cmp	r3, r2
 800119a:	d013      	beq.n	80011c4 <HAL_GPIO_Init+0x1ec>
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	4a3f      	ldr	r2, [pc, #252]	; (800129c <HAL_GPIO_Init+0x2c4>)
 80011a0:	4293      	cmp	r3, r2
 80011a2:	d00d      	beq.n	80011c0 <HAL_GPIO_Init+0x1e8>
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	4a3e      	ldr	r2, [pc, #248]	; (80012a0 <HAL_GPIO_Init+0x2c8>)
 80011a8:	4293      	cmp	r3, r2
 80011aa:	d007      	beq.n	80011bc <HAL_GPIO_Init+0x1e4>
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	4a3d      	ldr	r2, [pc, #244]	; (80012a4 <HAL_GPIO_Init+0x2cc>)
 80011b0:	4293      	cmp	r3, r2
 80011b2:	d101      	bne.n	80011b8 <HAL_GPIO_Init+0x1e0>
 80011b4:	2303      	movs	r3, #3
 80011b6:	e006      	b.n	80011c6 <HAL_GPIO_Init+0x1ee>
 80011b8:	2304      	movs	r3, #4
 80011ba:	e004      	b.n	80011c6 <HAL_GPIO_Init+0x1ee>
 80011bc:	2302      	movs	r3, #2
 80011be:	e002      	b.n	80011c6 <HAL_GPIO_Init+0x1ee>
 80011c0:	2301      	movs	r3, #1
 80011c2:	e000      	b.n	80011c6 <HAL_GPIO_Init+0x1ee>
 80011c4:	2300      	movs	r3, #0
 80011c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80011c8:	f002 0203 	and.w	r2, r2, #3
 80011cc:	0092      	lsls	r2, r2, #2
 80011ce:	4093      	lsls	r3, r2
 80011d0:	68fa      	ldr	r2, [r7, #12]
 80011d2:	4313      	orrs	r3, r2
 80011d4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80011d6:	492f      	ldr	r1, [pc, #188]	; (8001294 <HAL_GPIO_Init+0x2bc>)
 80011d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011da:	089b      	lsrs	r3, r3, #2
 80011dc:	3302      	adds	r3, #2
 80011de:	68fa      	ldr	r2, [r7, #12]
 80011e0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80011e4:	683b      	ldr	r3, [r7, #0]
 80011e6:	685b      	ldr	r3, [r3, #4]
 80011e8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d006      	beq.n	80011fe <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80011f0:	4b2d      	ldr	r3, [pc, #180]	; (80012a8 <HAL_GPIO_Init+0x2d0>)
 80011f2:	681a      	ldr	r2, [r3, #0]
 80011f4:	492c      	ldr	r1, [pc, #176]	; (80012a8 <HAL_GPIO_Init+0x2d0>)
 80011f6:	69bb      	ldr	r3, [r7, #24]
 80011f8:	4313      	orrs	r3, r2
 80011fa:	600b      	str	r3, [r1, #0]
 80011fc:	e006      	b.n	800120c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80011fe:	4b2a      	ldr	r3, [pc, #168]	; (80012a8 <HAL_GPIO_Init+0x2d0>)
 8001200:	681a      	ldr	r2, [r3, #0]
 8001202:	69bb      	ldr	r3, [r7, #24]
 8001204:	43db      	mvns	r3, r3
 8001206:	4928      	ldr	r1, [pc, #160]	; (80012a8 <HAL_GPIO_Init+0x2d0>)
 8001208:	4013      	ands	r3, r2
 800120a:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800120c:	683b      	ldr	r3, [r7, #0]
 800120e:	685b      	ldr	r3, [r3, #4]
 8001210:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001214:	2b00      	cmp	r3, #0
 8001216:	d006      	beq.n	8001226 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001218:	4b23      	ldr	r3, [pc, #140]	; (80012a8 <HAL_GPIO_Init+0x2d0>)
 800121a:	685a      	ldr	r2, [r3, #4]
 800121c:	4922      	ldr	r1, [pc, #136]	; (80012a8 <HAL_GPIO_Init+0x2d0>)
 800121e:	69bb      	ldr	r3, [r7, #24]
 8001220:	4313      	orrs	r3, r2
 8001222:	604b      	str	r3, [r1, #4]
 8001224:	e006      	b.n	8001234 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001226:	4b20      	ldr	r3, [pc, #128]	; (80012a8 <HAL_GPIO_Init+0x2d0>)
 8001228:	685a      	ldr	r2, [r3, #4]
 800122a:	69bb      	ldr	r3, [r7, #24]
 800122c:	43db      	mvns	r3, r3
 800122e:	491e      	ldr	r1, [pc, #120]	; (80012a8 <HAL_GPIO_Init+0x2d0>)
 8001230:	4013      	ands	r3, r2
 8001232:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001234:	683b      	ldr	r3, [r7, #0]
 8001236:	685b      	ldr	r3, [r3, #4]
 8001238:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800123c:	2b00      	cmp	r3, #0
 800123e:	d006      	beq.n	800124e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001240:	4b19      	ldr	r3, [pc, #100]	; (80012a8 <HAL_GPIO_Init+0x2d0>)
 8001242:	689a      	ldr	r2, [r3, #8]
 8001244:	4918      	ldr	r1, [pc, #96]	; (80012a8 <HAL_GPIO_Init+0x2d0>)
 8001246:	69bb      	ldr	r3, [r7, #24]
 8001248:	4313      	orrs	r3, r2
 800124a:	608b      	str	r3, [r1, #8]
 800124c:	e006      	b.n	800125c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800124e:	4b16      	ldr	r3, [pc, #88]	; (80012a8 <HAL_GPIO_Init+0x2d0>)
 8001250:	689a      	ldr	r2, [r3, #8]
 8001252:	69bb      	ldr	r3, [r7, #24]
 8001254:	43db      	mvns	r3, r3
 8001256:	4914      	ldr	r1, [pc, #80]	; (80012a8 <HAL_GPIO_Init+0x2d0>)
 8001258:	4013      	ands	r3, r2
 800125a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800125c:	683b      	ldr	r3, [r7, #0]
 800125e:	685b      	ldr	r3, [r3, #4]
 8001260:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001264:	2b00      	cmp	r3, #0
 8001266:	d021      	beq.n	80012ac <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001268:	4b0f      	ldr	r3, [pc, #60]	; (80012a8 <HAL_GPIO_Init+0x2d0>)
 800126a:	68da      	ldr	r2, [r3, #12]
 800126c:	490e      	ldr	r1, [pc, #56]	; (80012a8 <HAL_GPIO_Init+0x2d0>)
 800126e:	69bb      	ldr	r3, [r7, #24]
 8001270:	4313      	orrs	r3, r2
 8001272:	60cb      	str	r3, [r1, #12]
 8001274:	e021      	b.n	80012ba <HAL_GPIO_Init+0x2e2>
 8001276:	bf00      	nop
 8001278:	10320000 	.word	0x10320000
 800127c:	10310000 	.word	0x10310000
 8001280:	10220000 	.word	0x10220000
 8001284:	10210000 	.word	0x10210000
 8001288:	10120000 	.word	0x10120000
 800128c:	10110000 	.word	0x10110000
 8001290:	40021000 	.word	0x40021000
 8001294:	40010000 	.word	0x40010000
 8001298:	40010800 	.word	0x40010800
 800129c:	40010c00 	.word	0x40010c00
 80012a0:	40011000 	.word	0x40011000
 80012a4:	40011400 	.word	0x40011400
 80012a8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80012ac:	4b0b      	ldr	r3, [pc, #44]	; (80012dc <HAL_GPIO_Init+0x304>)
 80012ae:	68da      	ldr	r2, [r3, #12]
 80012b0:	69bb      	ldr	r3, [r7, #24]
 80012b2:	43db      	mvns	r3, r3
 80012b4:	4909      	ldr	r1, [pc, #36]	; (80012dc <HAL_GPIO_Init+0x304>)
 80012b6:	4013      	ands	r3, r2
 80012b8:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80012ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012bc:	3301      	adds	r3, #1
 80012be:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80012c0:	683b      	ldr	r3, [r7, #0]
 80012c2:	681a      	ldr	r2, [r3, #0]
 80012c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012c6:	fa22 f303 	lsr.w	r3, r2, r3
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	f47f ae8e 	bne.w	8000fec <HAL_GPIO_Init+0x14>
  }
}
 80012d0:	bf00      	nop
 80012d2:	bf00      	nop
 80012d4:	372c      	adds	r7, #44	; 0x2c
 80012d6:	46bd      	mov	sp, r7
 80012d8:	bc80      	pop	{r7}
 80012da:	4770      	bx	lr
 80012dc:	40010400 	.word	0x40010400

080012e0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80012e0:	b480      	push	{r7}
 80012e2:	b083      	sub	sp, #12
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
 80012e8:	460b      	mov	r3, r1
 80012ea:	807b      	strh	r3, [r7, #2]
 80012ec:	4613      	mov	r3, r2
 80012ee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80012f0:	787b      	ldrb	r3, [r7, #1]
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d003      	beq.n	80012fe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80012f6:	887a      	ldrh	r2, [r7, #2]
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80012fc:	e003      	b.n	8001306 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80012fe:	887b      	ldrh	r3, [r7, #2]
 8001300:	041a      	lsls	r2, r3, #16
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	611a      	str	r2, [r3, #16]
}
 8001306:	bf00      	nop
 8001308:	370c      	adds	r7, #12
 800130a:	46bd      	mov	sp, r7
 800130c:	bc80      	pop	{r7}
 800130e:	4770      	bx	lr

08001310 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	b086      	sub	sp, #24
 8001314:	af00      	add	r7, sp, #0
 8001316:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	2b00      	cmp	r3, #0
 800131c:	d101      	bne.n	8001322 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800131e:	2301      	movs	r3, #1
 8001320:	e272      	b.n	8001808 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	f003 0301 	and.w	r3, r3, #1
 800132a:	2b00      	cmp	r3, #0
 800132c:	f000 8087 	beq.w	800143e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001330:	4b92      	ldr	r3, [pc, #584]	; (800157c <HAL_RCC_OscConfig+0x26c>)
 8001332:	685b      	ldr	r3, [r3, #4]
 8001334:	f003 030c 	and.w	r3, r3, #12
 8001338:	2b04      	cmp	r3, #4
 800133a:	d00c      	beq.n	8001356 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800133c:	4b8f      	ldr	r3, [pc, #572]	; (800157c <HAL_RCC_OscConfig+0x26c>)
 800133e:	685b      	ldr	r3, [r3, #4]
 8001340:	f003 030c 	and.w	r3, r3, #12
 8001344:	2b08      	cmp	r3, #8
 8001346:	d112      	bne.n	800136e <HAL_RCC_OscConfig+0x5e>
 8001348:	4b8c      	ldr	r3, [pc, #560]	; (800157c <HAL_RCC_OscConfig+0x26c>)
 800134a:	685b      	ldr	r3, [r3, #4]
 800134c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001350:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001354:	d10b      	bne.n	800136e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001356:	4b89      	ldr	r3, [pc, #548]	; (800157c <HAL_RCC_OscConfig+0x26c>)
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800135e:	2b00      	cmp	r3, #0
 8001360:	d06c      	beq.n	800143c <HAL_RCC_OscConfig+0x12c>
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	685b      	ldr	r3, [r3, #4]
 8001366:	2b00      	cmp	r3, #0
 8001368:	d168      	bne.n	800143c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800136a:	2301      	movs	r3, #1
 800136c:	e24c      	b.n	8001808 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	685b      	ldr	r3, [r3, #4]
 8001372:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001376:	d106      	bne.n	8001386 <HAL_RCC_OscConfig+0x76>
 8001378:	4b80      	ldr	r3, [pc, #512]	; (800157c <HAL_RCC_OscConfig+0x26c>)
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	4a7f      	ldr	r2, [pc, #508]	; (800157c <HAL_RCC_OscConfig+0x26c>)
 800137e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001382:	6013      	str	r3, [r2, #0]
 8001384:	e02e      	b.n	80013e4 <HAL_RCC_OscConfig+0xd4>
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	685b      	ldr	r3, [r3, #4]
 800138a:	2b00      	cmp	r3, #0
 800138c:	d10c      	bne.n	80013a8 <HAL_RCC_OscConfig+0x98>
 800138e:	4b7b      	ldr	r3, [pc, #492]	; (800157c <HAL_RCC_OscConfig+0x26c>)
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	4a7a      	ldr	r2, [pc, #488]	; (800157c <HAL_RCC_OscConfig+0x26c>)
 8001394:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001398:	6013      	str	r3, [r2, #0]
 800139a:	4b78      	ldr	r3, [pc, #480]	; (800157c <HAL_RCC_OscConfig+0x26c>)
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	4a77      	ldr	r2, [pc, #476]	; (800157c <HAL_RCC_OscConfig+0x26c>)
 80013a0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80013a4:	6013      	str	r3, [r2, #0]
 80013a6:	e01d      	b.n	80013e4 <HAL_RCC_OscConfig+0xd4>
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	685b      	ldr	r3, [r3, #4]
 80013ac:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80013b0:	d10c      	bne.n	80013cc <HAL_RCC_OscConfig+0xbc>
 80013b2:	4b72      	ldr	r3, [pc, #456]	; (800157c <HAL_RCC_OscConfig+0x26c>)
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	4a71      	ldr	r2, [pc, #452]	; (800157c <HAL_RCC_OscConfig+0x26c>)
 80013b8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80013bc:	6013      	str	r3, [r2, #0]
 80013be:	4b6f      	ldr	r3, [pc, #444]	; (800157c <HAL_RCC_OscConfig+0x26c>)
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	4a6e      	ldr	r2, [pc, #440]	; (800157c <HAL_RCC_OscConfig+0x26c>)
 80013c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80013c8:	6013      	str	r3, [r2, #0]
 80013ca:	e00b      	b.n	80013e4 <HAL_RCC_OscConfig+0xd4>
 80013cc:	4b6b      	ldr	r3, [pc, #428]	; (800157c <HAL_RCC_OscConfig+0x26c>)
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	4a6a      	ldr	r2, [pc, #424]	; (800157c <HAL_RCC_OscConfig+0x26c>)
 80013d2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80013d6:	6013      	str	r3, [r2, #0]
 80013d8:	4b68      	ldr	r3, [pc, #416]	; (800157c <HAL_RCC_OscConfig+0x26c>)
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	4a67      	ldr	r2, [pc, #412]	; (800157c <HAL_RCC_OscConfig+0x26c>)
 80013de:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80013e2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	685b      	ldr	r3, [r3, #4]
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d013      	beq.n	8001414 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013ec:	f7ff fc08 	bl	8000c00 <HAL_GetTick>
 80013f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80013f2:	e008      	b.n	8001406 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80013f4:	f7ff fc04 	bl	8000c00 <HAL_GetTick>
 80013f8:	4602      	mov	r2, r0
 80013fa:	693b      	ldr	r3, [r7, #16]
 80013fc:	1ad3      	subs	r3, r2, r3
 80013fe:	2b64      	cmp	r3, #100	; 0x64
 8001400:	d901      	bls.n	8001406 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001402:	2303      	movs	r3, #3
 8001404:	e200      	b.n	8001808 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001406:	4b5d      	ldr	r3, [pc, #372]	; (800157c <HAL_RCC_OscConfig+0x26c>)
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800140e:	2b00      	cmp	r3, #0
 8001410:	d0f0      	beq.n	80013f4 <HAL_RCC_OscConfig+0xe4>
 8001412:	e014      	b.n	800143e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001414:	f7ff fbf4 	bl	8000c00 <HAL_GetTick>
 8001418:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800141a:	e008      	b.n	800142e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800141c:	f7ff fbf0 	bl	8000c00 <HAL_GetTick>
 8001420:	4602      	mov	r2, r0
 8001422:	693b      	ldr	r3, [r7, #16]
 8001424:	1ad3      	subs	r3, r2, r3
 8001426:	2b64      	cmp	r3, #100	; 0x64
 8001428:	d901      	bls.n	800142e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800142a:	2303      	movs	r3, #3
 800142c:	e1ec      	b.n	8001808 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800142e:	4b53      	ldr	r3, [pc, #332]	; (800157c <HAL_RCC_OscConfig+0x26c>)
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001436:	2b00      	cmp	r3, #0
 8001438:	d1f0      	bne.n	800141c <HAL_RCC_OscConfig+0x10c>
 800143a:	e000      	b.n	800143e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800143c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	f003 0302 	and.w	r3, r3, #2
 8001446:	2b00      	cmp	r3, #0
 8001448:	d063      	beq.n	8001512 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800144a:	4b4c      	ldr	r3, [pc, #304]	; (800157c <HAL_RCC_OscConfig+0x26c>)
 800144c:	685b      	ldr	r3, [r3, #4]
 800144e:	f003 030c 	and.w	r3, r3, #12
 8001452:	2b00      	cmp	r3, #0
 8001454:	d00b      	beq.n	800146e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001456:	4b49      	ldr	r3, [pc, #292]	; (800157c <HAL_RCC_OscConfig+0x26c>)
 8001458:	685b      	ldr	r3, [r3, #4]
 800145a:	f003 030c 	and.w	r3, r3, #12
 800145e:	2b08      	cmp	r3, #8
 8001460:	d11c      	bne.n	800149c <HAL_RCC_OscConfig+0x18c>
 8001462:	4b46      	ldr	r3, [pc, #280]	; (800157c <HAL_RCC_OscConfig+0x26c>)
 8001464:	685b      	ldr	r3, [r3, #4]
 8001466:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800146a:	2b00      	cmp	r3, #0
 800146c:	d116      	bne.n	800149c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800146e:	4b43      	ldr	r3, [pc, #268]	; (800157c <HAL_RCC_OscConfig+0x26c>)
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	f003 0302 	and.w	r3, r3, #2
 8001476:	2b00      	cmp	r3, #0
 8001478:	d005      	beq.n	8001486 <HAL_RCC_OscConfig+0x176>
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	691b      	ldr	r3, [r3, #16]
 800147e:	2b01      	cmp	r3, #1
 8001480:	d001      	beq.n	8001486 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001482:	2301      	movs	r3, #1
 8001484:	e1c0      	b.n	8001808 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001486:	4b3d      	ldr	r3, [pc, #244]	; (800157c <HAL_RCC_OscConfig+0x26c>)
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	695b      	ldr	r3, [r3, #20]
 8001492:	00db      	lsls	r3, r3, #3
 8001494:	4939      	ldr	r1, [pc, #228]	; (800157c <HAL_RCC_OscConfig+0x26c>)
 8001496:	4313      	orrs	r3, r2
 8001498:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800149a:	e03a      	b.n	8001512 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	691b      	ldr	r3, [r3, #16]
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d020      	beq.n	80014e6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80014a4:	4b36      	ldr	r3, [pc, #216]	; (8001580 <HAL_RCC_OscConfig+0x270>)
 80014a6:	2201      	movs	r2, #1
 80014a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014aa:	f7ff fba9 	bl	8000c00 <HAL_GetTick>
 80014ae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014b0:	e008      	b.n	80014c4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80014b2:	f7ff fba5 	bl	8000c00 <HAL_GetTick>
 80014b6:	4602      	mov	r2, r0
 80014b8:	693b      	ldr	r3, [r7, #16]
 80014ba:	1ad3      	subs	r3, r2, r3
 80014bc:	2b02      	cmp	r3, #2
 80014be:	d901      	bls.n	80014c4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80014c0:	2303      	movs	r3, #3
 80014c2:	e1a1      	b.n	8001808 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014c4:	4b2d      	ldr	r3, [pc, #180]	; (800157c <HAL_RCC_OscConfig+0x26c>)
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	f003 0302 	and.w	r3, r3, #2
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d0f0      	beq.n	80014b2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014d0:	4b2a      	ldr	r3, [pc, #168]	; (800157c <HAL_RCC_OscConfig+0x26c>)
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	695b      	ldr	r3, [r3, #20]
 80014dc:	00db      	lsls	r3, r3, #3
 80014de:	4927      	ldr	r1, [pc, #156]	; (800157c <HAL_RCC_OscConfig+0x26c>)
 80014e0:	4313      	orrs	r3, r2
 80014e2:	600b      	str	r3, [r1, #0]
 80014e4:	e015      	b.n	8001512 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80014e6:	4b26      	ldr	r3, [pc, #152]	; (8001580 <HAL_RCC_OscConfig+0x270>)
 80014e8:	2200      	movs	r2, #0
 80014ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014ec:	f7ff fb88 	bl	8000c00 <HAL_GetTick>
 80014f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80014f2:	e008      	b.n	8001506 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80014f4:	f7ff fb84 	bl	8000c00 <HAL_GetTick>
 80014f8:	4602      	mov	r2, r0
 80014fa:	693b      	ldr	r3, [r7, #16]
 80014fc:	1ad3      	subs	r3, r2, r3
 80014fe:	2b02      	cmp	r3, #2
 8001500:	d901      	bls.n	8001506 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001502:	2303      	movs	r3, #3
 8001504:	e180      	b.n	8001808 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001506:	4b1d      	ldr	r3, [pc, #116]	; (800157c <HAL_RCC_OscConfig+0x26c>)
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	f003 0302 	and.w	r3, r3, #2
 800150e:	2b00      	cmp	r3, #0
 8001510:	d1f0      	bne.n	80014f4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	f003 0308 	and.w	r3, r3, #8
 800151a:	2b00      	cmp	r3, #0
 800151c:	d03a      	beq.n	8001594 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	699b      	ldr	r3, [r3, #24]
 8001522:	2b00      	cmp	r3, #0
 8001524:	d019      	beq.n	800155a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001526:	4b17      	ldr	r3, [pc, #92]	; (8001584 <HAL_RCC_OscConfig+0x274>)
 8001528:	2201      	movs	r2, #1
 800152a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800152c:	f7ff fb68 	bl	8000c00 <HAL_GetTick>
 8001530:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001532:	e008      	b.n	8001546 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001534:	f7ff fb64 	bl	8000c00 <HAL_GetTick>
 8001538:	4602      	mov	r2, r0
 800153a:	693b      	ldr	r3, [r7, #16]
 800153c:	1ad3      	subs	r3, r2, r3
 800153e:	2b02      	cmp	r3, #2
 8001540:	d901      	bls.n	8001546 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001542:	2303      	movs	r3, #3
 8001544:	e160      	b.n	8001808 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001546:	4b0d      	ldr	r3, [pc, #52]	; (800157c <HAL_RCC_OscConfig+0x26c>)
 8001548:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800154a:	f003 0302 	and.w	r3, r3, #2
 800154e:	2b00      	cmp	r3, #0
 8001550:	d0f0      	beq.n	8001534 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001552:	2001      	movs	r0, #1
 8001554:	f000 fb10 	bl	8001b78 <RCC_Delay>
 8001558:	e01c      	b.n	8001594 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800155a:	4b0a      	ldr	r3, [pc, #40]	; (8001584 <HAL_RCC_OscConfig+0x274>)
 800155c:	2200      	movs	r2, #0
 800155e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001560:	f7ff fb4e 	bl	8000c00 <HAL_GetTick>
 8001564:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001566:	e00f      	b.n	8001588 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001568:	f7ff fb4a 	bl	8000c00 <HAL_GetTick>
 800156c:	4602      	mov	r2, r0
 800156e:	693b      	ldr	r3, [r7, #16]
 8001570:	1ad3      	subs	r3, r2, r3
 8001572:	2b02      	cmp	r3, #2
 8001574:	d908      	bls.n	8001588 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001576:	2303      	movs	r3, #3
 8001578:	e146      	b.n	8001808 <HAL_RCC_OscConfig+0x4f8>
 800157a:	bf00      	nop
 800157c:	40021000 	.word	0x40021000
 8001580:	42420000 	.word	0x42420000
 8001584:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001588:	4b92      	ldr	r3, [pc, #584]	; (80017d4 <HAL_RCC_OscConfig+0x4c4>)
 800158a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800158c:	f003 0302 	and.w	r3, r3, #2
 8001590:	2b00      	cmp	r3, #0
 8001592:	d1e9      	bne.n	8001568 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	f003 0304 	and.w	r3, r3, #4
 800159c:	2b00      	cmp	r3, #0
 800159e:	f000 80a6 	beq.w	80016ee <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80015a2:	2300      	movs	r3, #0
 80015a4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80015a6:	4b8b      	ldr	r3, [pc, #556]	; (80017d4 <HAL_RCC_OscConfig+0x4c4>)
 80015a8:	69db      	ldr	r3, [r3, #28]
 80015aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d10d      	bne.n	80015ce <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80015b2:	4b88      	ldr	r3, [pc, #544]	; (80017d4 <HAL_RCC_OscConfig+0x4c4>)
 80015b4:	69db      	ldr	r3, [r3, #28]
 80015b6:	4a87      	ldr	r2, [pc, #540]	; (80017d4 <HAL_RCC_OscConfig+0x4c4>)
 80015b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015bc:	61d3      	str	r3, [r2, #28]
 80015be:	4b85      	ldr	r3, [pc, #532]	; (80017d4 <HAL_RCC_OscConfig+0x4c4>)
 80015c0:	69db      	ldr	r3, [r3, #28]
 80015c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015c6:	60bb      	str	r3, [r7, #8]
 80015c8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80015ca:	2301      	movs	r3, #1
 80015cc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015ce:	4b82      	ldr	r3, [pc, #520]	; (80017d8 <HAL_RCC_OscConfig+0x4c8>)
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d118      	bne.n	800160c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80015da:	4b7f      	ldr	r3, [pc, #508]	; (80017d8 <HAL_RCC_OscConfig+0x4c8>)
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	4a7e      	ldr	r2, [pc, #504]	; (80017d8 <HAL_RCC_OscConfig+0x4c8>)
 80015e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80015e4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80015e6:	f7ff fb0b 	bl	8000c00 <HAL_GetTick>
 80015ea:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015ec:	e008      	b.n	8001600 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80015ee:	f7ff fb07 	bl	8000c00 <HAL_GetTick>
 80015f2:	4602      	mov	r2, r0
 80015f4:	693b      	ldr	r3, [r7, #16]
 80015f6:	1ad3      	subs	r3, r2, r3
 80015f8:	2b64      	cmp	r3, #100	; 0x64
 80015fa:	d901      	bls.n	8001600 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80015fc:	2303      	movs	r3, #3
 80015fe:	e103      	b.n	8001808 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001600:	4b75      	ldr	r3, [pc, #468]	; (80017d8 <HAL_RCC_OscConfig+0x4c8>)
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001608:	2b00      	cmp	r3, #0
 800160a:	d0f0      	beq.n	80015ee <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	68db      	ldr	r3, [r3, #12]
 8001610:	2b01      	cmp	r3, #1
 8001612:	d106      	bne.n	8001622 <HAL_RCC_OscConfig+0x312>
 8001614:	4b6f      	ldr	r3, [pc, #444]	; (80017d4 <HAL_RCC_OscConfig+0x4c4>)
 8001616:	6a1b      	ldr	r3, [r3, #32]
 8001618:	4a6e      	ldr	r2, [pc, #440]	; (80017d4 <HAL_RCC_OscConfig+0x4c4>)
 800161a:	f043 0301 	orr.w	r3, r3, #1
 800161e:	6213      	str	r3, [r2, #32]
 8001620:	e02d      	b.n	800167e <HAL_RCC_OscConfig+0x36e>
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	68db      	ldr	r3, [r3, #12]
 8001626:	2b00      	cmp	r3, #0
 8001628:	d10c      	bne.n	8001644 <HAL_RCC_OscConfig+0x334>
 800162a:	4b6a      	ldr	r3, [pc, #424]	; (80017d4 <HAL_RCC_OscConfig+0x4c4>)
 800162c:	6a1b      	ldr	r3, [r3, #32]
 800162e:	4a69      	ldr	r2, [pc, #420]	; (80017d4 <HAL_RCC_OscConfig+0x4c4>)
 8001630:	f023 0301 	bic.w	r3, r3, #1
 8001634:	6213      	str	r3, [r2, #32]
 8001636:	4b67      	ldr	r3, [pc, #412]	; (80017d4 <HAL_RCC_OscConfig+0x4c4>)
 8001638:	6a1b      	ldr	r3, [r3, #32]
 800163a:	4a66      	ldr	r2, [pc, #408]	; (80017d4 <HAL_RCC_OscConfig+0x4c4>)
 800163c:	f023 0304 	bic.w	r3, r3, #4
 8001640:	6213      	str	r3, [r2, #32]
 8001642:	e01c      	b.n	800167e <HAL_RCC_OscConfig+0x36e>
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	68db      	ldr	r3, [r3, #12]
 8001648:	2b05      	cmp	r3, #5
 800164a:	d10c      	bne.n	8001666 <HAL_RCC_OscConfig+0x356>
 800164c:	4b61      	ldr	r3, [pc, #388]	; (80017d4 <HAL_RCC_OscConfig+0x4c4>)
 800164e:	6a1b      	ldr	r3, [r3, #32]
 8001650:	4a60      	ldr	r2, [pc, #384]	; (80017d4 <HAL_RCC_OscConfig+0x4c4>)
 8001652:	f043 0304 	orr.w	r3, r3, #4
 8001656:	6213      	str	r3, [r2, #32]
 8001658:	4b5e      	ldr	r3, [pc, #376]	; (80017d4 <HAL_RCC_OscConfig+0x4c4>)
 800165a:	6a1b      	ldr	r3, [r3, #32]
 800165c:	4a5d      	ldr	r2, [pc, #372]	; (80017d4 <HAL_RCC_OscConfig+0x4c4>)
 800165e:	f043 0301 	orr.w	r3, r3, #1
 8001662:	6213      	str	r3, [r2, #32]
 8001664:	e00b      	b.n	800167e <HAL_RCC_OscConfig+0x36e>
 8001666:	4b5b      	ldr	r3, [pc, #364]	; (80017d4 <HAL_RCC_OscConfig+0x4c4>)
 8001668:	6a1b      	ldr	r3, [r3, #32]
 800166a:	4a5a      	ldr	r2, [pc, #360]	; (80017d4 <HAL_RCC_OscConfig+0x4c4>)
 800166c:	f023 0301 	bic.w	r3, r3, #1
 8001670:	6213      	str	r3, [r2, #32]
 8001672:	4b58      	ldr	r3, [pc, #352]	; (80017d4 <HAL_RCC_OscConfig+0x4c4>)
 8001674:	6a1b      	ldr	r3, [r3, #32]
 8001676:	4a57      	ldr	r2, [pc, #348]	; (80017d4 <HAL_RCC_OscConfig+0x4c4>)
 8001678:	f023 0304 	bic.w	r3, r3, #4
 800167c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	68db      	ldr	r3, [r3, #12]
 8001682:	2b00      	cmp	r3, #0
 8001684:	d015      	beq.n	80016b2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001686:	f7ff fabb 	bl	8000c00 <HAL_GetTick>
 800168a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800168c:	e00a      	b.n	80016a4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800168e:	f7ff fab7 	bl	8000c00 <HAL_GetTick>
 8001692:	4602      	mov	r2, r0
 8001694:	693b      	ldr	r3, [r7, #16]
 8001696:	1ad3      	subs	r3, r2, r3
 8001698:	f241 3288 	movw	r2, #5000	; 0x1388
 800169c:	4293      	cmp	r3, r2
 800169e:	d901      	bls.n	80016a4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80016a0:	2303      	movs	r3, #3
 80016a2:	e0b1      	b.n	8001808 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80016a4:	4b4b      	ldr	r3, [pc, #300]	; (80017d4 <HAL_RCC_OscConfig+0x4c4>)
 80016a6:	6a1b      	ldr	r3, [r3, #32]
 80016a8:	f003 0302 	and.w	r3, r3, #2
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d0ee      	beq.n	800168e <HAL_RCC_OscConfig+0x37e>
 80016b0:	e014      	b.n	80016dc <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016b2:	f7ff faa5 	bl	8000c00 <HAL_GetTick>
 80016b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80016b8:	e00a      	b.n	80016d0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80016ba:	f7ff faa1 	bl	8000c00 <HAL_GetTick>
 80016be:	4602      	mov	r2, r0
 80016c0:	693b      	ldr	r3, [r7, #16]
 80016c2:	1ad3      	subs	r3, r2, r3
 80016c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80016c8:	4293      	cmp	r3, r2
 80016ca:	d901      	bls.n	80016d0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80016cc:	2303      	movs	r3, #3
 80016ce:	e09b      	b.n	8001808 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80016d0:	4b40      	ldr	r3, [pc, #256]	; (80017d4 <HAL_RCC_OscConfig+0x4c4>)
 80016d2:	6a1b      	ldr	r3, [r3, #32]
 80016d4:	f003 0302 	and.w	r3, r3, #2
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d1ee      	bne.n	80016ba <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80016dc:	7dfb      	ldrb	r3, [r7, #23]
 80016de:	2b01      	cmp	r3, #1
 80016e0:	d105      	bne.n	80016ee <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80016e2:	4b3c      	ldr	r3, [pc, #240]	; (80017d4 <HAL_RCC_OscConfig+0x4c4>)
 80016e4:	69db      	ldr	r3, [r3, #28]
 80016e6:	4a3b      	ldr	r2, [pc, #236]	; (80017d4 <HAL_RCC_OscConfig+0x4c4>)
 80016e8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80016ec:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	69db      	ldr	r3, [r3, #28]
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	f000 8087 	beq.w	8001806 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80016f8:	4b36      	ldr	r3, [pc, #216]	; (80017d4 <HAL_RCC_OscConfig+0x4c4>)
 80016fa:	685b      	ldr	r3, [r3, #4]
 80016fc:	f003 030c 	and.w	r3, r3, #12
 8001700:	2b08      	cmp	r3, #8
 8001702:	d061      	beq.n	80017c8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	69db      	ldr	r3, [r3, #28]
 8001708:	2b02      	cmp	r3, #2
 800170a:	d146      	bne.n	800179a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800170c:	4b33      	ldr	r3, [pc, #204]	; (80017dc <HAL_RCC_OscConfig+0x4cc>)
 800170e:	2200      	movs	r2, #0
 8001710:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001712:	f7ff fa75 	bl	8000c00 <HAL_GetTick>
 8001716:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001718:	e008      	b.n	800172c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800171a:	f7ff fa71 	bl	8000c00 <HAL_GetTick>
 800171e:	4602      	mov	r2, r0
 8001720:	693b      	ldr	r3, [r7, #16]
 8001722:	1ad3      	subs	r3, r2, r3
 8001724:	2b02      	cmp	r3, #2
 8001726:	d901      	bls.n	800172c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001728:	2303      	movs	r3, #3
 800172a:	e06d      	b.n	8001808 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800172c:	4b29      	ldr	r3, [pc, #164]	; (80017d4 <HAL_RCC_OscConfig+0x4c4>)
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001734:	2b00      	cmp	r3, #0
 8001736:	d1f0      	bne.n	800171a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	6a1b      	ldr	r3, [r3, #32]
 800173c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001740:	d108      	bne.n	8001754 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001742:	4b24      	ldr	r3, [pc, #144]	; (80017d4 <HAL_RCC_OscConfig+0x4c4>)
 8001744:	685b      	ldr	r3, [r3, #4]
 8001746:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	689b      	ldr	r3, [r3, #8]
 800174e:	4921      	ldr	r1, [pc, #132]	; (80017d4 <HAL_RCC_OscConfig+0x4c4>)
 8001750:	4313      	orrs	r3, r2
 8001752:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001754:	4b1f      	ldr	r3, [pc, #124]	; (80017d4 <HAL_RCC_OscConfig+0x4c4>)
 8001756:	685b      	ldr	r3, [r3, #4]
 8001758:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	6a19      	ldr	r1, [r3, #32]
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001764:	430b      	orrs	r3, r1
 8001766:	491b      	ldr	r1, [pc, #108]	; (80017d4 <HAL_RCC_OscConfig+0x4c4>)
 8001768:	4313      	orrs	r3, r2
 800176a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800176c:	4b1b      	ldr	r3, [pc, #108]	; (80017dc <HAL_RCC_OscConfig+0x4cc>)
 800176e:	2201      	movs	r2, #1
 8001770:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001772:	f7ff fa45 	bl	8000c00 <HAL_GetTick>
 8001776:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001778:	e008      	b.n	800178c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800177a:	f7ff fa41 	bl	8000c00 <HAL_GetTick>
 800177e:	4602      	mov	r2, r0
 8001780:	693b      	ldr	r3, [r7, #16]
 8001782:	1ad3      	subs	r3, r2, r3
 8001784:	2b02      	cmp	r3, #2
 8001786:	d901      	bls.n	800178c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001788:	2303      	movs	r3, #3
 800178a:	e03d      	b.n	8001808 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800178c:	4b11      	ldr	r3, [pc, #68]	; (80017d4 <HAL_RCC_OscConfig+0x4c4>)
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001794:	2b00      	cmp	r3, #0
 8001796:	d0f0      	beq.n	800177a <HAL_RCC_OscConfig+0x46a>
 8001798:	e035      	b.n	8001806 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800179a:	4b10      	ldr	r3, [pc, #64]	; (80017dc <HAL_RCC_OscConfig+0x4cc>)
 800179c:	2200      	movs	r2, #0
 800179e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017a0:	f7ff fa2e 	bl	8000c00 <HAL_GetTick>
 80017a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80017a6:	e008      	b.n	80017ba <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80017a8:	f7ff fa2a 	bl	8000c00 <HAL_GetTick>
 80017ac:	4602      	mov	r2, r0
 80017ae:	693b      	ldr	r3, [r7, #16]
 80017b0:	1ad3      	subs	r3, r2, r3
 80017b2:	2b02      	cmp	r3, #2
 80017b4:	d901      	bls.n	80017ba <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80017b6:	2303      	movs	r3, #3
 80017b8:	e026      	b.n	8001808 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80017ba:	4b06      	ldr	r3, [pc, #24]	; (80017d4 <HAL_RCC_OscConfig+0x4c4>)
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d1f0      	bne.n	80017a8 <HAL_RCC_OscConfig+0x498>
 80017c6:	e01e      	b.n	8001806 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	69db      	ldr	r3, [r3, #28]
 80017cc:	2b01      	cmp	r3, #1
 80017ce:	d107      	bne.n	80017e0 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80017d0:	2301      	movs	r3, #1
 80017d2:	e019      	b.n	8001808 <HAL_RCC_OscConfig+0x4f8>
 80017d4:	40021000 	.word	0x40021000
 80017d8:	40007000 	.word	0x40007000
 80017dc:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80017e0:	4b0b      	ldr	r3, [pc, #44]	; (8001810 <HAL_RCC_OscConfig+0x500>)
 80017e2:	685b      	ldr	r3, [r3, #4]
 80017e4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80017e6:	68fb      	ldr	r3, [r7, #12]
 80017e8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	6a1b      	ldr	r3, [r3, #32]
 80017f0:	429a      	cmp	r2, r3
 80017f2:	d106      	bne.n	8001802 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80017fe:	429a      	cmp	r2, r3
 8001800:	d001      	beq.n	8001806 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001802:	2301      	movs	r3, #1
 8001804:	e000      	b.n	8001808 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001806:	2300      	movs	r3, #0
}
 8001808:	4618      	mov	r0, r3
 800180a:	3718      	adds	r7, #24
 800180c:	46bd      	mov	sp, r7
 800180e:	bd80      	pop	{r7, pc}
 8001810:	40021000 	.word	0x40021000

08001814 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001814:	b580      	push	{r7, lr}
 8001816:	b084      	sub	sp, #16
 8001818:	af00      	add	r7, sp, #0
 800181a:	6078      	str	r0, [r7, #4]
 800181c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	2b00      	cmp	r3, #0
 8001822:	d101      	bne.n	8001828 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001824:	2301      	movs	r3, #1
 8001826:	e0d0      	b.n	80019ca <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001828:	4b6a      	ldr	r3, [pc, #424]	; (80019d4 <HAL_RCC_ClockConfig+0x1c0>)
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	f003 0307 	and.w	r3, r3, #7
 8001830:	683a      	ldr	r2, [r7, #0]
 8001832:	429a      	cmp	r2, r3
 8001834:	d910      	bls.n	8001858 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001836:	4b67      	ldr	r3, [pc, #412]	; (80019d4 <HAL_RCC_ClockConfig+0x1c0>)
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	f023 0207 	bic.w	r2, r3, #7
 800183e:	4965      	ldr	r1, [pc, #404]	; (80019d4 <HAL_RCC_ClockConfig+0x1c0>)
 8001840:	683b      	ldr	r3, [r7, #0]
 8001842:	4313      	orrs	r3, r2
 8001844:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001846:	4b63      	ldr	r3, [pc, #396]	; (80019d4 <HAL_RCC_ClockConfig+0x1c0>)
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	f003 0307 	and.w	r3, r3, #7
 800184e:	683a      	ldr	r2, [r7, #0]
 8001850:	429a      	cmp	r2, r3
 8001852:	d001      	beq.n	8001858 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001854:	2301      	movs	r3, #1
 8001856:	e0b8      	b.n	80019ca <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	f003 0302 	and.w	r3, r3, #2
 8001860:	2b00      	cmp	r3, #0
 8001862:	d020      	beq.n	80018a6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	f003 0304 	and.w	r3, r3, #4
 800186c:	2b00      	cmp	r3, #0
 800186e:	d005      	beq.n	800187c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001870:	4b59      	ldr	r3, [pc, #356]	; (80019d8 <HAL_RCC_ClockConfig+0x1c4>)
 8001872:	685b      	ldr	r3, [r3, #4]
 8001874:	4a58      	ldr	r2, [pc, #352]	; (80019d8 <HAL_RCC_ClockConfig+0x1c4>)
 8001876:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800187a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	f003 0308 	and.w	r3, r3, #8
 8001884:	2b00      	cmp	r3, #0
 8001886:	d005      	beq.n	8001894 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001888:	4b53      	ldr	r3, [pc, #332]	; (80019d8 <HAL_RCC_ClockConfig+0x1c4>)
 800188a:	685b      	ldr	r3, [r3, #4]
 800188c:	4a52      	ldr	r2, [pc, #328]	; (80019d8 <HAL_RCC_ClockConfig+0x1c4>)
 800188e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001892:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001894:	4b50      	ldr	r3, [pc, #320]	; (80019d8 <HAL_RCC_ClockConfig+0x1c4>)
 8001896:	685b      	ldr	r3, [r3, #4]
 8001898:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	689b      	ldr	r3, [r3, #8]
 80018a0:	494d      	ldr	r1, [pc, #308]	; (80019d8 <HAL_RCC_ClockConfig+0x1c4>)
 80018a2:	4313      	orrs	r3, r2
 80018a4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	f003 0301 	and.w	r3, r3, #1
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d040      	beq.n	8001934 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	685b      	ldr	r3, [r3, #4]
 80018b6:	2b01      	cmp	r3, #1
 80018b8:	d107      	bne.n	80018ca <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018ba:	4b47      	ldr	r3, [pc, #284]	; (80019d8 <HAL_RCC_ClockConfig+0x1c4>)
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d115      	bne.n	80018f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80018c6:	2301      	movs	r3, #1
 80018c8:	e07f      	b.n	80019ca <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	685b      	ldr	r3, [r3, #4]
 80018ce:	2b02      	cmp	r3, #2
 80018d0:	d107      	bne.n	80018e2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80018d2:	4b41      	ldr	r3, [pc, #260]	; (80019d8 <HAL_RCC_ClockConfig+0x1c4>)
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d109      	bne.n	80018f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80018de:	2301      	movs	r3, #1
 80018e0:	e073      	b.n	80019ca <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018e2:	4b3d      	ldr	r3, [pc, #244]	; (80019d8 <HAL_RCC_ClockConfig+0x1c4>)
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	f003 0302 	and.w	r3, r3, #2
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d101      	bne.n	80018f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80018ee:	2301      	movs	r3, #1
 80018f0:	e06b      	b.n	80019ca <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80018f2:	4b39      	ldr	r3, [pc, #228]	; (80019d8 <HAL_RCC_ClockConfig+0x1c4>)
 80018f4:	685b      	ldr	r3, [r3, #4]
 80018f6:	f023 0203 	bic.w	r2, r3, #3
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	685b      	ldr	r3, [r3, #4]
 80018fe:	4936      	ldr	r1, [pc, #216]	; (80019d8 <HAL_RCC_ClockConfig+0x1c4>)
 8001900:	4313      	orrs	r3, r2
 8001902:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001904:	f7ff f97c 	bl	8000c00 <HAL_GetTick>
 8001908:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800190a:	e00a      	b.n	8001922 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800190c:	f7ff f978 	bl	8000c00 <HAL_GetTick>
 8001910:	4602      	mov	r2, r0
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	1ad3      	subs	r3, r2, r3
 8001916:	f241 3288 	movw	r2, #5000	; 0x1388
 800191a:	4293      	cmp	r3, r2
 800191c:	d901      	bls.n	8001922 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800191e:	2303      	movs	r3, #3
 8001920:	e053      	b.n	80019ca <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001922:	4b2d      	ldr	r3, [pc, #180]	; (80019d8 <HAL_RCC_ClockConfig+0x1c4>)
 8001924:	685b      	ldr	r3, [r3, #4]
 8001926:	f003 020c 	and.w	r2, r3, #12
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	685b      	ldr	r3, [r3, #4]
 800192e:	009b      	lsls	r3, r3, #2
 8001930:	429a      	cmp	r2, r3
 8001932:	d1eb      	bne.n	800190c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001934:	4b27      	ldr	r3, [pc, #156]	; (80019d4 <HAL_RCC_ClockConfig+0x1c0>)
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	f003 0307 	and.w	r3, r3, #7
 800193c:	683a      	ldr	r2, [r7, #0]
 800193e:	429a      	cmp	r2, r3
 8001940:	d210      	bcs.n	8001964 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001942:	4b24      	ldr	r3, [pc, #144]	; (80019d4 <HAL_RCC_ClockConfig+0x1c0>)
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	f023 0207 	bic.w	r2, r3, #7
 800194a:	4922      	ldr	r1, [pc, #136]	; (80019d4 <HAL_RCC_ClockConfig+0x1c0>)
 800194c:	683b      	ldr	r3, [r7, #0]
 800194e:	4313      	orrs	r3, r2
 8001950:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001952:	4b20      	ldr	r3, [pc, #128]	; (80019d4 <HAL_RCC_ClockConfig+0x1c0>)
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	f003 0307 	and.w	r3, r3, #7
 800195a:	683a      	ldr	r2, [r7, #0]
 800195c:	429a      	cmp	r2, r3
 800195e:	d001      	beq.n	8001964 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001960:	2301      	movs	r3, #1
 8001962:	e032      	b.n	80019ca <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	f003 0304 	and.w	r3, r3, #4
 800196c:	2b00      	cmp	r3, #0
 800196e:	d008      	beq.n	8001982 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001970:	4b19      	ldr	r3, [pc, #100]	; (80019d8 <HAL_RCC_ClockConfig+0x1c4>)
 8001972:	685b      	ldr	r3, [r3, #4]
 8001974:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	68db      	ldr	r3, [r3, #12]
 800197c:	4916      	ldr	r1, [pc, #88]	; (80019d8 <HAL_RCC_ClockConfig+0x1c4>)
 800197e:	4313      	orrs	r3, r2
 8001980:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	f003 0308 	and.w	r3, r3, #8
 800198a:	2b00      	cmp	r3, #0
 800198c:	d009      	beq.n	80019a2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800198e:	4b12      	ldr	r3, [pc, #72]	; (80019d8 <HAL_RCC_ClockConfig+0x1c4>)
 8001990:	685b      	ldr	r3, [r3, #4]
 8001992:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	691b      	ldr	r3, [r3, #16]
 800199a:	00db      	lsls	r3, r3, #3
 800199c:	490e      	ldr	r1, [pc, #56]	; (80019d8 <HAL_RCC_ClockConfig+0x1c4>)
 800199e:	4313      	orrs	r3, r2
 80019a0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80019a2:	f000 f859 	bl	8001a58 <HAL_RCC_GetSysClockFreq>
 80019a6:	4602      	mov	r2, r0
 80019a8:	4b0b      	ldr	r3, [pc, #44]	; (80019d8 <HAL_RCC_ClockConfig+0x1c4>)
 80019aa:	685b      	ldr	r3, [r3, #4]
 80019ac:	091b      	lsrs	r3, r3, #4
 80019ae:	f003 030f 	and.w	r3, r3, #15
 80019b2:	490a      	ldr	r1, [pc, #40]	; (80019dc <HAL_RCC_ClockConfig+0x1c8>)
 80019b4:	5ccb      	ldrb	r3, [r1, r3]
 80019b6:	fa22 f303 	lsr.w	r3, r2, r3
 80019ba:	4a09      	ldr	r2, [pc, #36]	; (80019e0 <HAL_RCC_ClockConfig+0x1cc>)
 80019bc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80019be:	4b09      	ldr	r3, [pc, #36]	; (80019e4 <HAL_RCC_ClockConfig+0x1d0>)
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	4618      	mov	r0, r3
 80019c4:	f7ff f8da 	bl	8000b7c <HAL_InitTick>

  return HAL_OK;
 80019c8:	2300      	movs	r3, #0
}
 80019ca:	4618      	mov	r0, r3
 80019cc:	3710      	adds	r7, #16
 80019ce:	46bd      	mov	sp, r7
 80019d0:	bd80      	pop	{r7, pc}
 80019d2:	bf00      	nop
 80019d4:	40022000 	.word	0x40022000
 80019d8:	40021000 	.word	0x40021000
 80019dc:	08004ca4 	.word	0x08004ca4
 80019e0:	20000000 	.word	0x20000000
 80019e4:	20000004 	.word	0x20000004

080019e8 <HAL_RCC_MCOConfig>:
  *          This parameter can be one of the following values:
  *            @arg @ref RCC_MCODIV_1 no division applied to MCO clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	b08a      	sub	sp, #40	; 0x28
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	60f8      	str	r0, [r7, #12]
 80019f0:	60b9      	str	r1, [r7, #8]
 80019f2:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef gpio = {0U};
 80019f4:	f107 0318 	add.w	r3, r7, #24
 80019f8:	2200      	movs	r2, #0
 80019fa:	601a      	str	r2, [r3, #0]
 80019fc:	605a      	str	r2, [r3, #4]
 80019fe:	609a      	str	r2, [r3, #8]
 8001a00:	60da      	str	r2, [r3, #12]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(RCC_MCOx);
  UNUSED(RCC_MCODiv);

  /* Configure the MCO1 pin in alternate function mode */
  gpio.Mode      = GPIO_MODE_AF_PP;
 8001a02:	2302      	movs	r3, #2
 8001a04:	61fb      	str	r3, [r7, #28]
  gpio.Speed     = GPIO_SPEED_FREQ_HIGH;
 8001a06:	2303      	movs	r3, #3
 8001a08:	627b      	str	r3, [r7, #36]	; 0x24
  gpio.Pull      = GPIO_NOPULL;
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	623b      	str	r3, [r7, #32]
  gpio.Pin       = MCO1_PIN;
 8001a0e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001a12:	61bb      	str	r3, [r7, #24]

  /* MCO1 Clock Enable */
  MCO1_CLK_ENABLE();
 8001a14:	4b0e      	ldr	r3, [pc, #56]	; (8001a50 <HAL_RCC_MCOConfig+0x68>)
 8001a16:	699b      	ldr	r3, [r3, #24]
 8001a18:	4a0d      	ldr	r2, [pc, #52]	; (8001a50 <HAL_RCC_MCOConfig+0x68>)
 8001a1a:	f043 0304 	orr.w	r3, r3, #4
 8001a1e:	6193      	str	r3, [r2, #24]
 8001a20:	4b0b      	ldr	r3, [pc, #44]	; (8001a50 <HAL_RCC_MCOConfig+0x68>)
 8001a22:	699b      	ldr	r3, [r3, #24]
 8001a24:	f003 0304 	and.w	r3, r3, #4
 8001a28:	617b      	str	r3, [r7, #20]
 8001a2a:	697b      	ldr	r3, [r7, #20]

  HAL_GPIO_Init(MCO1_GPIO_PORT, &gpio);
 8001a2c:	f107 0318 	add.w	r3, r7, #24
 8001a30:	4619      	mov	r1, r3
 8001a32:	4808      	ldr	r0, [pc, #32]	; (8001a54 <HAL_RCC_MCOConfig+0x6c>)
 8001a34:	f7ff fad0 	bl	8000fd8 <HAL_GPIO_Init>

  /* Configure the MCO clock source */
  __HAL_RCC_MCO1_CONFIG(RCC_MCOSource, RCC_MCODiv);
 8001a38:	4b05      	ldr	r3, [pc, #20]	; (8001a50 <HAL_RCC_MCOConfig+0x68>)
 8001a3a:	685b      	ldr	r3, [r3, #4]
 8001a3c:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8001a40:	4903      	ldr	r1, [pc, #12]	; (8001a50 <HAL_RCC_MCOConfig+0x68>)
 8001a42:	68bb      	ldr	r3, [r7, #8]
 8001a44:	4313      	orrs	r3, r2
 8001a46:	604b      	str	r3, [r1, #4]
}
 8001a48:	bf00      	nop
 8001a4a:	3728      	adds	r7, #40	; 0x28
 8001a4c:	46bd      	mov	sp, r7
 8001a4e:	bd80      	pop	{r7, pc}
 8001a50:	40021000 	.word	0x40021000
 8001a54:	40010800 	.word	0x40010800

08001a58 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001a58:	b490      	push	{r4, r7}
 8001a5a:	b08a      	sub	sp, #40	; 0x28
 8001a5c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001a5e:	4b29      	ldr	r3, [pc, #164]	; (8001b04 <HAL_RCC_GetSysClockFreq+0xac>)
 8001a60:	1d3c      	adds	r4, r7, #4
 8001a62:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001a64:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001a68:	f240 2301 	movw	r3, #513	; 0x201
 8001a6c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001a6e:	2300      	movs	r3, #0
 8001a70:	61fb      	str	r3, [r7, #28]
 8001a72:	2300      	movs	r3, #0
 8001a74:	61bb      	str	r3, [r7, #24]
 8001a76:	2300      	movs	r3, #0
 8001a78:	627b      	str	r3, [r7, #36]	; 0x24
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001a7e:	2300      	movs	r3, #0
 8001a80:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001a82:	4b21      	ldr	r3, [pc, #132]	; (8001b08 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001a84:	685b      	ldr	r3, [r3, #4]
 8001a86:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001a88:	69fb      	ldr	r3, [r7, #28]
 8001a8a:	f003 030c 	and.w	r3, r3, #12
 8001a8e:	2b04      	cmp	r3, #4
 8001a90:	d002      	beq.n	8001a98 <HAL_RCC_GetSysClockFreq+0x40>
 8001a92:	2b08      	cmp	r3, #8
 8001a94:	d003      	beq.n	8001a9e <HAL_RCC_GetSysClockFreq+0x46>
 8001a96:	e02b      	b.n	8001af0 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001a98:	4b1c      	ldr	r3, [pc, #112]	; (8001b0c <HAL_RCC_GetSysClockFreq+0xb4>)
 8001a9a:	623b      	str	r3, [r7, #32]
      break;
 8001a9c:	e02b      	b.n	8001af6 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001a9e:	69fb      	ldr	r3, [r7, #28]
 8001aa0:	0c9b      	lsrs	r3, r3, #18
 8001aa2:	f003 030f 	and.w	r3, r3, #15
 8001aa6:	3328      	adds	r3, #40	; 0x28
 8001aa8:	443b      	add	r3, r7
 8001aaa:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001aae:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001ab0:	69fb      	ldr	r3, [r7, #28]
 8001ab2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d012      	beq.n	8001ae0 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001aba:	4b13      	ldr	r3, [pc, #76]	; (8001b08 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001abc:	685b      	ldr	r3, [r3, #4]
 8001abe:	0c5b      	lsrs	r3, r3, #17
 8001ac0:	f003 0301 	and.w	r3, r3, #1
 8001ac4:	3328      	adds	r3, #40	; 0x28
 8001ac6:	443b      	add	r3, r7
 8001ac8:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001acc:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001ace:	697b      	ldr	r3, [r7, #20]
 8001ad0:	4a0e      	ldr	r2, [pc, #56]	; (8001b0c <HAL_RCC_GetSysClockFreq+0xb4>)
 8001ad2:	fb03 f202 	mul.w	r2, r3, r2
 8001ad6:	69bb      	ldr	r3, [r7, #24]
 8001ad8:	fbb2 f3f3 	udiv	r3, r2, r3
 8001adc:	627b      	str	r3, [r7, #36]	; 0x24
 8001ade:	e004      	b.n	8001aea <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001ae0:	697b      	ldr	r3, [r7, #20]
 8001ae2:	4a0b      	ldr	r2, [pc, #44]	; (8001b10 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001ae4:	fb02 f303 	mul.w	r3, r2, r3
 8001ae8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001aea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aec:	623b      	str	r3, [r7, #32]
      break;
 8001aee:	e002      	b.n	8001af6 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001af0:	4b06      	ldr	r3, [pc, #24]	; (8001b0c <HAL_RCC_GetSysClockFreq+0xb4>)
 8001af2:	623b      	str	r3, [r7, #32]
      break;
 8001af4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001af6:	6a3b      	ldr	r3, [r7, #32]
}
 8001af8:	4618      	mov	r0, r3
 8001afa:	3728      	adds	r7, #40	; 0x28
 8001afc:	46bd      	mov	sp, r7
 8001afe:	bc90      	pop	{r4, r7}
 8001b00:	4770      	bx	lr
 8001b02:	bf00      	nop
 8001b04:	08004c94 	.word	0x08004c94
 8001b08:	40021000 	.word	0x40021000
 8001b0c:	007a1200 	.word	0x007a1200
 8001b10:	003d0900 	.word	0x003d0900

08001b14 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001b14:	b480      	push	{r7}
 8001b16:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001b18:	4b02      	ldr	r3, [pc, #8]	; (8001b24 <HAL_RCC_GetHCLKFreq+0x10>)
 8001b1a:	681b      	ldr	r3, [r3, #0]
}
 8001b1c:	4618      	mov	r0, r3
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	bc80      	pop	{r7}
 8001b22:	4770      	bx	lr
 8001b24:	20000000 	.word	0x20000000

08001b28 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001b2c:	f7ff fff2 	bl	8001b14 <HAL_RCC_GetHCLKFreq>
 8001b30:	4602      	mov	r2, r0
 8001b32:	4b05      	ldr	r3, [pc, #20]	; (8001b48 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001b34:	685b      	ldr	r3, [r3, #4]
 8001b36:	0a1b      	lsrs	r3, r3, #8
 8001b38:	f003 0307 	and.w	r3, r3, #7
 8001b3c:	4903      	ldr	r1, [pc, #12]	; (8001b4c <HAL_RCC_GetPCLK1Freq+0x24>)
 8001b3e:	5ccb      	ldrb	r3, [r1, r3]
 8001b40:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001b44:	4618      	mov	r0, r3
 8001b46:	bd80      	pop	{r7, pc}
 8001b48:	40021000 	.word	0x40021000
 8001b4c:	08004cb4 	.word	0x08004cb4

08001b50 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001b54:	f7ff ffde 	bl	8001b14 <HAL_RCC_GetHCLKFreq>
 8001b58:	4602      	mov	r2, r0
 8001b5a:	4b05      	ldr	r3, [pc, #20]	; (8001b70 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001b5c:	685b      	ldr	r3, [r3, #4]
 8001b5e:	0adb      	lsrs	r3, r3, #11
 8001b60:	f003 0307 	and.w	r3, r3, #7
 8001b64:	4903      	ldr	r1, [pc, #12]	; (8001b74 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001b66:	5ccb      	ldrb	r3, [r1, r3]
 8001b68:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001b6c:	4618      	mov	r0, r3
 8001b6e:	bd80      	pop	{r7, pc}
 8001b70:	40021000 	.word	0x40021000
 8001b74:	08004cb4 	.word	0x08004cb4

08001b78 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001b78:	b480      	push	{r7}
 8001b7a:	b085      	sub	sp, #20
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001b80:	4b0a      	ldr	r3, [pc, #40]	; (8001bac <RCC_Delay+0x34>)
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	4a0a      	ldr	r2, [pc, #40]	; (8001bb0 <RCC_Delay+0x38>)
 8001b86:	fba2 2303 	umull	r2, r3, r2, r3
 8001b8a:	0a5b      	lsrs	r3, r3, #9
 8001b8c:	687a      	ldr	r2, [r7, #4]
 8001b8e:	fb02 f303 	mul.w	r3, r2, r3
 8001b92:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001b94:	bf00      	nop
  }
  while (Delay --);
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	1e5a      	subs	r2, r3, #1
 8001b9a:	60fa      	str	r2, [r7, #12]
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d1f9      	bne.n	8001b94 <RCC_Delay+0x1c>
}
 8001ba0:	bf00      	nop
 8001ba2:	bf00      	nop
 8001ba4:	3714      	adds	r7, #20
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	bc80      	pop	{r7}
 8001baa:	4770      	bx	lr
 8001bac:	20000000 	.word	0x20000000
 8001bb0:	10624dd3 	.word	0x10624dd3

08001bb4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	b082      	sub	sp, #8
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d101      	bne.n	8001bc6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001bc2:	2301      	movs	r3, #1
 8001bc4:	e041      	b.n	8001c4a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001bcc:	b2db      	uxtb	r3, r3
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d106      	bne.n	8001be0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001bda:	6878      	ldr	r0, [r7, #4]
 8001bdc:	f7fe fe7a 	bl	80008d4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	2202      	movs	r2, #2
 8001be4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681a      	ldr	r2, [r3, #0]
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	3304      	adds	r3, #4
 8001bf0:	4619      	mov	r1, r3
 8001bf2:	4610      	mov	r0, r2
 8001bf4:	f000 fe98 	bl	8002928 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	2201      	movs	r2, #1
 8001bfc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	2201      	movs	r2, #1
 8001c04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	2201      	movs	r2, #1
 8001c0c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	2201      	movs	r2, #1
 8001c14:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	2201      	movs	r2, #1
 8001c1c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	2201      	movs	r2, #1
 8001c24:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	2201      	movs	r2, #1
 8001c2c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	2201      	movs	r2, #1
 8001c34:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	2201      	movs	r2, #1
 8001c3c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	2201      	movs	r2, #1
 8001c44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001c48:	2300      	movs	r3, #0
}
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	3708      	adds	r7, #8
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	bd80      	pop	{r7, pc}
	...

08001c54 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001c54:	b480      	push	{r7}
 8001c56:	b085      	sub	sp, #20
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001c62:	b2db      	uxtb	r3, r3
 8001c64:	2b01      	cmp	r3, #1
 8001c66:	d001      	beq.n	8001c6c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001c68:	2301      	movs	r3, #1
 8001c6a:	e03a      	b.n	8001ce2 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	2202      	movs	r2, #2
 8001c70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	68da      	ldr	r2, [r3, #12]
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	f042 0201 	orr.w	r2, r2, #1
 8001c82:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	4a18      	ldr	r2, [pc, #96]	; (8001cec <HAL_TIM_Base_Start_IT+0x98>)
 8001c8a:	4293      	cmp	r3, r2
 8001c8c:	d00e      	beq.n	8001cac <HAL_TIM_Base_Start_IT+0x58>
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001c96:	d009      	beq.n	8001cac <HAL_TIM_Base_Start_IT+0x58>
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	4a14      	ldr	r2, [pc, #80]	; (8001cf0 <HAL_TIM_Base_Start_IT+0x9c>)
 8001c9e:	4293      	cmp	r3, r2
 8001ca0:	d004      	beq.n	8001cac <HAL_TIM_Base_Start_IT+0x58>
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	4a13      	ldr	r2, [pc, #76]	; (8001cf4 <HAL_TIM_Base_Start_IT+0xa0>)
 8001ca8:	4293      	cmp	r3, r2
 8001caa:	d111      	bne.n	8001cd0 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	689b      	ldr	r3, [r3, #8]
 8001cb2:	f003 0307 	and.w	r3, r3, #7
 8001cb6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	2b06      	cmp	r3, #6
 8001cbc:	d010      	beq.n	8001ce0 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	681a      	ldr	r2, [r3, #0]
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	f042 0201 	orr.w	r2, r2, #1
 8001ccc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001cce:	e007      	b.n	8001ce0 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	681a      	ldr	r2, [r3, #0]
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	f042 0201 	orr.w	r2, r2, #1
 8001cde:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001ce0:	2300      	movs	r3, #0
}
 8001ce2:	4618      	mov	r0, r3
 8001ce4:	3714      	adds	r7, #20
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	bc80      	pop	{r7}
 8001cea:	4770      	bx	lr
 8001cec:	40012c00 	.word	0x40012c00
 8001cf0:	40000400 	.word	0x40000400
 8001cf4:	40000800 	.word	0x40000800

08001cf8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	b082      	sub	sp, #8
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d101      	bne.n	8001d0a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8001d06:	2301      	movs	r3, #1
 8001d08:	e041      	b.n	8001d8e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001d10:	b2db      	uxtb	r3, r3
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d106      	bne.n	8001d24 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	2200      	movs	r2, #0
 8001d1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8001d1e:	6878      	ldr	r0, [r7, #4]
 8001d20:	f000 f839 	bl	8001d96 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	2202      	movs	r2, #2
 8001d28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681a      	ldr	r2, [r3, #0]
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	3304      	adds	r3, #4
 8001d34:	4619      	mov	r1, r3
 8001d36:	4610      	mov	r0, r2
 8001d38:	f000 fdf6 	bl	8002928 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	2201      	movs	r2, #1
 8001d40:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	2201      	movs	r2, #1
 8001d48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	2201      	movs	r2, #1
 8001d50:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	2201      	movs	r2, #1
 8001d58:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	2201      	movs	r2, #1
 8001d60:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	2201      	movs	r2, #1
 8001d68:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	2201      	movs	r2, #1
 8001d70:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	2201      	movs	r2, #1
 8001d78:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	2201      	movs	r2, #1
 8001d80:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	2201      	movs	r2, #1
 8001d88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001d8c:	2300      	movs	r3, #0
}
 8001d8e:	4618      	mov	r0, r3
 8001d90:	3708      	adds	r7, #8
 8001d92:	46bd      	mov	sp, r7
 8001d94:	bd80      	pop	{r7, pc}

08001d96 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8001d96:	b480      	push	{r7}
 8001d98:	b083      	sub	sp, #12
 8001d9a:	af00      	add	r7, sp, #0
 8001d9c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8001d9e:	bf00      	nop
 8001da0:	370c      	adds	r7, #12
 8001da2:	46bd      	mov	sp, r7
 8001da4:	bc80      	pop	{r7}
 8001da6:	4770      	bx	lr

08001da8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001da8:	b580      	push	{r7, lr}
 8001daa:	b084      	sub	sp, #16
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	6078      	str	r0, [r7, #4]
 8001db0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8001db2:	683b      	ldr	r3, [r7, #0]
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d109      	bne.n	8001dcc <HAL_TIM_PWM_Start+0x24>
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001dbe:	b2db      	uxtb	r3, r3
 8001dc0:	2b01      	cmp	r3, #1
 8001dc2:	bf14      	ite	ne
 8001dc4:	2301      	movne	r3, #1
 8001dc6:	2300      	moveq	r3, #0
 8001dc8:	b2db      	uxtb	r3, r3
 8001dca:	e022      	b.n	8001e12 <HAL_TIM_PWM_Start+0x6a>
 8001dcc:	683b      	ldr	r3, [r7, #0]
 8001dce:	2b04      	cmp	r3, #4
 8001dd0:	d109      	bne.n	8001de6 <HAL_TIM_PWM_Start+0x3e>
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8001dd8:	b2db      	uxtb	r3, r3
 8001dda:	2b01      	cmp	r3, #1
 8001ddc:	bf14      	ite	ne
 8001dde:	2301      	movne	r3, #1
 8001de0:	2300      	moveq	r3, #0
 8001de2:	b2db      	uxtb	r3, r3
 8001de4:	e015      	b.n	8001e12 <HAL_TIM_PWM_Start+0x6a>
 8001de6:	683b      	ldr	r3, [r7, #0]
 8001de8:	2b08      	cmp	r3, #8
 8001dea:	d109      	bne.n	8001e00 <HAL_TIM_PWM_Start+0x58>
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001df2:	b2db      	uxtb	r3, r3
 8001df4:	2b01      	cmp	r3, #1
 8001df6:	bf14      	ite	ne
 8001df8:	2301      	movne	r3, #1
 8001dfa:	2300      	moveq	r3, #0
 8001dfc:	b2db      	uxtb	r3, r3
 8001dfe:	e008      	b.n	8001e12 <HAL_TIM_PWM_Start+0x6a>
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001e06:	b2db      	uxtb	r3, r3
 8001e08:	2b01      	cmp	r3, #1
 8001e0a:	bf14      	ite	ne
 8001e0c:	2301      	movne	r3, #1
 8001e0e:	2300      	moveq	r3, #0
 8001e10:	b2db      	uxtb	r3, r3
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d001      	beq.n	8001e1a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8001e16:	2301      	movs	r3, #1
 8001e18:	e05e      	b.n	8001ed8 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8001e1a:	683b      	ldr	r3, [r7, #0]
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d104      	bne.n	8001e2a <HAL_TIM_PWM_Start+0x82>
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	2202      	movs	r2, #2
 8001e24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001e28:	e013      	b.n	8001e52 <HAL_TIM_PWM_Start+0xaa>
 8001e2a:	683b      	ldr	r3, [r7, #0]
 8001e2c:	2b04      	cmp	r3, #4
 8001e2e:	d104      	bne.n	8001e3a <HAL_TIM_PWM_Start+0x92>
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	2202      	movs	r2, #2
 8001e34:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001e38:	e00b      	b.n	8001e52 <HAL_TIM_PWM_Start+0xaa>
 8001e3a:	683b      	ldr	r3, [r7, #0]
 8001e3c:	2b08      	cmp	r3, #8
 8001e3e:	d104      	bne.n	8001e4a <HAL_TIM_PWM_Start+0xa2>
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	2202      	movs	r2, #2
 8001e44:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001e48:	e003      	b.n	8001e52 <HAL_TIM_PWM_Start+0xaa>
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	2202      	movs	r2, #2
 8001e4e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	2201      	movs	r2, #1
 8001e58:	6839      	ldr	r1, [r7, #0]
 8001e5a:	4618      	mov	r0, r3
 8001e5c:	f001 f97f 	bl	800315e <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	4a1e      	ldr	r2, [pc, #120]	; (8001ee0 <HAL_TIM_PWM_Start+0x138>)
 8001e66:	4293      	cmp	r3, r2
 8001e68:	d107      	bne.n	8001e7a <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001e78:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	4a18      	ldr	r2, [pc, #96]	; (8001ee0 <HAL_TIM_PWM_Start+0x138>)
 8001e80:	4293      	cmp	r3, r2
 8001e82:	d00e      	beq.n	8001ea2 <HAL_TIM_PWM_Start+0xfa>
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e8c:	d009      	beq.n	8001ea2 <HAL_TIM_PWM_Start+0xfa>
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	4a14      	ldr	r2, [pc, #80]	; (8001ee4 <HAL_TIM_PWM_Start+0x13c>)
 8001e94:	4293      	cmp	r3, r2
 8001e96:	d004      	beq.n	8001ea2 <HAL_TIM_PWM_Start+0xfa>
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	4a12      	ldr	r2, [pc, #72]	; (8001ee8 <HAL_TIM_PWM_Start+0x140>)
 8001e9e:	4293      	cmp	r3, r2
 8001ea0:	d111      	bne.n	8001ec6 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	689b      	ldr	r3, [r3, #8]
 8001ea8:	f003 0307 	and.w	r3, r3, #7
 8001eac:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	2b06      	cmp	r3, #6
 8001eb2:	d010      	beq.n	8001ed6 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	681a      	ldr	r2, [r3, #0]
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	f042 0201 	orr.w	r2, r2, #1
 8001ec2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001ec4:	e007      	b.n	8001ed6 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	681a      	ldr	r2, [r3, #0]
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	f042 0201 	orr.w	r2, r2, #1
 8001ed4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001ed6:	2300      	movs	r3, #0
}
 8001ed8:	4618      	mov	r0, r3
 8001eda:	3710      	adds	r7, #16
 8001edc:	46bd      	mov	sp, r7
 8001ede:	bd80      	pop	{r7, pc}
 8001ee0:	40012c00 	.word	0x40012c00
 8001ee4:	40000400 	.word	0x40000400
 8001ee8:	40000800 	.word	0x40000800

08001eec <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8001eec:	b580      	push	{r7, lr}
 8001eee:	b082      	sub	sp, #8
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d101      	bne.n	8001efe <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8001efa:	2301      	movs	r3, #1
 8001efc:	e041      	b.n	8001f82 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001f04:	b2db      	uxtb	r3, r3
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d106      	bne.n	8001f18 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8001f12:	6878      	ldr	r0, [r7, #4]
 8001f14:	f000 f839 	bl	8001f8a <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	2202      	movs	r2, #2
 8001f1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681a      	ldr	r2, [r3, #0]
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	3304      	adds	r3, #4
 8001f28:	4619      	mov	r1, r3
 8001f2a:	4610      	mov	r0, r2
 8001f2c:	f000 fcfc 	bl	8002928 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	2201      	movs	r2, #1
 8001f34:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	2201      	movs	r2, #1
 8001f3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	2201      	movs	r2, #1
 8001f44:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	2201      	movs	r2, #1
 8001f4c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	2201      	movs	r2, #1
 8001f54:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	2201      	movs	r2, #1
 8001f5c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	2201      	movs	r2, #1
 8001f64:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	2201      	movs	r2, #1
 8001f6c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	2201      	movs	r2, #1
 8001f74:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	2201      	movs	r2, #1
 8001f7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001f80:	2300      	movs	r3, #0
}
 8001f82:	4618      	mov	r0, r3
 8001f84:	3708      	adds	r7, #8
 8001f86:	46bd      	mov	sp, r7
 8001f88:	bd80      	pop	{r7, pc}

08001f8a <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8001f8a:	b480      	push	{r7}
 8001f8c:	b083      	sub	sp, #12
 8001f8e:	af00      	add	r7, sp, #0
 8001f90:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8001f92:	bf00      	nop
 8001f94:	370c      	adds	r7, #12
 8001f96:	46bd      	mov	sp, r7
 8001f98:	bc80      	pop	{r7}
 8001f9a:	4770      	bx	lr

08001f9c <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	b084      	sub	sp, #16
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	6078      	str	r0, [r7, #4]
 8001fa4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8001fa6:	683b      	ldr	r3, [r7, #0]
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d104      	bne.n	8001fb6 <HAL_TIM_IC_Start_IT+0x1a>
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001fb2:	b2db      	uxtb	r3, r3
 8001fb4:	e013      	b.n	8001fde <HAL_TIM_IC_Start_IT+0x42>
 8001fb6:	683b      	ldr	r3, [r7, #0]
 8001fb8:	2b04      	cmp	r3, #4
 8001fba:	d104      	bne.n	8001fc6 <HAL_TIM_IC_Start_IT+0x2a>
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8001fc2:	b2db      	uxtb	r3, r3
 8001fc4:	e00b      	b.n	8001fde <HAL_TIM_IC_Start_IT+0x42>
 8001fc6:	683b      	ldr	r3, [r7, #0]
 8001fc8:	2b08      	cmp	r3, #8
 8001fca:	d104      	bne.n	8001fd6 <HAL_TIM_IC_Start_IT+0x3a>
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001fd2:	b2db      	uxtb	r3, r3
 8001fd4:	e003      	b.n	8001fde <HAL_TIM_IC_Start_IT+0x42>
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001fdc:	b2db      	uxtb	r3, r3
 8001fde:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8001fe0:	683b      	ldr	r3, [r7, #0]
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d104      	bne.n	8001ff0 <HAL_TIM_IC_Start_IT+0x54>
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001fec:	b2db      	uxtb	r3, r3
 8001fee:	e013      	b.n	8002018 <HAL_TIM_IC_Start_IT+0x7c>
 8001ff0:	683b      	ldr	r3, [r7, #0]
 8001ff2:	2b04      	cmp	r3, #4
 8001ff4:	d104      	bne.n	8002000 <HAL_TIM_IC_Start_IT+0x64>
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8001ffc:	b2db      	uxtb	r3, r3
 8001ffe:	e00b      	b.n	8002018 <HAL_TIM_IC_Start_IT+0x7c>
 8002000:	683b      	ldr	r3, [r7, #0]
 8002002:	2b08      	cmp	r3, #8
 8002004:	d104      	bne.n	8002010 <HAL_TIM_IC_Start_IT+0x74>
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800200c:	b2db      	uxtb	r3, r3
 800200e:	e003      	b.n	8002018 <HAL_TIM_IC_Start_IT+0x7c>
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002016:	b2db      	uxtb	r3, r3
 8002018:	73bb      	strb	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 800201a:	7bfb      	ldrb	r3, [r7, #15]
 800201c:	2b01      	cmp	r3, #1
 800201e:	d102      	bne.n	8002026 <HAL_TIM_IC_Start_IT+0x8a>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8002020:	7bbb      	ldrb	r3, [r7, #14]
 8002022:	2b01      	cmp	r3, #1
 8002024:	d001      	beq.n	800202a <HAL_TIM_IC_Start_IT+0x8e>
  {
    return HAL_ERROR;
 8002026:	2301      	movs	r3, #1
 8002028:	e0b3      	b.n	8002192 <HAL_TIM_IC_Start_IT+0x1f6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800202a:	683b      	ldr	r3, [r7, #0]
 800202c:	2b00      	cmp	r3, #0
 800202e:	d104      	bne.n	800203a <HAL_TIM_IC_Start_IT+0x9e>
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	2202      	movs	r2, #2
 8002034:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002038:	e013      	b.n	8002062 <HAL_TIM_IC_Start_IT+0xc6>
 800203a:	683b      	ldr	r3, [r7, #0]
 800203c:	2b04      	cmp	r3, #4
 800203e:	d104      	bne.n	800204a <HAL_TIM_IC_Start_IT+0xae>
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	2202      	movs	r2, #2
 8002044:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002048:	e00b      	b.n	8002062 <HAL_TIM_IC_Start_IT+0xc6>
 800204a:	683b      	ldr	r3, [r7, #0]
 800204c:	2b08      	cmp	r3, #8
 800204e:	d104      	bne.n	800205a <HAL_TIM_IC_Start_IT+0xbe>
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	2202      	movs	r2, #2
 8002054:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002058:	e003      	b.n	8002062 <HAL_TIM_IC_Start_IT+0xc6>
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	2202      	movs	r2, #2
 800205e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002062:	683b      	ldr	r3, [r7, #0]
 8002064:	2b00      	cmp	r3, #0
 8002066:	d104      	bne.n	8002072 <HAL_TIM_IC_Start_IT+0xd6>
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	2202      	movs	r2, #2
 800206c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002070:	e013      	b.n	800209a <HAL_TIM_IC_Start_IT+0xfe>
 8002072:	683b      	ldr	r3, [r7, #0]
 8002074:	2b04      	cmp	r3, #4
 8002076:	d104      	bne.n	8002082 <HAL_TIM_IC_Start_IT+0xe6>
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	2202      	movs	r2, #2
 800207c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002080:	e00b      	b.n	800209a <HAL_TIM_IC_Start_IT+0xfe>
 8002082:	683b      	ldr	r3, [r7, #0]
 8002084:	2b08      	cmp	r3, #8
 8002086:	d104      	bne.n	8002092 <HAL_TIM_IC_Start_IT+0xf6>
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	2202      	movs	r2, #2
 800208c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002090:	e003      	b.n	800209a <HAL_TIM_IC_Start_IT+0xfe>
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	2202      	movs	r2, #2
 8002096:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  switch (Channel)
 800209a:	683b      	ldr	r3, [r7, #0]
 800209c:	2b0c      	cmp	r3, #12
 800209e:	d841      	bhi.n	8002124 <HAL_TIM_IC_Start_IT+0x188>
 80020a0:	a201      	add	r2, pc, #4	; (adr r2, 80020a8 <HAL_TIM_IC_Start_IT+0x10c>)
 80020a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020a6:	bf00      	nop
 80020a8:	080020dd 	.word	0x080020dd
 80020ac:	08002125 	.word	0x08002125
 80020b0:	08002125 	.word	0x08002125
 80020b4:	08002125 	.word	0x08002125
 80020b8:	080020ef 	.word	0x080020ef
 80020bc:	08002125 	.word	0x08002125
 80020c0:	08002125 	.word	0x08002125
 80020c4:	08002125 	.word	0x08002125
 80020c8:	08002101 	.word	0x08002101
 80020cc:	08002125 	.word	0x08002125
 80020d0:	08002125 	.word	0x08002125
 80020d4:	08002125 	.word	0x08002125
 80020d8:	08002113 	.word	0x08002113
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	68da      	ldr	r2, [r3, #12]
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	f042 0202 	orr.w	r2, r2, #2
 80020ea:	60da      	str	r2, [r3, #12]
      break;
 80020ec:	e01b      	b.n	8002126 <HAL_TIM_IC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	68da      	ldr	r2, [r3, #12]
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	f042 0204 	orr.w	r2, r2, #4
 80020fc:	60da      	str	r2, [r3, #12]
      break;
 80020fe:	e012      	b.n	8002126 <HAL_TIM_IC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	68da      	ldr	r2, [r3, #12]
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	f042 0208 	orr.w	r2, r2, #8
 800210e:	60da      	str	r2, [r3, #12]
      break;
 8002110:	e009      	b.n	8002126 <HAL_TIM_IC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	68da      	ldr	r2, [r3, #12]
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	f042 0210 	orr.w	r2, r2, #16
 8002120:	60da      	str	r2, [r3, #12]
      break;
 8002122:	e000      	b.n	8002126 <HAL_TIM_IC_Start_IT+0x18a>
    }

    default:
      break;
 8002124:	bf00      	nop
  }
  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	2201      	movs	r2, #1
 800212c:	6839      	ldr	r1, [r7, #0]
 800212e:	4618      	mov	r0, r3
 8002130:	f001 f815 	bl	800315e <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	4a18      	ldr	r2, [pc, #96]	; (800219c <HAL_TIM_IC_Start_IT+0x200>)
 800213a:	4293      	cmp	r3, r2
 800213c:	d00e      	beq.n	800215c <HAL_TIM_IC_Start_IT+0x1c0>
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002146:	d009      	beq.n	800215c <HAL_TIM_IC_Start_IT+0x1c0>
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	4a14      	ldr	r2, [pc, #80]	; (80021a0 <HAL_TIM_IC_Start_IT+0x204>)
 800214e:	4293      	cmp	r3, r2
 8002150:	d004      	beq.n	800215c <HAL_TIM_IC_Start_IT+0x1c0>
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	4a13      	ldr	r2, [pc, #76]	; (80021a4 <HAL_TIM_IC_Start_IT+0x208>)
 8002158:	4293      	cmp	r3, r2
 800215a:	d111      	bne.n	8002180 <HAL_TIM_IC_Start_IT+0x1e4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	689b      	ldr	r3, [r3, #8]
 8002162:	f003 0307 	and.w	r3, r3, #7
 8002166:	60bb      	str	r3, [r7, #8]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002168:	68bb      	ldr	r3, [r7, #8]
 800216a:	2b06      	cmp	r3, #6
 800216c:	d010      	beq.n	8002190 <HAL_TIM_IC_Start_IT+0x1f4>
    {
      __HAL_TIM_ENABLE(htim);
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	681a      	ldr	r2, [r3, #0]
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	f042 0201 	orr.w	r2, r2, #1
 800217c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800217e:	e007      	b.n	8002190 <HAL_TIM_IC_Start_IT+0x1f4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	681a      	ldr	r2, [r3, #0]
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	f042 0201 	orr.w	r2, r2, #1
 800218e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002190:	2300      	movs	r3, #0
}
 8002192:	4618      	mov	r0, r3
 8002194:	3710      	adds	r7, #16
 8002196:	46bd      	mov	sp, r7
 8002198:	bd80      	pop	{r7, pc}
 800219a:	bf00      	nop
 800219c:	40012c00 	.word	0x40012c00
 80021a0:	40000400 	.word	0x40000400
 80021a4:	40000800 	.word	0x40000800

080021a8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80021a8:	b580      	push	{r7, lr}
 80021aa:	b082      	sub	sp, #8
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	691b      	ldr	r3, [r3, #16]
 80021b6:	f003 0302 	and.w	r3, r3, #2
 80021ba:	2b02      	cmp	r3, #2
 80021bc:	d122      	bne.n	8002204 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	68db      	ldr	r3, [r3, #12]
 80021c4:	f003 0302 	and.w	r3, r3, #2
 80021c8:	2b02      	cmp	r3, #2
 80021ca:	d11b      	bne.n	8002204 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	f06f 0202 	mvn.w	r2, #2
 80021d4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	2201      	movs	r2, #1
 80021da:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	699b      	ldr	r3, [r3, #24]
 80021e2:	f003 0303 	and.w	r3, r3, #3
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d003      	beq.n	80021f2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80021ea:	6878      	ldr	r0, [r7, #4]
 80021ec:	f7fe f8c8 	bl	8000380 <HAL_TIM_IC_CaptureCallback>
 80021f0:	e005      	b.n	80021fe <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80021f2:	6878      	ldr	r0, [r7, #4]
 80021f4:	f000 fb7c 	bl	80028f0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80021f8:	6878      	ldr	r0, [r7, #4]
 80021fa:	f000 fb82 	bl	8002902 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	2200      	movs	r2, #0
 8002202:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	691b      	ldr	r3, [r3, #16]
 800220a:	f003 0304 	and.w	r3, r3, #4
 800220e:	2b04      	cmp	r3, #4
 8002210:	d122      	bne.n	8002258 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	68db      	ldr	r3, [r3, #12]
 8002218:	f003 0304 	and.w	r3, r3, #4
 800221c:	2b04      	cmp	r3, #4
 800221e:	d11b      	bne.n	8002258 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	f06f 0204 	mvn.w	r2, #4
 8002228:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	2202      	movs	r2, #2
 800222e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	699b      	ldr	r3, [r3, #24]
 8002236:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800223a:	2b00      	cmp	r3, #0
 800223c:	d003      	beq.n	8002246 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800223e:	6878      	ldr	r0, [r7, #4]
 8002240:	f7fe f89e 	bl	8000380 <HAL_TIM_IC_CaptureCallback>
 8002244:	e005      	b.n	8002252 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002246:	6878      	ldr	r0, [r7, #4]
 8002248:	f000 fb52 	bl	80028f0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800224c:	6878      	ldr	r0, [r7, #4]
 800224e:	f000 fb58 	bl	8002902 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	2200      	movs	r2, #0
 8002256:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	691b      	ldr	r3, [r3, #16]
 800225e:	f003 0308 	and.w	r3, r3, #8
 8002262:	2b08      	cmp	r3, #8
 8002264:	d122      	bne.n	80022ac <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	68db      	ldr	r3, [r3, #12]
 800226c:	f003 0308 	and.w	r3, r3, #8
 8002270:	2b08      	cmp	r3, #8
 8002272:	d11b      	bne.n	80022ac <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	f06f 0208 	mvn.w	r2, #8
 800227c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	2204      	movs	r2, #4
 8002282:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	69db      	ldr	r3, [r3, #28]
 800228a:	f003 0303 	and.w	r3, r3, #3
 800228e:	2b00      	cmp	r3, #0
 8002290:	d003      	beq.n	800229a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002292:	6878      	ldr	r0, [r7, #4]
 8002294:	f7fe f874 	bl	8000380 <HAL_TIM_IC_CaptureCallback>
 8002298:	e005      	b.n	80022a6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800229a:	6878      	ldr	r0, [r7, #4]
 800229c:	f000 fb28 	bl	80028f0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80022a0:	6878      	ldr	r0, [r7, #4]
 80022a2:	f000 fb2e 	bl	8002902 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	2200      	movs	r2, #0
 80022aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	691b      	ldr	r3, [r3, #16]
 80022b2:	f003 0310 	and.w	r3, r3, #16
 80022b6:	2b10      	cmp	r3, #16
 80022b8:	d122      	bne.n	8002300 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	68db      	ldr	r3, [r3, #12]
 80022c0:	f003 0310 	and.w	r3, r3, #16
 80022c4:	2b10      	cmp	r3, #16
 80022c6:	d11b      	bne.n	8002300 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	f06f 0210 	mvn.w	r2, #16
 80022d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	2208      	movs	r2, #8
 80022d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	69db      	ldr	r3, [r3, #28]
 80022de:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d003      	beq.n	80022ee <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80022e6:	6878      	ldr	r0, [r7, #4]
 80022e8:	f7fe f84a 	bl	8000380 <HAL_TIM_IC_CaptureCallback>
 80022ec:	e005      	b.n	80022fa <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80022ee:	6878      	ldr	r0, [r7, #4]
 80022f0:	f000 fafe 	bl	80028f0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80022f4:	6878      	ldr	r0, [r7, #4]
 80022f6:	f000 fb04 	bl	8002902 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	2200      	movs	r2, #0
 80022fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	691b      	ldr	r3, [r3, #16]
 8002306:	f003 0301 	and.w	r3, r3, #1
 800230a:	2b01      	cmp	r3, #1
 800230c:	d10e      	bne.n	800232c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	68db      	ldr	r3, [r3, #12]
 8002314:	f003 0301 	and.w	r3, r3, #1
 8002318:	2b01      	cmp	r3, #1
 800231a:	d107      	bne.n	800232c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	f06f 0201 	mvn.w	r2, #1
 8002324:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002326:	6878      	ldr	r0, [r7, #4]
 8002328:	f7fe f814 	bl	8000354 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	691b      	ldr	r3, [r3, #16]
 8002332:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002336:	2b80      	cmp	r3, #128	; 0x80
 8002338:	d10e      	bne.n	8002358 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	68db      	ldr	r3, [r3, #12]
 8002340:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002344:	2b80      	cmp	r3, #128	; 0x80
 8002346:	d107      	bne.n	8002358 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002350:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002352:	6878      	ldr	r0, [r7, #4]
 8002354:	f000 ffe0 	bl	8003318 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	691b      	ldr	r3, [r3, #16]
 800235e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002362:	2b40      	cmp	r3, #64	; 0x40
 8002364:	d10e      	bne.n	8002384 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	68db      	ldr	r3, [r3, #12]
 800236c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002370:	2b40      	cmp	r3, #64	; 0x40
 8002372:	d107      	bne.n	8002384 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800237c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800237e:	6878      	ldr	r0, [r7, #4]
 8002380:	f000 fac8 	bl	8002914 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	691b      	ldr	r3, [r3, #16]
 800238a:	f003 0320 	and.w	r3, r3, #32
 800238e:	2b20      	cmp	r3, #32
 8002390:	d10e      	bne.n	80023b0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	68db      	ldr	r3, [r3, #12]
 8002398:	f003 0320 	and.w	r3, r3, #32
 800239c:	2b20      	cmp	r3, #32
 800239e:	d107      	bne.n	80023b0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	f06f 0220 	mvn.w	r2, #32
 80023a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80023aa:	6878      	ldr	r0, [r7, #4]
 80023ac:	f000 ffab 	bl	8003306 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80023b0:	bf00      	nop
 80023b2:	3708      	adds	r7, #8
 80023b4:	46bd      	mov	sp, r7
 80023b6:	bd80      	pop	{r7, pc}

080023b8 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80023b8:	b580      	push	{r7, lr}
 80023ba:	b084      	sub	sp, #16
 80023bc:	af00      	add	r7, sp, #0
 80023be:	60f8      	str	r0, [r7, #12]
 80023c0:	60b9      	str	r1, [r7, #8]
 80023c2:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80023ca:	2b01      	cmp	r3, #1
 80023cc:	d101      	bne.n	80023d2 <HAL_TIM_IC_ConfigChannel+0x1a>
 80023ce:	2302      	movs	r3, #2
 80023d0:	e082      	b.n	80024d8 <HAL_TIM_IC_ConfigChannel+0x120>
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	2201      	movs	r2, #1
 80023d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d11b      	bne.n	8002418 <HAL_TIM_IC_ConfigChannel+0x60>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	6818      	ldr	r0, [r3, #0]
 80023e4:	68bb      	ldr	r3, [r7, #8]
 80023e6:	6819      	ldr	r1, [r3, #0]
 80023e8:	68bb      	ldr	r3, [r7, #8]
 80023ea:	685a      	ldr	r2, [r3, #4]
 80023ec:	68bb      	ldr	r3, [r7, #8]
 80023ee:	68db      	ldr	r3, [r3, #12]
 80023f0:	f000 fd12 	bl	8002e18 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	699a      	ldr	r2, [r3, #24]
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	f022 020c 	bic.w	r2, r2, #12
 8002402:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	6999      	ldr	r1, [r3, #24]
 800240a:	68bb      	ldr	r3, [r7, #8]
 800240c:	689a      	ldr	r2, [r3, #8]
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	430a      	orrs	r2, r1
 8002414:	619a      	str	r2, [r3, #24]
 8002416:	e05a      	b.n	80024ce <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_2)
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	2b04      	cmp	r3, #4
 800241c:	d11c      	bne.n	8002458 <HAL_TIM_IC_ConfigChannel+0xa0>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	6818      	ldr	r0, [r3, #0]
 8002422:	68bb      	ldr	r3, [r7, #8]
 8002424:	6819      	ldr	r1, [r3, #0]
 8002426:	68bb      	ldr	r3, [r7, #8]
 8002428:	685a      	ldr	r2, [r3, #4]
 800242a:	68bb      	ldr	r3, [r7, #8]
 800242c:	68db      	ldr	r3, [r3, #12]
 800242e:	f000 fd7b 	bl	8002f28 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	699a      	ldr	r2, [r3, #24]
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8002440:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	6999      	ldr	r1, [r3, #24]
 8002448:	68bb      	ldr	r3, [r7, #8]
 800244a:	689b      	ldr	r3, [r3, #8]
 800244c:	021a      	lsls	r2, r3, #8
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	430a      	orrs	r2, r1
 8002454:	619a      	str	r2, [r3, #24]
 8002456:	e03a      	b.n	80024ce <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_3)
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	2b08      	cmp	r3, #8
 800245c:	d11b      	bne.n	8002496 <HAL_TIM_IC_ConfigChannel+0xde>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	6818      	ldr	r0, [r3, #0]
 8002462:	68bb      	ldr	r3, [r7, #8]
 8002464:	6819      	ldr	r1, [r3, #0]
 8002466:	68bb      	ldr	r3, [r7, #8]
 8002468:	685a      	ldr	r2, [r3, #4]
 800246a:	68bb      	ldr	r3, [r7, #8]
 800246c:	68db      	ldr	r3, [r3, #12]
 800246e:	f000 fdc6 	bl	8002ffe <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	69da      	ldr	r2, [r3, #28]
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	f022 020c 	bic.w	r2, r2, #12
 8002480:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	69d9      	ldr	r1, [r3, #28]
 8002488:	68bb      	ldr	r3, [r7, #8]
 800248a:	689a      	ldr	r2, [r3, #8]
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	430a      	orrs	r2, r1
 8002492:	61da      	str	r2, [r3, #28]
 8002494:	e01b      	b.n	80024ce <HAL_TIM_IC_ConfigChannel+0x116>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	6818      	ldr	r0, [r3, #0]
 800249a:	68bb      	ldr	r3, [r7, #8]
 800249c:	6819      	ldr	r1, [r3, #0]
 800249e:	68bb      	ldr	r3, [r7, #8]
 80024a0:	685a      	ldr	r2, [r3, #4]
 80024a2:	68bb      	ldr	r3, [r7, #8]
 80024a4:	68db      	ldr	r3, [r3, #12]
 80024a6:	f000 fde5 	bl	8003074 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	69da      	ldr	r2, [r3, #28]
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80024b8:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	69d9      	ldr	r1, [r3, #28]
 80024c0:	68bb      	ldr	r3, [r7, #8]
 80024c2:	689b      	ldr	r3, [r3, #8]
 80024c4:	021a      	lsls	r2, r3, #8
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	430a      	orrs	r2, r1
 80024cc:	61da      	str	r2, [r3, #28]
  }

  __HAL_UNLOCK(htim);
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	2200      	movs	r2, #0
 80024d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80024d6:	2300      	movs	r3, #0
}
 80024d8:	4618      	mov	r0, r3
 80024da:	3710      	adds	r7, #16
 80024dc:	46bd      	mov	sp, r7
 80024de:	bd80      	pop	{r7, pc}

080024e0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80024e0:	b580      	push	{r7, lr}
 80024e2:	b084      	sub	sp, #16
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	60f8      	str	r0, [r7, #12]
 80024e8:	60b9      	str	r1, [r7, #8]
 80024ea:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80024f2:	2b01      	cmp	r3, #1
 80024f4:	d101      	bne.n	80024fa <HAL_TIM_PWM_ConfigChannel+0x1a>
 80024f6:	2302      	movs	r3, #2
 80024f8:	e0ac      	b.n	8002654 <HAL_TIM_PWM_ConfigChannel+0x174>
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	2201      	movs	r2, #1
 80024fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	2b0c      	cmp	r3, #12
 8002506:	f200 809f 	bhi.w	8002648 <HAL_TIM_PWM_ConfigChannel+0x168>
 800250a:	a201      	add	r2, pc, #4	; (adr r2, 8002510 <HAL_TIM_PWM_ConfigChannel+0x30>)
 800250c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002510:	08002545 	.word	0x08002545
 8002514:	08002649 	.word	0x08002649
 8002518:	08002649 	.word	0x08002649
 800251c:	08002649 	.word	0x08002649
 8002520:	08002585 	.word	0x08002585
 8002524:	08002649 	.word	0x08002649
 8002528:	08002649 	.word	0x08002649
 800252c:	08002649 	.word	0x08002649
 8002530:	080025c7 	.word	0x080025c7
 8002534:	08002649 	.word	0x08002649
 8002538:	08002649 	.word	0x08002649
 800253c:	08002649 	.word	0x08002649
 8002540:	08002607 	.word	0x08002607
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	68b9      	ldr	r1, [r7, #8]
 800254a:	4618      	mov	r0, r3
 800254c:	f000 fa4e 	bl	80029ec <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	699a      	ldr	r2, [r3, #24]
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	f042 0208 	orr.w	r2, r2, #8
 800255e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	699a      	ldr	r2, [r3, #24]
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	f022 0204 	bic.w	r2, r2, #4
 800256e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	6999      	ldr	r1, [r3, #24]
 8002576:	68bb      	ldr	r3, [r7, #8]
 8002578:	691a      	ldr	r2, [r3, #16]
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	430a      	orrs	r2, r1
 8002580:	619a      	str	r2, [r3, #24]
      break;
 8002582:	e062      	b.n	800264a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	68b9      	ldr	r1, [r7, #8]
 800258a:	4618      	mov	r0, r3
 800258c:	f000 fa94 	bl	8002ab8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	699a      	ldr	r2, [r3, #24]
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800259e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	699a      	ldr	r2, [r3, #24]
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80025ae:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	6999      	ldr	r1, [r3, #24]
 80025b6:	68bb      	ldr	r3, [r7, #8]
 80025b8:	691b      	ldr	r3, [r3, #16]
 80025ba:	021a      	lsls	r2, r3, #8
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	430a      	orrs	r2, r1
 80025c2:	619a      	str	r2, [r3, #24]
      break;
 80025c4:	e041      	b.n	800264a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	68b9      	ldr	r1, [r7, #8]
 80025cc:	4618      	mov	r0, r3
 80025ce:	f000 fadd 	bl	8002b8c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	69da      	ldr	r2, [r3, #28]
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	f042 0208 	orr.w	r2, r2, #8
 80025e0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	69da      	ldr	r2, [r3, #28]
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	f022 0204 	bic.w	r2, r2, #4
 80025f0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	69d9      	ldr	r1, [r3, #28]
 80025f8:	68bb      	ldr	r3, [r7, #8]
 80025fa:	691a      	ldr	r2, [r3, #16]
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	430a      	orrs	r2, r1
 8002602:	61da      	str	r2, [r3, #28]
      break;
 8002604:	e021      	b.n	800264a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	68b9      	ldr	r1, [r7, #8]
 800260c:	4618      	mov	r0, r3
 800260e:	f000 fb27 	bl	8002c60 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	69da      	ldr	r2, [r3, #28]
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002620:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	69da      	ldr	r2, [r3, #28]
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002630:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	69d9      	ldr	r1, [r3, #28]
 8002638:	68bb      	ldr	r3, [r7, #8]
 800263a:	691b      	ldr	r3, [r3, #16]
 800263c:	021a      	lsls	r2, r3, #8
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	430a      	orrs	r2, r1
 8002644:	61da      	str	r2, [r3, #28]
      break;
 8002646:	e000      	b.n	800264a <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8002648:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	2200      	movs	r2, #0
 800264e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002652:	2300      	movs	r3, #0
}
 8002654:	4618      	mov	r0, r3
 8002656:	3710      	adds	r7, #16
 8002658:	46bd      	mov	sp, r7
 800265a:	bd80      	pop	{r7, pc}

0800265c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800265c:	b580      	push	{r7, lr}
 800265e:	b084      	sub	sp, #16
 8002660:	af00      	add	r7, sp, #0
 8002662:	6078      	str	r0, [r7, #4]
 8002664:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800266c:	2b01      	cmp	r3, #1
 800266e:	d101      	bne.n	8002674 <HAL_TIM_ConfigClockSource+0x18>
 8002670:	2302      	movs	r3, #2
 8002672:	e0b3      	b.n	80027dc <HAL_TIM_ConfigClockSource+0x180>
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	2201      	movs	r2, #1
 8002678:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	2202      	movs	r2, #2
 8002680:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	689b      	ldr	r3, [r3, #8]
 800268a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002692:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800269a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	68fa      	ldr	r2, [r7, #12]
 80026a2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80026a4:	683b      	ldr	r3, [r7, #0]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80026ac:	d03e      	beq.n	800272c <HAL_TIM_ConfigClockSource+0xd0>
 80026ae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80026b2:	f200 8087 	bhi.w	80027c4 <HAL_TIM_ConfigClockSource+0x168>
 80026b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80026ba:	f000 8085 	beq.w	80027c8 <HAL_TIM_ConfigClockSource+0x16c>
 80026be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80026c2:	d87f      	bhi.n	80027c4 <HAL_TIM_ConfigClockSource+0x168>
 80026c4:	2b70      	cmp	r3, #112	; 0x70
 80026c6:	d01a      	beq.n	80026fe <HAL_TIM_ConfigClockSource+0xa2>
 80026c8:	2b70      	cmp	r3, #112	; 0x70
 80026ca:	d87b      	bhi.n	80027c4 <HAL_TIM_ConfigClockSource+0x168>
 80026cc:	2b60      	cmp	r3, #96	; 0x60
 80026ce:	d050      	beq.n	8002772 <HAL_TIM_ConfigClockSource+0x116>
 80026d0:	2b60      	cmp	r3, #96	; 0x60
 80026d2:	d877      	bhi.n	80027c4 <HAL_TIM_ConfigClockSource+0x168>
 80026d4:	2b50      	cmp	r3, #80	; 0x50
 80026d6:	d03c      	beq.n	8002752 <HAL_TIM_ConfigClockSource+0xf6>
 80026d8:	2b50      	cmp	r3, #80	; 0x50
 80026da:	d873      	bhi.n	80027c4 <HAL_TIM_ConfigClockSource+0x168>
 80026dc:	2b40      	cmp	r3, #64	; 0x40
 80026de:	d058      	beq.n	8002792 <HAL_TIM_ConfigClockSource+0x136>
 80026e0:	2b40      	cmp	r3, #64	; 0x40
 80026e2:	d86f      	bhi.n	80027c4 <HAL_TIM_ConfigClockSource+0x168>
 80026e4:	2b30      	cmp	r3, #48	; 0x30
 80026e6:	d064      	beq.n	80027b2 <HAL_TIM_ConfigClockSource+0x156>
 80026e8:	2b30      	cmp	r3, #48	; 0x30
 80026ea:	d86b      	bhi.n	80027c4 <HAL_TIM_ConfigClockSource+0x168>
 80026ec:	2b20      	cmp	r3, #32
 80026ee:	d060      	beq.n	80027b2 <HAL_TIM_ConfigClockSource+0x156>
 80026f0:	2b20      	cmp	r3, #32
 80026f2:	d867      	bhi.n	80027c4 <HAL_TIM_ConfigClockSource+0x168>
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d05c      	beq.n	80027b2 <HAL_TIM_ConfigClockSource+0x156>
 80026f8:	2b10      	cmp	r3, #16
 80026fa:	d05a      	beq.n	80027b2 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80026fc:	e062      	b.n	80027c4 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	6818      	ldr	r0, [r3, #0]
 8002702:	683b      	ldr	r3, [r7, #0]
 8002704:	6899      	ldr	r1, [r3, #8]
 8002706:	683b      	ldr	r3, [r7, #0]
 8002708:	685a      	ldr	r2, [r3, #4]
 800270a:	683b      	ldr	r3, [r7, #0]
 800270c:	68db      	ldr	r3, [r3, #12]
 800270e:	f000 fd07 	bl	8003120 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	689b      	ldr	r3, [r3, #8]
 8002718:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002720:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	68fa      	ldr	r2, [r7, #12]
 8002728:	609a      	str	r2, [r3, #8]
      break;
 800272a:	e04e      	b.n	80027ca <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	6818      	ldr	r0, [r3, #0]
 8002730:	683b      	ldr	r3, [r7, #0]
 8002732:	6899      	ldr	r1, [r3, #8]
 8002734:	683b      	ldr	r3, [r7, #0]
 8002736:	685a      	ldr	r2, [r3, #4]
 8002738:	683b      	ldr	r3, [r7, #0]
 800273a:	68db      	ldr	r3, [r3, #12]
 800273c:	f000 fcf0 	bl	8003120 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	689a      	ldr	r2, [r3, #8]
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800274e:	609a      	str	r2, [r3, #8]
      break;
 8002750:	e03b      	b.n	80027ca <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	6818      	ldr	r0, [r3, #0]
 8002756:	683b      	ldr	r3, [r7, #0]
 8002758:	6859      	ldr	r1, [r3, #4]
 800275a:	683b      	ldr	r3, [r7, #0]
 800275c:	68db      	ldr	r3, [r3, #12]
 800275e:	461a      	mov	r2, r3
 8002760:	f000 fbb4 	bl	8002ecc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	2150      	movs	r1, #80	; 0x50
 800276a:	4618      	mov	r0, r3
 800276c:	f000 fcbe 	bl	80030ec <TIM_ITRx_SetConfig>
      break;
 8002770:	e02b      	b.n	80027ca <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	6818      	ldr	r0, [r3, #0]
 8002776:	683b      	ldr	r3, [r7, #0]
 8002778:	6859      	ldr	r1, [r3, #4]
 800277a:	683b      	ldr	r3, [r7, #0]
 800277c:	68db      	ldr	r3, [r3, #12]
 800277e:	461a      	mov	r2, r3
 8002780:	f000 fc0e 	bl	8002fa0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	2160      	movs	r1, #96	; 0x60
 800278a:	4618      	mov	r0, r3
 800278c:	f000 fcae 	bl	80030ec <TIM_ITRx_SetConfig>
      break;
 8002790:	e01b      	b.n	80027ca <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	6818      	ldr	r0, [r3, #0]
 8002796:	683b      	ldr	r3, [r7, #0]
 8002798:	6859      	ldr	r1, [r3, #4]
 800279a:	683b      	ldr	r3, [r7, #0]
 800279c:	68db      	ldr	r3, [r3, #12]
 800279e:	461a      	mov	r2, r3
 80027a0:	f000 fb94 	bl	8002ecc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	2140      	movs	r1, #64	; 0x40
 80027aa:	4618      	mov	r0, r3
 80027ac:	f000 fc9e 	bl	80030ec <TIM_ITRx_SetConfig>
      break;
 80027b0:	e00b      	b.n	80027ca <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681a      	ldr	r2, [r3, #0]
 80027b6:	683b      	ldr	r3, [r7, #0]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	4619      	mov	r1, r3
 80027bc:	4610      	mov	r0, r2
 80027be:	f000 fc95 	bl	80030ec <TIM_ITRx_SetConfig>
        break;
 80027c2:	e002      	b.n	80027ca <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80027c4:	bf00      	nop
 80027c6:	e000      	b.n	80027ca <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80027c8:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	2201      	movs	r2, #1
 80027ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	2200      	movs	r2, #0
 80027d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80027da:	2300      	movs	r3, #0
}
 80027dc:	4618      	mov	r0, r3
 80027de:	3710      	adds	r7, #16
 80027e0:	46bd      	mov	sp, r7
 80027e2:	bd80      	pop	{r7, pc}

080027e4 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80027e4:	b580      	push	{r7, lr}
 80027e6:	b082      	sub	sp, #8
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	6078      	str	r0, [r7, #4]
 80027ec:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80027f4:	2b01      	cmp	r3, #1
 80027f6:	d101      	bne.n	80027fc <HAL_TIM_SlaveConfigSynchro+0x18>
 80027f8:	2302      	movs	r3, #2
 80027fa:	e031      	b.n	8002860 <HAL_TIM_SlaveConfigSynchro+0x7c>
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	2201      	movs	r2, #1
 8002800:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	2202      	movs	r2, #2
 8002808:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 800280c:	6839      	ldr	r1, [r7, #0]
 800280e:	6878      	ldr	r0, [r7, #4]
 8002810:	f000 fa74 	bl	8002cfc <TIM_SlaveTimer_SetConfig>
 8002814:	4603      	mov	r3, r0
 8002816:	2b00      	cmp	r3, #0
 8002818:	d009      	beq.n	800282e <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	2201      	movs	r2, #1
 800281e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	2200      	movs	r2, #0
 8002826:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 800282a:	2301      	movs	r3, #1
 800282c:	e018      	b.n	8002860 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	68da      	ldr	r2, [r3, #12]
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800283c:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	68da      	ldr	r2, [r3, #12]
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800284c:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	2201      	movs	r2, #1
 8002852:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	2200      	movs	r2, #0
 800285a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800285e:	2300      	movs	r3, #0
}
 8002860:	4618      	mov	r0, r3
 8002862:	3708      	adds	r7, #8
 8002864:	46bd      	mov	sp, r7
 8002866:	bd80      	pop	{r7, pc}

08002868 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002868:	b480      	push	{r7}
 800286a:	b085      	sub	sp, #20
 800286c:	af00      	add	r7, sp, #0
 800286e:	6078      	str	r0, [r7, #4]
 8002870:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8002872:	2300      	movs	r3, #0
 8002874:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8002876:	683b      	ldr	r3, [r7, #0]
 8002878:	2b0c      	cmp	r3, #12
 800287a:	d831      	bhi.n	80028e0 <HAL_TIM_ReadCapturedValue+0x78>
 800287c:	a201      	add	r2, pc, #4	; (adr r2, 8002884 <HAL_TIM_ReadCapturedValue+0x1c>)
 800287e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002882:	bf00      	nop
 8002884:	080028b9 	.word	0x080028b9
 8002888:	080028e1 	.word	0x080028e1
 800288c:	080028e1 	.word	0x080028e1
 8002890:	080028e1 	.word	0x080028e1
 8002894:	080028c3 	.word	0x080028c3
 8002898:	080028e1 	.word	0x080028e1
 800289c:	080028e1 	.word	0x080028e1
 80028a0:	080028e1 	.word	0x080028e1
 80028a4:	080028cd 	.word	0x080028cd
 80028a8:	080028e1 	.word	0x080028e1
 80028ac:	080028e1 	.word	0x080028e1
 80028b0:	080028e1 	.word	0x080028e1
 80028b4:	080028d7 	.word	0x080028d7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80028be:	60fb      	str	r3, [r7, #12]

      break;
 80028c0:	e00f      	b.n	80028e2 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028c8:	60fb      	str	r3, [r7, #12]

      break;
 80028ca:	e00a      	b.n	80028e2 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028d2:	60fb      	str	r3, [r7, #12]

      break;
 80028d4:	e005      	b.n	80028e2 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028dc:	60fb      	str	r3, [r7, #12]

      break;
 80028de:	e000      	b.n	80028e2 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 80028e0:	bf00      	nop
  }

  return tmpreg;
 80028e2:	68fb      	ldr	r3, [r7, #12]
}
 80028e4:	4618      	mov	r0, r3
 80028e6:	3714      	adds	r7, #20
 80028e8:	46bd      	mov	sp, r7
 80028ea:	bc80      	pop	{r7}
 80028ec:	4770      	bx	lr
 80028ee:	bf00      	nop

080028f0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80028f0:	b480      	push	{r7}
 80028f2:	b083      	sub	sp, #12
 80028f4:	af00      	add	r7, sp, #0
 80028f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80028f8:	bf00      	nop
 80028fa:	370c      	adds	r7, #12
 80028fc:	46bd      	mov	sp, r7
 80028fe:	bc80      	pop	{r7}
 8002900:	4770      	bx	lr

08002902 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002902:	b480      	push	{r7}
 8002904:	b083      	sub	sp, #12
 8002906:	af00      	add	r7, sp, #0
 8002908:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800290a:	bf00      	nop
 800290c:	370c      	adds	r7, #12
 800290e:	46bd      	mov	sp, r7
 8002910:	bc80      	pop	{r7}
 8002912:	4770      	bx	lr

08002914 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002914:	b480      	push	{r7}
 8002916:	b083      	sub	sp, #12
 8002918:	af00      	add	r7, sp, #0
 800291a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800291c:	bf00      	nop
 800291e:	370c      	adds	r7, #12
 8002920:	46bd      	mov	sp, r7
 8002922:	bc80      	pop	{r7}
 8002924:	4770      	bx	lr
	...

08002928 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002928:	b480      	push	{r7}
 800292a:	b085      	sub	sp, #20
 800292c:	af00      	add	r7, sp, #0
 800292e:	6078      	str	r0, [r7, #4]
 8002930:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	4a29      	ldr	r2, [pc, #164]	; (80029e0 <TIM_Base_SetConfig+0xb8>)
 800293c:	4293      	cmp	r3, r2
 800293e:	d00b      	beq.n	8002958 <TIM_Base_SetConfig+0x30>
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002946:	d007      	beq.n	8002958 <TIM_Base_SetConfig+0x30>
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	4a26      	ldr	r2, [pc, #152]	; (80029e4 <TIM_Base_SetConfig+0xbc>)
 800294c:	4293      	cmp	r3, r2
 800294e:	d003      	beq.n	8002958 <TIM_Base_SetConfig+0x30>
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	4a25      	ldr	r2, [pc, #148]	; (80029e8 <TIM_Base_SetConfig+0xc0>)
 8002954:	4293      	cmp	r3, r2
 8002956:	d108      	bne.n	800296a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800295e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002960:	683b      	ldr	r3, [r7, #0]
 8002962:	685b      	ldr	r3, [r3, #4]
 8002964:	68fa      	ldr	r2, [r7, #12]
 8002966:	4313      	orrs	r3, r2
 8002968:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	4a1c      	ldr	r2, [pc, #112]	; (80029e0 <TIM_Base_SetConfig+0xb8>)
 800296e:	4293      	cmp	r3, r2
 8002970:	d00b      	beq.n	800298a <TIM_Base_SetConfig+0x62>
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002978:	d007      	beq.n	800298a <TIM_Base_SetConfig+0x62>
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	4a19      	ldr	r2, [pc, #100]	; (80029e4 <TIM_Base_SetConfig+0xbc>)
 800297e:	4293      	cmp	r3, r2
 8002980:	d003      	beq.n	800298a <TIM_Base_SetConfig+0x62>
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	4a18      	ldr	r2, [pc, #96]	; (80029e8 <TIM_Base_SetConfig+0xc0>)
 8002986:	4293      	cmp	r3, r2
 8002988:	d108      	bne.n	800299c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002990:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002992:	683b      	ldr	r3, [r7, #0]
 8002994:	68db      	ldr	r3, [r3, #12]
 8002996:	68fa      	ldr	r2, [r7, #12]
 8002998:	4313      	orrs	r3, r2
 800299a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80029a2:	683b      	ldr	r3, [r7, #0]
 80029a4:	695b      	ldr	r3, [r3, #20]
 80029a6:	4313      	orrs	r3, r2
 80029a8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	68fa      	ldr	r2, [r7, #12]
 80029ae:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80029b0:	683b      	ldr	r3, [r7, #0]
 80029b2:	689a      	ldr	r2, [r3, #8]
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80029b8:	683b      	ldr	r3, [r7, #0]
 80029ba:	681a      	ldr	r2, [r3, #0]
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	4a07      	ldr	r2, [pc, #28]	; (80029e0 <TIM_Base_SetConfig+0xb8>)
 80029c4:	4293      	cmp	r3, r2
 80029c6:	d103      	bne.n	80029d0 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80029c8:	683b      	ldr	r3, [r7, #0]
 80029ca:	691a      	ldr	r2, [r3, #16]
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	2201      	movs	r2, #1
 80029d4:	615a      	str	r2, [r3, #20]
}
 80029d6:	bf00      	nop
 80029d8:	3714      	adds	r7, #20
 80029da:	46bd      	mov	sp, r7
 80029dc:	bc80      	pop	{r7}
 80029de:	4770      	bx	lr
 80029e0:	40012c00 	.word	0x40012c00
 80029e4:	40000400 	.word	0x40000400
 80029e8:	40000800 	.word	0x40000800

080029ec <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80029ec:	b480      	push	{r7}
 80029ee:	b087      	sub	sp, #28
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	6078      	str	r0, [r7, #4]
 80029f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	6a1b      	ldr	r3, [r3, #32]
 80029fa:	f023 0201 	bic.w	r2, r3, #1
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	6a1b      	ldr	r3, [r3, #32]
 8002a06:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	685b      	ldr	r3, [r3, #4]
 8002a0c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	699b      	ldr	r3, [r3, #24]
 8002a12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a1a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	f023 0303 	bic.w	r3, r3, #3
 8002a22:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002a24:	683b      	ldr	r3, [r7, #0]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	68fa      	ldr	r2, [r7, #12]
 8002a2a:	4313      	orrs	r3, r2
 8002a2c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002a2e:	697b      	ldr	r3, [r7, #20]
 8002a30:	f023 0302 	bic.w	r3, r3, #2
 8002a34:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002a36:	683b      	ldr	r3, [r7, #0]
 8002a38:	689b      	ldr	r3, [r3, #8]
 8002a3a:	697a      	ldr	r2, [r7, #20]
 8002a3c:	4313      	orrs	r3, r2
 8002a3e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	4a1c      	ldr	r2, [pc, #112]	; (8002ab4 <TIM_OC1_SetConfig+0xc8>)
 8002a44:	4293      	cmp	r3, r2
 8002a46:	d10c      	bne.n	8002a62 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002a48:	697b      	ldr	r3, [r7, #20]
 8002a4a:	f023 0308 	bic.w	r3, r3, #8
 8002a4e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002a50:	683b      	ldr	r3, [r7, #0]
 8002a52:	68db      	ldr	r3, [r3, #12]
 8002a54:	697a      	ldr	r2, [r7, #20]
 8002a56:	4313      	orrs	r3, r2
 8002a58:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002a5a:	697b      	ldr	r3, [r7, #20]
 8002a5c:	f023 0304 	bic.w	r3, r3, #4
 8002a60:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	4a13      	ldr	r2, [pc, #76]	; (8002ab4 <TIM_OC1_SetConfig+0xc8>)
 8002a66:	4293      	cmp	r3, r2
 8002a68:	d111      	bne.n	8002a8e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002a6a:	693b      	ldr	r3, [r7, #16]
 8002a6c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002a70:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002a72:	693b      	ldr	r3, [r7, #16]
 8002a74:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002a78:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002a7a:	683b      	ldr	r3, [r7, #0]
 8002a7c:	695b      	ldr	r3, [r3, #20]
 8002a7e:	693a      	ldr	r2, [r7, #16]
 8002a80:	4313      	orrs	r3, r2
 8002a82:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002a84:	683b      	ldr	r3, [r7, #0]
 8002a86:	699b      	ldr	r3, [r3, #24]
 8002a88:	693a      	ldr	r2, [r7, #16]
 8002a8a:	4313      	orrs	r3, r2
 8002a8c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	693a      	ldr	r2, [r7, #16]
 8002a92:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	68fa      	ldr	r2, [r7, #12]
 8002a98:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002a9a:	683b      	ldr	r3, [r7, #0]
 8002a9c:	685a      	ldr	r2, [r3, #4]
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	697a      	ldr	r2, [r7, #20]
 8002aa6:	621a      	str	r2, [r3, #32]
}
 8002aa8:	bf00      	nop
 8002aaa:	371c      	adds	r7, #28
 8002aac:	46bd      	mov	sp, r7
 8002aae:	bc80      	pop	{r7}
 8002ab0:	4770      	bx	lr
 8002ab2:	bf00      	nop
 8002ab4:	40012c00 	.word	0x40012c00

08002ab8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002ab8:	b480      	push	{r7}
 8002aba:	b087      	sub	sp, #28
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	6078      	str	r0, [r7, #4]
 8002ac0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	6a1b      	ldr	r3, [r3, #32]
 8002ac6:	f023 0210 	bic.w	r2, r3, #16
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	6a1b      	ldr	r3, [r3, #32]
 8002ad2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	685b      	ldr	r3, [r3, #4]
 8002ad8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	699b      	ldr	r3, [r3, #24]
 8002ade:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002ae6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002aee:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002af0:	683b      	ldr	r3, [r7, #0]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	021b      	lsls	r3, r3, #8
 8002af6:	68fa      	ldr	r2, [r7, #12]
 8002af8:	4313      	orrs	r3, r2
 8002afa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002afc:	697b      	ldr	r3, [r7, #20]
 8002afe:	f023 0320 	bic.w	r3, r3, #32
 8002b02:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002b04:	683b      	ldr	r3, [r7, #0]
 8002b06:	689b      	ldr	r3, [r3, #8]
 8002b08:	011b      	lsls	r3, r3, #4
 8002b0a:	697a      	ldr	r2, [r7, #20]
 8002b0c:	4313      	orrs	r3, r2
 8002b0e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	4a1d      	ldr	r2, [pc, #116]	; (8002b88 <TIM_OC2_SetConfig+0xd0>)
 8002b14:	4293      	cmp	r3, r2
 8002b16:	d10d      	bne.n	8002b34 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002b18:	697b      	ldr	r3, [r7, #20]
 8002b1a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002b1e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002b20:	683b      	ldr	r3, [r7, #0]
 8002b22:	68db      	ldr	r3, [r3, #12]
 8002b24:	011b      	lsls	r3, r3, #4
 8002b26:	697a      	ldr	r2, [r7, #20]
 8002b28:	4313      	orrs	r3, r2
 8002b2a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002b2c:	697b      	ldr	r3, [r7, #20]
 8002b2e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002b32:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	4a14      	ldr	r2, [pc, #80]	; (8002b88 <TIM_OC2_SetConfig+0xd0>)
 8002b38:	4293      	cmp	r3, r2
 8002b3a:	d113      	bne.n	8002b64 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002b3c:	693b      	ldr	r3, [r7, #16]
 8002b3e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002b42:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002b44:	693b      	ldr	r3, [r7, #16]
 8002b46:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002b4a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002b4c:	683b      	ldr	r3, [r7, #0]
 8002b4e:	695b      	ldr	r3, [r3, #20]
 8002b50:	009b      	lsls	r3, r3, #2
 8002b52:	693a      	ldr	r2, [r7, #16]
 8002b54:	4313      	orrs	r3, r2
 8002b56:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002b58:	683b      	ldr	r3, [r7, #0]
 8002b5a:	699b      	ldr	r3, [r3, #24]
 8002b5c:	009b      	lsls	r3, r3, #2
 8002b5e:	693a      	ldr	r2, [r7, #16]
 8002b60:	4313      	orrs	r3, r2
 8002b62:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	693a      	ldr	r2, [r7, #16]
 8002b68:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	68fa      	ldr	r2, [r7, #12]
 8002b6e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002b70:	683b      	ldr	r3, [r7, #0]
 8002b72:	685a      	ldr	r2, [r3, #4]
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	697a      	ldr	r2, [r7, #20]
 8002b7c:	621a      	str	r2, [r3, #32]
}
 8002b7e:	bf00      	nop
 8002b80:	371c      	adds	r7, #28
 8002b82:	46bd      	mov	sp, r7
 8002b84:	bc80      	pop	{r7}
 8002b86:	4770      	bx	lr
 8002b88:	40012c00 	.word	0x40012c00

08002b8c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002b8c:	b480      	push	{r7}
 8002b8e:	b087      	sub	sp, #28
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	6078      	str	r0, [r7, #4]
 8002b94:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	6a1b      	ldr	r3, [r3, #32]
 8002b9a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	6a1b      	ldr	r3, [r3, #32]
 8002ba6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	685b      	ldr	r3, [r3, #4]
 8002bac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	69db      	ldr	r3, [r3, #28]
 8002bb2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002bba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	f023 0303 	bic.w	r3, r3, #3
 8002bc2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002bc4:	683b      	ldr	r3, [r7, #0]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	68fa      	ldr	r2, [r7, #12]
 8002bca:	4313      	orrs	r3, r2
 8002bcc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002bce:	697b      	ldr	r3, [r7, #20]
 8002bd0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002bd4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002bd6:	683b      	ldr	r3, [r7, #0]
 8002bd8:	689b      	ldr	r3, [r3, #8]
 8002bda:	021b      	lsls	r3, r3, #8
 8002bdc:	697a      	ldr	r2, [r7, #20]
 8002bde:	4313      	orrs	r3, r2
 8002be0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	4a1d      	ldr	r2, [pc, #116]	; (8002c5c <TIM_OC3_SetConfig+0xd0>)
 8002be6:	4293      	cmp	r3, r2
 8002be8:	d10d      	bne.n	8002c06 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002bea:	697b      	ldr	r3, [r7, #20]
 8002bec:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002bf0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002bf2:	683b      	ldr	r3, [r7, #0]
 8002bf4:	68db      	ldr	r3, [r3, #12]
 8002bf6:	021b      	lsls	r3, r3, #8
 8002bf8:	697a      	ldr	r2, [r7, #20]
 8002bfa:	4313      	orrs	r3, r2
 8002bfc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002bfe:	697b      	ldr	r3, [r7, #20]
 8002c00:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002c04:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	4a14      	ldr	r2, [pc, #80]	; (8002c5c <TIM_OC3_SetConfig+0xd0>)
 8002c0a:	4293      	cmp	r3, r2
 8002c0c:	d113      	bne.n	8002c36 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002c0e:	693b      	ldr	r3, [r7, #16]
 8002c10:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002c14:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002c16:	693b      	ldr	r3, [r7, #16]
 8002c18:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002c1c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002c1e:	683b      	ldr	r3, [r7, #0]
 8002c20:	695b      	ldr	r3, [r3, #20]
 8002c22:	011b      	lsls	r3, r3, #4
 8002c24:	693a      	ldr	r2, [r7, #16]
 8002c26:	4313      	orrs	r3, r2
 8002c28:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002c2a:	683b      	ldr	r3, [r7, #0]
 8002c2c:	699b      	ldr	r3, [r3, #24]
 8002c2e:	011b      	lsls	r3, r3, #4
 8002c30:	693a      	ldr	r2, [r7, #16]
 8002c32:	4313      	orrs	r3, r2
 8002c34:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	693a      	ldr	r2, [r7, #16]
 8002c3a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	68fa      	ldr	r2, [r7, #12]
 8002c40:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002c42:	683b      	ldr	r3, [r7, #0]
 8002c44:	685a      	ldr	r2, [r3, #4]
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	697a      	ldr	r2, [r7, #20]
 8002c4e:	621a      	str	r2, [r3, #32]
}
 8002c50:	bf00      	nop
 8002c52:	371c      	adds	r7, #28
 8002c54:	46bd      	mov	sp, r7
 8002c56:	bc80      	pop	{r7}
 8002c58:	4770      	bx	lr
 8002c5a:	bf00      	nop
 8002c5c:	40012c00 	.word	0x40012c00

08002c60 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002c60:	b480      	push	{r7}
 8002c62:	b087      	sub	sp, #28
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	6078      	str	r0, [r7, #4]
 8002c68:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	6a1b      	ldr	r3, [r3, #32]
 8002c6e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	6a1b      	ldr	r3, [r3, #32]
 8002c7a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	685b      	ldr	r3, [r3, #4]
 8002c80:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	69db      	ldr	r3, [r3, #28]
 8002c86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002c8e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002c96:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002c98:	683b      	ldr	r3, [r7, #0]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	021b      	lsls	r3, r3, #8
 8002c9e:	68fa      	ldr	r2, [r7, #12]
 8002ca0:	4313      	orrs	r3, r2
 8002ca2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002ca4:	693b      	ldr	r3, [r7, #16]
 8002ca6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002caa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002cac:	683b      	ldr	r3, [r7, #0]
 8002cae:	689b      	ldr	r3, [r3, #8]
 8002cb0:	031b      	lsls	r3, r3, #12
 8002cb2:	693a      	ldr	r2, [r7, #16]
 8002cb4:	4313      	orrs	r3, r2
 8002cb6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	4a0f      	ldr	r2, [pc, #60]	; (8002cf8 <TIM_OC4_SetConfig+0x98>)
 8002cbc:	4293      	cmp	r3, r2
 8002cbe:	d109      	bne.n	8002cd4 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002cc0:	697b      	ldr	r3, [r7, #20]
 8002cc2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002cc6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002cc8:	683b      	ldr	r3, [r7, #0]
 8002cca:	695b      	ldr	r3, [r3, #20]
 8002ccc:	019b      	lsls	r3, r3, #6
 8002cce:	697a      	ldr	r2, [r7, #20]
 8002cd0:	4313      	orrs	r3, r2
 8002cd2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	697a      	ldr	r2, [r7, #20]
 8002cd8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	68fa      	ldr	r2, [r7, #12]
 8002cde:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002ce0:	683b      	ldr	r3, [r7, #0]
 8002ce2:	685a      	ldr	r2, [r3, #4]
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	693a      	ldr	r2, [r7, #16]
 8002cec:	621a      	str	r2, [r3, #32]
}
 8002cee:	bf00      	nop
 8002cf0:	371c      	adds	r7, #28
 8002cf2:	46bd      	mov	sp, r7
 8002cf4:	bc80      	pop	{r7}
 8002cf6:	4770      	bx	lr
 8002cf8:	40012c00 	.word	0x40012c00

08002cfc <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8002cfc:	b580      	push	{r7, lr}
 8002cfe:	b086      	sub	sp, #24
 8002d00:	af00      	add	r7, sp, #0
 8002d02:	6078      	str	r0, [r7, #4]
 8002d04:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	689b      	ldr	r3, [r3, #8]
 8002d0c:	617b      	str	r3, [r7, #20]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002d0e:	697b      	ldr	r3, [r7, #20]
 8002d10:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d14:	617b      	str	r3, [r7, #20]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8002d16:	683b      	ldr	r3, [r7, #0]
 8002d18:	685b      	ldr	r3, [r3, #4]
 8002d1a:	697a      	ldr	r2, [r7, #20]
 8002d1c:	4313      	orrs	r3, r2
 8002d1e:	617b      	str	r3, [r7, #20]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8002d20:	697b      	ldr	r3, [r7, #20]
 8002d22:	f023 0307 	bic.w	r3, r3, #7
 8002d26:	617b      	str	r3, [r7, #20]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8002d28:	683b      	ldr	r3, [r7, #0]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	697a      	ldr	r2, [r7, #20]
 8002d2e:	4313      	orrs	r3, r2
 8002d30:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	697a      	ldr	r2, [r7, #20]
 8002d38:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8002d3a:	683b      	ldr	r3, [r7, #0]
 8002d3c:	685b      	ldr	r3, [r3, #4]
 8002d3e:	2b70      	cmp	r3, #112	; 0x70
 8002d40:	d01a      	beq.n	8002d78 <TIM_SlaveTimer_SetConfig+0x7c>
 8002d42:	2b70      	cmp	r3, #112	; 0x70
 8002d44:	d860      	bhi.n	8002e08 <TIM_SlaveTimer_SetConfig+0x10c>
 8002d46:	2b60      	cmp	r3, #96	; 0x60
 8002d48:	d054      	beq.n	8002df4 <TIM_SlaveTimer_SetConfig+0xf8>
 8002d4a:	2b60      	cmp	r3, #96	; 0x60
 8002d4c:	d85c      	bhi.n	8002e08 <TIM_SlaveTimer_SetConfig+0x10c>
 8002d4e:	2b50      	cmp	r3, #80	; 0x50
 8002d50:	d046      	beq.n	8002de0 <TIM_SlaveTimer_SetConfig+0xe4>
 8002d52:	2b50      	cmp	r3, #80	; 0x50
 8002d54:	d858      	bhi.n	8002e08 <TIM_SlaveTimer_SetConfig+0x10c>
 8002d56:	2b40      	cmp	r3, #64	; 0x40
 8002d58:	d019      	beq.n	8002d8e <TIM_SlaveTimer_SetConfig+0x92>
 8002d5a:	2b40      	cmp	r3, #64	; 0x40
 8002d5c:	d854      	bhi.n	8002e08 <TIM_SlaveTimer_SetConfig+0x10c>
 8002d5e:	2b30      	cmp	r3, #48	; 0x30
 8002d60:	d054      	beq.n	8002e0c <TIM_SlaveTimer_SetConfig+0x110>
 8002d62:	2b30      	cmp	r3, #48	; 0x30
 8002d64:	d850      	bhi.n	8002e08 <TIM_SlaveTimer_SetConfig+0x10c>
 8002d66:	2b20      	cmp	r3, #32
 8002d68:	d050      	beq.n	8002e0c <TIM_SlaveTimer_SetConfig+0x110>
 8002d6a:	2b20      	cmp	r3, #32
 8002d6c:	d84c      	bhi.n	8002e08 <TIM_SlaveTimer_SetConfig+0x10c>
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d04c      	beq.n	8002e0c <TIM_SlaveTimer_SetConfig+0x110>
 8002d72:	2b10      	cmp	r3, #16
 8002d74:	d04a      	beq.n	8002e0c <TIM_SlaveTimer_SetConfig+0x110>
        assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
        break;
      }

    default:
      break;
 8002d76:	e047      	b.n	8002e08 <TIM_SlaveTimer_SetConfig+0x10c>
      TIM_ETR_SetConfig(htim->Instance,
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	6818      	ldr	r0, [r3, #0]
 8002d7c:	683b      	ldr	r3, [r7, #0]
 8002d7e:	68d9      	ldr	r1, [r3, #12]
 8002d80:	683b      	ldr	r3, [r7, #0]
 8002d82:	689a      	ldr	r2, [r3, #8]
 8002d84:	683b      	ldr	r3, [r7, #0]
 8002d86:	691b      	ldr	r3, [r3, #16]
 8002d88:	f000 f9ca 	bl	8003120 <TIM_ETR_SetConfig>
      break;
 8002d8c:	e03f      	b.n	8002e0e <TIM_SlaveTimer_SetConfig+0x112>
      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8002d8e:	683b      	ldr	r3, [r7, #0]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	2b05      	cmp	r3, #5
 8002d94:	d101      	bne.n	8002d9a <TIM_SlaveTimer_SetConfig+0x9e>
        return HAL_ERROR;
 8002d96:	2301      	movs	r3, #1
 8002d98:	e03a      	b.n	8002e10 <TIM_SlaveTimer_SetConfig+0x114>
      tmpccer = htim->Instance->CCER;
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	6a1b      	ldr	r3, [r3, #32]
 8002da0:	613b      	str	r3, [r7, #16]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	6a1a      	ldr	r2, [r3, #32]
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	f022 0201 	bic.w	r2, r2, #1
 8002db0:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	699b      	ldr	r3, [r3, #24]
 8002db8:	60fb      	str	r3, [r7, #12]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002dc0:	60fb      	str	r3, [r7, #12]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8002dc2:	683b      	ldr	r3, [r7, #0]
 8002dc4:	691b      	ldr	r3, [r3, #16]
 8002dc6:	011b      	lsls	r3, r3, #4
 8002dc8:	68fa      	ldr	r2, [r7, #12]
 8002dca:	4313      	orrs	r3, r2
 8002dcc:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCMR1 = tmpccmr1;
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	68fa      	ldr	r2, [r7, #12]
 8002dd4:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	693a      	ldr	r2, [r7, #16]
 8002ddc:	621a      	str	r2, [r3, #32]
      break;
 8002dde:	e016      	b.n	8002e0e <TIM_SlaveTimer_SetConfig+0x112>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	6818      	ldr	r0, [r3, #0]
 8002de4:	683b      	ldr	r3, [r7, #0]
 8002de6:	6899      	ldr	r1, [r3, #8]
 8002de8:	683b      	ldr	r3, [r7, #0]
 8002dea:	691b      	ldr	r3, [r3, #16]
 8002dec:	461a      	mov	r2, r3
 8002dee:	f000 f86d 	bl	8002ecc <TIM_TI1_ConfigInputStage>
      break;
 8002df2:	e00c      	b.n	8002e0e <TIM_SlaveTimer_SetConfig+0x112>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	6818      	ldr	r0, [r3, #0]
 8002df8:	683b      	ldr	r3, [r7, #0]
 8002dfa:	6899      	ldr	r1, [r3, #8]
 8002dfc:	683b      	ldr	r3, [r7, #0]
 8002dfe:	691b      	ldr	r3, [r3, #16]
 8002e00:	461a      	mov	r2, r3
 8002e02:	f000 f8cd 	bl	8002fa0 <TIM_TI2_ConfigInputStage>
      break;
 8002e06:	e002      	b.n	8002e0e <TIM_SlaveTimer_SetConfig+0x112>
      break;
 8002e08:	bf00      	nop
 8002e0a:	e000      	b.n	8002e0e <TIM_SlaveTimer_SetConfig+0x112>
        break;
 8002e0c:	bf00      	nop
  }
  return HAL_OK;
 8002e0e:	2300      	movs	r3, #0
}
 8002e10:	4618      	mov	r0, r3
 8002e12:	3718      	adds	r7, #24
 8002e14:	46bd      	mov	sp, r7
 8002e16:	bd80      	pop	{r7, pc}

08002e18 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8002e18:	b480      	push	{r7}
 8002e1a:	b087      	sub	sp, #28
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	60f8      	str	r0, [r7, #12]
 8002e20:	60b9      	str	r1, [r7, #8]
 8002e22:	607a      	str	r2, [r7, #4]
 8002e24:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	6a1b      	ldr	r3, [r3, #32]
 8002e2a:	f023 0201 	bic.w	r2, r3, #1
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	699b      	ldr	r3, [r3, #24]
 8002e36:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	6a1b      	ldr	r3, [r3, #32]
 8002e3c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	4a1f      	ldr	r2, [pc, #124]	; (8002ec0 <TIM_TI1_SetConfig+0xa8>)
 8002e42:	4293      	cmp	r3, r2
 8002e44:	d00b      	beq.n	8002e5e <TIM_TI1_SetConfig+0x46>
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e4c:	d007      	beq.n	8002e5e <TIM_TI1_SetConfig+0x46>
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	4a1c      	ldr	r2, [pc, #112]	; (8002ec4 <TIM_TI1_SetConfig+0xac>)
 8002e52:	4293      	cmp	r3, r2
 8002e54:	d003      	beq.n	8002e5e <TIM_TI1_SetConfig+0x46>
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	4a1b      	ldr	r2, [pc, #108]	; (8002ec8 <TIM_TI1_SetConfig+0xb0>)
 8002e5a:	4293      	cmp	r3, r2
 8002e5c:	d101      	bne.n	8002e62 <TIM_TI1_SetConfig+0x4a>
 8002e5e:	2301      	movs	r3, #1
 8002e60:	e000      	b.n	8002e64 <TIM_TI1_SetConfig+0x4c>
 8002e62:	2300      	movs	r3, #0
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d008      	beq.n	8002e7a <TIM_TI1_SetConfig+0x62>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8002e68:	697b      	ldr	r3, [r7, #20]
 8002e6a:	f023 0303 	bic.w	r3, r3, #3
 8002e6e:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8002e70:	697a      	ldr	r2, [r7, #20]
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	4313      	orrs	r3, r2
 8002e76:	617b      	str	r3, [r7, #20]
 8002e78:	e003      	b.n	8002e82 <TIM_TI1_SetConfig+0x6a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8002e7a:	697b      	ldr	r3, [r7, #20]
 8002e7c:	f043 0301 	orr.w	r3, r3, #1
 8002e80:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002e82:	697b      	ldr	r3, [r7, #20]
 8002e84:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002e88:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8002e8a:	683b      	ldr	r3, [r7, #0]
 8002e8c:	011b      	lsls	r3, r3, #4
 8002e8e:	b2db      	uxtb	r3, r3
 8002e90:	697a      	ldr	r2, [r7, #20]
 8002e92:	4313      	orrs	r3, r2
 8002e94:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002e96:	693b      	ldr	r3, [r7, #16]
 8002e98:	f023 030a 	bic.w	r3, r3, #10
 8002e9c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8002e9e:	68bb      	ldr	r3, [r7, #8]
 8002ea0:	f003 030a 	and.w	r3, r3, #10
 8002ea4:	693a      	ldr	r2, [r7, #16]
 8002ea6:	4313      	orrs	r3, r2
 8002ea8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	697a      	ldr	r2, [r7, #20]
 8002eae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	693a      	ldr	r2, [r7, #16]
 8002eb4:	621a      	str	r2, [r3, #32]
}
 8002eb6:	bf00      	nop
 8002eb8:	371c      	adds	r7, #28
 8002eba:	46bd      	mov	sp, r7
 8002ebc:	bc80      	pop	{r7}
 8002ebe:	4770      	bx	lr
 8002ec0:	40012c00 	.word	0x40012c00
 8002ec4:	40000400 	.word	0x40000400
 8002ec8:	40000800 	.word	0x40000800

08002ecc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002ecc:	b480      	push	{r7}
 8002ece:	b087      	sub	sp, #28
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	60f8      	str	r0, [r7, #12]
 8002ed4:	60b9      	str	r1, [r7, #8]
 8002ed6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	6a1b      	ldr	r3, [r3, #32]
 8002edc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	6a1b      	ldr	r3, [r3, #32]
 8002ee2:	f023 0201 	bic.w	r2, r3, #1
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	699b      	ldr	r3, [r3, #24]
 8002eee:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002ef0:	693b      	ldr	r3, [r7, #16]
 8002ef2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002ef6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	011b      	lsls	r3, r3, #4
 8002efc:	693a      	ldr	r2, [r7, #16]
 8002efe:	4313      	orrs	r3, r2
 8002f00:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002f02:	697b      	ldr	r3, [r7, #20]
 8002f04:	f023 030a 	bic.w	r3, r3, #10
 8002f08:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002f0a:	697a      	ldr	r2, [r7, #20]
 8002f0c:	68bb      	ldr	r3, [r7, #8]
 8002f0e:	4313      	orrs	r3, r2
 8002f10:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	693a      	ldr	r2, [r7, #16]
 8002f16:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	697a      	ldr	r2, [r7, #20]
 8002f1c:	621a      	str	r2, [r3, #32]
}
 8002f1e:	bf00      	nop
 8002f20:	371c      	adds	r7, #28
 8002f22:	46bd      	mov	sp, r7
 8002f24:	bc80      	pop	{r7}
 8002f26:	4770      	bx	lr

08002f28 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8002f28:	b480      	push	{r7}
 8002f2a:	b087      	sub	sp, #28
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	60f8      	str	r0, [r7, #12]
 8002f30:	60b9      	str	r1, [r7, #8]
 8002f32:	607a      	str	r2, [r7, #4]
 8002f34:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	6a1b      	ldr	r3, [r3, #32]
 8002f3a:	f023 0210 	bic.w	r2, r3, #16
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	699b      	ldr	r3, [r3, #24]
 8002f46:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	6a1b      	ldr	r3, [r3, #32]
 8002f4c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8002f4e:	697b      	ldr	r3, [r7, #20]
 8002f50:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002f54:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	021b      	lsls	r3, r3, #8
 8002f5a:	697a      	ldr	r2, [r7, #20]
 8002f5c:	4313      	orrs	r3, r2
 8002f5e:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002f60:	697b      	ldr	r3, [r7, #20]
 8002f62:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002f66:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8002f68:	683b      	ldr	r3, [r7, #0]
 8002f6a:	031b      	lsls	r3, r3, #12
 8002f6c:	b29b      	uxth	r3, r3
 8002f6e:	697a      	ldr	r2, [r7, #20]
 8002f70:	4313      	orrs	r3, r2
 8002f72:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002f74:	693b      	ldr	r3, [r7, #16]
 8002f76:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002f7a:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8002f7c:	68bb      	ldr	r3, [r7, #8]
 8002f7e:	011b      	lsls	r3, r3, #4
 8002f80:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8002f84:	693a      	ldr	r2, [r7, #16]
 8002f86:	4313      	orrs	r3, r2
 8002f88:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	697a      	ldr	r2, [r7, #20]
 8002f8e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	693a      	ldr	r2, [r7, #16]
 8002f94:	621a      	str	r2, [r3, #32]
}
 8002f96:	bf00      	nop
 8002f98:	371c      	adds	r7, #28
 8002f9a:	46bd      	mov	sp, r7
 8002f9c:	bc80      	pop	{r7}
 8002f9e:	4770      	bx	lr

08002fa0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002fa0:	b480      	push	{r7}
 8002fa2:	b087      	sub	sp, #28
 8002fa4:	af00      	add	r7, sp, #0
 8002fa6:	60f8      	str	r0, [r7, #12]
 8002fa8:	60b9      	str	r1, [r7, #8]
 8002faa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	6a1b      	ldr	r3, [r3, #32]
 8002fb0:	f023 0210 	bic.w	r2, r3, #16
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	699b      	ldr	r3, [r3, #24]
 8002fbc:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	6a1b      	ldr	r3, [r3, #32]
 8002fc2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002fc4:	697b      	ldr	r3, [r7, #20]
 8002fc6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002fca:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	031b      	lsls	r3, r3, #12
 8002fd0:	697a      	ldr	r2, [r7, #20]
 8002fd2:	4313      	orrs	r3, r2
 8002fd4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002fd6:	693b      	ldr	r3, [r7, #16]
 8002fd8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002fdc:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002fde:	68bb      	ldr	r3, [r7, #8]
 8002fe0:	011b      	lsls	r3, r3, #4
 8002fe2:	693a      	ldr	r2, [r7, #16]
 8002fe4:	4313      	orrs	r3, r2
 8002fe6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	697a      	ldr	r2, [r7, #20]
 8002fec:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	693a      	ldr	r2, [r7, #16]
 8002ff2:	621a      	str	r2, [r3, #32]
}
 8002ff4:	bf00      	nop
 8002ff6:	371c      	adds	r7, #28
 8002ff8:	46bd      	mov	sp, r7
 8002ffa:	bc80      	pop	{r7}
 8002ffc:	4770      	bx	lr

08002ffe <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8002ffe:	b480      	push	{r7}
 8003000:	b087      	sub	sp, #28
 8003002:	af00      	add	r7, sp, #0
 8003004:	60f8      	str	r0, [r7, #12]
 8003006:	60b9      	str	r1, [r7, #8]
 8003008:	607a      	str	r2, [r7, #4]
 800300a:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	6a1b      	ldr	r3, [r3, #32]
 8003010:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	69db      	ldr	r3, [r3, #28]
 800301c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	6a1b      	ldr	r3, [r3, #32]
 8003022:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8003024:	697b      	ldr	r3, [r7, #20]
 8003026:	f023 0303 	bic.w	r3, r3, #3
 800302a:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 800302c:	697a      	ldr	r2, [r7, #20]
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	4313      	orrs	r3, r2
 8003032:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8003034:	697b      	ldr	r3, [r7, #20]
 8003036:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800303a:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800303c:	683b      	ldr	r3, [r7, #0]
 800303e:	011b      	lsls	r3, r3, #4
 8003040:	b2db      	uxtb	r3, r3
 8003042:	697a      	ldr	r2, [r7, #20]
 8003044:	4313      	orrs	r3, r2
 8003046:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P);
 8003048:	693b      	ldr	r3, [r7, #16]
 800304a:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800304e:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & TIM_CCER_CC3P);
 8003050:	68bb      	ldr	r3, [r7, #8]
 8003052:	021b      	lsls	r3, r3, #8
 8003054:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003058:	693a      	ldr	r2, [r7, #16]
 800305a:	4313      	orrs	r3, r2
 800305c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	697a      	ldr	r2, [r7, #20]
 8003062:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	693a      	ldr	r2, [r7, #16]
 8003068:	621a      	str	r2, [r3, #32]
}
 800306a:	bf00      	nop
 800306c:	371c      	adds	r7, #28
 800306e:	46bd      	mov	sp, r7
 8003070:	bc80      	pop	{r7}
 8003072:	4770      	bx	lr

08003074 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003074:	b480      	push	{r7}
 8003076:	b087      	sub	sp, #28
 8003078:	af00      	add	r7, sp, #0
 800307a:	60f8      	str	r0, [r7, #12]
 800307c:	60b9      	str	r1, [r7, #8]
 800307e:	607a      	str	r2, [r7, #4]
 8003080:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	6a1b      	ldr	r3, [r3, #32]
 8003086:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	69db      	ldr	r3, [r3, #28]
 8003092:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	6a1b      	ldr	r3, [r3, #32]
 8003098:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800309a:	697b      	ldr	r3, [r7, #20]
 800309c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80030a0:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	021b      	lsls	r3, r3, #8
 80030a6:	697a      	ldr	r2, [r7, #20]
 80030a8:	4313      	orrs	r3, r2
 80030aa:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80030ac:	697b      	ldr	r3, [r7, #20]
 80030ae:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80030b2:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80030b4:	683b      	ldr	r3, [r7, #0]
 80030b6:	031b      	lsls	r3, r3, #12
 80030b8:	b29b      	uxth	r3, r3
 80030ba:	697a      	ldr	r2, [r7, #20]
 80030bc:	4313      	orrs	r3, r2
 80030be:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P);
 80030c0:	693b      	ldr	r3, [r7, #16]
 80030c2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80030c6:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & TIM_CCER_CC4P);
 80030c8:	68bb      	ldr	r3, [r7, #8]
 80030ca:	031b      	lsls	r3, r3, #12
 80030cc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80030d0:	693a      	ldr	r2, [r7, #16]
 80030d2:	4313      	orrs	r3, r2
 80030d4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	697a      	ldr	r2, [r7, #20]
 80030da:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	693a      	ldr	r2, [r7, #16]
 80030e0:	621a      	str	r2, [r3, #32]
}
 80030e2:	bf00      	nop
 80030e4:	371c      	adds	r7, #28
 80030e6:	46bd      	mov	sp, r7
 80030e8:	bc80      	pop	{r7}
 80030ea:	4770      	bx	lr

080030ec <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80030ec:	b480      	push	{r7}
 80030ee:	b085      	sub	sp, #20
 80030f0:	af00      	add	r7, sp, #0
 80030f2:	6078      	str	r0, [r7, #4]
 80030f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	689b      	ldr	r3, [r3, #8]
 80030fa:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003102:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003104:	683a      	ldr	r2, [r7, #0]
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	4313      	orrs	r3, r2
 800310a:	f043 0307 	orr.w	r3, r3, #7
 800310e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	68fa      	ldr	r2, [r7, #12]
 8003114:	609a      	str	r2, [r3, #8]
}
 8003116:	bf00      	nop
 8003118:	3714      	adds	r7, #20
 800311a:	46bd      	mov	sp, r7
 800311c:	bc80      	pop	{r7}
 800311e:	4770      	bx	lr

08003120 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003120:	b480      	push	{r7}
 8003122:	b087      	sub	sp, #28
 8003124:	af00      	add	r7, sp, #0
 8003126:	60f8      	str	r0, [r7, #12]
 8003128:	60b9      	str	r1, [r7, #8]
 800312a:	607a      	str	r2, [r7, #4]
 800312c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	689b      	ldr	r3, [r3, #8]
 8003132:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003134:	697b      	ldr	r3, [r7, #20]
 8003136:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800313a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800313c:	683b      	ldr	r3, [r7, #0]
 800313e:	021a      	lsls	r2, r3, #8
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	431a      	orrs	r2, r3
 8003144:	68bb      	ldr	r3, [r7, #8]
 8003146:	4313      	orrs	r3, r2
 8003148:	697a      	ldr	r2, [r7, #20]
 800314a:	4313      	orrs	r3, r2
 800314c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	697a      	ldr	r2, [r7, #20]
 8003152:	609a      	str	r2, [r3, #8]
}
 8003154:	bf00      	nop
 8003156:	371c      	adds	r7, #28
 8003158:	46bd      	mov	sp, r7
 800315a:	bc80      	pop	{r7}
 800315c:	4770      	bx	lr

0800315e <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800315e:	b480      	push	{r7}
 8003160:	b087      	sub	sp, #28
 8003162:	af00      	add	r7, sp, #0
 8003164:	60f8      	str	r0, [r7, #12]
 8003166:	60b9      	str	r1, [r7, #8]
 8003168:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800316a:	68bb      	ldr	r3, [r7, #8]
 800316c:	f003 031f 	and.w	r3, r3, #31
 8003170:	2201      	movs	r2, #1
 8003172:	fa02 f303 	lsl.w	r3, r2, r3
 8003176:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	6a1a      	ldr	r2, [r3, #32]
 800317c:	697b      	ldr	r3, [r7, #20]
 800317e:	43db      	mvns	r3, r3
 8003180:	401a      	ands	r2, r3
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	6a1a      	ldr	r2, [r3, #32]
 800318a:	68bb      	ldr	r3, [r7, #8]
 800318c:	f003 031f 	and.w	r3, r3, #31
 8003190:	6879      	ldr	r1, [r7, #4]
 8003192:	fa01 f303 	lsl.w	r3, r1, r3
 8003196:	431a      	orrs	r2, r3
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	621a      	str	r2, [r3, #32]
}
 800319c:	bf00      	nop
 800319e:	371c      	adds	r7, #28
 80031a0:	46bd      	mov	sp, r7
 80031a2:	bc80      	pop	{r7}
 80031a4:	4770      	bx	lr
	...

080031a8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80031a8:	b480      	push	{r7}
 80031aa:	b085      	sub	sp, #20
 80031ac:	af00      	add	r7, sp, #0
 80031ae:	6078      	str	r0, [r7, #4]
 80031b0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80031b8:	2b01      	cmp	r3, #1
 80031ba:	d101      	bne.n	80031c0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80031bc:	2302      	movs	r3, #2
 80031be:	e046      	b.n	800324e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	2201      	movs	r2, #1
 80031c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	2202      	movs	r2, #2
 80031cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	685b      	ldr	r3, [r3, #4]
 80031d6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	689b      	ldr	r3, [r3, #8]
 80031de:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80031e6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80031e8:	683b      	ldr	r3, [r7, #0]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	68fa      	ldr	r2, [r7, #12]
 80031ee:	4313      	orrs	r3, r2
 80031f0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	68fa      	ldr	r2, [r7, #12]
 80031f8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	4a16      	ldr	r2, [pc, #88]	; (8003258 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003200:	4293      	cmp	r3, r2
 8003202:	d00e      	beq.n	8003222 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800320c:	d009      	beq.n	8003222 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	4a12      	ldr	r2, [pc, #72]	; (800325c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003214:	4293      	cmp	r3, r2
 8003216:	d004      	beq.n	8003222 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	4a10      	ldr	r2, [pc, #64]	; (8003260 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800321e:	4293      	cmp	r3, r2
 8003220:	d10c      	bne.n	800323c <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003222:	68bb      	ldr	r3, [r7, #8]
 8003224:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003228:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800322a:	683b      	ldr	r3, [r7, #0]
 800322c:	685b      	ldr	r3, [r3, #4]
 800322e:	68ba      	ldr	r2, [r7, #8]
 8003230:	4313      	orrs	r3, r2
 8003232:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	68ba      	ldr	r2, [r7, #8]
 800323a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	2201      	movs	r2, #1
 8003240:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	2200      	movs	r2, #0
 8003248:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800324c:	2300      	movs	r3, #0
}
 800324e:	4618      	mov	r0, r3
 8003250:	3714      	adds	r7, #20
 8003252:	46bd      	mov	sp, r7
 8003254:	bc80      	pop	{r7}
 8003256:	4770      	bx	lr
 8003258:	40012c00 	.word	0x40012c00
 800325c:	40000400 	.word	0x40000400
 8003260:	40000800 	.word	0x40000800

08003264 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003264:	b480      	push	{r7}
 8003266:	b085      	sub	sp, #20
 8003268:	af00      	add	r7, sp, #0
 800326a:	6078      	str	r0, [r7, #4]
 800326c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800326e:	2300      	movs	r3, #0
 8003270:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003278:	2b01      	cmp	r3, #1
 800327a:	d101      	bne.n	8003280 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800327c:	2302      	movs	r3, #2
 800327e:	e03d      	b.n	80032fc <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	2201      	movs	r2, #1
 8003284:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800328e:	683b      	ldr	r3, [r7, #0]
 8003290:	68db      	ldr	r3, [r3, #12]
 8003292:	4313      	orrs	r3, r2
 8003294:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800329c:	683b      	ldr	r3, [r7, #0]
 800329e:	689b      	ldr	r3, [r3, #8]
 80032a0:	4313      	orrs	r3, r2
 80032a2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80032aa:	683b      	ldr	r3, [r7, #0]
 80032ac:	685b      	ldr	r3, [r3, #4]
 80032ae:	4313      	orrs	r3, r2
 80032b0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80032b8:	683b      	ldr	r3, [r7, #0]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	4313      	orrs	r3, r2
 80032be:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80032c6:	683b      	ldr	r3, [r7, #0]
 80032c8:	691b      	ldr	r3, [r3, #16]
 80032ca:	4313      	orrs	r3, r2
 80032cc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80032d4:	683b      	ldr	r3, [r7, #0]
 80032d6:	695b      	ldr	r3, [r3, #20]
 80032d8:	4313      	orrs	r3, r2
 80032da:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80032e2:	683b      	ldr	r3, [r7, #0]
 80032e4:	69db      	ldr	r3, [r3, #28]
 80032e6:	4313      	orrs	r3, r2
 80032e8:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	68fa      	ldr	r2, [r7, #12]
 80032f0:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	2200      	movs	r2, #0
 80032f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80032fa:	2300      	movs	r3, #0
}
 80032fc:	4618      	mov	r0, r3
 80032fe:	3714      	adds	r7, #20
 8003300:	46bd      	mov	sp, r7
 8003302:	bc80      	pop	{r7}
 8003304:	4770      	bx	lr

08003306 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003306:	b480      	push	{r7}
 8003308:	b083      	sub	sp, #12
 800330a:	af00      	add	r7, sp, #0
 800330c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800330e:	bf00      	nop
 8003310:	370c      	adds	r7, #12
 8003312:	46bd      	mov	sp, r7
 8003314:	bc80      	pop	{r7}
 8003316:	4770      	bx	lr

08003318 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003318:	b480      	push	{r7}
 800331a:	b083      	sub	sp, #12
 800331c:	af00      	add	r7, sp, #0
 800331e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003320:	bf00      	nop
 8003322:	370c      	adds	r7, #12
 8003324:	46bd      	mov	sp, r7
 8003326:	bc80      	pop	{r7}
 8003328:	4770      	bx	lr

0800332a <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800332a:	b580      	push	{r7, lr}
 800332c:	b082      	sub	sp, #8
 800332e:	af00      	add	r7, sp, #0
 8003330:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	2b00      	cmp	r3, #0
 8003336:	d101      	bne.n	800333c <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003338:	2301      	movs	r3, #1
 800333a:	e03f      	b.n	80033bc <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003342:	b2db      	uxtb	r3, r3
 8003344:	2b00      	cmp	r3, #0
 8003346:	d106      	bne.n	8003356 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	2200      	movs	r2, #0
 800334c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003350:	6878      	ldr	r0, [r7, #4]
 8003352:	f7fd fb75 	bl	8000a40 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	2224      	movs	r2, #36	; 0x24
 800335a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	68da      	ldr	r2, [r3, #12]
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800336c:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800336e:	6878      	ldr	r0, [r7, #4]
 8003370:	f000 fc24 	bl	8003bbc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	691a      	ldr	r2, [r3, #16]
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003382:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	695a      	ldr	r2, [r3, #20]
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003392:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	68da      	ldr	r2, [r3, #12]
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80033a2:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	2200      	movs	r2, #0
 80033a8:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	2220      	movs	r2, #32
 80033ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	2220      	movs	r2, #32
 80033b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80033ba:	2300      	movs	r3, #0
}
 80033bc:	4618      	mov	r0, r3
 80033be:	3708      	adds	r7, #8
 80033c0:	46bd      	mov	sp, r7
 80033c2:	bd80      	pop	{r7, pc}

080033c4 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80033c4:	b580      	push	{r7, lr}
 80033c6:	b08a      	sub	sp, #40	; 0x28
 80033c8:	af02      	add	r7, sp, #8
 80033ca:	60f8      	str	r0, [r7, #12]
 80033cc:	60b9      	str	r1, [r7, #8]
 80033ce:	603b      	str	r3, [r7, #0]
 80033d0:	4613      	mov	r3, r2
 80033d2:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80033d4:	2300      	movs	r3, #0
 80033d6:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80033de:	b2db      	uxtb	r3, r3
 80033e0:	2b20      	cmp	r3, #32
 80033e2:	d17c      	bne.n	80034de <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80033e4:	68bb      	ldr	r3, [r7, #8]
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d002      	beq.n	80033f0 <HAL_UART_Transmit+0x2c>
 80033ea:	88fb      	ldrh	r3, [r7, #6]
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d101      	bne.n	80033f4 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80033f0:	2301      	movs	r3, #1
 80033f2:	e075      	b.n	80034e0 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80033fa:	2b01      	cmp	r3, #1
 80033fc:	d101      	bne.n	8003402 <HAL_UART_Transmit+0x3e>
 80033fe:	2302      	movs	r3, #2
 8003400:	e06e      	b.n	80034e0 <HAL_UART_Transmit+0x11c>
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	2201      	movs	r2, #1
 8003406:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	2200      	movs	r2, #0
 800340e:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	2221      	movs	r2, #33	; 0x21
 8003414:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003418:	f7fd fbf2 	bl	8000c00 <HAL_GetTick>
 800341c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	88fa      	ldrh	r2, [r7, #6]
 8003422:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	88fa      	ldrh	r2, [r7, #6]
 8003428:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	689b      	ldr	r3, [r3, #8]
 800342e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003432:	d108      	bne.n	8003446 <HAL_UART_Transmit+0x82>
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	691b      	ldr	r3, [r3, #16]
 8003438:	2b00      	cmp	r3, #0
 800343a:	d104      	bne.n	8003446 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800343c:	2300      	movs	r3, #0
 800343e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003440:	68bb      	ldr	r3, [r7, #8]
 8003442:	61bb      	str	r3, [r7, #24]
 8003444:	e003      	b.n	800344e <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003446:	68bb      	ldr	r3, [r7, #8]
 8003448:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800344a:	2300      	movs	r3, #0
 800344c:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	2200      	movs	r2, #0
 8003452:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003456:	e02a      	b.n	80034ae <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003458:	683b      	ldr	r3, [r7, #0]
 800345a:	9300      	str	r3, [sp, #0]
 800345c:	697b      	ldr	r3, [r7, #20]
 800345e:	2200      	movs	r2, #0
 8003460:	2180      	movs	r1, #128	; 0x80
 8003462:	68f8      	ldr	r0, [r7, #12]
 8003464:	f000 fa10 	bl	8003888 <UART_WaitOnFlagUntilTimeout>
 8003468:	4603      	mov	r3, r0
 800346a:	2b00      	cmp	r3, #0
 800346c:	d001      	beq.n	8003472 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800346e:	2303      	movs	r3, #3
 8003470:	e036      	b.n	80034e0 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003472:	69fb      	ldr	r3, [r7, #28]
 8003474:	2b00      	cmp	r3, #0
 8003476:	d10b      	bne.n	8003490 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003478:	69bb      	ldr	r3, [r7, #24]
 800347a:	881b      	ldrh	r3, [r3, #0]
 800347c:	461a      	mov	r2, r3
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003486:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003488:	69bb      	ldr	r3, [r7, #24]
 800348a:	3302      	adds	r3, #2
 800348c:	61bb      	str	r3, [r7, #24]
 800348e:	e007      	b.n	80034a0 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003490:	69fb      	ldr	r3, [r7, #28]
 8003492:	781a      	ldrb	r2, [r3, #0]
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800349a:	69fb      	ldr	r3, [r7, #28]
 800349c:	3301      	adds	r3, #1
 800349e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80034a4:	b29b      	uxth	r3, r3
 80034a6:	3b01      	subs	r3, #1
 80034a8:	b29a      	uxth	r2, r3
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80034b2:	b29b      	uxth	r3, r3
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d1cf      	bne.n	8003458 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80034b8:	683b      	ldr	r3, [r7, #0]
 80034ba:	9300      	str	r3, [sp, #0]
 80034bc:	697b      	ldr	r3, [r7, #20]
 80034be:	2200      	movs	r2, #0
 80034c0:	2140      	movs	r1, #64	; 0x40
 80034c2:	68f8      	ldr	r0, [r7, #12]
 80034c4:	f000 f9e0 	bl	8003888 <UART_WaitOnFlagUntilTimeout>
 80034c8:	4603      	mov	r3, r0
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d001      	beq.n	80034d2 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80034ce:	2303      	movs	r3, #3
 80034d0:	e006      	b.n	80034e0 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	2220      	movs	r2, #32
 80034d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80034da:	2300      	movs	r3, #0
 80034dc:	e000      	b.n	80034e0 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80034de:	2302      	movs	r3, #2
  }
}
 80034e0:	4618      	mov	r0, r3
 80034e2:	3720      	adds	r7, #32
 80034e4:	46bd      	mov	sp, r7
 80034e6:	bd80      	pop	{r7, pc}

080034e8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80034e8:	b580      	push	{r7, lr}
 80034ea:	b08a      	sub	sp, #40	; 0x28
 80034ec:	af00      	add	r7, sp, #0
 80034ee:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	68db      	ldr	r3, [r3, #12]
 80034fe:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	695b      	ldr	r3, [r3, #20]
 8003506:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8003508:	2300      	movs	r3, #0
 800350a:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 800350c:	2300      	movs	r3, #0
 800350e:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003510:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003512:	f003 030f 	and.w	r3, r3, #15
 8003516:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8003518:	69bb      	ldr	r3, [r7, #24]
 800351a:	2b00      	cmp	r3, #0
 800351c:	d10d      	bne.n	800353a <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800351e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003520:	f003 0320 	and.w	r3, r3, #32
 8003524:	2b00      	cmp	r3, #0
 8003526:	d008      	beq.n	800353a <HAL_UART_IRQHandler+0x52>
 8003528:	6a3b      	ldr	r3, [r7, #32]
 800352a:	f003 0320 	and.w	r3, r3, #32
 800352e:	2b00      	cmp	r3, #0
 8003530:	d003      	beq.n	800353a <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8003532:	6878      	ldr	r0, [r7, #4]
 8003534:	f000 fa99 	bl	8003a6a <UART_Receive_IT>
      return;
 8003538:	e17b      	b.n	8003832 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800353a:	69bb      	ldr	r3, [r7, #24]
 800353c:	2b00      	cmp	r3, #0
 800353e:	f000 80b1 	beq.w	80036a4 <HAL_UART_IRQHandler+0x1bc>
 8003542:	69fb      	ldr	r3, [r7, #28]
 8003544:	f003 0301 	and.w	r3, r3, #1
 8003548:	2b00      	cmp	r3, #0
 800354a:	d105      	bne.n	8003558 <HAL_UART_IRQHandler+0x70>
 800354c:	6a3b      	ldr	r3, [r7, #32]
 800354e:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003552:	2b00      	cmp	r3, #0
 8003554:	f000 80a6 	beq.w	80036a4 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003558:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800355a:	f003 0301 	and.w	r3, r3, #1
 800355e:	2b00      	cmp	r3, #0
 8003560:	d00a      	beq.n	8003578 <HAL_UART_IRQHandler+0x90>
 8003562:	6a3b      	ldr	r3, [r7, #32]
 8003564:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003568:	2b00      	cmp	r3, #0
 800356a:	d005      	beq.n	8003578 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003570:	f043 0201 	orr.w	r2, r3, #1
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003578:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800357a:	f003 0304 	and.w	r3, r3, #4
 800357e:	2b00      	cmp	r3, #0
 8003580:	d00a      	beq.n	8003598 <HAL_UART_IRQHandler+0xb0>
 8003582:	69fb      	ldr	r3, [r7, #28]
 8003584:	f003 0301 	and.w	r3, r3, #1
 8003588:	2b00      	cmp	r3, #0
 800358a:	d005      	beq.n	8003598 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003590:	f043 0202 	orr.w	r2, r3, #2
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003598:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800359a:	f003 0302 	and.w	r3, r3, #2
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d00a      	beq.n	80035b8 <HAL_UART_IRQHandler+0xd0>
 80035a2:	69fb      	ldr	r3, [r7, #28]
 80035a4:	f003 0301 	and.w	r3, r3, #1
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d005      	beq.n	80035b8 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035b0:	f043 0204 	orr.w	r2, r3, #4
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 80035b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035ba:	f003 0308 	and.w	r3, r3, #8
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d00f      	beq.n	80035e2 <HAL_UART_IRQHandler+0xfa>
 80035c2:	6a3b      	ldr	r3, [r7, #32]
 80035c4:	f003 0320 	and.w	r3, r3, #32
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d104      	bne.n	80035d6 <HAL_UART_IRQHandler+0xee>
 80035cc:	69fb      	ldr	r3, [r7, #28]
 80035ce:	f003 0301 	and.w	r3, r3, #1
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d005      	beq.n	80035e2 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035da:	f043 0208 	orr.w	r2, r3, #8
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	f000 811e 	beq.w	8003828 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80035ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035ee:	f003 0320 	and.w	r3, r3, #32
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d007      	beq.n	8003606 <HAL_UART_IRQHandler+0x11e>
 80035f6:	6a3b      	ldr	r3, [r7, #32]
 80035f8:	f003 0320 	and.w	r3, r3, #32
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d002      	beq.n	8003606 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8003600:	6878      	ldr	r0, [r7, #4]
 8003602:	f000 fa32 	bl	8003a6a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	695b      	ldr	r3, [r3, #20]
 800360c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003610:	2b00      	cmp	r3, #0
 8003612:	bf14      	ite	ne
 8003614:	2301      	movne	r3, #1
 8003616:	2300      	moveq	r3, #0
 8003618:	b2db      	uxtb	r3, r3
 800361a:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003620:	f003 0308 	and.w	r3, r3, #8
 8003624:	2b00      	cmp	r3, #0
 8003626:	d102      	bne.n	800362e <HAL_UART_IRQHandler+0x146>
 8003628:	697b      	ldr	r3, [r7, #20]
 800362a:	2b00      	cmp	r3, #0
 800362c:	d031      	beq.n	8003692 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800362e:	6878      	ldr	r0, [r7, #4]
 8003630:	f000 f974 	bl	800391c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	695b      	ldr	r3, [r3, #20]
 800363a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800363e:	2b00      	cmp	r3, #0
 8003640:	d023      	beq.n	800368a <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	695a      	ldr	r2, [r3, #20]
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003650:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003656:	2b00      	cmp	r3, #0
 8003658:	d013      	beq.n	8003682 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800365e:	4a76      	ldr	r2, [pc, #472]	; (8003838 <HAL_UART_IRQHandler+0x350>)
 8003660:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003666:	4618      	mov	r0, r3
 8003668:	f7fd fc40 	bl	8000eec <HAL_DMA_Abort_IT>
 800366c:	4603      	mov	r3, r0
 800366e:	2b00      	cmp	r3, #0
 8003670:	d016      	beq.n	80036a0 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003676:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003678:	687a      	ldr	r2, [r7, #4]
 800367a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800367c:	4610      	mov	r0, r2
 800367e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003680:	e00e      	b.n	80036a0 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003682:	6878      	ldr	r0, [r7, #4]
 8003684:	f000 f8ec 	bl	8003860 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003688:	e00a      	b.n	80036a0 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800368a:	6878      	ldr	r0, [r7, #4]
 800368c:	f000 f8e8 	bl	8003860 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003690:	e006      	b.n	80036a0 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003692:	6878      	ldr	r0, [r7, #4]
 8003694:	f000 f8e4 	bl	8003860 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	2200      	movs	r2, #0
 800369c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800369e:	e0c3      	b.n	8003828 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80036a0:	bf00      	nop
    return;
 80036a2:	e0c1      	b.n	8003828 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036a8:	2b01      	cmp	r3, #1
 80036aa:	f040 80a1 	bne.w	80037f0 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 80036ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036b0:	f003 0310 	and.w	r3, r3, #16
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	f000 809b 	beq.w	80037f0 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 80036ba:	6a3b      	ldr	r3, [r7, #32]
 80036bc:	f003 0310 	and.w	r3, r3, #16
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	f000 8095 	beq.w	80037f0 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80036c6:	2300      	movs	r3, #0
 80036c8:	60fb      	str	r3, [r7, #12]
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	60fb      	str	r3, [r7, #12]
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	685b      	ldr	r3, [r3, #4]
 80036d8:	60fb      	str	r3, [r7, #12]
 80036da:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	695b      	ldr	r3, [r3, #20]
 80036e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d04e      	beq.n	8003788 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	685b      	ldr	r3, [r3, #4]
 80036f2:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 80036f4:	8a3b      	ldrh	r3, [r7, #16]
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	f000 8098 	beq.w	800382c <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003700:	8a3a      	ldrh	r2, [r7, #16]
 8003702:	429a      	cmp	r2, r3
 8003704:	f080 8092 	bcs.w	800382c <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	8a3a      	ldrh	r2, [r7, #16]
 800370c:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003712:	699b      	ldr	r3, [r3, #24]
 8003714:	2b20      	cmp	r3, #32
 8003716:	d02b      	beq.n	8003770 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	68da      	ldr	r2, [r3, #12]
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003726:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	695a      	ldr	r2, [r3, #20]
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	f022 0201 	bic.w	r2, r2, #1
 8003736:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	695a      	ldr	r2, [r3, #20]
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003746:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	2220      	movs	r2, #32
 800374c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	2200      	movs	r2, #0
 8003754:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	68da      	ldr	r2, [r3, #12]
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	f022 0210 	bic.w	r2, r2, #16
 8003764:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800376a:	4618      	mov	r0, r3
 800376c:	f7fd fb83 	bl	8000e76 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003778:	b29b      	uxth	r3, r3
 800377a:	1ad3      	subs	r3, r2, r3
 800377c:	b29b      	uxth	r3, r3
 800377e:	4619      	mov	r1, r3
 8003780:	6878      	ldr	r0, [r7, #4]
 8003782:	f000 f876 	bl	8003872 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8003786:	e051      	b.n	800382c <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003790:	b29b      	uxth	r3, r3
 8003792:	1ad3      	subs	r3, r2, r3
 8003794:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800379a:	b29b      	uxth	r3, r3
 800379c:	2b00      	cmp	r3, #0
 800379e:	d047      	beq.n	8003830 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 80037a0:	8a7b      	ldrh	r3, [r7, #18]
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d044      	beq.n	8003830 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	68da      	ldr	r2, [r3, #12]
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80037b4:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	695a      	ldr	r2, [r3, #20]
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	f022 0201 	bic.w	r2, r2, #1
 80037c4:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	2220      	movs	r2, #32
 80037ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	2200      	movs	r2, #0
 80037d2:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	68da      	ldr	r2, [r3, #12]
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	f022 0210 	bic.w	r2, r2, #16
 80037e2:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80037e4:	8a7b      	ldrh	r3, [r7, #18]
 80037e6:	4619      	mov	r1, r3
 80037e8:	6878      	ldr	r0, [r7, #4]
 80037ea:	f000 f842 	bl	8003872 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80037ee:	e01f      	b.n	8003830 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80037f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d008      	beq.n	800380c <HAL_UART_IRQHandler+0x324>
 80037fa:	6a3b      	ldr	r3, [r7, #32]
 80037fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003800:	2b00      	cmp	r3, #0
 8003802:	d003      	beq.n	800380c <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8003804:	6878      	ldr	r0, [r7, #4]
 8003806:	f000 f8c9 	bl	800399c <UART_Transmit_IT>
    return;
 800380a:	e012      	b.n	8003832 <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800380c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800380e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003812:	2b00      	cmp	r3, #0
 8003814:	d00d      	beq.n	8003832 <HAL_UART_IRQHandler+0x34a>
 8003816:	6a3b      	ldr	r3, [r7, #32]
 8003818:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800381c:	2b00      	cmp	r3, #0
 800381e:	d008      	beq.n	8003832 <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 8003820:	6878      	ldr	r0, [r7, #4]
 8003822:	f000 f90a 	bl	8003a3a <UART_EndTransmit_IT>
    return;
 8003826:	e004      	b.n	8003832 <HAL_UART_IRQHandler+0x34a>
    return;
 8003828:	bf00      	nop
 800382a:	e002      	b.n	8003832 <HAL_UART_IRQHandler+0x34a>
      return;
 800382c:	bf00      	nop
 800382e:	e000      	b.n	8003832 <HAL_UART_IRQHandler+0x34a>
      return;
 8003830:	bf00      	nop
  }
}
 8003832:	3728      	adds	r7, #40	; 0x28
 8003834:	46bd      	mov	sp, r7
 8003836:	bd80      	pop	{r7, pc}
 8003838:	08003975 	.word	0x08003975

0800383c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800383c:	b480      	push	{r7}
 800383e:	b083      	sub	sp, #12
 8003840:	af00      	add	r7, sp, #0
 8003842:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003844:	bf00      	nop
 8003846:	370c      	adds	r7, #12
 8003848:	46bd      	mov	sp, r7
 800384a:	bc80      	pop	{r7}
 800384c:	4770      	bx	lr

0800384e <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800384e:	b480      	push	{r7}
 8003850:	b083      	sub	sp, #12
 8003852:	af00      	add	r7, sp, #0
 8003854:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8003856:	bf00      	nop
 8003858:	370c      	adds	r7, #12
 800385a:	46bd      	mov	sp, r7
 800385c:	bc80      	pop	{r7}
 800385e:	4770      	bx	lr

08003860 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003860:	b480      	push	{r7}
 8003862:	b083      	sub	sp, #12
 8003864:	af00      	add	r7, sp, #0
 8003866:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003868:	bf00      	nop
 800386a:	370c      	adds	r7, #12
 800386c:	46bd      	mov	sp, r7
 800386e:	bc80      	pop	{r7}
 8003870:	4770      	bx	lr

08003872 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003872:	b480      	push	{r7}
 8003874:	b083      	sub	sp, #12
 8003876:	af00      	add	r7, sp, #0
 8003878:	6078      	str	r0, [r7, #4]
 800387a:	460b      	mov	r3, r1
 800387c:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800387e:	bf00      	nop
 8003880:	370c      	adds	r7, #12
 8003882:	46bd      	mov	sp, r7
 8003884:	bc80      	pop	{r7}
 8003886:	4770      	bx	lr

08003888 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8003888:	b580      	push	{r7, lr}
 800388a:	b084      	sub	sp, #16
 800388c:	af00      	add	r7, sp, #0
 800388e:	60f8      	str	r0, [r7, #12]
 8003890:	60b9      	str	r1, [r7, #8]
 8003892:	603b      	str	r3, [r7, #0]
 8003894:	4613      	mov	r3, r2
 8003896:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003898:	e02c      	b.n	80038f4 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800389a:	69bb      	ldr	r3, [r7, #24]
 800389c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038a0:	d028      	beq.n	80038f4 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80038a2:	69bb      	ldr	r3, [r7, #24]
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d007      	beq.n	80038b8 <UART_WaitOnFlagUntilTimeout+0x30>
 80038a8:	f7fd f9aa 	bl	8000c00 <HAL_GetTick>
 80038ac:	4602      	mov	r2, r0
 80038ae:	683b      	ldr	r3, [r7, #0]
 80038b0:	1ad3      	subs	r3, r2, r3
 80038b2:	69ba      	ldr	r2, [r7, #24]
 80038b4:	429a      	cmp	r2, r3
 80038b6:	d21d      	bcs.n	80038f4 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	68da      	ldr	r2, [r3, #12]
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80038c6:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	695a      	ldr	r2, [r3, #20]
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	f022 0201 	bic.w	r2, r2, #1
 80038d6:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	2220      	movs	r2, #32
 80038dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	2220      	movs	r2, #32
 80038e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	2200      	movs	r2, #0
 80038ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80038f0:	2303      	movs	r3, #3
 80038f2:	e00f      	b.n	8003914 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	681a      	ldr	r2, [r3, #0]
 80038fa:	68bb      	ldr	r3, [r7, #8]
 80038fc:	4013      	ands	r3, r2
 80038fe:	68ba      	ldr	r2, [r7, #8]
 8003900:	429a      	cmp	r2, r3
 8003902:	bf0c      	ite	eq
 8003904:	2301      	moveq	r3, #1
 8003906:	2300      	movne	r3, #0
 8003908:	b2db      	uxtb	r3, r3
 800390a:	461a      	mov	r2, r3
 800390c:	79fb      	ldrb	r3, [r7, #7]
 800390e:	429a      	cmp	r2, r3
 8003910:	d0c3      	beq.n	800389a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003912:	2300      	movs	r3, #0
}
 8003914:	4618      	mov	r0, r3
 8003916:	3710      	adds	r7, #16
 8003918:	46bd      	mov	sp, r7
 800391a:	bd80      	pop	{r7, pc}

0800391c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800391c:	b480      	push	{r7}
 800391e:	b083      	sub	sp, #12
 8003920:	af00      	add	r7, sp, #0
 8003922:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	68da      	ldr	r2, [r3, #12]
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003932:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	695a      	ldr	r2, [r3, #20]
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	f022 0201 	bic.w	r2, r2, #1
 8003942:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003948:	2b01      	cmp	r3, #1
 800394a:	d107      	bne.n	800395c <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	68da      	ldr	r2, [r3, #12]
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	f022 0210 	bic.w	r2, r2, #16
 800395a:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	2220      	movs	r2, #32
 8003960:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	2200      	movs	r2, #0
 8003968:	631a      	str	r2, [r3, #48]	; 0x30
}
 800396a:	bf00      	nop
 800396c:	370c      	adds	r7, #12
 800396e:	46bd      	mov	sp, r7
 8003970:	bc80      	pop	{r7}
 8003972:	4770      	bx	lr

08003974 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003974:	b580      	push	{r7, lr}
 8003976:	b084      	sub	sp, #16
 8003978:	af00      	add	r7, sp, #0
 800397a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003980:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	2200      	movs	r2, #0
 8003986:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	2200      	movs	r2, #0
 800398c:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800398e:	68f8      	ldr	r0, [r7, #12]
 8003990:	f7ff ff66 	bl	8003860 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003994:	bf00      	nop
 8003996:	3710      	adds	r7, #16
 8003998:	46bd      	mov	sp, r7
 800399a:	bd80      	pop	{r7, pc}

0800399c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800399c:	b480      	push	{r7}
 800399e:	b085      	sub	sp, #20
 80039a0:	af00      	add	r7, sp, #0
 80039a2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80039aa:	b2db      	uxtb	r3, r3
 80039ac:	2b21      	cmp	r3, #33	; 0x21
 80039ae:	d13e      	bne.n	8003a2e <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	689b      	ldr	r3, [r3, #8]
 80039b4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80039b8:	d114      	bne.n	80039e4 <UART_Transmit_IT+0x48>
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	691b      	ldr	r3, [r3, #16]
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d110      	bne.n	80039e4 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	6a1b      	ldr	r3, [r3, #32]
 80039c6:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	881b      	ldrh	r3, [r3, #0]
 80039cc:	461a      	mov	r2, r3
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80039d6:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	6a1b      	ldr	r3, [r3, #32]
 80039dc:	1c9a      	adds	r2, r3, #2
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	621a      	str	r2, [r3, #32]
 80039e2:	e008      	b.n	80039f6 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	6a1b      	ldr	r3, [r3, #32]
 80039e8:	1c59      	adds	r1, r3, #1
 80039ea:	687a      	ldr	r2, [r7, #4]
 80039ec:	6211      	str	r1, [r2, #32]
 80039ee:	781a      	ldrb	r2, [r3, #0]
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80039fa:	b29b      	uxth	r3, r3
 80039fc:	3b01      	subs	r3, #1
 80039fe:	b29b      	uxth	r3, r3
 8003a00:	687a      	ldr	r2, [r7, #4]
 8003a02:	4619      	mov	r1, r3
 8003a04:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d10f      	bne.n	8003a2a <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	68da      	ldr	r2, [r3, #12]
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003a18:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	68da      	ldr	r2, [r3, #12]
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003a28:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003a2a:	2300      	movs	r3, #0
 8003a2c:	e000      	b.n	8003a30 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003a2e:	2302      	movs	r3, #2
  }
}
 8003a30:	4618      	mov	r0, r3
 8003a32:	3714      	adds	r7, #20
 8003a34:	46bd      	mov	sp, r7
 8003a36:	bc80      	pop	{r7}
 8003a38:	4770      	bx	lr

08003a3a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003a3a:	b580      	push	{r7, lr}
 8003a3c:	b082      	sub	sp, #8
 8003a3e:	af00      	add	r7, sp, #0
 8003a40:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	68da      	ldr	r2, [r3, #12]
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003a50:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	2220      	movs	r2, #32
 8003a56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003a5a:	6878      	ldr	r0, [r7, #4]
 8003a5c:	f7ff feee 	bl	800383c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003a60:	2300      	movs	r3, #0
}
 8003a62:	4618      	mov	r0, r3
 8003a64:	3708      	adds	r7, #8
 8003a66:	46bd      	mov	sp, r7
 8003a68:	bd80      	pop	{r7, pc}

08003a6a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003a6a:	b580      	push	{r7, lr}
 8003a6c:	b086      	sub	sp, #24
 8003a6e:	af00      	add	r7, sp, #0
 8003a70:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003a78:	b2db      	uxtb	r3, r3
 8003a7a:	2b22      	cmp	r3, #34	; 0x22
 8003a7c:	f040 8099 	bne.w	8003bb2 <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	689b      	ldr	r3, [r3, #8]
 8003a84:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a88:	d117      	bne.n	8003aba <UART_Receive_IT+0x50>
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	691b      	ldr	r3, [r3, #16]
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d113      	bne.n	8003aba <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003a92:	2300      	movs	r3, #0
 8003a94:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a9a:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	685b      	ldr	r3, [r3, #4]
 8003aa2:	b29b      	uxth	r3, r3
 8003aa4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003aa8:	b29a      	uxth	r2, r3
 8003aaa:	693b      	ldr	r3, [r7, #16]
 8003aac:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ab2:	1c9a      	adds	r2, r3, #2
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	629a      	str	r2, [r3, #40]	; 0x28
 8003ab8:	e026      	b.n	8003b08 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003abe:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8003ac0:	2300      	movs	r3, #0
 8003ac2:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	689b      	ldr	r3, [r3, #8]
 8003ac8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003acc:	d007      	beq.n	8003ade <UART_Receive_IT+0x74>
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	689b      	ldr	r3, [r3, #8]
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d10a      	bne.n	8003aec <UART_Receive_IT+0x82>
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	691b      	ldr	r3, [r3, #16]
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d106      	bne.n	8003aec <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	685b      	ldr	r3, [r3, #4]
 8003ae4:	b2da      	uxtb	r2, r3
 8003ae6:	697b      	ldr	r3, [r7, #20]
 8003ae8:	701a      	strb	r2, [r3, #0]
 8003aea:	e008      	b.n	8003afe <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	685b      	ldr	r3, [r3, #4]
 8003af2:	b2db      	uxtb	r3, r3
 8003af4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003af8:	b2da      	uxtb	r2, r3
 8003afa:	697b      	ldr	r3, [r7, #20]
 8003afc:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b02:	1c5a      	adds	r2, r3, #1
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003b0c:	b29b      	uxth	r3, r3
 8003b0e:	3b01      	subs	r3, #1
 8003b10:	b29b      	uxth	r3, r3
 8003b12:	687a      	ldr	r2, [r7, #4]
 8003b14:	4619      	mov	r1, r3
 8003b16:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d148      	bne.n	8003bae <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	68da      	ldr	r2, [r3, #12]
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	f022 0220 	bic.w	r2, r2, #32
 8003b2a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	68da      	ldr	r2, [r3, #12]
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003b3a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	695a      	ldr	r2, [r3, #20]
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	f022 0201 	bic.w	r2, r2, #1
 8003b4a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	2220      	movs	r2, #32
 8003b50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b58:	2b01      	cmp	r3, #1
 8003b5a:	d123      	bne.n	8003ba4 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	2200      	movs	r2, #0
 8003b60:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	68da      	ldr	r2, [r3, #12]
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	f022 0210 	bic.w	r2, r2, #16
 8003b70:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	f003 0310 	and.w	r3, r3, #16
 8003b7c:	2b10      	cmp	r3, #16
 8003b7e:	d10a      	bne.n	8003b96 <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003b80:	2300      	movs	r3, #0
 8003b82:	60fb      	str	r3, [r7, #12]
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	60fb      	str	r3, [r7, #12]
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	685b      	ldr	r3, [r3, #4]
 8003b92:	60fb      	str	r3, [r7, #12]
 8003b94:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003b9a:	4619      	mov	r1, r3
 8003b9c:	6878      	ldr	r0, [r7, #4]
 8003b9e:	f7ff fe68 	bl	8003872 <HAL_UARTEx_RxEventCallback>
 8003ba2:	e002      	b.n	8003baa <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8003ba4:	6878      	ldr	r0, [r7, #4]
 8003ba6:	f7ff fe52 	bl	800384e <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003baa:	2300      	movs	r3, #0
 8003bac:	e002      	b.n	8003bb4 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 8003bae:	2300      	movs	r3, #0
 8003bb0:	e000      	b.n	8003bb4 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8003bb2:	2302      	movs	r3, #2
  }
}
 8003bb4:	4618      	mov	r0, r3
 8003bb6:	3718      	adds	r7, #24
 8003bb8:	46bd      	mov	sp, r7
 8003bba:	bd80      	pop	{r7, pc}

08003bbc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003bbc:	b580      	push	{r7, lr}
 8003bbe:	b084      	sub	sp, #16
 8003bc0:	af00      	add	r7, sp, #0
 8003bc2:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	691b      	ldr	r3, [r3, #16]
 8003bca:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	68da      	ldr	r2, [r3, #12]
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	430a      	orrs	r2, r1
 8003bd8:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	689a      	ldr	r2, [r3, #8]
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	691b      	ldr	r3, [r3, #16]
 8003be2:	431a      	orrs	r2, r3
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	695b      	ldr	r3, [r3, #20]
 8003be8:	4313      	orrs	r3, r2
 8003bea:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	68db      	ldr	r3, [r3, #12]
 8003bf2:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8003bf6:	f023 030c 	bic.w	r3, r3, #12
 8003bfa:	687a      	ldr	r2, [r7, #4]
 8003bfc:	6812      	ldr	r2, [r2, #0]
 8003bfe:	68b9      	ldr	r1, [r7, #8]
 8003c00:	430b      	orrs	r3, r1
 8003c02:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	695b      	ldr	r3, [r3, #20]
 8003c0a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	699a      	ldr	r2, [r3, #24]
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	430a      	orrs	r2, r1
 8003c18:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	4a2c      	ldr	r2, [pc, #176]	; (8003cd0 <UART_SetConfig+0x114>)
 8003c20:	4293      	cmp	r3, r2
 8003c22:	d103      	bne.n	8003c2c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003c24:	f7fd ff94 	bl	8001b50 <HAL_RCC_GetPCLK2Freq>
 8003c28:	60f8      	str	r0, [r7, #12]
 8003c2a:	e002      	b.n	8003c32 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003c2c:	f7fd ff7c 	bl	8001b28 <HAL_RCC_GetPCLK1Freq>
 8003c30:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003c32:	68fa      	ldr	r2, [r7, #12]
 8003c34:	4613      	mov	r3, r2
 8003c36:	009b      	lsls	r3, r3, #2
 8003c38:	4413      	add	r3, r2
 8003c3a:	009a      	lsls	r2, r3, #2
 8003c3c:	441a      	add	r2, r3
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	685b      	ldr	r3, [r3, #4]
 8003c42:	009b      	lsls	r3, r3, #2
 8003c44:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c48:	4a22      	ldr	r2, [pc, #136]	; (8003cd4 <UART_SetConfig+0x118>)
 8003c4a:	fba2 2303 	umull	r2, r3, r2, r3
 8003c4e:	095b      	lsrs	r3, r3, #5
 8003c50:	0119      	lsls	r1, r3, #4
 8003c52:	68fa      	ldr	r2, [r7, #12]
 8003c54:	4613      	mov	r3, r2
 8003c56:	009b      	lsls	r3, r3, #2
 8003c58:	4413      	add	r3, r2
 8003c5a:	009a      	lsls	r2, r3, #2
 8003c5c:	441a      	add	r2, r3
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	685b      	ldr	r3, [r3, #4]
 8003c62:	009b      	lsls	r3, r3, #2
 8003c64:	fbb2 f2f3 	udiv	r2, r2, r3
 8003c68:	4b1a      	ldr	r3, [pc, #104]	; (8003cd4 <UART_SetConfig+0x118>)
 8003c6a:	fba3 0302 	umull	r0, r3, r3, r2
 8003c6e:	095b      	lsrs	r3, r3, #5
 8003c70:	2064      	movs	r0, #100	; 0x64
 8003c72:	fb00 f303 	mul.w	r3, r0, r3
 8003c76:	1ad3      	subs	r3, r2, r3
 8003c78:	011b      	lsls	r3, r3, #4
 8003c7a:	3332      	adds	r3, #50	; 0x32
 8003c7c:	4a15      	ldr	r2, [pc, #84]	; (8003cd4 <UART_SetConfig+0x118>)
 8003c7e:	fba2 2303 	umull	r2, r3, r2, r3
 8003c82:	095b      	lsrs	r3, r3, #5
 8003c84:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003c88:	4419      	add	r1, r3
 8003c8a:	68fa      	ldr	r2, [r7, #12]
 8003c8c:	4613      	mov	r3, r2
 8003c8e:	009b      	lsls	r3, r3, #2
 8003c90:	4413      	add	r3, r2
 8003c92:	009a      	lsls	r2, r3, #2
 8003c94:	441a      	add	r2, r3
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	685b      	ldr	r3, [r3, #4]
 8003c9a:	009b      	lsls	r3, r3, #2
 8003c9c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003ca0:	4b0c      	ldr	r3, [pc, #48]	; (8003cd4 <UART_SetConfig+0x118>)
 8003ca2:	fba3 0302 	umull	r0, r3, r3, r2
 8003ca6:	095b      	lsrs	r3, r3, #5
 8003ca8:	2064      	movs	r0, #100	; 0x64
 8003caa:	fb00 f303 	mul.w	r3, r0, r3
 8003cae:	1ad3      	subs	r3, r2, r3
 8003cb0:	011b      	lsls	r3, r3, #4
 8003cb2:	3332      	adds	r3, #50	; 0x32
 8003cb4:	4a07      	ldr	r2, [pc, #28]	; (8003cd4 <UART_SetConfig+0x118>)
 8003cb6:	fba2 2303 	umull	r2, r3, r2, r3
 8003cba:	095b      	lsrs	r3, r3, #5
 8003cbc:	f003 020f 	and.w	r2, r3, #15
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	440a      	add	r2, r1
 8003cc6:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003cc8:	bf00      	nop
 8003cca:	3710      	adds	r7, #16
 8003ccc:	46bd      	mov	sp, r7
 8003cce:	bd80      	pop	{r7, pc}
 8003cd0:	40013800 	.word	0x40013800
 8003cd4:	51eb851f 	.word	0x51eb851f

08003cd8 <__errno>:
 8003cd8:	4b01      	ldr	r3, [pc, #4]	; (8003ce0 <__errno+0x8>)
 8003cda:	6818      	ldr	r0, [r3, #0]
 8003cdc:	4770      	bx	lr
 8003cde:	bf00      	nop
 8003ce0:	2000000c 	.word	0x2000000c

08003ce4 <__libc_init_array>:
 8003ce4:	b570      	push	{r4, r5, r6, lr}
 8003ce6:	2600      	movs	r6, #0
 8003ce8:	4d0c      	ldr	r5, [pc, #48]	; (8003d1c <__libc_init_array+0x38>)
 8003cea:	4c0d      	ldr	r4, [pc, #52]	; (8003d20 <__libc_init_array+0x3c>)
 8003cec:	1b64      	subs	r4, r4, r5
 8003cee:	10a4      	asrs	r4, r4, #2
 8003cf0:	42a6      	cmp	r6, r4
 8003cf2:	d109      	bne.n	8003d08 <__libc_init_array+0x24>
 8003cf4:	f000 ffb6 	bl	8004c64 <_init>
 8003cf8:	2600      	movs	r6, #0
 8003cfa:	4d0a      	ldr	r5, [pc, #40]	; (8003d24 <__libc_init_array+0x40>)
 8003cfc:	4c0a      	ldr	r4, [pc, #40]	; (8003d28 <__libc_init_array+0x44>)
 8003cfe:	1b64      	subs	r4, r4, r5
 8003d00:	10a4      	asrs	r4, r4, #2
 8003d02:	42a6      	cmp	r6, r4
 8003d04:	d105      	bne.n	8003d12 <__libc_init_array+0x2e>
 8003d06:	bd70      	pop	{r4, r5, r6, pc}
 8003d08:	f855 3b04 	ldr.w	r3, [r5], #4
 8003d0c:	4798      	blx	r3
 8003d0e:	3601      	adds	r6, #1
 8003d10:	e7ee      	b.n	8003cf0 <__libc_init_array+0xc>
 8003d12:	f855 3b04 	ldr.w	r3, [r5], #4
 8003d16:	4798      	blx	r3
 8003d18:	3601      	adds	r6, #1
 8003d1a:	e7f2      	b.n	8003d02 <__libc_init_array+0x1e>
 8003d1c:	08004d54 	.word	0x08004d54
 8003d20:	08004d54 	.word	0x08004d54
 8003d24:	08004d54 	.word	0x08004d54
 8003d28:	08004d58 	.word	0x08004d58

08003d2c <memset>:
 8003d2c:	4603      	mov	r3, r0
 8003d2e:	4402      	add	r2, r0
 8003d30:	4293      	cmp	r3, r2
 8003d32:	d100      	bne.n	8003d36 <memset+0xa>
 8003d34:	4770      	bx	lr
 8003d36:	f803 1b01 	strb.w	r1, [r3], #1
 8003d3a:	e7f9      	b.n	8003d30 <memset+0x4>

08003d3c <iprintf>:
 8003d3c:	b40f      	push	{r0, r1, r2, r3}
 8003d3e:	4b0a      	ldr	r3, [pc, #40]	; (8003d68 <iprintf+0x2c>)
 8003d40:	b513      	push	{r0, r1, r4, lr}
 8003d42:	681c      	ldr	r4, [r3, #0]
 8003d44:	b124      	cbz	r4, 8003d50 <iprintf+0x14>
 8003d46:	69a3      	ldr	r3, [r4, #24]
 8003d48:	b913      	cbnz	r3, 8003d50 <iprintf+0x14>
 8003d4a:	4620      	mov	r0, r4
 8003d4c:	f000 f866 	bl	8003e1c <__sinit>
 8003d50:	ab05      	add	r3, sp, #20
 8003d52:	4620      	mov	r0, r4
 8003d54:	9a04      	ldr	r2, [sp, #16]
 8003d56:	68a1      	ldr	r1, [r4, #8]
 8003d58:	9301      	str	r3, [sp, #4]
 8003d5a:	f000 f9bb 	bl	80040d4 <_vfiprintf_r>
 8003d5e:	b002      	add	sp, #8
 8003d60:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003d64:	b004      	add	sp, #16
 8003d66:	4770      	bx	lr
 8003d68:	2000000c 	.word	0x2000000c

08003d6c <std>:
 8003d6c:	2300      	movs	r3, #0
 8003d6e:	b510      	push	{r4, lr}
 8003d70:	4604      	mov	r4, r0
 8003d72:	e9c0 3300 	strd	r3, r3, [r0]
 8003d76:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003d7a:	6083      	str	r3, [r0, #8]
 8003d7c:	8181      	strh	r1, [r0, #12]
 8003d7e:	6643      	str	r3, [r0, #100]	; 0x64
 8003d80:	81c2      	strh	r2, [r0, #14]
 8003d82:	6183      	str	r3, [r0, #24]
 8003d84:	4619      	mov	r1, r3
 8003d86:	2208      	movs	r2, #8
 8003d88:	305c      	adds	r0, #92	; 0x5c
 8003d8a:	f7ff ffcf 	bl	8003d2c <memset>
 8003d8e:	4b05      	ldr	r3, [pc, #20]	; (8003da4 <std+0x38>)
 8003d90:	6224      	str	r4, [r4, #32]
 8003d92:	6263      	str	r3, [r4, #36]	; 0x24
 8003d94:	4b04      	ldr	r3, [pc, #16]	; (8003da8 <std+0x3c>)
 8003d96:	62a3      	str	r3, [r4, #40]	; 0x28
 8003d98:	4b04      	ldr	r3, [pc, #16]	; (8003dac <std+0x40>)
 8003d9a:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003d9c:	4b04      	ldr	r3, [pc, #16]	; (8003db0 <std+0x44>)
 8003d9e:	6323      	str	r3, [r4, #48]	; 0x30
 8003da0:	bd10      	pop	{r4, pc}
 8003da2:	bf00      	nop
 8003da4:	08004681 	.word	0x08004681
 8003da8:	080046a3 	.word	0x080046a3
 8003dac:	080046db 	.word	0x080046db
 8003db0:	080046ff 	.word	0x080046ff

08003db4 <_cleanup_r>:
 8003db4:	4901      	ldr	r1, [pc, #4]	; (8003dbc <_cleanup_r+0x8>)
 8003db6:	f000 b8af 	b.w	8003f18 <_fwalk_reent>
 8003dba:	bf00      	nop
 8003dbc:	080049d1 	.word	0x080049d1

08003dc0 <__sfmoreglue>:
 8003dc0:	2268      	movs	r2, #104	; 0x68
 8003dc2:	b570      	push	{r4, r5, r6, lr}
 8003dc4:	1e4d      	subs	r5, r1, #1
 8003dc6:	4355      	muls	r5, r2
 8003dc8:	460e      	mov	r6, r1
 8003dca:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8003dce:	f000 f8e5 	bl	8003f9c <_malloc_r>
 8003dd2:	4604      	mov	r4, r0
 8003dd4:	b140      	cbz	r0, 8003de8 <__sfmoreglue+0x28>
 8003dd6:	2100      	movs	r1, #0
 8003dd8:	e9c0 1600 	strd	r1, r6, [r0]
 8003ddc:	300c      	adds	r0, #12
 8003dde:	60a0      	str	r0, [r4, #8]
 8003de0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8003de4:	f7ff ffa2 	bl	8003d2c <memset>
 8003de8:	4620      	mov	r0, r4
 8003dea:	bd70      	pop	{r4, r5, r6, pc}

08003dec <__sfp_lock_acquire>:
 8003dec:	4801      	ldr	r0, [pc, #4]	; (8003df4 <__sfp_lock_acquire+0x8>)
 8003dee:	f000 b8b3 	b.w	8003f58 <__retarget_lock_acquire_recursive>
 8003df2:	bf00      	nop
 8003df4:	20000179 	.word	0x20000179

08003df8 <__sfp_lock_release>:
 8003df8:	4801      	ldr	r0, [pc, #4]	; (8003e00 <__sfp_lock_release+0x8>)
 8003dfa:	f000 b8ae 	b.w	8003f5a <__retarget_lock_release_recursive>
 8003dfe:	bf00      	nop
 8003e00:	20000179 	.word	0x20000179

08003e04 <__sinit_lock_acquire>:
 8003e04:	4801      	ldr	r0, [pc, #4]	; (8003e0c <__sinit_lock_acquire+0x8>)
 8003e06:	f000 b8a7 	b.w	8003f58 <__retarget_lock_acquire_recursive>
 8003e0a:	bf00      	nop
 8003e0c:	2000017a 	.word	0x2000017a

08003e10 <__sinit_lock_release>:
 8003e10:	4801      	ldr	r0, [pc, #4]	; (8003e18 <__sinit_lock_release+0x8>)
 8003e12:	f000 b8a2 	b.w	8003f5a <__retarget_lock_release_recursive>
 8003e16:	bf00      	nop
 8003e18:	2000017a 	.word	0x2000017a

08003e1c <__sinit>:
 8003e1c:	b510      	push	{r4, lr}
 8003e1e:	4604      	mov	r4, r0
 8003e20:	f7ff fff0 	bl	8003e04 <__sinit_lock_acquire>
 8003e24:	69a3      	ldr	r3, [r4, #24]
 8003e26:	b11b      	cbz	r3, 8003e30 <__sinit+0x14>
 8003e28:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003e2c:	f7ff bff0 	b.w	8003e10 <__sinit_lock_release>
 8003e30:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8003e34:	6523      	str	r3, [r4, #80]	; 0x50
 8003e36:	4b13      	ldr	r3, [pc, #76]	; (8003e84 <__sinit+0x68>)
 8003e38:	4a13      	ldr	r2, [pc, #76]	; (8003e88 <__sinit+0x6c>)
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	62a2      	str	r2, [r4, #40]	; 0x28
 8003e3e:	42a3      	cmp	r3, r4
 8003e40:	bf08      	it	eq
 8003e42:	2301      	moveq	r3, #1
 8003e44:	4620      	mov	r0, r4
 8003e46:	bf08      	it	eq
 8003e48:	61a3      	streq	r3, [r4, #24]
 8003e4a:	f000 f81f 	bl	8003e8c <__sfp>
 8003e4e:	6060      	str	r0, [r4, #4]
 8003e50:	4620      	mov	r0, r4
 8003e52:	f000 f81b 	bl	8003e8c <__sfp>
 8003e56:	60a0      	str	r0, [r4, #8]
 8003e58:	4620      	mov	r0, r4
 8003e5a:	f000 f817 	bl	8003e8c <__sfp>
 8003e5e:	2200      	movs	r2, #0
 8003e60:	2104      	movs	r1, #4
 8003e62:	60e0      	str	r0, [r4, #12]
 8003e64:	6860      	ldr	r0, [r4, #4]
 8003e66:	f7ff ff81 	bl	8003d6c <std>
 8003e6a:	2201      	movs	r2, #1
 8003e6c:	2109      	movs	r1, #9
 8003e6e:	68a0      	ldr	r0, [r4, #8]
 8003e70:	f7ff ff7c 	bl	8003d6c <std>
 8003e74:	2202      	movs	r2, #2
 8003e76:	2112      	movs	r1, #18
 8003e78:	68e0      	ldr	r0, [r4, #12]
 8003e7a:	f7ff ff77 	bl	8003d6c <std>
 8003e7e:	2301      	movs	r3, #1
 8003e80:	61a3      	str	r3, [r4, #24]
 8003e82:	e7d1      	b.n	8003e28 <__sinit+0xc>
 8003e84:	08004cbc 	.word	0x08004cbc
 8003e88:	08003db5 	.word	0x08003db5

08003e8c <__sfp>:
 8003e8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e8e:	4607      	mov	r7, r0
 8003e90:	f7ff ffac 	bl	8003dec <__sfp_lock_acquire>
 8003e94:	4b1e      	ldr	r3, [pc, #120]	; (8003f10 <__sfp+0x84>)
 8003e96:	681e      	ldr	r6, [r3, #0]
 8003e98:	69b3      	ldr	r3, [r6, #24]
 8003e9a:	b913      	cbnz	r3, 8003ea2 <__sfp+0x16>
 8003e9c:	4630      	mov	r0, r6
 8003e9e:	f7ff ffbd 	bl	8003e1c <__sinit>
 8003ea2:	3648      	adds	r6, #72	; 0x48
 8003ea4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8003ea8:	3b01      	subs	r3, #1
 8003eaa:	d503      	bpl.n	8003eb4 <__sfp+0x28>
 8003eac:	6833      	ldr	r3, [r6, #0]
 8003eae:	b30b      	cbz	r3, 8003ef4 <__sfp+0x68>
 8003eb0:	6836      	ldr	r6, [r6, #0]
 8003eb2:	e7f7      	b.n	8003ea4 <__sfp+0x18>
 8003eb4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8003eb8:	b9d5      	cbnz	r5, 8003ef0 <__sfp+0x64>
 8003eba:	4b16      	ldr	r3, [pc, #88]	; (8003f14 <__sfp+0x88>)
 8003ebc:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8003ec0:	60e3      	str	r3, [r4, #12]
 8003ec2:	6665      	str	r5, [r4, #100]	; 0x64
 8003ec4:	f000 f847 	bl	8003f56 <__retarget_lock_init_recursive>
 8003ec8:	f7ff ff96 	bl	8003df8 <__sfp_lock_release>
 8003ecc:	2208      	movs	r2, #8
 8003ece:	4629      	mov	r1, r5
 8003ed0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8003ed4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8003ed8:	6025      	str	r5, [r4, #0]
 8003eda:	61a5      	str	r5, [r4, #24]
 8003edc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8003ee0:	f7ff ff24 	bl	8003d2c <memset>
 8003ee4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8003ee8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8003eec:	4620      	mov	r0, r4
 8003eee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003ef0:	3468      	adds	r4, #104	; 0x68
 8003ef2:	e7d9      	b.n	8003ea8 <__sfp+0x1c>
 8003ef4:	2104      	movs	r1, #4
 8003ef6:	4638      	mov	r0, r7
 8003ef8:	f7ff ff62 	bl	8003dc0 <__sfmoreglue>
 8003efc:	4604      	mov	r4, r0
 8003efe:	6030      	str	r0, [r6, #0]
 8003f00:	2800      	cmp	r0, #0
 8003f02:	d1d5      	bne.n	8003eb0 <__sfp+0x24>
 8003f04:	f7ff ff78 	bl	8003df8 <__sfp_lock_release>
 8003f08:	230c      	movs	r3, #12
 8003f0a:	603b      	str	r3, [r7, #0]
 8003f0c:	e7ee      	b.n	8003eec <__sfp+0x60>
 8003f0e:	bf00      	nop
 8003f10:	08004cbc 	.word	0x08004cbc
 8003f14:	ffff0001 	.word	0xffff0001

08003f18 <_fwalk_reent>:
 8003f18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003f1c:	4606      	mov	r6, r0
 8003f1e:	4688      	mov	r8, r1
 8003f20:	2700      	movs	r7, #0
 8003f22:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8003f26:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003f2a:	f1b9 0901 	subs.w	r9, r9, #1
 8003f2e:	d505      	bpl.n	8003f3c <_fwalk_reent+0x24>
 8003f30:	6824      	ldr	r4, [r4, #0]
 8003f32:	2c00      	cmp	r4, #0
 8003f34:	d1f7      	bne.n	8003f26 <_fwalk_reent+0xe>
 8003f36:	4638      	mov	r0, r7
 8003f38:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003f3c:	89ab      	ldrh	r3, [r5, #12]
 8003f3e:	2b01      	cmp	r3, #1
 8003f40:	d907      	bls.n	8003f52 <_fwalk_reent+0x3a>
 8003f42:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003f46:	3301      	adds	r3, #1
 8003f48:	d003      	beq.n	8003f52 <_fwalk_reent+0x3a>
 8003f4a:	4629      	mov	r1, r5
 8003f4c:	4630      	mov	r0, r6
 8003f4e:	47c0      	blx	r8
 8003f50:	4307      	orrs	r7, r0
 8003f52:	3568      	adds	r5, #104	; 0x68
 8003f54:	e7e9      	b.n	8003f2a <_fwalk_reent+0x12>

08003f56 <__retarget_lock_init_recursive>:
 8003f56:	4770      	bx	lr

08003f58 <__retarget_lock_acquire_recursive>:
 8003f58:	4770      	bx	lr

08003f5a <__retarget_lock_release_recursive>:
 8003f5a:	4770      	bx	lr

08003f5c <sbrk_aligned>:
 8003f5c:	b570      	push	{r4, r5, r6, lr}
 8003f5e:	4e0e      	ldr	r6, [pc, #56]	; (8003f98 <sbrk_aligned+0x3c>)
 8003f60:	460c      	mov	r4, r1
 8003f62:	6831      	ldr	r1, [r6, #0]
 8003f64:	4605      	mov	r5, r0
 8003f66:	b911      	cbnz	r1, 8003f6e <sbrk_aligned+0x12>
 8003f68:	f000 fb7a 	bl	8004660 <_sbrk_r>
 8003f6c:	6030      	str	r0, [r6, #0]
 8003f6e:	4621      	mov	r1, r4
 8003f70:	4628      	mov	r0, r5
 8003f72:	f000 fb75 	bl	8004660 <_sbrk_r>
 8003f76:	1c43      	adds	r3, r0, #1
 8003f78:	d00a      	beq.n	8003f90 <sbrk_aligned+0x34>
 8003f7a:	1cc4      	adds	r4, r0, #3
 8003f7c:	f024 0403 	bic.w	r4, r4, #3
 8003f80:	42a0      	cmp	r0, r4
 8003f82:	d007      	beq.n	8003f94 <sbrk_aligned+0x38>
 8003f84:	1a21      	subs	r1, r4, r0
 8003f86:	4628      	mov	r0, r5
 8003f88:	f000 fb6a 	bl	8004660 <_sbrk_r>
 8003f8c:	3001      	adds	r0, #1
 8003f8e:	d101      	bne.n	8003f94 <sbrk_aligned+0x38>
 8003f90:	f04f 34ff 	mov.w	r4, #4294967295
 8003f94:	4620      	mov	r0, r4
 8003f96:	bd70      	pop	{r4, r5, r6, pc}
 8003f98:	20000180 	.word	0x20000180

08003f9c <_malloc_r>:
 8003f9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003fa0:	1ccd      	adds	r5, r1, #3
 8003fa2:	f025 0503 	bic.w	r5, r5, #3
 8003fa6:	3508      	adds	r5, #8
 8003fa8:	2d0c      	cmp	r5, #12
 8003faa:	bf38      	it	cc
 8003fac:	250c      	movcc	r5, #12
 8003fae:	2d00      	cmp	r5, #0
 8003fb0:	4607      	mov	r7, r0
 8003fb2:	db01      	blt.n	8003fb8 <_malloc_r+0x1c>
 8003fb4:	42a9      	cmp	r1, r5
 8003fb6:	d905      	bls.n	8003fc4 <_malloc_r+0x28>
 8003fb8:	230c      	movs	r3, #12
 8003fba:	2600      	movs	r6, #0
 8003fbc:	603b      	str	r3, [r7, #0]
 8003fbe:	4630      	mov	r0, r6
 8003fc0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003fc4:	4e2e      	ldr	r6, [pc, #184]	; (8004080 <_malloc_r+0xe4>)
 8003fc6:	f000 fdc5 	bl	8004b54 <__malloc_lock>
 8003fca:	6833      	ldr	r3, [r6, #0]
 8003fcc:	461c      	mov	r4, r3
 8003fce:	bb34      	cbnz	r4, 800401e <_malloc_r+0x82>
 8003fd0:	4629      	mov	r1, r5
 8003fd2:	4638      	mov	r0, r7
 8003fd4:	f7ff ffc2 	bl	8003f5c <sbrk_aligned>
 8003fd8:	1c43      	adds	r3, r0, #1
 8003fda:	4604      	mov	r4, r0
 8003fdc:	d14d      	bne.n	800407a <_malloc_r+0xde>
 8003fde:	6834      	ldr	r4, [r6, #0]
 8003fe0:	4626      	mov	r6, r4
 8003fe2:	2e00      	cmp	r6, #0
 8003fe4:	d140      	bne.n	8004068 <_malloc_r+0xcc>
 8003fe6:	6823      	ldr	r3, [r4, #0]
 8003fe8:	4631      	mov	r1, r6
 8003fea:	4638      	mov	r0, r7
 8003fec:	eb04 0803 	add.w	r8, r4, r3
 8003ff0:	f000 fb36 	bl	8004660 <_sbrk_r>
 8003ff4:	4580      	cmp	r8, r0
 8003ff6:	d13a      	bne.n	800406e <_malloc_r+0xd2>
 8003ff8:	6821      	ldr	r1, [r4, #0]
 8003ffa:	3503      	adds	r5, #3
 8003ffc:	1a6d      	subs	r5, r5, r1
 8003ffe:	f025 0503 	bic.w	r5, r5, #3
 8004002:	3508      	adds	r5, #8
 8004004:	2d0c      	cmp	r5, #12
 8004006:	bf38      	it	cc
 8004008:	250c      	movcc	r5, #12
 800400a:	4638      	mov	r0, r7
 800400c:	4629      	mov	r1, r5
 800400e:	f7ff ffa5 	bl	8003f5c <sbrk_aligned>
 8004012:	3001      	adds	r0, #1
 8004014:	d02b      	beq.n	800406e <_malloc_r+0xd2>
 8004016:	6823      	ldr	r3, [r4, #0]
 8004018:	442b      	add	r3, r5
 800401a:	6023      	str	r3, [r4, #0]
 800401c:	e00e      	b.n	800403c <_malloc_r+0xa0>
 800401e:	6822      	ldr	r2, [r4, #0]
 8004020:	1b52      	subs	r2, r2, r5
 8004022:	d41e      	bmi.n	8004062 <_malloc_r+0xc6>
 8004024:	2a0b      	cmp	r2, #11
 8004026:	d916      	bls.n	8004056 <_malloc_r+0xba>
 8004028:	1961      	adds	r1, r4, r5
 800402a:	42a3      	cmp	r3, r4
 800402c:	6025      	str	r5, [r4, #0]
 800402e:	bf18      	it	ne
 8004030:	6059      	strne	r1, [r3, #4]
 8004032:	6863      	ldr	r3, [r4, #4]
 8004034:	bf08      	it	eq
 8004036:	6031      	streq	r1, [r6, #0]
 8004038:	5162      	str	r2, [r4, r5]
 800403a:	604b      	str	r3, [r1, #4]
 800403c:	4638      	mov	r0, r7
 800403e:	f104 060b 	add.w	r6, r4, #11
 8004042:	f000 fd8d 	bl	8004b60 <__malloc_unlock>
 8004046:	f026 0607 	bic.w	r6, r6, #7
 800404a:	1d23      	adds	r3, r4, #4
 800404c:	1af2      	subs	r2, r6, r3
 800404e:	d0b6      	beq.n	8003fbe <_malloc_r+0x22>
 8004050:	1b9b      	subs	r3, r3, r6
 8004052:	50a3      	str	r3, [r4, r2]
 8004054:	e7b3      	b.n	8003fbe <_malloc_r+0x22>
 8004056:	6862      	ldr	r2, [r4, #4]
 8004058:	42a3      	cmp	r3, r4
 800405a:	bf0c      	ite	eq
 800405c:	6032      	streq	r2, [r6, #0]
 800405e:	605a      	strne	r2, [r3, #4]
 8004060:	e7ec      	b.n	800403c <_malloc_r+0xa0>
 8004062:	4623      	mov	r3, r4
 8004064:	6864      	ldr	r4, [r4, #4]
 8004066:	e7b2      	b.n	8003fce <_malloc_r+0x32>
 8004068:	4634      	mov	r4, r6
 800406a:	6876      	ldr	r6, [r6, #4]
 800406c:	e7b9      	b.n	8003fe2 <_malloc_r+0x46>
 800406e:	230c      	movs	r3, #12
 8004070:	4638      	mov	r0, r7
 8004072:	603b      	str	r3, [r7, #0]
 8004074:	f000 fd74 	bl	8004b60 <__malloc_unlock>
 8004078:	e7a1      	b.n	8003fbe <_malloc_r+0x22>
 800407a:	6025      	str	r5, [r4, #0]
 800407c:	e7de      	b.n	800403c <_malloc_r+0xa0>
 800407e:	bf00      	nop
 8004080:	2000017c 	.word	0x2000017c

08004084 <__sfputc_r>:
 8004084:	6893      	ldr	r3, [r2, #8]
 8004086:	b410      	push	{r4}
 8004088:	3b01      	subs	r3, #1
 800408a:	2b00      	cmp	r3, #0
 800408c:	6093      	str	r3, [r2, #8]
 800408e:	da07      	bge.n	80040a0 <__sfputc_r+0x1c>
 8004090:	6994      	ldr	r4, [r2, #24]
 8004092:	42a3      	cmp	r3, r4
 8004094:	db01      	blt.n	800409a <__sfputc_r+0x16>
 8004096:	290a      	cmp	r1, #10
 8004098:	d102      	bne.n	80040a0 <__sfputc_r+0x1c>
 800409a:	bc10      	pop	{r4}
 800409c:	f000 bb34 	b.w	8004708 <__swbuf_r>
 80040a0:	6813      	ldr	r3, [r2, #0]
 80040a2:	1c58      	adds	r0, r3, #1
 80040a4:	6010      	str	r0, [r2, #0]
 80040a6:	7019      	strb	r1, [r3, #0]
 80040a8:	4608      	mov	r0, r1
 80040aa:	bc10      	pop	{r4}
 80040ac:	4770      	bx	lr

080040ae <__sfputs_r>:
 80040ae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80040b0:	4606      	mov	r6, r0
 80040b2:	460f      	mov	r7, r1
 80040b4:	4614      	mov	r4, r2
 80040b6:	18d5      	adds	r5, r2, r3
 80040b8:	42ac      	cmp	r4, r5
 80040ba:	d101      	bne.n	80040c0 <__sfputs_r+0x12>
 80040bc:	2000      	movs	r0, #0
 80040be:	e007      	b.n	80040d0 <__sfputs_r+0x22>
 80040c0:	463a      	mov	r2, r7
 80040c2:	4630      	mov	r0, r6
 80040c4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80040c8:	f7ff ffdc 	bl	8004084 <__sfputc_r>
 80040cc:	1c43      	adds	r3, r0, #1
 80040ce:	d1f3      	bne.n	80040b8 <__sfputs_r+0xa>
 80040d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080040d4 <_vfiprintf_r>:
 80040d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80040d8:	460d      	mov	r5, r1
 80040da:	4614      	mov	r4, r2
 80040dc:	4698      	mov	r8, r3
 80040de:	4606      	mov	r6, r0
 80040e0:	b09d      	sub	sp, #116	; 0x74
 80040e2:	b118      	cbz	r0, 80040ec <_vfiprintf_r+0x18>
 80040e4:	6983      	ldr	r3, [r0, #24]
 80040e6:	b90b      	cbnz	r3, 80040ec <_vfiprintf_r+0x18>
 80040e8:	f7ff fe98 	bl	8003e1c <__sinit>
 80040ec:	4b89      	ldr	r3, [pc, #548]	; (8004314 <_vfiprintf_r+0x240>)
 80040ee:	429d      	cmp	r5, r3
 80040f0:	d11b      	bne.n	800412a <_vfiprintf_r+0x56>
 80040f2:	6875      	ldr	r5, [r6, #4]
 80040f4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80040f6:	07d9      	lsls	r1, r3, #31
 80040f8:	d405      	bmi.n	8004106 <_vfiprintf_r+0x32>
 80040fa:	89ab      	ldrh	r3, [r5, #12]
 80040fc:	059a      	lsls	r2, r3, #22
 80040fe:	d402      	bmi.n	8004106 <_vfiprintf_r+0x32>
 8004100:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004102:	f7ff ff29 	bl	8003f58 <__retarget_lock_acquire_recursive>
 8004106:	89ab      	ldrh	r3, [r5, #12]
 8004108:	071b      	lsls	r3, r3, #28
 800410a:	d501      	bpl.n	8004110 <_vfiprintf_r+0x3c>
 800410c:	692b      	ldr	r3, [r5, #16]
 800410e:	b9eb      	cbnz	r3, 800414c <_vfiprintf_r+0x78>
 8004110:	4629      	mov	r1, r5
 8004112:	4630      	mov	r0, r6
 8004114:	f000 fb5c 	bl	80047d0 <__swsetup_r>
 8004118:	b1c0      	cbz	r0, 800414c <_vfiprintf_r+0x78>
 800411a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800411c:	07dc      	lsls	r4, r3, #31
 800411e:	d50e      	bpl.n	800413e <_vfiprintf_r+0x6a>
 8004120:	f04f 30ff 	mov.w	r0, #4294967295
 8004124:	b01d      	add	sp, #116	; 0x74
 8004126:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800412a:	4b7b      	ldr	r3, [pc, #492]	; (8004318 <_vfiprintf_r+0x244>)
 800412c:	429d      	cmp	r5, r3
 800412e:	d101      	bne.n	8004134 <_vfiprintf_r+0x60>
 8004130:	68b5      	ldr	r5, [r6, #8]
 8004132:	e7df      	b.n	80040f4 <_vfiprintf_r+0x20>
 8004134:	4b79      	ldr	r3, [pc, #484]	; (800431c <_vfiprintf_r+0x248>)
 8004136:	429d      	cmp	r5, r3
 8004138:	bf08      	it	eq
 800413a:	68f5      	ldreq	r5, [r6, #12]
 800413c:	e7da      	b.n	80040f4 <_vfiprintf_r+0x20>
 800413e:	89ab      	ldrh	r3, [r5, #12]
 8004140:	0598      	lsls	r0, r3, #22
 8004142:	d4ed      	bmi.n	8004120 <_vfiprintf_r+0x4c>
 8004144:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004146:	f7ff ff08 	bl	8003f5a <__retarget_lock_release_recursive>
 800414a:	e7e9      	b.n	8004120 <_vfiprintf_r+0x4c>
 800414c:	2300      	movs	r3, #0
 800414e:	9309      	str	r3, [sp, #36]	; 0x24
 8004150:	2320      	movs	r3, #32
 8004152:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004156:	2330      	movs	r3, #48	; 0x30
 8004158:	f04f 0901 	mov.w	r9, #1
 800415c:	f8cd 800c 	str.w	r8, [sp, #12]
 8004160:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8004320 <_vfiprintf_r+0x24c>
 8004164:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004168:	4623      	mov	r3, r4
 800416a:	469a      	mov	sl, r3
 800416c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004170:	b10a      	cbz	r2, 8004176 <_vfiprintf_r+0xa2>
 8004172:	2a25      	cmp	r2, #37	; 0x25
 8004174:	d1f9      	bne.n	800416a <_vfiprintf_r+0x96>
 8004176:	ebba 0b04 	subs.w	fp, sl, r4
 800417a:	d00b      	beq.n	8004194 <_vfiprintf_r+0xc0>
 800417c:	465b      	mov	r3, fp
 800417e:	4622      	mov	r2, r4
 8004180:	4629      	mov	r1, r5
 8004182:	4630      	mov	r0, r6
 8004184:	f7ff ff93 	bl	80040ae <__sfputs_r>
 8004188:	3001      	adds	r0, #1
 800418a:	f000 80aa 	beq.w	80042e2 <_vfiprintf_r+0x20e>
 800418e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004190:	445a      	add	r2, fp
 8004192:	9209      	str	r2, [sp, #36]	; 0x24
 8004194:	f89a 3000 	ldrb.w	r3, [sl]
 8004198:	2b00      	cmp	r3, #0
 800419a:	f000 80a2 	beq.w	80042e2 <_vfiprintf_r+0x20e>
 800419e:	2300      	movs	r3, #0
 80041a0:	f04f 32ff 	mov.w	r2, #4294967295
 80041a4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80041a8:	f10a 0a01 	add.w	sl, sl, #1
 80041ac:	9304      	str	r3, [sp, #16]
 80041ae:	9307      	str	r3, [sp, #28]
 80041b0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80041b4:	931a      	str	r3, [sp, #104]	; 0x68
 80041b6:	4654      	mov	r4, sl
 80041b8:	2205      	movs	r2, #5
 80041ba:	f814 1b01 	ldrb.w	r1, [r4], #1
 80041be:	4858      	ldr	r0, [pc, #352]	; (8004320 <_vfiprintf_r+0x24c>)
 80041c0:	f000 fcba 	bl	8004b38 <memchr>
 80041c4:	9a04      	ldr	r2, [sp, #16]
 80041c6:	b9d8      	cbnz	r0, 8004200 <_vfiprintf_r+0x12c>
 80041c8:	06d1      	lsls	r1, r2, #27
 80041ca:	bf44      	itt	mi
 80041cc:	2320      	movmi	r3, #32
 80041ce:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80041d2:	0713      	lsls	r3, r2, #28
 80041d4:	bf44      	itt	mi
 80041d6:	232b      	movmi	r3, #43	; 0x2b
 80041d8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80041dc:	f89a 3000 	ldrb.w	r3, [sl]
 80041e0:	2b2a      	cmp	r3, #42	; 0x2a
 80041e2:	d015      	beq.n	8004210 <_vfiprintf_r+0x13c>
 80041e4:	4654      	mov	r4, sl
 80041e6:	2000      	movs	r0, #0
 80041e8:	f04f 0c0a 	mov.w	ip, #10
 80041ec:	9a07      	ldr	r2, [sp, #28]
 80041ee:	4621      	mov	r1, r4
 80041f0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80041f4:	3b30      	subs	r3, #48	; 0x30
 80041f6:	2b09      	cmp	r3, #9
 80041f8:	d94e      	bls.n	8004298 <_vfiprintf_r+0x1c4>
 80041fa:	b1b0      	cbz	r0, 800422a <_vfiprintf_r+0x156>
 80041fc:	9207      	str	r2, [sp, #28]
 80041fe:	e014      	b.n	800422a <_vfiprintf_r+0x156>
 8004200:	eba0 0308 	sub.w	r3, r0, r8
 8004204:	fa09 f303 	lsl.w	r3, r9, r3
 8004208:	4313      	orrs	r3, r2
 800420a:	46a2      	mov	sl, r4
 800420c:	9304      	str	r3, [sp, #16]
 800420e:	e7d2      	b.n	80041b6 <_vfiprintf_r+0xe2>
 8004210:	9b03      	ldr	r3, [sp, #12]
 8004212:	1d19      	adds	r1, r3, #4
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	9103      	str	r1, [sp, #12]
 8004218:	2b00      	cmp	r3, #0
 800421a:	bfbb      	ittet	lt
 800421c:	425b      	neglt	r3, r3
 800421e:	f042 0202 	orrlt.w	r2, r2, #2
 8004222:	9307      	strge	r3, [sp, #28]
 8004224:	9307      	strlt	r3, [sp, #28]
 8004226:	bfb8      	it	lt
 8004228:	9204      	strlt	r2, [sp, #16]
 800422a:	7823      	ldrb	r3, [r4, #0]
 800422c:	2b2e      	cmp	r3, #46	; 0x2e
 800422e:	d10c      	bne.n	800424a <_vfiprintf_r+0x176>
 8004230:	7863      	ldrb	r3, [r4, #1]
 8004232:	2b2a      	cmp	r3, #42	; 0x2a
 8004234:	d135      	bne.n	80042a2 <_vfiprintf_r+0x1ce>
 8004236:	9b03      	ldr	r3, [sp, #12]
 8004238:	3402      	adds	r4, #2
 800423a:	1d1a      	adds	r2, r3, #4
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	9203      	str	r2, [sp, #12]
 8004240:	2b00      	cmp	r3, #0
 8004242:	bfb8      	it	lt
 8004244:	f04f 33ff 	movlt.w	r3, #4294967295
 8004248:	9305      	str	r3, [sp, #20]
 800424a:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8004324 <_vfiprintf_r+0x250>
 800424e:	2203      	movs	r2, #3
 8004250:	4650      	mov	r0, sl
 8004252:	7821      	ldrb	r1, [r4, #0]
 8004254:	f000 fc70 	bl	8004b38 <memchr>
 8004258:	b140      	cbz	r0, 800426c <_vfiprintf_r+0x198>
 800425a:	2340      	movs	r3, #64	; 0x40
 800425c:	eba0 000a 	sub.w	r0, r0, sl
 8004260:	fa03 f000 	lsl.w	r0, r3, r0
 8004264:	9b04      	ldr	r3, [sp, #16]
 8004266:	3401      	adds	r4, #1
 8004268:	4303      	orrs	r3, r0
 800426a:	9304      	str	r3, [sp, #16]
 800426c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004270:	2206      	movs	r2, #6
 8004272:	482d      	ldr	r0, [pc, #180]	; (8004328 <_vfiprintf_r+0x254>)
 8004274:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004278:	f000 fc5e 	bl	8004b38 <memchr>
 800427c:	2800      	cmp	r0, #0
 800427e:	d03f      	beq.n	8004300 <_vfiprintf_r+0x22c>
 8004280:	4b2a      	ldr	r3, [pc, #168]	; (800432c <_vfiprintf_r+0x258>)
 8004282:	bb1b      	cbnz	r3, 80042cc <_vfiprintf_r+0x1f8>
 8004284:	9b03      	ldr	r3, [sp, #12]
 8004286:	3307      	adds	r3, #7
 8004288:	f023 0307 	bic.w	r3, r3, #7
 800428c:	3308      	adds	r3, #8
 800428e:	9303      	str	r3, [sp, #12]
 8004290:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004292:	443b      	add	r3, r7
 8004294:	9309      	str	r3, [sp, #36]	; 0x24
 8004296:	e767      	b.n	8004168 <_vfiprintf_r+0x94>
 8004298:	460c      	mov	r4, r1
 800429a:	2001      	movs	r0, #1
 800429c:	fb0c 3202 	mla	r2, ip, r2, r3
 80042a0:	e7a5      	b.n	80041ee <_vfiprintf_r+0x11a>
 80042a2:	2300      	movs	r3, #0
 80042a4:	f04f 0c0a 	mov.w	ip, #10
 80042a8:	4619      	mov	r1, r3
 80042aa:	3401      	adds	r4, #1
 80042ac:	9305      	str	r3, [sp, #20]
 80042ae:	4620      	mov	r0, r4
 80042b0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80042b4:	3a30      	subs	r2, #48	; 0x30
 80042b6:	2a09      	cmp	r2, #9
 80042b8:	d903      	bls.n	80042c2 <_vfiprintf_r+0x1ee>
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d0c5      	beq.n	800424a <_vfiprintf_r+0x176>
 80042be:	9105      	str	r1, [sp, #20]
 80042c0:	e7c3      	b.n	800424a <_vfiprintf_r+0x176>
 80042c2:	4604      	mov	r4, r0
 80042c4:	2301      	movs	r3, #1
 80042c6:	fb0c 2101 	mla	r1, ip, r1, r2
 80042ca:	e7f0      	b.n	80042ae <_vfiprintf_r+0x1da>
 80042cc:	ab03      	add	r3, sp, #12
 80042ce:	9300      	str	r3, [sp, #0]
 80042d0:	462a      	mov	r2, r5
 80042d2:	4630      	mov	r0, r6
 80042d4:	4b16      	ldr	r3, [pc, #88]	; (8004330 <_vfiprintf_r+0x25c>)
 80042d6:	a904      	add	r1, sp, #16
 80042d8:	f3af 8000 	nop.w
 80042dc:	4607      	mov	r7, r0
 80042de:	1c78      	adds	r0, r7, #1
 80042e0:	d1d6      	bne.n	8004290 <_vfiprintf_r+0x1bc>
 80042e2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80042e4:	07d9      	lsls	r1, r3, #31
 80042e6:	d405      	bmi.n	80042f4 <_vfiprintf_r+0x220>
 80042e8:	89ab      	ldrh	r3, [r5, #12]
 80042ea:	059a      	lsls	r2, r3, #22
 80042ec:	d402      	bmi.n	80042f4 <_vfiprintf_r+0x220>
 80042ee:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80042f0:	f7ff fe33 	bl	8003f5a <__retarget_lock_release_recursive>
 80042f4:	89ab      	ldrh	r3, [r5, #12]
 80042f6:	065b      	lsls	r3, r3, #25
 80042f8:	f53f af12 	bmi.w	8004120 <_vfiprintf_r+0x4c>
 80042fc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80042fe:	e711      	b.n	8004124 <_vfiprintf_r+0x50>
 8004300:	ab03      	add	r3, sp, #12
 8004302:	9300      	str	r3, [sp, #0]
 8004304:	462a      	mov	r2, r5
 8004306:	4630      	mov	r0, r6
 8004308:	4b09      	ldr	r3, [pc, #36]	; (8004330 <_vfiprintf_r+0x25c>)
 800430a:	a904      	add	r1, sp, #16
 800430c:	f000 f882 	bl	8004414 <_printf_i>
 8004310:	e7e4      	b.n	80042dc <_vfiprintf_r+0x208>
 8004312:	bf00      	nop
 8004314:	08004ce0 	.word	0x08004ce0
 8004318:	08004d00 	.word	0x08004d00
 800431c:	08004cc0 	.word	0x08004cc0
 8004320:	08004d20 	.word	0x08004d20
 8004324:	08004d26 	.word	0x08004d26
 8004328:	08004d2a 	.word	0x08004d2a
 800432c:	00000000 	.word	0x00000000
 8004330:	080040af 	.word	0x080040af

08004334 <_printf_common>:
 8004334:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004338:	4616      	mov	r6, r2
 800433a:	4699      	mov	r9, r3
 800433c:	688a      	ldr	r2, [r1, #8]
 800433e:	690b      	ldr	r3, [r1, #16]
 8004340:	4607      	mov	r7, r0
 8004342:	4293      	cmp	r3, r2
 8004344:	bfb8      	it	lt
 8004346:	4613      	movlt	r3, r2
 8004348:	6033      	str	r3, [r6, #0]
 800434a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800434e:	460c      	mov	r4, r1
 8004350:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004354:	b10a      	cbz	r2, 800435a <_printf_common+0x26>
 8004356:	3301      	adds	r3, #1
 8004358:	6033      	str	r3, [r6, #0]
 800435a:	6823      	ldr	r3, [r4, #0]
 800435c:	0699      	lsls	r1, r3, #26
 800435e:	bf42      	ittt	mi
 8004360:	6833      	ldrmi	r3, [r6, #0]
 8004362:	3302      	addmi	r3, #2
 8004364:	6033      	strmi	r3, [r6, #0]
 8004366:	6825      	ldr	r5, [r4, #0]
 8004368:	f015 0506 	ands.w	r5, r5, #6
 800436c:	d106      	bne.n	800437c <_printf_common+0x48>
 800436e:	f104 0a19 	add.w	sl, r4, #25
 8004372:	68e3      	ldr	r3, [r4, #12]
 8004374:	6832      	ldr	r2, [r6, #0]
 8004376:	1a9b      	subs	r3, r3, r2
 8004378:	42ab      	cmp	r3, r5
 800437a:	dc28      	bgt.n	80043ce <_printf_common+0x9a>
 800437c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004380:	1e13      	subs	r3, r2, #0
 8004382:	6822      	ldr	r2, [r4, #0]
 8004384:	bf18      	it	ne
 8004386:	2301      	movne	r3, #1
 8004388:	0692      	lsls	r2, r2, #26
 800438a:	d42d      	bmi.n	80043e8 <_printf_common+0xb4>
 800438c:	4649      	mov	r1, r9
 800438e:	4638      	mov	r0, r7
 8004390:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004394:	47c0      	blx	r8
 8004396:	3001      	adds	r0, #1
 8004398:	d020      	beq.n	80043dc <_printf_common+0xa8>
 800439a:	6823      	ldr	r3, [r4, #0]
 800439c:	68e5      	ldr	r5, [r4, #12]
 800439e:	f003 0306 	and.w	r3, r3, #6
 80043a2:	2b04      	cmp	r3, #4
 80043a4:	bf18      	it	ne
 80043a6:	2500      	movne	r5, #0
 80043a8:	6832      	ldr	r2, [r6, #0]
 80043aa:	f04f 0600 	mov.w	r6, #0
 80043ae:	68a3      	ldr	r3, [r4, #8]
 80043b0:	bf08      	it	eq
 80043b2:	1aad      	subeq	r5, r5, r2
 80043b4:	6922      	ldr	r2, [r4, #16]
 80043b6:	bf08      	it	eq
 80043b8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80043bc:	4293      	cmp	r3, r2
 80043be:	bfc4      	itt	gt
 80043c0:	1a9b      	subgt	r3, r3, r2
 80043c2:	18ed      	addgt	r5, r5, r3
 80043c4:	341a      	adds	r4, #26
 80043c6:	42b5      	cmp	r5, r6
 80043c8:	d11a      	bne.n	8004400 <_printf_common+0xcc>
 80043ca:	2000      	movs	r0, #0
 80043cc:	e008      	b.n	80043e0 <_printf_common+0xac>
 80043ce:	2301      	movs	r3, #1
 80043d0:	4652      	mov	r2, sl
 80043d2:	4649      	mov	r1, r9
 80043d4:	4638      	mov	r0, r7
 80043d6:	47c0      	blx	r8
 80043d8:	3001      	adds	r0, #1
 80043da:	d103      	bne.n	80043e4 <_printf_common+0xb0>
 80043dc:	f04f 30ff 	mov.w	r0, #4294967295
 80043e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80043e4:	3501      	adds	r5, #1
 80043e6:	e7c4      	b.n	8004372 <_printf_common+0x3e>
 80043e8:	2030      	movs	r0, #48	; 0x30
 80043ea:	18e1      	adds	r1, r4, r3
 80043ec:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80043f0:	1c5a      	adds	r2, r3, #1
 80043f2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80043f6:	4422      	add	r2, r4
 80043f8:	3302      	adds	r3, #2
 80043fa:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80043fe:	e7c5      	b.n	800438c <_printf_common+0x58>
 8004400:	2301      	movs	r3, #1
 8004402:	4622      	mov	r2, r4
 8004404:	4649      	mov	r1, r9
 8004406:	4638      	mov	r0, r7
 8004408:	47c0      	blx	r8
 800440a:	3001      	adds	r0, #1
 800440c:	d0e6      	beq.n	80043dc <_printf_common+0xa8>
 800440e:	3601      	adds	r6, #1
 8004410:	e7d9      	b.n	80043c6 <_printf_common+0x92>
	...

08004414 <_printf_i>:
 8004414:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004418:	7e0f      	ldrb	r7, [r1, #24]
 800441a:	4691      	mov	r9, r2
 800441c:	2f78      	cmp	r7, #120	; 0x78
 800441e:	4680      	mov	r8, r0
 8004420:	460c      	mov	r4, r1
 8004422:	469a      	mov	sl, r3
 8004424:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004426:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800442a:	d807      	bhi.n	800443c <_printf_i+0x28>
 800442c:	2f62      	cmp	r7, #98	; 0x62
 800442e:	d80a      	bhi.n	8004446 <_printf_i+0x32>
 8004430:	2f00      	cmp	r7, #0
 8004432:	f000 80d9 	beq.w	80045e8 <_printf_i+0x1d4>
 8004436:	2f58      	cmp	r7, #88	; 0x58
 8004438:	f000 80a4 	beq.w	8004584 <_printf_i+0x170>
 800443c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004440:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004444:	e03a      	b.n	80044bc <_printf_i+0xa8>
 8004446:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800444a:	2b15      	cmp	r3, #21
 800444c:	d8f6      	bhi.n	800443c <_printf_i+0x28>
 800444e:	a101      	add	r1, pc, #4	; (adr r1, 8004454 <_printf_i+0x40>)
 8004450:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004454:	080044ad 	.word	0x080044ad
 8004458:	080044c1 	.word	0x080044c1
 800445c:	0800443d 	.word	0x0800443d
 8004460:	0800443d 	.word	0x0800443d
 8004464:	0800443d 	.word	0x0800443d
 8004468:	0800443d 	.word	0x0800443d
 800446c:	080044c1 	.word	0x080044c1
 8004470:	0800443d 	.word	0x0800443d
 8004474:	0800443d 	.word	0x0800443d
 8004478:	0800443d 	.word	0x0800443d
 800447c:	0800443d 	.word	0x0800443d
 8004480:	080045cf 	.word	0x080045cf
 8004484:	080044f1 	.word	0x080044f1
 8004488:	080045b1 	.word	0x080045b1
 800448c:	0800443d 	.word	0x0800443d
 8004490:	0800443d 	.word	0x0800443d
 8004494:	080045f1 	.word	0x080045f1
 8004498:	0800443d 	.word	0x0800443d
 800449c:	080044f1 	.word	0x080044f1
 80044a0:	0800443d 	.word	0x0800443d
 80044a4:	0800443d 	.word	0x0800443d
 80044a8:	080045b9 	.word	0x080045b9
 80044ac:	682b      	ldr	r3, [r5, #0]
 80044ae:	1d1a      	adds	r2, r3, #4
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	602a      	str	r2, [r5, #0]
 80044b4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80044b8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80044bc:	2301      	movs	r3, #1
 80044be:	e0a4      	b.n	800460a <_printf_i+0x1f6>
 80044c0:	6820      	ldr	r0, [r4, #0]
 80044c2:	6829      	ldr	r1, [r5, #0]
 80044c4:	0606      	lsls	r6, r0, #24
 80044c6:	f101 0304 	add.w	r3, r1, #4
 80044ca:	d50a      	bpl.n	80044e2 <_printf_i+0xce>
 80044cc:	680e      	ldr	r6, [r1, #0]
 80044ce:	602b      	str	r3, [r5, #0]
 80044d0:	2e00      	cmp	r6, #0
 80044d2:	da03      	bge.n	80044dc <_printf_i+0xc8>
 80044d4:	232d      	movs	r3, #45	; 0x2d
 80044d6:	4276      	negs	r6, r6
 80044d8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80044dc:	230a      	movs	r3, #10
 80044de:	485e      	ldr	r0, [pc, #376]	; (8004658 <_printf_i+0x244>)
 80044e0:	e019      	b.n	8004516 <_printf_i+0x102>
 80044e2:	680e      	ldr	r6, [r1, #0]
 80044e4:	f010 0f40 	tst.w	r0, #64	; 0x40
 80044e8:	602b      	str	r3, [r5, #0]
 80044ea:	bf18      	it	ne
 80044ec:	b236      	sxthne	r6, r6
 80044ee:	e7ef      	b.n	80044d0 <_printf_i+0xbc>
 80044f0:	682b      	ldr	r3, [r5, #0]
 80044f2:	6820      	ldr	r0, [r4, #0]
 80044f4:	1d19      	adds	r1, r3, #4
 80044f6:	6029      	str	r1, [r5, #0]
 80044f8:	0601      	lsls	r1, r0, #24
 80044fa:	d501      	bpl.n	8004500 <_printf_i+0xec>
 80044fc:	681e      	ldr	r6, [r3, #0]
 80044fe:	e002      	b.n	8004506 <_printf_i+0xf2>
 8004500:	0646      	lsls	r6, r0, #25
 8004502:	d5fb      	bpl.n	80044fc <_printf_i+0xe8>
 8004504:	881e      	ldrh	r6, [r3, #0]
 8004506:	2f6f      	cmp	r7, #111	; 0x6f
 8004508:	bf0c      	ite	eq
 800450a:	2308      	moveq	r3, #8
 800450c:	230a      	movne	r3, #10
 800450e:	4852      	ldr	r0, [pc, #328]	; (8004658 <_printf_i+0x244>)
 8004510:	2100      	movs	r1, #0
 8004512:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004516:	6865      	ldr	r5, [r4, #4]
 8004518:	2d00      	cmp	r5, #0
 800451a:	bfa8      	it	ge
 800451c:	6821      	ldrge	r1, [r4, #0]
 800451e:	60a5      	str	r5, [r4, #8]
 8004520:	bfa4      	itt	ge
 8004522:	f021 0104 	bicge.w	r1, r1, #4
 8004526:	6021      	strge	r1, [r4, #0]
 8004528:	b90e      	cbnz	r6, 800452e <_printf_i+0x11a>
 800452a:	2d00      	cmp	r5, #0
 800452c:	d04d      	beq.n	80045ca <_printf_i+0x1b6>
 800452e:	4615      	mov	r5, r2
 8004530:	fbb6 f1f3 	udiv	r1, r6, r3
 8004534:	fb03 6711 	mls	r7, r3, r1, r6
 8004538:	5dc7      	ldrb	r7, [r0, r7]
 800453a:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800453e:	4637      	mov	r7, r6
 8004540:	42bb      	cmp	r3, r7
 8004542:	460e      	mov	r6, r1
 8004544:	d9f4      	bls.n	8004530 <_printf_i+0x11c>
 8004546:	2b08      	cmp	r3, #8
 8004548:	d10b      	bne.n	8004562 <_printf_i+0x14e>
 800454a:	6823      	ldr	r3, [r4, #0]
 800454c:	07de      	lsls	r6, r3, #31
 800454e:	d508      	bpl.n	8004562 <_printf_i+0x14e>
 8004550:	6923      	ldr	r3, [r4, #16]
 8004552:	6861      	ldr	r1, [r4, #4]
 8004554:	4299      	cmp	r1, r3
 8004556:	bfde      	ittt	le
 8004558:	2330      	movle	r3, #48	; 0x30
 800455a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800455e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004562:	1b52      	subs	r2, r2, r5
 8004564:	6122      	str	r2, [r4, #16]
 8004566:	464b      	mov	r3, r9
 8004568:	4621      	mov	r1, r4
 800456a:	4640      	mov	r0, r8
 800456c:	f8cd a000 	str.w	sl, [sp]
 8004570:	aa03      	add	r2, sp, #12
 8004572:	f7ff fedf 	bl	8004334 <_printf_common>
 8004576:	3001      	adds	r0, #1
 8004578:	d14c      	bne.n	8004614 <_printf_i+0x200>
 800457a:	f04f 30ff 	mov.w	r0, #4294967295
 800457e:	b004      	add	sp, #16
 8004580:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004584:	4834      	ldr	r0, [pc, #208]	; (8004658 <_printf_i+0x244>)
 8004586:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800458a:	6829      	ldr	r1, [r5, #0]
 800458c:	6823      	ldr	r3, [r4, #0]
 800458e:	f851 6b04 	ldr.w	r6, [r1], #4
 8004592:	6029      	str	r1, [r5, #0]
 8004594:	061d      	lsls	r5, r3, #24
 8004596:	d514      	bpl.n	80045c2 <_printf_i+0x1ae>
 8004598:	07df      	lsls	r7, r3, #31
 800459a:	bf44      	itt	mi
 800459c:	f043 0320 	orrmi.w	r3, r3, #32
 80045a0:	6023      	strmi	r3, [r4, #0]
 80045a2:	b91e      	cbnz	r6, 80045ac <_printf_i+0x198>
 80045a4:	6823      	ldr	r3, [r4, #0]
 80045a6:	f023 0320 	bic.w	r3, r3, #32
 80045aa:	6023      	str	r3, [r4, #0]
 80045ac:	2310      	movs	r3, #16
 80045ae:	e7af      	b.n	8004510 <_printf_i+0xfc>
 80045b0:	6823      	ldr	r3, [r4, #0]
 80045b2:	f043 0320 	orr.w	r3, r3, #32
 80045b6:	6023      	str	r3, [r4, #0]
 80045b8:	2378      	movs	r3, #120	; 0x78
 80045ba:	4828      	ldr	r0, [pc, #160]	; (800465c <_printf_i+0x248>)
 80045bc:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80045c0:	e7e3      	b.n	800458a <_printf_i+0x176>
 80045c2:	0659      	lsls	r1, r3, #25
 80045c4:	bf48      	it	mi
 80045c6:	b2b6      	uxthmi	r6, r6
 80045c8:	e7e6      	b.n	8004598 <_printf_i+0x184>
 80045ca:	4615      	mov	r5, r2
 80045cc:	e7bb      	b.n	8004546 <_printf_i+0x132>
 80045ce:	682b      	ldr	r3, [r5, #0]
 80045d0:	6826      	ldr	r6, [r4, #0]
 80045d2:	1d18      	adds	r0, r3, #4
 80045d4:	6961      	ldr	r1, [r4, #20]
 80045d6:	6028      	str	r0, [r5, #0]
 80045d8:	0635      	lsls	r5, r6, #24
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	d501      	bpl.n	80045e2 <_printf_i+0x1ce>
 80045de:	6019      	str	r1, [r3, #0]
 80045e0:	e002      	b.n	80045e8 <_printf_i+0x1d4>
 80045e2:	0670      	lsls	r0, r6, #25
 80045e4:	d5fb      	bpl.n	80045de <_printf_i+0x1ca>
 80045e6:	8019      	strh	r1, [r3, #0]
 80045e8:	2300      	movs	r3, #0
 80045ea:	4615      	mov	r5, r2
 80045ec:	6123      	str	r3, [r4, #16]
 80045ee:	e7ba      	b.n	8004566 <_printf_i+0x152>
 80045f0:	682b      	ldr	r3, [r5, #0]
 80045f2:	2100      	movs	r1, #0
 80045f4:	1d1a      	adds	r2, r3, #4
 80045f6:	602a      	str	r2, [r5, #0]
 80045f8:	681d      	ldr	r5, [r3, #0]
 80045fa:	6862      	ldr	r2, [r4, #4]
 80045fc:	4628      	mov	r0, r5
 80045fe:	f000 fa9b 	bl	8004b38 <memchr>
 8004602:	b108      	cbz	r0, 8004608 <_printf_i+0x1f4>
 8004604:	1b40      	subs	r0, r0, r5
 8004606:	6060      	str	r0, [r4, #4]
 8004608:	6863      	ldr	r3, [r4, #4]
 800460a:	6123      	str	r3, [r4, #16]
 800460c:	2300      	movs	r3, #0
 800460e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004612:	e7a8      	b.n	8004566 <_printf_i+0x152>
 8004614:	462a      	mov	r2, r5
 8004616:	4649      	mov	r1, r9
 8004618:	4640      	mov	r0, r8
 800461a:	6923      	ldr	r3, [r4, #16]
 800461c:	47d0      	blx	sl
 800461e:	3001      	adds	r0, #1
 8004620:	d0ab      	beq.n	800457a <_printf_i+0x166>
 8004622:	6823      	ldr	r3, [r4, #0]
 8004624:	079b      	lsls	r3, r3, #30
 8004626:	d413      	bmi.n	8004650 <_printf_i+0x23c>
 8004628:	68e0      	ldr	r0, [r4, #12]
 800462a:	9b03      	ldr	r3, [sp, #12]
 800462c:	4298      	cmp	r0, r3
 800462e:	bfb8      	it	lt
 8004630:	4618      	movlt	r0, r3
 8004632:	e7a4      	b.n	800457e <_printf_i+0x16a>
 8004634:	2301      	movs	r3, #1
 8004636:	4632      	mov	r2, r6
 8004638:	4649      	mov	r1, r9
 800463a:	4640      	mov	r0, r8
 800463c:	47d0      	blx	sl
 800463e:	3001      	adds	r0, #1
 8004640:	d09b      	beq.n	800457a <_printf_i+0x166>
 8004642:	3501      	adds	r5, #1
 8004644:	68e3      	ldr	r3, [r4, #12]
 8004646:	9903      	ldr	r1, [sp, #12]
 8004648:	1a5b      	subs	r3, r3, r1
 800464a:	42ab      	cmp	r3, r5
 800464c:	dcf2      	bgt.n	8004634 <_printf_i+0x220>
 800464e:	e7eb      	b.n	8004628 <_printf_i+0x214>
 8004650:	2500      	movs	r5, #0
 8004652:	f104 0619 	add.w	r6, r4, #25
 8004656:	e7f5      	b.n	8004644 <_printf_i+0x230>
 8004658:	08004d31 	.word	0x08004d31
 800465c:	08004d42 	.word	0x08004d42

08004660 <_sbrk_r>:
 8004660:	b538      	push	{r3, r4, r5, lr}
 8004662:	2300      	movs	r3, #0
 8004664:	4d05      	ldr	r5, [pc, #20]	; (800467c <_sbrk_r+0x1c>)
 8004666:	4604      	mov	r4, r0
 8004668:	4608      	mov	r0, r1
 800466a:	602b      	str	r3, [r5, #0]
 800466c:	f7fb ffba 	bl	80005e4 <_sbrk>
 8004670:	1c43      	adds	r3, r0, #1
 8004672:	d102      	bne.n	800467a <_sbrk_r+0x1a>
 8004674:	682b      	ldr	r3, [r5, #0]
 8004676:	b103      	cbz	r3, 800467a <_sbrk_r+0x1a>
 8004678:	6023      	str	r3, [r4, #0]
 800467a:	bd38      	pop	{r3, r4, r5, pc}
 800467c:	20000184 	.word	0x20000184

08004680 <__sread>:
 8004680:	b510      	push	{r4, lr}
 8004682:	460c      	mov	r4, r1
 8004684:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004688:	f000 fab8 	bl	8004bfc <_read_r>
 800468c:	2800      	cmp	r0, #0
 800468e:	bfab      	itete	ge
 8004690:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004692:	89a3      	ldrhlt	r3, [r4, #12]
 8004694:	181b      	addge	r3, r3, r0
 8004696:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800469a:	bfac      	ite	ge
 800469c:	6563      	strge	r3, [r4, #84]	; 0x54
 800469e:	81a3      	strhlt	r3, [r4, #12]
 80046a0:	bd10      	pop	{r4, pc}

080046a2 <__swrite>:
 80046a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80046a6:	461f      	mov	r7, r3
 80046a8:	898b      	ldrh	r3, [r1, #12]
 80046aa:	4605      	mov	r5, r0
 80046ac:	05db      	lsls	r3, r3, #23
 80046ae:	460c      	mov	r4, r1
 80046b0:	4616      	mov	r6, r2
 80046b2:	d505      	bpl.n	80046c0 <__swrite+0x1e>
 80046b4:	2302      	movs	r3, #2
 80046b6:	2200      	movs	r2, #0
 80046b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80046bc:	f000 f9c4 	bl	8004a48 <_lseek_r>
 80046c0:	89a3      	ldrh	r3, [r4, #12]
 80046c2:	4632      	mov	r2, r6
 80046c4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80046c8:	81a3      	strh	r3, [r4, #12]
 80046ca:	4628      	mov	r0, r5
 80046cc:	463b      	mov	r3, r7
 80046ce:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80046d2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80046d6:	f000 b869 	b.w	80047ac <_write_r>

080046da <__sseek>:
 80046da:	b510      	push	{r4, lr}
 80046dc:	460c      	mov	r4, r1
 80046de:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80046e2:	f000 f9b1 	bl	8004a48 <_lseek_r>
 80046e6:	1c43      	adds	r3, r0, #1
 80046e8:	89a3      	ldrh	r3, [r4, #12]
 80046ea:	bf15      	itete	ne
 80046ec:	6560      	strne	r0, [r4, #84]	; 0x54
 80046ee:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80046f2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80046f6:	81a3      	strheq	r3, [r4, #12]
 80046f8:	bf18      	it	ne
 80046fa:	81a3      	strhne	r3, [r4, #12]
 80046fc:	bd10      	pop	{r4, pc}

080046fe <__sclose>:
 80046fe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004702:	f000 b8d3 	b.w	80048ac <_close_r>
	...

08004708 <__swbuf_r>:
 8004708:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800470a:	460e      	mov	r6, r1
 800470c:	4614      	mov	r4, r2
 800470e:	4605      	mov	r5, r0
 8004710:	b118      	cbz	r0, 800471a <__swbuf_r+0x12>
 8004712:	6983      	ldr	r3, [r0, #24]
 8004714:	b90b      	cbnz	r3, 800471a <__swbuf_r+0x12>
 8004716:	f7ff fb81 	bl	8003e1c <__sinit>
 800471a:	4b21      	ldr	r3, [pc, #132]	; (80047a0 <__swbuf_r+0x98>)
 800471c:	429c      	cmp	r4, r3
 800471e:	d12b      	bne.n	8004778 <__swbuf_r+0x70>
 8004720:	686c      	ldr	r4, [r5, #4]
 8004722:	69a3      	ldr	r3, [r4, #24]
 8004724:	60a3      	str	r3, [r4, #8]
 8004726:	89a3      	ldrh	r3, [r4, #12]
 8004728:	071a      	lsls	r2, r3, #28
 800472a:	d52f      	bpl.n	800478c <__swbuf_r+0x84>
 800472c:	6923      	ldr	r3, [r4, #16]
 800472e:	b36b      	cbz	r3, 800478c <__swbuf_r+0x84>
 8004730:	6923      	ldr	r3, [r4, #16]
 8004732:	6820      	ldr	r0, [r4, #0]
 8004734:	b2f6      	uxtb	r6, r6
 8004736:	1ac0      	subs	r0, r0, r3
 8004738:	6963      	ldr	r3, [r4, #20]
 800473a:	4637      	mov	r7, r6
 800473c:	4283      	cmp	r3, r0
 800473e:	dc04      	bgt.n	800474a <__swbuf_r+0x42>
 8004740:	4621      	mov	r1, r4
 8004742:	4628      	mov	r0, r5
 8004744:	f000 f944 	bl	80049d0 <_fflush_r>
 8004748:	bb30      	cbnz	r0, 8004798 <__swbuf_r+0x90>
 800474a:	68a3      	ldr	r3, [r4, #8]
 800474c:	3001      	adds	r0, #1
 800474e:	3b01      	subs	r3, #1
 8004750:	60a3      	str	r3, [r4, #8]
 8004752:	6823      	ldr	r3, [r4, #0]
 8004754:	1c5a      	adds	r2, r3, #1
 8004756:	6022      	str	r2, [r4, #0]
 8004758:	701e      	strb	r6, [r3, #0]
 800475a:	6963      	ldr	r3, [r4, #20]
 800475c:	4283      	cmp	r3, r0
 800475e:	d004      	beq.n	800476a <__swbuf_r+0x62>
 8004760:	89a3      	ldrh	r3, [r4, #12]
 8004762:	07db      	lsls	r3, r3, #31
 8004764:	d506      	bpl.n	8004774 <__swbuf_r+0x6c>
 8004766:	2e0a      	cmp	r6, #10
 8004768:	d104      	bne.n	8004774 <__swbuf_r+0x6c>
 800476a:	4621      	mov	r1, r4
 800476c:	4628      	mov	r0, r5
 800476e:	f000 f92f 	bl	80049d0 <_fflush_r>
 8004772:	b988      	cbnz	r0, 8004798 <__swbuf_r+0x90>
 8004774:	4638      	mov	r0, r7
 8004776:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004778:	4b0a      	ldr	r3, [pc, #40]	; (80047a4 <__swbuf_r+0x9c>)
 800477a:	429c      	cmp	r4, r3
 800477c:	d101      	bne.n	8004782 <__swbuf_r+0x7a>
 800477e:	68ac      	ldr	r4, [r5, #8]
 8004780:	e7cf      	b.n	8004722 <__swbuf_r+0x1a>
 8004782:	4b09      	ldr	r3, [pc, #36]	; (80047a8 <__swbuf_r+0xa0>)
 8004784:	429c      	cmp	r4, r3
 8004786:	bf08      	it	eq
 8004788:	68ec      	ldreq	r4, [r5, #12]
 800478a:	e7ca      	b.n	8004722 <__swbuf_r+0x1a>
 800478c:	4621      	mov	r1, r4
 800478e:	4628      	mov	r0, r5
 8004790:	f000 f81e 	bl	80047d0 <__swsetup_r>
 8004794:	2800      	cmp	r0, #0
 8004796:	d0cb      	beq.n	8004730 <__swbuf_r+0x28>
 8004798:	f04f 37ff 	mov.w	r7, #4294967295
 800479c:	e7ea      	b.n	8004774 <__swbuf_r+0x6c>
 800479e:	bf00      	nop
 80047a0:	08004ce0 	.word	0x08004ce0
 80047a4:	08004d00 	.word	0x08004d00
 80047a8:	08004cc0 	.word	0x08004cc0

080047ac <_write_r>:
 80047ac:	b538      	push	{r3, r4, r5, lr}
 80047ae:	4604      	mov	r4, r0
 80047b0:	4608      	mov	r0, r1
 80047b2:	4611      	mov	r1, r2
 80047b4:	2200      	movs	r2, #0
 80047b6:	4d05      	ldr	r5, [pc, #20]	; (80047cc <_write_r+0x20>)
 80047b8:	602a      	str	r2, [r5, #0]
 80047ba:	461a      	mov	r2, r3
 80047bc:	f7fb fec5 	bl	800054a <_write>
 80047c0:	1c43      	adds	r3, r0, #1
 80047c2:	d102      	bne.n	80047ca <_write_r+0x1e>
 80047c4:	682b      	ldr	r3, [r5, #0]
 80047c6:	b103      	cbz	r3, 80047ca <_write_r+0x1e>
 80047c8:	6023      	str	r3, [r4, #0]
 80047ca:	bd38      	pop	{r3, r4, r5, pc}
 80047cc:	20000184 	.word	0x20000184

080047d0 <__swsetup_r>:
 80047d0:	4b32      	ldr	r3, [pc, #200]	; (800489c <__swsetup_r+0xcc>)
 80047d2:	b570      	push	{r4, r5, r6, lr}
 80047d4:	681d      	ldr	r5, [r3, #0]
 80047d6:	4606      	mov	r6, r0
 80047d8:	460c      	mov	r4, r1
 80047da:	b125      	cbz	r5, 80047e6 <__swsetup_r+0x16>
 80047dc:	69ab      	ldr	r3, [r5, #24]
 80047de:	b913      	cbnz	r3, 80047e6 <__swsetup_r+0x16>
 80047e0:	4628      	mov	r0, r5
 80047e2:	f7ff fb1b 	bl	8003e1c <__sinit>
 80047e6:	4b2e      	ldr	r3, [pc, #184]	; (80048a0 <__swsetup_r+0xd0>)
 80047e8:	429c      	cmp	r4, r3
 80047ea:	d10f      	bne.n	800480c <__swsetup_r+0x3c>
 80047ec:	686c      	ldr	r4, [r5, #4]
 80047ee:	89a3      	ldrh	r3, [r4, #12]
 80047f0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80047f4:	0719      	lsls	r1, r3, #28
 80047f6:	d42c      	bmi.n	8004852 <__swsetup_r+0x82>
 80047f8:	06dd      	lsls	r5, r3, #27
 80047fa:	d411      	bmi.n	8004820 <__swsetup_r+0x50>
 80047fc:	2309      	movs	r3, #9
 80047fe:	6033      	str	r3, [r6, #0]
 8004800:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8004804:	f04f 30ff 	mov.w	r0, #4294967295
 8004808:	81a3      	strh	r3, [r4, #12]
 800480a:	e03e      	b.n	800488a <__swsetup_r+0xba>
 800480c:	4b25      	ldr	r3, [pc, #148]	; (80048a4 <__swsetup_r+0xd4>)
 800480e:	429c      	cmp	r4, r3
 8004810:	d101      	bne.n	8004816 <__swsetup_r+0x46>
 8004812:	68ac      	ldr	r4, [r5, #8]
 8004814:	e7eb      	b.n	80047ee <__swsetup_r+0x1e>
 8004816:	4b24      	ldr	r3, [pc, #144]	; (80048a8 <__swsetup_r+0xd8>)
 8004818:	429c      	cmp	r4, r3
 800481a:	bf08      	it	eq
 800481c:	68ec      	ldreq	r4, [r5, #12]
 800481e:	e7e6      	b.n	80047ee <__swsetup_r+0x1e>
 8004820:	0758      	lsls	r0, r3, #29
 8004822:	d512      	bpl.n	800484a <__swsetup_r+0x7a>
 8004824:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004826:	b141      	cbz	r1, 800483a <__swsetup_r+0x6a>
 8004828:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800482c:	4299      	cmp	r1, r3
 800482e:	d002      	beq.n	8004836 <__swsetup_r+0x66>
 8004830:	4630      	mov	r0, r6
 8004832:	f000 f99b 	bl	8004b6c <_free_r>
 8004836:	2300      	movs	r3, #0
 8004838:	6363      	str	r3, [r4, #52]	; 0x34
 800483a:	89a3      	ldrh	r3, [r4, #12]
 800483c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004840:	81a3      	strh	r3, [r4, #12]
 8004842:	2300      	movs	r3, #0
 8004844:	6063      	str	r3, [r4, #4]
 8004846:	6923      	ldr	r3, [r4, #16]
 8004848:	6023      	str	r3, [r4, #0]
 800484a:	89a3      	ldrh	r3, [r4, #12]
 800484c:	f043 0308 	orr.w	r3, r3, #8
 8004850:	81a3      	strh	r3, [r4, #12]
 8004852:	6923      	ldr	r3, [r4, #16]
 8004854:	b94b      	cbnz	r3, 800486a <__swsetup_r+0x9a>
 8004856:	89a3      	ldrh	r3, [r4, #12]
 8004858:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800485c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004860:	d003      	beq.n	800486a <__swsetup_r+0x9a>
 8004862:	4621      	mov	r1, r4
 8004864:	4630      	mov	r0, r6
 8004866:	f000 f927 	bl	8004ab8 <__smakebuf_r>
 800486a:	89a0      	ldrh	r0, [r4, #12]
 800486c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004870:	f010 0301 	ands.w	r3, r0, #1
 8004874:	d00a      	beq.n	800488c <__swsetup_r+0xbc>
 8004876:	2300      	movs	r3, #0
 8004878:	60a3      	str	r3, [r4, #8]
 800487a:	6963      	ldr	r3, [r4, #20]
 800487c:	425b      	negs	r3, r3
 800487e:	61a3      	str	r3, [r4, #24]
 8004880:	6923      	ldr	r3, [r4, #16]
 8004882:	b943      	cbnz	r3, 8004896 <__swsetup_r+0xc6>
 8004884:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8004888:	d1ba      	bne.n	8004800 <__swsetup_r+0x30>
 800488a:	bd70      	pop	{r4, r5, r6, pc}
 800488c:	0781      	lsls	r1, r0, #30
 800488e:	bf58      	it	pl
 8004890:	6963      	ldrpl	r3, [r4, #20]
 8004892:	60a3      	str	r3, [r4, #8]
 8004894:	e7f4      	b.n	8004880 <__swsetup_r+0xb0>
 8004896:	2000      	movs	r0, #0
 8004898:	e7f7      	b.n	800488a <__swsetup_r+0xba>
 800489a:	bf00      	nop
 800489c:	2000000c 	.word	0x2000000c
 80048a0:	08004ce0 	.word	0x08004ce0
 80048a4:	08004d00 	.word	0x08004d00
 80048a8:	08004cc0 	.word	0x08004cc0

080048ac <_close_r>:
 80048ac:	b538      	push	{r3, r4, r5, lr}
 80048ae:	2300      	movs	r3, #0
 80048b0:	4d05      	ldr	r5, [pc, #20]	; (80048c8 <_close_r+0x1c>)
 80048b2:	4604      	mov	r4, r0
 80048b4:	4608      	mov	r0, r1
 80048b6:	602b      	str	r3, [r5, #0]
 80048b8:	f7fb fe63 	bl	8000582 <_close>
 80048bc:	1c43      	adds	r3, r0, #1
 80048be:	d102      	bne.n	80048c6 <_close_r+0x1a>
 80048c0:	682b      	ldr	r3, [r5, #0]
 80048c2:	b103      	cbz	r3, 80048c6 <_close_r+0x1a>
 80048c4:	6023      	str	r3, [r4, #0]
 80048c6:	bd38      	pop	{r3, r4, r5, pc}
 80048c8:	20000184 	.word	0x20000184

080048cc <__sflush_r>:
 80048cc:	898a      	ldrh	r2, [r1, #12]
 80048ce:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80048d0:	4605      	mov	r5, r0
 80048d2:	0710      	lsls	r0, r2, #28
 80048d4:	460c      	mov	r4, r1
 80048d6:	d457      	bmi.n	8004988 <__sflush_r+0xbc>
 80048d8:	684b      	ldr	r3, [r1, #4]
 80048da:	2b00      	cmp	r3, #0
 80048dc:	dc04      	bgt.n	80048e8 <__sflush_r+0x1c>
 80048de:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	dc01      	bgt.n	80048e8 <__sflush_r+0x1c>
 80048e4:	2000      	movs	r0, #0
 80048e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80048e8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80048ea:	2e00      	cmp	r6, #0
 80048ec:	d0fa      	beq.n	80048e4 <__sflush_r+0x18>
 80048ee:	2300      	movs	r3, #0
 80048f0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80048f4:	682f      	ldr	r7, [r5, #0]
 80048f6:	602b      	str	r3, [r5, #0]
 80048f8:	d032      	beq.n	8004960 <__sflush_r+0x94>
 80048fa:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80048fc:	89a3      	ldrh	r3, [r4, #12]
 80048fe:	075a      	lsls	r2, r3, #29
 8004900:	d505      	bpl.n	800490e <__sflush_r+0x42>
 8004902:	6863      	ldr	r3, [r4, #4]
 8004904:	1ac0      	subs	r0, r0, r3
 8004906:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004908:	b10b      	cbz	r3, 800490e <__sflush_r+0x42>
 800490a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800490c:	1ac0      	subs	r0, r0, r3
 800490e:	2300      	movs	r3, #0
 8004910:	4602      	mov	r2, r0
 8004912:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004914:	4628      	mov	r0, r5
 8004916:	6a21      	ldr	r1, [r4, #32]
 8004918:	47b0      	blx	r6
 800491a:	1c43      	adds	r3, r0, #1
 800491c:	89a3      	ldrh	r3, [r4, #12]
 800491e:	d106      	bne.n	800492e <__sflush_r+0x62>
 8004920:	6829      	ldr	r1, [r5, #0]
 8004922:	291d      	cmp	r1, #29
 8004924:	d82c      	bhi.n	8004980 <__sflush_r+0xb4>
 8004926:	4a29      	ldr	r2, [pc, #164]	; (80049cc <__sflush_r+0x100>)
 8004928:	40ca      	lsrs	r2, r1
 800492a:	07d6      	lsls	r6, r2, #31
 800492c:	d528      	bpl.n	8004980 <__sflush_r+0xb4>
 800492e:	2200      	movs	r2, #0
 8004930:	6062      	str	r2, [r4, #4]
 8004932:	6922      	ldr	r2, [r4, #16]
 8004934:	04d9      	lsls	r1, r3, #19
 8004936:	6022      	str	r2, [r4, #0]
 8004938:	d504      	bpl.n	8004944 <__sflush_r+0x78>
 800493a:	1c42      	adds	r2, r0, #1
 800493c:	d101      	bne.n	8004942 <__sflush_r+0x76>
 800493e:	682b      	ldr	r3, [r5, #0]
 8004940:	b903      	cbnz	r3, 8004944 <__sflush_r+0x78>
 8004942:	6560      	str	r0, [r4, #84]	; 0x54
 8004944:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004946:	602f      	str	r7, [r5, #0]
 8004948:	2900      	cmp	r1, #0
 800494a:	d0cb      	beq.n	80048e4 <__sflush_r+0x18>
 800494c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004950:	4299      	cmp	r1, r3
 8004952:	d002      	beq.n	800495a <__sflush_r+0x8e>
 8004954:	4628      	mov	r0, r5
 8004956:	f000 f909 	bl	8004b6c <_free_r>
 800495a:	2000      	movs	r0, #0
 800495c:	6360      	str	r0, [r4, #52]	; 0x34
 800495e:	e7c2      	b.n	80048e6 <__sflush_r+0x1a>
 8004960:	6a21      	ldr	r1, [r4, #32]
 8004962:	2301      	movs	r3, #1
 8004964:	4628      	mov	r0, r5
 8004966:	47b0      	blx	r6
 8004968:	1c41      	adds	r1, r0, #1
 800496a:	d1c7      	bne.n	80048fc <__sflush_r+0x30>
 800496c:	682b      	ldr	r3, [r5, #0]
 800496e:	2b00      	cmp	r3, #0
 8004970:	d0c4      	beq.n	80048fc <__sflush_r+0x30>
 8004972:	2b1d      	cmp	r3, #29
 8004974:	d001      	beq.n	800497a <__sflush_r+0xae>
 8004976:	2b16      	cmp	r3, #22
 8004978:	d101      	bne.n	800497e <__sflush_r+0xb2>
 800497a:	602f      	str	r7, [r5, #0]
 800497c:	e7b2      	b.n	80048e4 <__sflush_r+0x18>
 800497e:	89a3      	ldrh	r3, [r4, #12]
 8004980:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004984:	81a3      	strh	r3, [r4, #12]
 8004986:	e7ae      	b.n	80048e6 <__sflush_r+0x1a>
 8004988:	690f      	ldr	r7, [r1, #16]
 800498a:	2f00      	cmp	r7, #0
 800498c:	d0aa      	beq.n	80048e4 <__sflush_r+0x18>
 800498e:	0793      	lsls	r3, r2, #30
 8004990:	bf18      	it	ne
 8004992:	2300      	movne	r3, #0
 8004994:	680e      	ldr	r6, [r1, #0]
 8004996:	bf08      	it	eq
 8004998:	694b      	ldreq	r3, [r1, #20]
 800499a:	1bf6      	subs	r6, r6, r7
 800499c:	600f      	str	r7, [r1, #0]
 800499e:	608b      	str	r3, [r1, #8]
 80049a0:	2e00      	cmp	r6, #0
 80049a2:	dd9f      	ble.n	80048e4 <__sflush_r+0x18>
 80049a4:	4633      	mov	r3, r6
 80049a6:	463a      	mov	r2, r7
 80049a8:	4628      	mov	r0, r5
 80049aa:	6a21      	ldr	r1, [r4, #32]
 80049ac:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 80049b0:	47e0      	blx	ip
 80049b2:	2800      	cmp	r0, #0
 80049b4:	dc06      	bgt.n	80049c4 <__sflush_r+0xf8>
 80049b6:	89a3      	ldrh	r3, [r4, #12]
 80049b8:	f04f 30ff 	mov.w	r0, #4294967295
 80049bc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80049c0:	81a3      	strh	r3, [r4, #12]
 80049c2:	e790      	b.n	80048e6 <__sflush_r+0x1a>
 80049c4:	4407      	add	r7, r0
 80049c6:	1a36      	subs	r6, r6, r0
 80049c8:	e7ea      	b.n	80049a0 <__sflush_r+0xd4>
 80049ca:	bf00      	nop
 80049cc:	20400001 	.word	0x20400001

080049d0 <_fflush_r>:
 80049d0:	b538      	push	{r3, r4, r5, lr}
 80049d2:	690b      	ldr	r3, [r1, #16]
 80049d4:	4605      	mov	r5, r0
 80049d6:	460c      	mov	r4, r1
 80049d8:	b913      	cbnz	r3, 80049e0 <_fflush_r+0x10>
 80049da:	2500      	movs	r5, #0
 80049dc:	4628      	mov	r0, r5
 80049de:	bd38      	pop	{r3, r4, r5, pc}
 80049e0:	b118      	cbz	r0, 80049ea <_fflush_r+0x1a>
 80049e2:	6983      	ldr	r3, [r0, #24]
 80049e4:	b90b      	cbnz	r3, 80049ea <_fflush_r+0x1a>
 80049e6:	f7ff fa19 	bl	8003e1c <__sinit>
 80049ea:	4b14      	ldr	r3, [pc, #80]	; (8004a3c <_fflush_r+0x6c>)
 80049ec:	429c      	cmp	r4, r3
 80049ee:	d11b      	bne.n	8004a28 <_fflush_r+0x58>
 80049f0:	686c      	ldr	r4, [r5, #4]
 80049f2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d0ef      	beq.n	80049da <_fflush_r+0xa>
 80049fa:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80049fc:	07d0      	lsls	r0, r2, #31
 80049fe:	d404      	bmi.n	8004a0a <_fflush_r+0x3a>
 8004a00:	0599      	lsls	r1, r3, #22
 8004a02:	d402      	bmi.n	8004a0a <_fflush_r+0x3a>
 8004a04:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004a06:	f7ff faa7 	bl	8003f58 <__retarget_lock_acquire_recursive>
 8004a0a:	4628      	mov	r0, r5
 8004a0c:	4621      	mov	r1, r4
 8004a0e:	f7ff ff5d 	bl	80048cc <__sflush_r>
 8004a12:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004a14:	4605      	mov	r5, r0
 8004a16:	07da      	lsls	r2, r3, #31
 8004a18:	d4e0      	bmi.n	80049dc <_fflush_r+0xc>
 8004a1a:	89a3      	ldrh	r3, [r4, #12]
 8004a1c:	059b      	lsls	r3, r3, #22
 8004a1e:	d4dd      	bmi.n	80049dc <_fflush_r+0xc>
 8004a20:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004a22:	f7ff fa9a 	bl	8003f5a <__retarget_lock_release_recursive>
 8004a26:	e7d9      	b.n	80049dc <_fflush_r+0xc>
 8004a28:	4b05      	ldr	r3, [pc, #20]	; (8004a40 <_fflush_r+0x70>)
 8004a2a:	429c      	cmp	r4, r3
 8004a2c:	d101      	bne.n	8004a32 <_fflush_r+0x62>
 8004a2e:	68ac      	ldr	r4, [r5, #8]
 8004a30:	e7df      	b.n	80049f2 <_fflush_r+0x22>
 8004a32:	4b04      	ldr	r3, [pc, #16]	; (8004a44 <_fflush_r+0x74>)
 8004a34:	429c      	cmp	r4, r3
 8004a36:	bf08      	it	eq
 8004a38:	68ec      	ldreq	r4, [r5, #12]
 8004a3a:	e7da      	b.n	80049f2 <_fflush_r+0x22>
 8004a3c:	08004ce0 	.word	0x08004ce0
 8004a40:	08004d00 	.word	0x08004d00
 8004a44:	08004cc0 	.word	0x08004cc0

08004a48 <_lseek_r>:
 8004a48:	b538      	push	{r3, r4, r5, lr}
 8004a4a:	4604      	mov	r4, r0
 8004a4c:	4608      	mov	r0, r1
 8004a4e:	4611      	mov	r1, r2
 8004a50:	2200      	movs	r2, #0
 8004a52:	4d05      	ldr	r5, [pc, #20]	; (8004a68 <_lseek_r+0x20>)
 8004a54:	602a      	str	r2, [r5, #0]
 8004a56:	461a      	mov	r2, r3
 8004a58:	f7fb fdb7 	bl	80005ca <_lseek>
 8004a5c:	1c43      	adds	r3, r0, #1
 8004a5e:	d102      	bne.n	8004a66 <_lseek_r+0x1e>
 8004a60:	682b      	ldr	r3, [r5, #0]
 8004a62:	b103      	cbz	r3, 8004a66 <_lseek_r+0x1e>
 8004a64:	6023      	str	r3, [r4, #0]
 8004a66:	bd38      	pop	{r3, r4, r5, pc}
 8004a68:	20000184 	.word	0x20000184

08004a6c <__swhatbuf_r>:
 8004a6c:	b570      	push	{r4, r5, r6, lr}
 8004a6e:	460e      	mov	r6, r1
 8004a70:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004a74:	4614      	mov	r4, r2
 8004a76:	2900      	cmp	r1, #0
 8004a78:	461d      	mov	r5, r3
 8004a7a:	b096      	sub	sp, #88	; 0x58
 8004a7c:	da08      	bge.n	8004a90 <__swhatbuf_r+0x24>
 8004a7e:	2200      	movs	r2, #0
 8004a80:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8004a84:	602a      	str	r2, [r5, #0]
 8004a86:	061a      	lsls	r2, r3, #24
 8004a88:	d410      	bmi.n	8004aac <__swhatbuf_r+0x40>
 8004a8a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004a8e:	e00e      	b.n	8004aae <__swhatbuf_r+0x42>
 8004a90:	466a      	mov	r2, sp
 8004a92:	f000 f8c5 	bl	8004c20 <_fstat_r>
 8004a96:	2800      	cmp	r0, #0
 8004a98:	dbf1      	blt.n	8004a7e <__swhatbuf_r+0x12>
 8004a9a:	9a01      	ldr	r2, [sp, #4]
 8004a9c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8004aa0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8004aa4:	425a      	negs	r2, r3
 8004aa6:	415a      	adcs	r2, r3
 8004aa8:	602a      	str	r2, [r5, #0]
 8004aaa:	e7ee      	b.n	8004a8a <__swhatbuf_r+0x1e>
 8004aac:	2340      	movs	r3, #64	; 0x40
 8004aae:	2000      	movs	r0, #0
 8004ab0:	6023      	str	r3, [r4, #0]
 8004ab2:	b016      	add	sp, #88	; 0x58
 8004ab4:	bd70      	pop	{r4, r5, r6, pc}
	...

08004ab8 <__smakebuf_r>:
 8004ab8:	898b      	ldrh	r3, [r1, #12]
 8004aba:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004abc:	079d      	lsls	r5, r3, #30
 8004abe:	4606      	mov	r6, r0
 8004ac0:	460c      	mov	r4, r1
 8004ac2:	d507      	bpl.n	8004ad4 <__smakebuf_r+0x1c>
 8004ac4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004ac8:	6023      	str	r3, [r4, #0]
 8004aca:	6123      	str	r3, [r4, #16]
 8004acc:	2301      	movs	r3, #1
 8004ace:	6163      	str	r3, [r4, #20]
 8004ad0:	b002      	add	sp, #8
 8004ad2:	bd70      	pop	{r4, r5, r6, pc}
 8004ad4:	466a      	mov	r2, sp
 8004ad6:	ab01      	add	r3, sp, #4
 8004ad8:	f7ff ffc8 	bl	8004a6c <__swhatbuf_r>
 8004adc:	9900      	ldr	r1, [sp, #0]
 8004ade:	4605      	mov	r5, r0
 8004ae0:	4630      	mov	r0, r6
 8004ae2:	f7ff fa5b 	bl	8003f9c <_malloc_r>
 8004ae6:	b948      	cbnz	r0, 8004afc <__smakebuf_r+0x44>
 8004ae8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004aec:	059a      	lsls	r2, r3, #22
 8004aee:	d4ef      	bmi.n	8004ad0 <__smakebuf_r+0x18>
 8004af0:	f023 0303 	bic.w	r3, r3, #3
 8004af4:	f043 0302 	orr.w	r3, r3, #2
 8004af8:	81a3      	strh	r3, [r4, #12]
 8004afa:	e7e3      	b.n	8004ac4 <__smakebuf_r+0xc>
 8004afc:	4b0d      	ldr	r3, [pc, #52]	; (8004b34 <__smakebuf_r+0x7c>)
 8004afe:	62b3      	str	r3, [r6, #40]	; 0x28
 8004b00:	89a3      	ldrh	r3, [r4, #12]
 8004b02:	6020      	str	r0, [r4, #0]
 8004b04:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004b08:	81a3      	strh	r3, [r4, #12]
 8004b0a:	9b00      	ldr	r3, [sp, #0]
 8004b0c:	6120      	str	r0, [r4, #16]
 8004b0e:	6163      	str	r3, [r4, #20]
 8004b10:	9b01      	ldr	r3, [sp, #4]
 8004b12:	b15b      	cbz	r3, 8004b2c <__smakebuf_r+0x74>
 8004b14:	4630      	mov	r0, r6
 8004b16:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004b1a:	f000 f893 	bl	8004c44 <_isatty_r>
 8004b1e:	b128      	cbz	r0, 8004b2c <__smakebuf_r+0x74>
 8004b20:	89a3      	ldrh	r3, [r4, #12]
 8004b22:	f023 0303 	bic.w	r3, r3, #3
 8004b26:	f043 0301 	orr.w	r3, r3, #1
 8004b2a:	81a3      	strh	r3, [r4, #12]
 8004b2c:	89a0      	ldrh	r0, [r4, #12]
 8004b2e:	4305      	orrs	r5, r0
 8004b30:	81a5      	strh	r5, [r4, #12]
 8004b32:	e7cd      	b.n	8004ad0 <__smakebuf_r+0x18>
 8004b34:	08003db5 	.word	0x08003db5

08004b38 <memchr>:
 8004b38:	4603      	mov	r3, r0
 8004b3a:	b510      	push	{r4, lr}
 8004b3c:	b2c9      	uxtb	r1, r1
 8004b3e:	4402      	add	r2, r0
 8004b40:	4293      	cmp	r3, r2
 8004b42:	4618      	mov	r0, r3
 8004b44:	d101      	bne.n	8004b4a <memchr+0x12>
 8004b46:	2000      	movs	r0, #0
 8004b48:	e003      	b.n	8004b52 <memchr+0x1a>
 8004b4a:	7804      	ldrb	r4, [r0, #0]
 8004b4c:	3301      	adds	r3, #1
 8004b4e:	428c      	cmp	r4, r1
 8004b50:	d1f6      	bne.n	8004b40 <memchr+0x8>
 8004b52:	bd10      	pop	{r4, pc}

08004b54 <__malloc_lock>:
 8004b54:	4801      	ldr	r0, [pc, #4]	; (8004b5c <__malloc_lock+0x8>)
 8004b56:	f7ff b9ff 	b.w	8003f58 <__retarget_lock_acquire_recursive>
 8004b5a:	bf00      	nop
 8004b5c:	20000178 	.word	0x20000178

08004b60 <__malloc_unlock>:
 8004b60:	4801      	ldr	r0, [pc, #4]	; (8004b68 <__malloc_unlock+0x8>)
 8004b62:	f7ff b9fa 	b.w	8003f5a <__retarget_lock_release_recursive>
 8004b66:	bf00      	nop
 8004b68:	20000178 	.word	0x20000178

08004b6c <_free_r>:
 8004b6c:	b538      	push	{r3, r4, r5, lr}
 8004b6e:	4605      	mov	r5, r0
 8004b70:	2900      	cmp	r1, #0
 8004b72:	d040      	beq.n	8004bf6 <_free_r+0x8a>
 8004b74:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004b78:	1f0c      	subs	r4, r1, #4
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	bfb8      	it	lt
 8004b7e:	18e4      	addlt	r4, r4, r3
 8004b80:	f7ff ffe8 	bl	8004b54 <__malloc_lock>
 8004b84:	4a1c      	ldr	r2, [pc, #112]	; (8004bf8 <_free_r+0x8c>)
 8004b86:	6813      	ldr	r3, [r2, #0]
 8004b88:	b933      	cbnz	r3, 8004b98 <_free_r+0x2c>
 8004b8a:	6063      	str	r3, [r4, #4]
 8004b8c:	6014      	str	r4, [r2, #0]
 8004b8e:	4628      	mov	r0, r5
 8004b90:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004b94:	f7ff bfe4 	b.w	8004b60 <__malloc_unlock>
 8004b98:	42a3      	cmp	r3, r4
 8004b9a:	d908      	bls.n	8004bae <_free_r+0x42>
 8004b9c:	6820      	ldr	r0, [r4, #0]
 8004b9e:	1821      	adds	r1, r4, r0
 8004ba0:	428b      	cmp	r3, r1
 8004ba2:	bf01      	itttt	eq
 8004ba4:	6819      	ldreq	r1, [r3, #0]
 8004ba6:	685b      	ldreq	r3, [r3, #4]
 8004ba8:	1809      	addeq	r1, r1, r0
 8004baa:	6021      	streq	r1, [r4, #0]
 8004bac:	e7ed      	b.n	8004b8a <_free_r+0x1e>
 8004bae:	461a      	mov	r2, r3
 8004bb0:	685b      	ldr	r3, [r3, #4]
 8004bb2:	b10b      	cbz	r3, 8004bb8 <_free_r+0x4c>
 8004bb4:	42a3      	cmp	r3, r4
 8004bb6:	d9fa      	bls.n	8004bae <_free_r+0x42>
 8004bb8:	6811      	ldr	r1, [r2, #0]
 8004bba:	1850      	adds	r0, r2, r1
 8004bbc:	42a0      	cmp	r0, r4
 8004bbe:	d10b      	bne.n	8004bd8 <_free_r+0x6c>
 8004bc0:	6820      	ldr	r0, [r4, #0]
 8004bc2:	4401      	add	r1, r0
 8004bc4:	1850      	adds	r0, r2, r1
 8004bc6:	4283      	cmp	r3, r0
 8004bc8:	6011      	str	r1, [r2, #0]
 8004bca:	d1e0      	bne.n	8004b8e <_free_r+0x22>
 8004bcc:	6818      	ldr	r0, [r3, #0]
 8004bce:	685b      	ldr	r3, [r3, #4]
 8004bd0:	4401      	add	r1, r0
 8004bd2:	6011      	str	r1, [r2, #0]
 8004bd4:	6053      	str	r3, [r2, #4]
 8004bd6:	e7da      	b.n	8004b8e <_free_r+0x22>
 8004bd8:	d902      	bls.n	8004be0 <_free_r+0x74>
 8004bda:	230c      	movs	r3, #12
 8004bdc:	602b      	str	r3, [r5, #0]
 8004bde:	e7d6      	b.n	8004b8e <_free_r+0x22>
 8004be0:	6820      	ldr	r0, [r4, #0]
 8004be2:	1821      	adds	r1, r4, r0
 8004be4:	428b      	cmp	r3, r1
 8004be6:	bf01      	itttt	eq
 8004be8:	6819      	ldreq	r1, [r3, #0]
 8004bea:	685b      	ldreq	r3, [r3, #4]
 8004bec:	1809      	addeq	r1, r1, r0
 8004bee:	6021      	streq	r1, [r4, #0]
 8004bf0:	6063      	str	r3, [r4, #4]
 8004bf2:	6054      	str	r4, [r2, #4]
 8004bf4:	e7cb      	b.n	8004b8e <_free_r+0x22>
 8004bf6:	bd38      	pop	{r3, r4, r5, pc}
 8004bf8:	2000017c 	.word	0x2000017c

08004bfc <_read_r>:
 8004bfc:	b538      	push	{r3, r4, r5, lr}
 8004bfe:	4604      	mov	r4, r0
 8004c00:	4608      	mov	r0, r1
 8004c02:	4611      	mov	r1, r2
 8004c04:	2200      	movs	r2, #0
 8004c06:	4d05      	ldr	r5, [pc, #20]	; (8004c1c <_read_r+0x20>)
 8004c08:	602a      	str	r2, [r5, #0]
 8004c0a:	461a      	mov	r2, r3
 8004c0c:	f7fb fc80 	bl	8000510 <_read>
 8004c10:	1c43      	adds	r3, r0, #1
 8004c12:	d102      	bne.n	8004c1a <_read_r+0x1e>
 8004c14:	682b      	ldr	r3, [r5, #0]
 8004c16:	b103      	cbz	r3, 8004c1a <_read_r+0x1e>
 8004c18:	6023      	str	r3, [r4, #0]
 8004c1a:	bd38      	pop	{r3, r4, r5, pc}
 8004c1c:	20000184 	.word	0x20000184

08004c20 <_fstat_r>:
 8004c20:	b538      	push	{r3, r4, r5, lr}
 8004c22:	2300      	movs	r3, #0
 8004c24:	4d06      	ldr	r5, [pc, #24]	; (8004c40 <_fstat_r+0x20>)
 8004c26:	4604      	mov	r4, r0
 8004c28:	4608      	mov	r0, r1
 8004c2a:	4611      	mov	r1, r2
 8004c2c:	602b      	str	r3, [r5, #0]
 8004c2e:	f7fb fcb3 	bl	8000598 <_fstat>
 8004c32:	1c43      	adds	r3, r0, #1
 8004c34:	d102      	bne.n	8004c3c <_fstat_r+0x1c>
 8004c36:	682b      	ldr	r3, [r5, #0]
 8004c38:	b103      	cbz	r3, 8004c3c <_fstat_r+0x1c>
 8004c3a:	6023      	str	r3, [r4, #0]
 8004c3c:	bd38      	pop	{r3, r4, r5, pc}
 8004c3e:	bf00      	nop
 8004c40:	20000184 	.word	0x20000184

08004c44 <_isatty_r>:
 8004c44:	b538      	push	{r3, r4, r5, lr}
 8004c46:	2300      	movs	r3, #0
 8004c48:	4d05      	ldr	r5, [pc, #20]	; (8004c60 <_isatty_r+0x1c>)
 8004c4a:	4604      	mov	r4, r0
 8004c4c:	4608      	mov	r0, r1
 8004c4e:	602b      	str	r3, [r5, #0]
 8004c50:	f7fb fcb1 	bl	80005b6 <_isatty>
 8004c54:	1c43      	adds	r3, r0, #1
 8004c56:	d102      	bne.n	8004c5e <_isatty_r+0x1a>
 8004c58:	682b      	ldr	r3, [r5, #0]
 8004c5a:	b103      	cbz	r3, 8004c5e <_isatty_r+0x1a>
 8004c5c:	6023      	str	r3, [r4, #0]
 8004c5e:	bd38      	pop	{r3, r4, r5, pc}
 8004c60:	20000184 	.word	0x20000184

08004c64 <_init>:
 8004c64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c66:	bf00      	nop
 8004c68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004c6a:	bc08      	pop	{r3}
 8004c6c:	469e      	mov	lr, r3
 8004c6e:	4770      	bx	lr

08004c70 <_fini>:
 8004c70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c72:	bf00      	nop
 8004c74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004c76:	bc08      	pop	{r3}
 8004c78:	469e      	mov	lr, r3
 8004c7a:	4770      	bx	lr
